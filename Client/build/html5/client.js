// Generated by Haxe 4.2.0-rc.1+e34463538
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var AnimationUtil = function() { };
$hxClasses["AnimationUtil"] = AnimationUtil;
AnimationUtil.__name__ = "AnimationUtil";
AnimationUtil.shake = function(c,onComplete) {
	var k1 = new haxe_ui_styles_elements_AnimationKeyFrame();
	k1.time = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PERCENT(0));
	var directive = new haxe_ui_styles_elements_Directive("left",haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PX(c.get_left())));
	k1.directives = [directive];
	var k2 = new haxe_ui_styles_elements_AnimationKeyFrame();
	k2.time = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PERCENT(20));
	var directive = new haxe_ui_styles_elements_Directive("left",haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PX(c.get_left() - 5)));
	k2.directives = [directive];
	var k3 = new haxe_ui_styles_elements_AnimationKeyFrame();
	k3.time = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PERCENT(40));
	var directive = new haxe_ui_styles_elements_Directive("left",haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PX(c.get_left() + 5)));
	k3.directives = [directive];
	var k4 = new haxe_ui_styles_elements_AnimationKeyFrame();
	k4.time = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PERCENT(60));
	var directive = new haxe_ui_styles_elements_Directive("left",haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PX(c.get_left() - 3)));
	k4.directives = [directive];
	var k5 = new haxe_ui_styles_elements_AnimationKeyFrame();
	k5.time = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PERCENT(80));
	var directive = new haxe_ui_styles_elements_Directive("left",haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PX(c.get_left() + 3)));
	k5.directives = [directive];
	var k6 = new haxe_ui_styles_elements_AnimationKeyFrame();
	k6.time = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PERCENT(100));
	var directive = new haxe_ui_styles_elements_Directive("left",haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PX(c.get_left())));
	k6.directives = [directive];
	var framesArray = [k1,k2,k3,k4,k5,k6];
	var frames = new haxe_ui_styles_elements_AnimationKeyFrames("shake",framesArray);
	c.applyAnimationKeyFrame(frames,new haxe_ui_styles_animation_AnimationOptions(.1,null,null,null,null,null));
	c.set_onAnimationEnd(function(e) {
		c._componentAnimation = null;
		if(onComplete != null) {
			onComplete();
		}
	});
};
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = "DateTools";
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw haxe_Exception.thrown("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var EventDispatcher = function() {
	this._listeners = [];
};
$hxClasses["EventDispatcher"] = EventDispatcher;
EventDispatcher.__name__ = "EventDispatcher";
EventDispatcher.__properties__ = {get_instance:"get_instance"};
EventDispatcher.get_instance = function() {
	if(EventDispatcher._instance == null) {
		EventDispatcher._instance = new EventDispatcher();
	}
	return EventDispatcher._instance;
};
EventDispatcher.prototype = {
	_listeners: null
	,registerListener: function(listener) {
		this._listeners.push(listener);
	}
	,dispatchEvent: function(event,data) {
		var _g = 0;
		var _g1 = this._listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l.onEvent(event,data);
		}
	}
	,__class__: EventDispatcher
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var IEditor = function() { };
$hxClasses["IEditor"] = IEditor;
IEditor.__name__ = "IEditor";
IEditor.__isInterface__ = true;
IEditor.prototype = {
	get_resource: null
	,set_resource: null
	,__class__: IEditor
	,__properties__: {set_resource:"set_resource",get_resource:"get_resource"}
};
var IListener = function() { };
$hxClasses["IListener"] = IListener;
IListener.__name__ = "IListener";
IListener.__isInterface__ = true;
IListener.prototype = {
	onEvent: null
	,__class__: IListener
};
var IconUtil = function() { };
$hxClasses["IconUtil"] = IconUtil;
IconUtil.__name__ = "IconUtil";
IconUtil.iconFromExtension = function(name) {
	var icon = "icons/file.png";
	if(StringTools.endsWith(name,".hx")) {
		icon = "icons/document.png";
	} else if(StringTools.endsWith(name,".glsl")) {
		icon = "icons/puzzle.png";
	} else if(StringTools.endsWith(name,".png") || StringTools.endsWith(name,".jpg") || StringTools.endsWith(name,".jpeg") || StringTools.endsWith(name,".bmp")) {
		icon = "icons/picture.png";
	} else if(StringTools.endsWith(name,".wav") || StringTools.endsWith(name,".mp3") || StringTools.endsWith(name,".flac")) {
		icon = "icons/sound.png";
	} else if(StringTools.endsWith(name,".map")) {
		icon = "icons/map.png";
	}
	return icon;
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.list = function(it) {
	var l = new haxe_ds_List();
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		l.add(i1);
	}
	return l;
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	new haxe_ui_editors_code_monaco_MonacoLoader().register(null);
	var app = new haxe_ui_HaxeUIApp();
	app.ready(function() {
		Navigation.get_instance();
		app.addComponent(new MainView());
		app.start();
	});
};
var haxe_ui_backend_ComponentSurface = function() {
};
$hxClasses["haxe.ui.backend.ComponentSurface"] = haxe_ui_backend_ComponentSurface;
haxe_ui_backend_ComponentSurface.__name__ = "haxe.ui.backend.ComponentSurface";
haxe_ui_backend_ComponentSurface.prototype = {
	__class__: haxe_ui_backend_ComponentSurface
};
var haxe_ui_core_ComponentCommon = function() {
	haxe_ui_backend_ComponentSurface.call(this);
};
$hxClasses["haxe.ui.core.ComponentCommon"] = haxe_ui_core_ComponentCommon;
haxe_ui_core_ComponentCommon.__name__ = "haxe.ui.core.ComponentCommon";
haxe_ui_core_ComponentCommon.__super__ = haxe_ui_backend_ComponentSurface;
haxe_ui_core_ComponentCommon.prototype = $extend(haxe_ui_backend_ComponentSurface.prototype,{
	getTextDisplay: function() {
		return null;
	}
	,hasTextDisplay: function() {
		return false;
	}
	,getTextInput: function() {
		return null;
	}
	,hasTextInput: function() {
		return false;
	}
	,getImageDisplay: function() {
		return null;
	}
	,hasImageDisplay: function() {
		return false;
	}
	,__class__: haxe_ui_core_ComponentCommon
});
var haxe_ui_core_IClonable = function() { };
$hxClasses["haxe.ui.core.IClonable"] = haxe_ui_core_IClonable;
haxe_ui_core_IClonable.__name__ = "haxe.ui.core.IClonable";
haxe_ui_core_IClonable.__isInterface__ = true;
haxe_ui_core_IClonable.prototype = {
	cloneComponent: null
	,self: null
	,__class__: haxe_ui_core_IClonable
};
var haxe_ui_core_ComponentContainer = function() {
	this._id = null;
	this._layoutLocked = false;
	this._layout = null;
	this._ready = false;
	this.parentComponent = null;
	haxe_ui_core_ComponentCommon.call(this);
	this.behaviours = new haxe_ui_behaviours_Behaviours(js_Boot.__cast(this , haxe_ui_core_Component));
};
$hxClasses["haxe.ui.core.ComponentContainer"] = haxe_ui_core_ComponentContainer;
haxe_ui_core_ComponentContainer.__name__ = "haxe.ui.core.ComponentContainer";
haxe_ui_core_ComponentContainer.__interfaces__ = [haxe_ui_core_IClonable];
haxe_ui_core_ComponentContainer.__super__ = haxe_ui_core_ComponentCommon;
haxe_ui_core_ComponentContainer.prototype = $extend(haxe_ui_core_ComponentCommon.prototype,{
	behaviours: null
	,parentComponent: null
	,_ready: null
	,isReady: null
	,get_isReady: function() {
		return this._ready;
	}
	,_children: null
	,childComponents: null
	,get_childComponents: function() {
		if(this._children == null) {
			return [];
		}
		return this._children;
	}
	,registerBehaviours: function() {
		this.behaviours.register("disabled",haxe_ui_core_ComponentDisabledBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("text",haxe_ui_core_ComponentTextBehaviour);
		this.behaviours.register("value",haxe_ui_core_ComponentValueBehaviour);
	}
	,addComponent: function(child) {
		return null;
	}
	,addComponentAt: function(child,index) {
		return null;
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return null;
	}
	,removeComponentAt: function(index,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return null;
	}
	,_layout: null
	,_layoutLocked: null
	,_style: null
	,_id: null
	,get_id: function() {
		return this._id;
	}
	,set_id: function(value) {
		if(this._id != value) {
			this._id = value;
		}
		return this._id;
	}
	,get_disabled: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("disabled"));
	}
	,set_disabled: function(value) {
		this.behaviours.set("disabled",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"disabled");
		return value;
	}
	,get_text: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("text"));
	}
	,set_text: function(value) {
		this.behaviours.set("text",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"text");
		return value;
	}
	,get_value: function() {
		return this.behaviours.getDynamic("value");
	}
	,set_value: function(value) {
		this.behaviours.set("value",haxe_ui_util_Variant.fromDynamic(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"value");
		return value;
	}
	,cloneComponent: function() {
		var c = this.self();
		if(this.get_id() != null) {
			c.set_id(this.get_id());
		}
		c.set_disabled(this.get_disabled());
		if(this.get_text() != null) {
			c.set_text(this.get_text());
		}
		if(this.get_value() != null) {
			c.set_value(this.get_value());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ComponentContainer();
	}
	,__class__: haxe_ui_core_ComponentContainer
	,__properties__: {set_value:"set_value",get_value:"get_value",set_text:"set_text",get_text:"get_text",set_disabled:"set_disabled",get_disabled:"get_disabled",set_id:"set_id",get_id:"get_id",get_childComponents:"get_childComponents",get_isReady:"get_isReady"}
});
var haxe_ui_core_ComponentEvents = function() {
	this._interactivityDisabledCounter = 0;
	this._interactivityDisabled = false;
	this._internalEventsClass = null;
	this._internalEvents = null;
	haxe_ui_core_ComponentContainer.call(this);
};
$hxClasses["haxe.ui.core.ComponentEvents"] = haxe_ui_core_ComponentEvents;
haxe_ui_core_ComponentEvents.__name__ = "haxe.ui.core.ComponentEvents";
haxe_ui_core_ComponentEvents.__super__ = haxe_ui_core_ComponentContainer;
haxe_ui_core_ComponentEvents.prototype = $extend(haxe_ui_core_ComponentContainer.prototype,{
	_internalEvents: null
	,_internalEventsClass: null
	,registerInternalEvents: function(eventsClass,reregister) {
		if(reregister == null) {
			reregister = false;
		}
		if(this._internalEvents == null && eventsClass != null) {
			this._internalEvents = Type.createInstance(eventsClass,[this]);
			this._internalEvents.register();
		}
		if(reregister == true && this._internalEvents != null) {
			this._internalEvents.register();
		}
	}
	,unregisterInternalEvents: function() {
		if(this._internalEvents == null) {
			return;
		}
		this._internalEvents.unregister();
		this._internalEvents = null;
	}
	,__events: null
	,registerEvent: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if((js_Boot.__cast(this , haxe_ui_core_Component)).hasClass(":mobile") && (type == "mouseover" || type == "mouseout")) {
			return;
		}
		if(this.get_disabled() == true && this.isInteractiveEvent(type) == true) {
			if(this._disabledEvents == null) {
				this._disabledEvents = new haxe_ui_util_EventMap();
			}
			this._disabledEvents.add(type,listener,priority);
			return;
		}
		if(this.__events == null) {
			this.__events = new haxe_ui_util_EventMap();
		}
		if(this.__events.add(type,listener,priority) == true) {
			this.mapEvent(type,$bind(this,this._onMappedEvent));
		}
	}
	,hasEvent: function(type,listener) {
		if(this.__events == null) {
			return false;
		}
		return this.__events.contains(type,listener);
	}
	,unregisterEvent: function(type,listener) {
		if(this._disabledEvents != null && !this._interactivityDisabled) {
			this._disabledEvents.remove(type,listener);
		}
		if(this.__events != null) {
			if(this.__events.remove(type,listener) == true) {
				this.unmapEvent(type,$bind(this,this._onMappedEvent));
			}
		}
	}
	,dispatch: function(event) {
		if(event != null) {
			if(this.__events != null) {
				this.__events.invoke(event.type,event,js_Boot.__cast(this , haxe_ui_core_Component));
			}
			if(event.bubble == true && event.canceled == false && this.parentComponent != null) {
				this.parentComponent.dispatch(event);
			}
		}
	}
	,dispatchRecursively: function(event) {
		this.dispatch(event);
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dispatchRecursively(event);
		}
	}
	,_onMappedEvent: function(event) {
		this.dispatch(event);
	}
	,_disabledEvents: null
	,isInteractiveEvent: function(type) {
		return haxe_ui_core_ComponentEvents.INTERACTIVE_EVENTS.indexOf(type) != -1;
	}
	,_interactivityDisabled: null
	,_interactivityDisabledCounter: null
	,disableInteractivity: function(disable,recursive,updateStyle) {
		if(updateStyle == null) {
			updateStyle = false;
		}
		if(recursive == null) {
			recursive = true;
		}
		if(disable == true) {
			this._interactivityDisabledCounter++;
		} else {
			this._interactivityDisabledCounter--;
		}
		if(this._interactivityDisabledCounter > 0 && this._interactivityDisabled == false) {
			this._interactivityDisabled = true;
			if(updateStyle == true) {
				(js_Boot.__cast(this , haxe_ui_core_Component)).swapClass(":disabled",":hover");
			}
			if(this.__events != null) {
				var eventType = this.__events.keys();
				while(eventType.hasNext()) {
					var eventType1 = eventType.next();
					if(!this.isInteractiveEvent(eventType1)) {
						continue;
					}
					var listeners = this.__events.listeners(eventType1);
					if(listeners != null) {
						var listener = listeners.copy().iterator();
						while(listener.hasNext()) {
							var listener1 = listener.next();
							if(this._disabledEvents == null) {
								this._disabledEvents = new haxe_ui_util_EventMap();
							}
							this._disabledEvents.add(eventType1,haxe_ui_util_Listener.toFunc(listener1));
							this.unregisterEvent(eventType1,haxe_ui_util_Listener.toFunc(listener1));
						}
					}
				}
			}
		} else if(this._interactivityDisabledCounter < 1 && this._interactivityDisabled == true) {
			this._interactivityDisabled = false;
			if(updateStyle == true) {
				(js_Boot.__cast(this , haxe_ui_core_Component)).removeClass(":disabled");
			}
			if(this._disabledEvents != null) {
				var eventType = this._disabledEvents.keys();
				while(eventType.hasNext()) {
					var eventType1 = eventType.next();
					var listeners = this._disabledEvents.listeners(eventType1);
					if(listeners != null) {
						var listener = listeners.copy().iterator();
						while(listener.hasNext()) {
							var listener1 = listener.next();
							this.registerEvent(eventType1,haxe_ui_util_Listener.toFunc(listener1));
						}
					}
				}
				this._disabledEvents = null;
			}
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.disableInteractivity(disable,recursive,updateStyle);
			}
		}
	}
	,unregisterEvents: function() {
		if(this.__events != null) {
			var copy = [];
			var eventType = this.__events.keys();
			while(eventType.hasNext()) {
				var eventType1 = eventType.next();
				copy.push(eventType1);
			}
			var _g = 0;
			while(_g < copy.length) {
				var eventType = copy[_g];
				++_g;
				var listeners = this.__events.listeners(eventType);
				if(listeners != null) {
					var listener = listeners.iterator();
					while(listener.hasNext()) {
						var listener1 = listener.next();
						if(listener1 != null) {
							if(this.__events.remove(eventType,haxe_ui_util_Listener.toFunc(listener1)) == true) {
								this.unmapEvent(eventType,$bind(this,this._onMappedEvent));
							}
						}
					}
				}
			}
		}
	}
	,mapEvent: function(type,listener) {
	}
	,unmapEvent: function(type,listener) {
	}
	,registerBehaviours: function() {
		haxe_ui_core_ComponentContainer.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ComponentContainer.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ComponentEvents();
	}
	,__class__: haxe_ui_core_ComponentEvents
});
var haxe_ui_core_ComponentValidation = function() {
	this._depth = -1;
	this._invalidateCount = 0;
	this._isDisposed = false;
	this._isInitialized = false;
	this._isValidating = false;
	this._isAllInvalid = false;
	this._delayedInvalidationFlags = new haxe_ds_StringMap();
	this._invalidationFlags = new haxe_ds_StringMap();
	haxe_ui_core_ComponentEvents.call(this);
};
$hxClasses["haxe.ui.core.ComponentValidation"] = haxe_ui_core_ComponentValidation;
haxe_ui_core_ComponentValidation.__name__ = "haxe.ui.core.ComponentValidation";
haxe_ui_core_ComponentValidation.__super__ = haxe_ui_core_ComponentEvents;
haxe_ui_core_ComponentValidation.prototype = $extend(haxe_ui_core_ComponentEvents.prototype,{
	_invalidationFlags: null
	,_delayedInvalidationFlags: null
	,_isAllInvalid: null
	,_isValidating: null
	,_isInitialized: null
	,_isDisposed: null
	,_invalidateCount: null
	,_depth: null
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		if(this._depth == value) {
			return value;
		}
		this._depth = value;
		return value;
	}
	,isComponentInvalid: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(this._isAllInvalid == true) {
			return true;
		}
		if(flag == "all") {
			var value = haxe_ds_StringMap.valueIterator(this._invalidationFlags.h);
			while(value.hasNext()) {
				var value1 = value.next();
				return true;
			}
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag);
	}
	,invalidateComponent: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(this._ready == false) {
			return;
		}
		var isAlreadyInvalid = this.isComponentInvalid();
		var isAlreadyDelayedInvalid = false;
		if(this._isValidating == true) {
			var value = haxe_ds_StringMap.valueIterator(this._delayedInvalidationFlags.h);
			while(value.hasNext()) {
				var value1 = value.next();
				isAlreadyDelayedInvalid = true;
				break;
			}
		}
		if(flag == "all") {
			if(this._isValidating == true) {
				this._delayedInvalidationFlags.h["all"] = true;
			} else {
				this._isAllInvalid = true;
			}
		} else if(this._isValidating == true) {
			this._delayedInvalidationFlags.h[flag] = true;
		} else if(flag != "all" && !Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag)) {
			this._invalidationFlags.h[flag] = true;
		}
		if(this._isValidating == true) {
			if(isAlreadyDelayedInvalid == true) {
				return;
			}
			this._invalidateCount++;
			if(this._invalidateCount >= 10) {
				throw haxe_Exception.thrown("The validation queue returned too many times during validation. This may be an infinite loop. Try to avoid doing anything that calls invalidate() during validation.");
			}
			haxe_ui_validation_ValidationManager.get_instance().add(js_Boot.__cast(this , haxe_ui_core_Component));
			return;
		} else if(isAlreadyInvalid == true) {
			return;
		}
		this._invalidateCount = 0;
		haxe_ui_validation_ValidationManager.get_instance().add(js_Boot.__cast(this , haxe_ui_core_Component));
	}
	,invalidateComponentData: function() {
		this.invalidateComponent("data");
	}
	,invalidateComponentLayout: function() {
		if(this._layout == null || this._layoutLocked == true) {
			return;
		}
		this.invalidateComponent("layout");
	}
	,invalidateComponentPosition: function() {
		this.invalidateComponent("position");
	}
	,invalidateComponentDisplay: function() {
		this.invalidateComponent("display");
	}
	,invalidateComponentStyle: function(force) {
		if(force == null) {
			force = false;
		}
		this.invalidateComponent("style");
		if(force == true) {
			this._style = null;
		}
	}
	,validateComponent: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		if(this._ready == false || this._isDisposed == true || this._isValidating == true || this.isComponentInvalid() == false) {
			return;
		}
		var isInitialized = this._isInitialized;
		if(isInitialized == false) {
			this.initializeComponent();
		}
		this._isValidating = true;
		this.validateComponentInternal(nextFrame);
		this.validateInitialSize(isInitialized);
		var flag = haxe_ds_StringMap.keysIterator(this._invalidationFlags.h);
		while(flag.hasNext()) {
			var flag1 = flag.next();
			var _this = this._invalidationFlags;
			if(Object.prototype.hasOwnProperty.call(_this.h,flag1)) {
				delete(_this.h[flag1]);
			}
		}
		this._isAllInvalid = false;
		var flag = haxe_ds_StringMap.keysIterator(this._delayedInvalidationFlags.h);
		while(flag.hasNext()) {
			var flag1 = flag.next();
			if(flag1 == "all") {
				this._isAllInvalid = true;
			} else {
				this._invalidationFlags.h[flag1] = true;
			}
			var _this = this._delayedInvalidationFlags;
			if(Object.prototype.hasOwnProperty.call(_this.h,flag1)) {
				delete(_this.h[flag1]);
			}
		}
		this._isValidating = false;
	}
	,validateNow: function() {
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.validateNow();
		}
		this.invalidateComponent();
		this.syncComponentValidation(false);
	}
	,syncComponentValidation: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		var count = 0;
		while(this.isComponentInvalid()) {
			this.validateComponent(nextFrame);
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.syncComponentValidation(nextFrame);
			}
			if(++count >= 10) {
				throw haxe_Exception.thrown("The syncValidation returned too many times during validation. This may be an infinite loop. Try to avoid doing anything that calls invalidate() during validation.");
			}
		}
	}
	,validateComponentInternal: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		var dataInvalid = this.isComponentInvalid("data");
		var styleInvalid = this.isComponentInvalid("style");
		var textDisplayInvalid = this.isComponentInvalid("textDisplay") && this.hasTextDisplay();
		var textInputInvalid = this.isComponentInvalid("textInput") && this.hasTextInput();
		var imageDisplayInvalid = this.isComponentInvalid("imageDisplay") && this.hasImageDisplay();
		var positionInvalid = this.isComponentInvalid("position");
		var displayInvalid = this.isComponentInvalid("display");
		var layoutInvalid = this.isComponentInvalid("layout") && this._layoutLocked == false;
		if(dataInvalid) {
			this.validateComponentData();
		}
		if(styleInvalid) {
			this.validateComponentStyle();
		}
		if(textDisplayInvalid) {
			this.getTextDisplay().validateComponent();
		}
		if(textInputInvalid) {
			this.getTextInput().validateComponent();
		}
		if(imageDisplayInvalid) {
			this.getImageDisplay().validateComponent();
		}
		if(positionInvalid) {
			this.validateComponentPosition();
		}
		if(layoutInvalid) {
			if(this.validateComponentLayout()) {
				displayInvalid = true;
			}
		}
		if(displayInvalid || styleInvalid) {
			haxe_ui_validation_ValidationManager.get_instance().addDisplay(js_Boot.__cast(this , haxe_ui_core_Component),nextFrame);
		}
	}
	,initializeComponent: function() {
	}
	,validateInitialSize: function(isInitialized) {
	}
	,validateComponentData: function() {
		this.behaviours.validateData();
	}
	,validateComponentLayout: function() {
		return false;
	}
	,validateComponentStyle: function() {
	}
	,validateComponentPosition: function() {
	}
	,registerBehaviours: function() {
		haxe_ui_core_ComponentEvents.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ComponentEvents.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ComponentValidation();
	}
	,__class__: haxe_ui_core_ComponentValidation
	,__properties__: $extend(haxe_ui_core_ComponentEvents.prototype.__properties__,{set_depth:"set_depth",get_depth:"get_depth"})
});
var haxe_ui_core_ComponentLayout = function() {
	haxe_ui_core_ComponentValidation.call(this);
};
$hxClasses["haxe.ui.core.ComponentLayout"] = haxe_ui_core_ComponentLayout;
haxe_ui_core_ComponentLayout.__name__ = "haxe.ui.core.ComponentLayout";
haxe_ui_core_ComponentLayout.__super__ = haxe_ui_core_ComponentValidation;
haxe_ui_core_ComponentLayout.prototype = $extend(haxe_ui_core_ComponentValidation.prototype,{
	get_style: function() {
		return this._style;
	}
	,set_style: function(value) {
		this._style = value;
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_core_ComponentValidation.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ComponentValidation.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ComponentLayout();
	}
	,__class__: haxe_ui_core_ComponentLayout
	,__properties__: $extend(haxe_ui_core_ComponentValidation.prototype.__properties__,{set_style:"set_style",get_style:"get_style"})
});
var haxe_ui_core_ComponentBounds = function() {
	this._componentClipRect = null;
	this._top = 0;
	this._left = 0;
	this._hasScreen = null;
	haxe_ui_core_ComponentLayout.call(this);
};
$hxClasses["haxe.ui.core.ComponentBounds"] = haxe_ui_core_ComponentBounds;
haxe_ui_core_ComponentBounds.__name__ = "haxe.ui.core.ComponentBounds";
haxe_ui_core_ComponentBounds.__super__ = haxe_ui_core_ComponentLayout;
haxe_ui_core_ComponentBounds.prototype = $extend(haxe_ui_core_ComponentLayout.prototype,{
	autoWidth: null
	,get_autoWidth: function() {
		if(this._percentWidth != null || this._width != null || this.get_style() == null) {
			return false;
		}
		if(this.get_style().autoWidth == null) {
			return false;
		}
		return this.get_style().autoWidth;
	}
	,autoHeight: null
	,get_autoHeight: function() {
		if(this._percentHeight != null || this._height != null || this.get_style() == null) {
			return false;
		}
		if(this.get_style().autoHeight == null) {
			return false;
		}
		return this.get_style().autoHeight;
	}
	,resizeComponent: function(w,h) {
		var invalidate = false;
		if(this.get_style() != null) {
			if(w != null) {
				if(this.get_style().minWidth != null && w < this.get_style().minWidth) {
					w = this.get_style().minWidth;
				} else if(this.get_style().maxWidth != null && w > this.get_style().maxWidth) {
					w = this.get_style().maxWidth;
				}
			}
			if(h != null) {
				if(this.get_style().minHeight != null && h < this.get_style().minHeight) {
					h = this.get_style().minHeight;
				} else if(this.get_style().maxHeight != null && h > this.get_style().maxHeight) {
					h = this.get_style().maxHeight;
				}
			}
		}
		if(w != null && this._componentWidth != w) {
			this._componentWidth = w;
			invalidate = true;
		}
		if(h != null && this._componentHeight != h) {
			this._componentHeight = h;
			invalidate = true;
		}
		if(invalidate == true && this.isComponentInvalid("layout") == false) {
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
	}
	,actualComponentWidth: null
	,get_actualComponentWidth: function() {
		return this.get_componentWidth() * haxe_ui_Toolkit.get_scaleX();
	}
	,actualComponentHeight: null
	,get_actualComponentHeight: function() {
		return this.get_componentHeight() * haxe_ui_Toolkit.get_scaleY();
	}
	,_componentWidth: null
	,get_componentWidth: function() {
		if(this._componentWidth == null) {
			return 0;
		}
		return this._componentWidth;
	}
	,set_componentWidth: function(value) {
		this.resizeComponent(value,null);
		return value;
	}
	,_componentHeight: null
	,get_componentHeight: function() {
		if(this._componentHeight == null) {
			return 0;
		}
		return this._componentHeight;
	}
	,set_componentHeight: function(value) {
		this.resizeComponent(null,value);
		return value;
	}
	,_percentWidth: null
	,get_percentWidth: function() {
		return this._percentWidth;
	}
	,set_percentWidth: function(value) {
		if(this._percentWidth == value) {
			return value;
		}
		this._percentWidth = value;
		if(this.parentComponent != null) {
			var _this = this.parentComponent;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		}
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"percentWidth");
		return value;
	}
	,_percentHeight: null
	,get_percentHeight: function() {
		return this._percentHeight;
	}
	,set_percentHeight: function(value) {
		if(this._percentHeight == value) {
			return value;
		}
		this._percentHeight = value;
		if(this.parentComponent != null) {
			var _this = this.parentComponent;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		}
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"percentHeight");
		return value;
	}
	,_width: null
	,set_width: function(value) {
		if(this._width == value) {
			return value;
		}
		this._width = value;
		this.set_componentWidth(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"width");
		return value;
	}
	,get_width: function() {
		var f = this.get_componentWidth();
		return f;
	}
	,_height: null
	,set_height: function(value) {
		if(this._height == value) {
			return value;
		}
		this._height = value;
		this.set_componentHeight(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"height");
		return value;
	}
	,get_height: function() {
		var f = this.get_componentHeight();
		return f;
	}
	,_actualWidth: null
	,_actualHeight: null
	,_hasScreen: null
	,hasScreen: null
	,get_hasScreen: function() {
		var p = this;
		while(p != null) {
			if(p._hasScreen == false) {
				return false;
			}
			p = p.parentComponent;
		}
		return true;
	}
	,hitTest: function(left,top) {
		if(this.get_hasScreen() == false) {
			return false;
		}
		left *= haxe_ui_Toolkit.get_scale();
		top *= haxe_ui_Toolkit.get_scale();
		var b = false;
		var sx = this.get_screenLeft();
		var sy = this.get_screenTop();
		var cx = 0;
		if(this.get_componentWidth() != null) {
			cx = this.get_actualComponentWidth();
		}
		var cy = 0;
		if(this.get_componentHeight() != null) {
			cy = this.get_actualComponentHeight();
		}
		if(cx <= 0 || cy <= 0) {
			return false;
		}
		if(left >= sx && left < sx + cx && top >= sy && top < sy + cy) {
			b = true;
		}
		return b;
	}
	,autoSize: function() {
		if(this._ready == false || this._layout == null) {
			return false;
		}
		return this._layout.autoSize();
	}
	,moveComponent: function(left,top) {
		var invalidate = false;
		if(left != null && this._left != left) {
			this._left = left;
			invalidate = true;
		}
		if(top != null && this._top != top) {
			this._top = top;
			invalidate = true;
		}
		if(invalidate == true && this.isComponentInvalid("position") == false) {
			this.invalidateComponent("position");
		}
	}
	,_left: null
	,get_left: function() {
		return this._left;
	}
	,set_left: function(value) {
		this.moveComponent(value,null);
		return value;
	}
	,_top: null
	,get_top: function() {
		return this._top;
	}
	,set_top: function(value) {
		this.moveComponent(null,value);
		return value;
	}
	,screenLeft: null
	,get_screenLeft: function() {
		var c = this;
		var xpos = 0;
		while(c != null) {
			var l = c.get_left();
			if(c.parentComponent != null) {
				l *= haxe_ui_Toolkit.get_scale();
			}
			xpos += l;
			if(c.get_componentClipRect() != null) {
				xpos -= c.get_componentClipRect().left * haxe_ui_Toolkit.get_scaleX();
			}
			c = c.parentComponent;
		}
		return xpos;
	}
	,screenTop: null
	,get_screenTop: function() {
		var c = this;
		var ypos = 0;
		while(c != null) {
			var t = c.get_top();
			if(c.parentComponent != null) {
				t *= haxe_ui_Toolkit.get_scale();
			}
			ypos += t;
			if(c.get_componentClipRect() != null) {
				ypos -= c.get_componentClipRect().top * haxe_ui_Toolkit.get_scaleY();
			}
			c = c.parentComponent;
		}
		return ypos;
	}
	,_componentClipRect: null
	,get_componentClipRect: function() {
		return this._componentClipRect;
	}
	,set_componentClipRect: function(value) {
		this._componentClipRect = value;
		this.invalidateComponent("display");
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_core_ComponentLayout.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ComponentLayout.prototype.cloneComponent.call(this);
		if(this.get_componentWidth() != null) {
			c.set_componentWidth(this.get_componentWidth());
		}
		if(this.get_componentHeight() != null) {
			c.set_componentHeight(this.get_componentHeight());
		}
		if(this.get_percentWidth() != null) {
			c.set_percentWidth(this.get_percentWidth());
		}
		if(this.get_percentHeight() != null) {
			c.set_percentHeight(this.get_percentHeight());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ComponentBounds();
	}
	,__class__: haxe_ui_core_ComponentBounds
	,__properties__: $extend(haxe_ui_core_ComponentLayout.prototype.__properties__,{set_componentClipRect:"set_componentClipRect",get_componentClipRect:"get_componentClipRect",get_screenTop:"get_screenTop",get_screenLeft:"get_screenLeft",set_top:"set_top",get_top:"get_top",set_left:"set_left",get_left:"get_left",get_hasScreen:"get_hasScreen",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_percentHeight:"set_percentHeight",get_percentHeight:"get_percentHeight",set_percentWidth:"set_percentWidth",get_percentWidth:"get_percentWidth",set_componentHeight:"set_componentHeight",get_componentHeight:"get_componentHeight",set_componentWidth:"set_componentWidth",get_componentWidth:"get_componentWidth",get_actualComponentHeight:"get_actualComponentHeight",get_actualComponentWidth:"get_actualComponentWidth",get_autoHeight:"get_autoHeight",get_autoWidth:"get_autoWidth"})
});
var haxe_ui_backend_ComponentBase = function() {
	this._nativeClassName = null;
	this._className = null;
	haxe_ui_core_ComponentBounds.call(this);
};
$hxClasses["haxe.ui.backend.ComponentBase"] = haxe_ui_backend_ComponentBase;
haxe_ui_backend_ComponentBase.__name__ = "haxe.ui.backend.ComponentBase";
haxe_ui_backend_ComponentBase.__super__ = haxe_ui_core_ComponentBounds;
haxe_ui_backend_ComponentBase.prototype = $extend(haxe_ui_core_ComponentBounds.prototype,{
	handleCreate: function(native) {
	}
	,handlePosition: function(left,top,style) {
	}
	,handleSize: function(width,height,style) {
	}
	,handleReady: function() {
	}
	,handleClipRect: function(value) {
	}
	,handleVisibility: function(show) {
	}
	,getComponentOffset: function() {
		return new haxe_ui_geom_Point(0,0);
	}
	,isNativeScroller: null
	,get_isNativeScroller: function() {
		return false;
	}
	,handleFrameworkProperty: function(id,value) {
	}
	,handleSetComponentIndex: function(child,index) {
	}
	,handleAddComponent: function(child) {
		return child;
	}
	,handleAddComponentAt: function(child,index) {
		return child;
	}
	,handleRemoveComponent: function(child,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		return child;
	}
	,handleRemoveComponentAt: function(index,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		return null;
	}
	,applyStyle: function(style) {
	}
	,mapEvent: function(type,listener) {
	}
	,unmapEvent: function(type,listener) {
	}
	,_textDisplay: null
	,createTextDisplay: function(text) {
		if(this._textDisplay == null) {
			this._textDisplay = new haxe_ui_core_TextDisplay();
			this._textDisplay.parentComponent = js_Boot.__cast(this , haxe_ui_core_Component);
		}
		if(text != null) {
			this._textDisplay.set_text(text);
		}
		return this._textDisplay;
	}
	,getTextDisplay: function() {
		return this.createTextDisplay();
	}
	,hasTextDisplay: function() {
		return this._textDisplay != null;
	}
	,_textInput: null
	,createTextInput: function(text) {
		if(this._textInput == null) {
			this._textInput = new haxe_ui_core_TextInput();
			this._textInput.parentComponent = js_Boot.__cast(this , haxe_ui_core_Component);
		}
		if(text != null) {
			this._textInput.set_text(text);
		}
		return this._textInput;
	}
	,getTextInput: function() {
		return this.createTextInput();
	}
	,hasTextInput: function() {
		return this._textInput != null;
	}
	,_imageDisplay: null
	,createImageDisplay: function() {
		if(this._imageDisplay == null) {
			this._imageDisplay = new haxe_ui_core_ImageDisplay();
			this._imageDisplay.parentComponent = js_Boot.__cast(this , haxe_ui_core_Component);
		}
		return this._imageDisplay;
	}
	,getImageDisplay: function() {
		return this.createImageDisplay();
	}
	,hasImageDisplay: function() {
		return this._imageDisplay != null;
	}
	,removeImageDisplay: function() {
		if(this._imageDisplay != null) {
			this._imageDisplay.dispose();
			this._imageDisplay = null;
		}
	}
	,handlePreReposition: function() {
	}
	,handlePostReposition: function() {
	}
	,getClassProperty: function(name) {
		var v = null;
		if(this._classProperties != null) {
			v = this._classProperties.h[name];
		}
		if(v == null) {
			var c = js_Boot.getClass(this);
			var c1 = c.__name__.toLowerCase() + "." + name;
			v = haxe_ui_Toolkit.properties.h[c1];
		}
		return v;
	}
	,_classProperties: null
	,setClassProperty: function(name,value) {
		if(this._classProperties == null) {
			this._classProperties = new haxe_ds_StringMap();
		}
		this._classProperties.h[name] = value;
	}
	,_hasNativeEntry: null
	,hasNativeEntry: null
	,get_hasNativeEntry: function() {
		if(this._hasNativeEntry == null) {
			this._hasNativeEntry = this.getNativeConfigProperty(".@id") != null;
		}
		return this._hasNativeEntry;
	}
	,getNativeConfigProperty: function(query,defaultValue) {
		query = "component[id=" + this.get_nativeClassName() + "]" + query;
		return haxe_ui_Toolkit.nativeConfig.query(query,defaultValue,this);
	}
	,getNativeConfigPropertyBool: function(query,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		query = "component[id=" + this.get_nativeClassName() + "]" + query;
		return haxe_ui_Toolkit.nativeConfig.queryBool(query,defaultValue,this);
	}
	,getNativeConfigProperties: function(query) {
		if(query == null) {
			query = "";
		}
		query = "component[id=" + this.get_nativeClassName() + "]" + query;
		return haxe_ui_Toolkit.nativeConfig.queryValues(query,this);
	}
	,_className: null
	,className: null
	,get_className: function() {
		if(this._className != null) {
			return this._className;
		}
		var c = js_Boot.getClass(this);
		this._className = c.__name__;
		return this._className;
	}
	,_nativeClassName: null
	,nativeClassName: null
	,get_nativeClassName: function() {
		if(this._nativeClassName != null) {
			return this._nativeClassName;
		}
		var r = js_Boot.getClass(this);
		while(r != null) {
			var c = r.__name__;
			var t = haxe_ui_Toolkit.nativeConfig.query("component[id=" + c + "].@class",null,this);
			if(t != null) {
				this._nativeClassName = c;
				break;
			}
			r = r.__super__;
			if(r == haxe_ui_core_Component) {
				break;
			}
		}
		if(this._nativeClassName == null) {
			this._nativeClassName = this.get_className();
		}
		return this._nativeClassName;
	}
	,registerBehaviours: function() {
		haxe_ui_core_ComponentBounds.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ComponentBounds.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_backend_ComponentBase();
	}
	,__class__: haxe_ui_backend_ComponentBase
	,__properties__: $extend(haxe_ui_core_ComponentBounds.prototype.__properties__,{get_nativeClassName:"get_nativeClassName",get_className:"get_className",get_hasNativeEntry:"get_hasNativeEntry",get_isNativeScroller:"get_isNativeScroller"})
});
var haxe_ui_backend_ComponentImpl = function() {
	this._canvas = null;
	haxe_ui_backend_ComponentBase.call(this);
	this._eventMap = new haxe_ds_StringMap();
	if(haxe_ui_backend_ComponentImpl._mutationObserver == null) {
		haxe_ui_backend_ComponentImpl._mutationObserver = new MutationObserver(haxe_ui_backend_ComponentImpl.onMutationEvent);
		haxe_ui_backend_ComponentImpl._mutationObserver.observe(haxe_ui_core_Screen.get_instance().get_container(),{ childList : true});
	}
	if(window.document.styleSheets.length == 0) {
		var style = window.document.createElement("style");
		style.appendChild(window.document.createTextNode(""));
		window.document.head.appendChild(style);
	}
	if(haxe_ui_backend_ComponentImpl._stylesAdded == false) {
		haxe_ui_backend_ComponentImpl._stylesAdded = true;
		var sheet = haxe_ui_backend_html5_util_StyleSheetHelper.getValidStyleSheet();
		sheet.insertRule("#haxeui-container .haxeui-component, .haxeui-component:focus {\r\n                position: absolute;\r\n                box-sizing: border-box;\r\n                -webkit-touch-callout: none;\r\n                -webkit-user-select: none;\r\n                -khtml-user-select: none;\r\n                -moz-user-select: none;\r\n                -ms-user-select: none;\r\n                user-select: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n                webkit-user-select;\r\n                outline: none !important;\r\n            }",sheet.cssRules.length);
	}
};
$hxClasses["haxe.ui.backend.ComponentImpl"] = haxe_ui_backend_ComponentImpl;
haxe_ui_backend_ComponentImpl.__name__ = "haxe.ui.backend.ComponentImpl";
haxe_ui_backend_ComponentImpl.onMutationEvent = function(records,o) {
	var done = false;
	var _g = 0;
	while(_g < records.length) {
		var record = records[_g];
		++_g;
		var _g1 = 0;
		var _g2 = record.addedNodes.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var node = record.addedNodes.item(i);
			var c = haxe_ui_backend_ComponentImpl.elementToComponent.h[node.__id__];
			if(c != null) {
				c.recursiveReady();
			}
		}
		if(done == true) {
			break;
		}
	}
};
haxe_ui_backend_ComponentImpl.__super__ = haxe_ui_backend_ComponentBase;
haxe_ui_backend_ComponentImpl.prototype = $extend(haxe_ui_backend_ComponentBase.prototype,{
	element: null
	,_eventMap: null
	,_nativeElement: null
	,get_isNativeScroller: function() {
		if(((this) instanceof haxe_ui_containers_ScrollView) && (js_Boot.__cast(this , haxe_ui_core_Component)).get_native() == true) {
			return true;
		}
		return false;
	}
	,recursiveReady: function() {
		haxe_ui_backend_ComponentImpl.elementToComponent.remove(this.element);
		var component = js_Boot.__cast(this , haxe_ui_core_Component);
		if(!(component._layout == null || component._layoutLocked == true)) {
			component.invalidateComponent("layout");
		}
		component.ready();
		var _g = 0;
		var _g1 = component._children == null ? [] : component._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.recursiveReady();
		}
	}
	,handleCreate: function(native) {
		var newElement = null;
		if(native == true) {
			if(((this) instanceof haxe_ui_containers_ScrollView)) {
				this._nativeElement = new haxe_ui_backend_html5_native_NativeElement(this);
				if(this.element == null) {
					this.element = this._nativeElement.create();
				}
				this.element.classList.add("haxeui-component");
				this.element.style.overflow = "auto";
				haxe_ui_backend_ComponentImpl.elementToComponent.set(this.element,js_Boot.__cast(this , haxe_ui_core_Component));
				return;
			} else {
				var component = js_Boot.__cast(this , haxe_ui_core_Component);
				var nativeConfig = component.getNativeConfigProperties();
				if(nativeConfig != null && Object.prototype.hasOwnProperty.call(nativeConfig.h,"class")) {
					var name = nativeConfig.h["class"];
					this._nativeElement = Type.createInstance($hxClasses[name],[this]);
					this._nativeElement.config = nativeConfig;
					newElement = this._nativeElement.create();
					newElement.classList.add("haxeui-component");
				}
			}
			if(newElement != null) {
				if(this.element != null) {
					var p = this.element.parentElement;
					if(p != null) {
						haxe_ui_backend_ComponentImpl.elementToComponent.remove(this.element);
						p.replaceChild(newElement,this.element);
					}
				}
				this.element = newElement;
				this.remapEvents();
			}
		}
		if(newElement == null) {
			if(((this) instanceof haxe_ui_containers_ScrollView)) {
				this._nativeElement = null;
				if(this.element == null) {
					this.element = window.document.createElement("div");
				}
				this.element.scrollTop = 0;
				this.element.scrollLeft = 0;
				this.element.style.overflow = "hidden";
				this.element.classList.add("haxeui-component");
				haxe_ui_backend_ComponentImpl.elementToComponent.set(this.element,js_Boot.__cast(this , haxe_ui_core_Component));
				return;
			}
			newElement = window.document.createElement("div");
			newElement.classList.add("haxeui-component");
			if(((this) instanceof haxe_ui_components_Image)) {
				newElement.style.boxSizing = "initial";
			}
			if(this.element != null) {
				var p = this.element.parentElement;
				if(p != null) {
					haxe_ui_backend_ComponentImpl.elementToComponent.remove(this.element);
					p.replaceChild(newElement,this.element);
				}
			}
			this.element = newElement;
			haxe_ui_backend_ComponentImpl.elementToComponent.set(this.element,js_Boot.__cast(this , haxe_ui_core_Component));
			this._nativeElement = null;
			this.remapEvents();
		}
	}
	,remapEvents: function() {
		if(this._eventMap == null) {
			return;
		}
		var copy_h = Object.create(null);
		var k = haxe_ds_StringMap.keysIterator(this._eventMap.h);
		while(k.hasNext()) {
			var k1 = k.next();
			var fn = this._eventMap.h[k1];
			copy_h[k1] = fn;
			this.unmapEvent(k1,fn);
		}
		this._eventMap = new haxe_ds_StringMap();
		var k = haxe_ds_StringMap.keysIterator(copy_h);
		while(k.hasNext()) {
			var k1 = k.next();
			this.mapEvent(k1,copy_h[k1]);
		}
	}
	,handlePosition: function(left,top,style) {
		if(this.element == null) {
			return;
		}
		if(left != null) {
			this.element.style.left = "" + left + "px";
		}
		if(top != null) {
			this.element.style.top = "" + top + "px";
		}
		if(((this) instanceof haxe_ui_containers_TableView) && left != null && top != null && (js_Boot.__cast(this , haxe_ui_containers_TableView)).get_native() == true) {
			var c = js_Boot.__cast(this , haxe_ui_core_Component);
			var h = c.findComponent(null,haxe_ui_containers_Header);
			var tmp = "" + h.get_screenLeft() + "px";
			h.element.style.left = "" + tmp;
			var tmp = "" + h.get_screenTop() + "px";
			h.element.style.top = "" + tmp;
		}
	}
	,handleSize: function(width,height,style) {
		if(width == null || height == null || width <= 0 || height <= 0) {
			return;
		}
		if(this.element == null) {
			return;
		}
		if(((this) instanceof haxe_ui_components_VerticalProgress)) {
			if(this.element.style.getPropertyValue("transform-origin") != null && this.element.style.getPropertyValue("transform-origin").length > 0) {
				var tw = width;
				var th = height;
				width = th;
				height = tw;
				this.element.style.marginLeft = "-" + width + "px";
			}
		}
		var c = js_Boot.__cast(this , haxe_ui_core_Component);
		var css = this.element.style;
		haxe_ui_backend_html5_StyleHelper.apply(this,width,height,style);
		var parent = c.parentComponent;
		if(parent != null && parent.element.style.borderWidth != null) {
			css.marginTop = "-" + parent.element.style.borderWidth;
			css.marginLeft = "-" + parent.element.style.borderWidth;
		} else if(parent != null) {
			css.marginTop = "";
			css.marginLeft = "";
		}
		var _g = 0;
		var _this = js_Boot.__cast(this , haxe_ui_core_Component);
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(style.borderLeftSize != null && style.borderLeftSize > 0) {
				child.element.style.marginLeft = "-" + style.borderLeftSize + "px";
			} else {
				child.element.style.marginLeft = "";
			}
			if(style.borderTopSize != null && style.borderTopSize > 0) {
				child.element.style.marginTop = "-" + style.borderTopSize + "px";
			} else {
				child.element.style.marginTop = "";
			}
		}
	}
	,handleReady: function() {
		if((js_Boot.__cast(this , haxe_ui_core_Component)).get_id() != null) {
			this.element.id = (js_Boot.__cast(this , haxe_ui_core_Component)).get_id();
		}
	}
	,handleFrameworkProperty: function(id,value) {
		if(id == "allowMouseInteraction") {
			if(value == true && this.element.style.getPropertyValue("pointer-events") != null) {
				this.element.style.removeProperty("pointer-events");
			} else if(this.element.style.getPropertyValue("pointer-events") != "none") {
				this.element.style.setProperty("pointer-events","none");
				this.setCursor(null);
			}
		}
	}
	,handleClipRect: function(value) {
		var c = js_Boot.__cast(this , haxe_ui_core_Component);
		var parent = c.parentComponent;
		if(value != null && parent != null && (parent._nativeElement == null || ((c) instanceof haxe_ui_containers_Header))) {
			var tmp = "rect(" + ("" + value.top + "px") + "," + ("" + value.get_right() + "px") + "," + ("" + value.get_bottom() + "px") + ",";
			this.element.style.clip = tmp + ("" + value.left + "px") + ")";
			if(((this) instanceof haxe_ui_containers_Header) && parent.get_native() == true) {
				if(this.element.style.position != "fixed") {
					this.element.style.position = "fixed";
				}
				var tmp = "" + (c.get_screenLeft() - value.left | 0) + "px";
				this.element.style.left = "" + tmp;
				var tmp = "" + (c.get_screenTop() - value.top | 0) + "px";
				this.element.style.top = "" + tmp;
			} else {
				var tmp = "" + (c.get_left() - value.left | 0) + "px";
				this.element.style.left = "" + tmp;
				var tmp = "" + (c.get_top() - value.top | 0) + "px";
				this.element.style.top = "" + tmp;
			}
		} else {
			this.element.style.removeProperty("clip");
		}
	}
	,handleVisibility: function(show) {
		this.element.style.display = show == true ? "" : "none";
	}
	,createTextDisplay: function(text) {
		if(this._textDisplay == null) {
			haxe_ui_backend_ComponentBase.prototype.createTextDisplay.call(this,text);
			this.element.appendChild(this._textDisplay.element);
		}
		return this._textDisplay;
	}
	,createTextInput: function(text) {
		if(this._textInput == null) {
			haxe_ui_backend_ComponentBase.prototype.createTextInput.call(this,text);
			this.element.appendChild(this._textInput.element);
		}
		return this._textInput;
	}
	,createImageDisplay: function() {
		if(this._imageDisplay == null) {
			haxe_ui_backend_ComponentBase.prototype.createImageDisplay.call(this);
			this.element.appendChild(this._imageDisplay.element);
		}
		return this._imageDisplay;
	}
	,handleSetComponentIndex: function(child,index) {
		var _this = js_Boot.__cast(this , haxe_ui_core_Component);
		if(index == (_this._children == null ? [] : _this._children).length - 1) {
			this.element.appendChild(child.element);
		} else {
			var _this = js_Boot.__cast(this , haxe_ui_core_Component);
			haxe_ui_backend_html5_HtmlUtils.insertBefore((_this._children == null ? [] : _this._children)[index + 1].element,child.element);
		}
	}
	,handleAddComponent: function(child) {
		this.element.appendChild(child.element);
		return child;
	}
	,handleAddComponentAt: function(child,index) {
		this.handleAddComponent(child);
		this.handleSetComponentIndex(child,index);
		return child;
	}
	,handleRemoveComponent: function(child,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		haxe_ui_backend_html5_HtmlUtils.removeElement(child.element);
		return child;
	}
	,handleRemoveComponentAt: function(index,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		var child = (js_Boot.__cast(this , haxe_ui_core_Component))._children[index];
		haxe_ui_backend_html5_HtmlUtils.removeElement(child.element);
		return child;
	}
	,applyStyle: function(style) {
		if(this.element == null) {
			return;
		}
		this.setCursor(style.cursor);
		if(style.filter != null) {
			if(((style.filter[0]) instanceof haxe_ui_filters_DropShadow)) {
				var dropShadow = style.filter[0];
				if(dropShadow.inner == false) {
					var tmp = "" + dropShadow.distance + "px " + (dropShadow.distance + 2) + "px " + (dropShadow.blurX - 1) + "px " + (dropShadow.blurY - 1) + "px ";
					var tmp1 = haxe_ui_backend_html5_HtmlUtils.rgba(dropShadow.color,dropShadow.alpha);
					this.element.style.boxShadow = tmp + tmp1;
				} else {
					var tmp = "inset " + dropShadow.distance + "px " + dropShadow.distance + "px " + dropShadow.blurX + "px 0px ";
					var tmp1 = haxe_ui_backend_html5_HtmlUtils.rgba(dropShadow.color,dropShadow.alpha);
					this.element.style.boxShadow = tmp + tmp1;
				}
			} else if(((style.filter[0]) instanceof haxe_ui_filters_Blur)) {
				var blur = style.filter[0];
				this.element.style.setProperty("-webkit-filter","blur(" + blur.amount + "px)");
				this.element.style.setProperty("-moz-filter","blur(" + blur.amount + "px)");
				this.element.style.setProperty("-o-filter","blur(" + blur.amount + "px)");
				this.element.style.setProperty("filter","blur(" + blur.amount + "px)");
			}
		} else {
			this.element.style.filter = null;
			this.element.style.boxShadow = null;
			this.element.style.removeProperty("box-shadow");
			this.element.style.removeProperty("-webkit-filter");
			this.element.style.removeProperty("-moz-filter");
			this.element.style.removeProperty("-o-filter");
			this.element.style.removeProperty("filter");
		}
		if(style.backdropFilter != null) {
			if(((style.backdropFilter[0]) instanceof haxe_ui_filters_Blur)) {
				var blur = style.backdropFilter[0];
				this.element.style.setProperty("backdrop-filter","blur(" + blur.amount + "px)");
			}
		} else {
			this.element.style.removeProperty("backdrop-filter");
		}
		if(style.opacity != null) {
			this.element.style.opacity = "" + style.opacity;
		}
		if(style.fontName != null) {
			this.element.style.fontFamily = style.fontName;
		}
		if(style.fontSize != null) {
			this.element.style.fontSize = "" + style.fontSize + "px";
		}
		if(style.color != null) {
			this.element.style.color = haxe_ui_backend_html5_HtmlUtils.color(style.color);
		}
	}
	,setCursor: function(cursor) {
		var tmp = cursor == null;
		if(cursor == null) {
			this.element.style.removeProperty("cursor");
			if(this.hasImageDisplay()) {
				this.getImageDisplay().element.style.removeProperty("cursor");
			}
		} else {
			this.element.style.cursor = cursor;
			if(this.hasImageDisplay()) {
				this.getImageDisplay().element.style.cursor = cursor;
			}
			if(this.hasTextDisplay()) {
				this.getTextDisplay().element.style.cursor = cursor;
			}
		}
		var _g = 0;
		var _this = js_Boot.__cast(this , haxe_ui_core_Component);
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.element.style.cursor == null) {
				c.setCursor("inherit");
			}
		}
	}
	,__props: null
	,get: function(name) {
		if(this.__props == null) {
			return null;
		}
		return this.__props.h[name];
	}
	,set: function(name,value) {
		if(this.__props == null) {
			this.__props = new haxe_ds_StringMap();
		}
		this.__props.h[name] = value;
	}
	,has: function(name) {
		if(this.__props == null) {
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this.__props.h,name);
	}
	,_canvas: null
	,getCanvas: function(width,height) {
		if(this._canvas == null) {
			this._canvas = window.document.createElement("canvas");
			this._canvas.style.setProperty("-webkit-backface-visibility","hidden");
			this._canvas.style.setProperty("-moz-backface-visibility","hidden");
			this._canvas.style.setProperty("-ms-backface-visibility","hidden");
			this._canvas.style.position = "absolute";
			this._canvas.style.pointerEvents = "none";
			this._canvas.width = width;
			this._canvas.height = height;
			this.element.insertBefore(this._canvas,this.element.firstChild);
		}
		if(width != this._canvas.width) {
			this._canvas.width = width;
		}
		if(height != this._canvas.height) {
			this._canvas.height = height;
		}
		return this._canvas;
	}
	,hasCanvas: function() {
		return this._canvas != null;
	}
	,removeCanvas: function() {
		if(this._canvas != null && this.element.contains(this._canvas)) {
			this.element.removeChild(this._canvas);
			this._canvas = null;
		}
	}
	,mapEvent: function(type,listener) {
		switch(type) {
		case "change":
			if(Object.prototype.hasOwnProperty.call(this._eventMap.h,type) == false) {
				this._eventMap.h[type] = listener;
				if(((this) instanceof haxe_ui_components_TextField) || ((this) instanceof haxe_ui_components_TextArea)) {
					this.element.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h["keyup"],$bind(this,this.__onTextFieldChangeEvent));
				} else if(((this) instanceof haxe_ui_core_InteractiveComponent)) {
					this.element.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onChangeEvent));
				}
			}
			break;
		case "click":case "doubleclick":case "mousedown":case "mousemove":case "mouseout":case "mouseover":case "mouseup":
			if(Object.prototype.hasOwnProperty.call(this._eventMap.h,type) == false) {
				if(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type] != null) {
					this.element.addEventListener(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type],$bind(this,this.__onMouseEvent));
				}
				this._eventMap.h[type] = listener;
				this.element.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onMouseEvent));
			}
			break;
		case "keydown":case "keyup":
			if(Object.prototype.hasOwnProperty.call(this._eventMap.h,type) == false) {
				this._eventMap.h[type] = listener;
				this.element.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onKeyboardEvent));
			}
			break;
		case "mousewheel":
			this._eventMap.h[type] = listener;
			if(haxe_ui_backend_html5_UserAgent.get_instance().get_firefox() == true) {
				this.element.addEventListener("DOMMouseScroll",$bind(this,this.__onMouseWheelEvent));
			} else {
				this.element.addEventListener("mousewheel",$bind(this,this.__onMouseWheelEvent));
			}
			break;
		case "rightclick":
			if(Object.prototype.hasOwnProperty.call(this._eventMap.h,type) == false) {
				this._eventMap.h[type] = listener;
				this.element.addEventListener("contextmenu",$bind(this,this.__onContextMenu));
			}
			break;
		case "scrollchange":
			this._eventMap.h[type] = listener;
			this.element.addEventListener("scroll",$bind(this,this.__onScrollEvent));
			break;
		}
	}
	,unmapEvent: function(type,listener) {
		switch(type) {
		case "change":
			var _this = this._eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			if(((this) instanceof haxe_ui_components_TextField)) {
				this.element.removeEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h["keyup"],$bind(this,this.__onTextFieldChangeEvent));
			} else {
				this.element.removeEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onChangeEvent));
			}
			break;
		case "click":case "doubleclick":case "mousedown":case "mousemove":case "mouseout":case "mouseover":case "mouseup":
			var _this = this._eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			this.element.removeEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onMouseEvent));
			if(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type] != null) {
				this.element.removeEventListener(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type],$bind(this,this.__onMouseEvent));
			}
			break;
		case "keydown":case "keyup":
			var _this = this._eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			this.element.removeEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onKeyboardEvent));
			break;
		case "mousewheel":
			var _this = this._eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			if(haxe_ui_backend_html5_UserAgent.get_instance().get_firefox() == true) {
				this.element.removeEventListener("DOMMouseScroll",$bind(this,this.__onMouseWheelEvent));
			} else {
				this.element.removeEventListener("mousewheel",$bind(this,this.__onMouseWheelEvent));
			}
			break;
		case "rightclick":
			var _this = this._eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			this.element.removeEventListener("contextmenu",$bind(this,this.__onContextMenu));
			break;
		}
	}
	,__onContextMenu: function(event) {
		event.preventDefault();
		var type = "rightclick";
		if(type != null) {
			var fn = this._eventMap.h[type];
			if(fn != null) {
				var uiEvent = new haxe_ui_events_MouseEvent(type);
				uiEvent.screenX = event.pageX;
				uiEvent.screenY = event.pageY;
				fn(uiEvent);
			}
		}
		return false;
	}
	,__onChangeEvent: function(event) {
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		if(type != null) {
			var fn = this._eventMap.h[type];
			if(fn != null) {
				var uiEvent = new haxe_ui_events_UIEvent(type);
				fn(uiEvent);
			}
		}
	}
	,__onTextFieldChangeEvent: function(event) {
		var fn = this._eventMap.h["change"];
		if(fn != null) {
			var uiEvent = new haxe_ui_events_UIEvent("change");
			fn(uiEvent);
		}
	}
	,__onMouseEvent: function(event) {
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		if(type != null) {
			try {
				var tmp = type == "mousedown";
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
			var fn = this._eventMap.h[type];
			if(fn != null) {
				var mouseEvent = new haxe_ui_events_MouseEvent(type);
				mouseEvent._originalEvent = event;
				var touchEvent = false;
				try {
					touchEvent = ((event) instanceof TouchEvent);
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
				}
				if(touchEvent == true) {
					var te = js_Boot.__cast(event , TouchEvent);
					mouseEvent.screenX = (te.changedTouches[0].pageX - haxe_ui_core_Screen.get_instance().get_container().offsetLeft) / haxe_ui_Toolkit.get_scaleX();
					mouseEvent.screenY = (te.changedTouches[0].pageY - haxe_ui_core_Screen.get_instance().get_container().offsetTop) / haxe_ui_Toolkit.get_scaleY();
					mouseEvent.touchEvent = true;
				} else if(((event) instanceof MouseEvent)) {
					var me = js_Boot.__cast(event , MouseEvent);
					mouseEvent.buttonDown = me.buttons != 0;
					mouseEvent.screenX = (me.pageX - haxe_ui_core_Screen.get_instance().get_container().offsetLeft) / haxe_ui_Toolkit.get_scaleX();
					mouseEvent.screenY = (me.pageY - haxe_ui_core_Screen.get_instance().get_container().offsetTop) / haxe_ui_Toolkit.get_scaleY();
					mouseEvent.ctrlKey = me.ctrlKey;
					mouseEvent.shiftKey = me.shiftKey;
				}
				fn(mouseEvent);
			}
		}
	}
	,__onMouseWheelEvent: function(event) {
		var fn = this._eventMap.h["mousewheel"];
		if(fn == null) {
			return;
		}
		var delta = 0;
		if(Reflect.field(event,"wheelDelta") != null) {
			delta = Reflect.field(event,"wheelDelta");
		} else if(((event) instanceof WheelEvent)) {
			delta = (js_Boot.__cast(event , WheelEvent)).deltaY;
		} else {
			delta = -event.detail;
		}
		delta = Math.max(-1,Math.min(1,delta));
		var mouseEvent = new haxe_ui_events_MouseEvent("mousewheel");
		mouseEvent._originalEvent = event;
		mouseEvent.screenX = (event.pageX - haxe_ui_core_Screen.get_instance().get_container().offsetLeft) / haxe_ui_Toolkit.get_scaleX();
		mouseEvent.screenY = (event.pageY - haxe_ui_core_Screen.get_instance().get_container().offsetTop) / haxe_ui_Toolkit.get_scaleY();
		mouseEvent.ctrlKey = event.ctrlKey;
		mouseEvent.shiftKey = event.shiftKey;
		mouseEvent.delta = delta;
		fn(mouseEvent);
	}
	,__onKeyboardEvent: function(event) {
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		if(type != null) {
			var fn = this._eventMap.h[type];
			if(fn != null) {
				var keyboardEvent = new haxe_ui_events_KeyboardEvent(type);
				keyboardEvent._originalEvent = event;
				if(((event) instanceof KeyboardEvent)) {
					var me = js_Boot.__cast(event , KeyboardEvent);
					keyboardEvent.keyCode = me.keyCode;
					keyboardEvent.altKey = me.altKey;
					keyboardEvent.ctrlKey = me.ctrlKey;
					keyboardEvent.shiftKey = me.shiftKey;
				}
				fn(keyboardEvent);
			}
		}
	}
	,__onScrollEvent: function(event) {
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		var fn = this._eventMap.h[type];
		if(fn != null) {
			var scrollEvent = new haxe_ui_events_ScrollEvent("scrollchange");
			fn(scrollEvent);
		}
	}
	,registerBehaviours: function() {
		haxe_ui_backend_ComponentBase.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_backend_ComponentBase.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_backend_ComponentImpl();
	}
	,__class__: haxe_ui_backend_ComponentImpl
});
var haxe_ui_validation_IValidating = function() { };
$hxClasses["haxe.ui.validation.IValidating"] = haxe_ui_validation_IValidating;
haxe_ui_validation_IValidating.__name__ = "haxe.ui.validation.IValidating";
haxe_ui_validation_IValidating.__isInterface__ = true;
haxe_ui_validation_IValidating.prototype = {
	get_depth: null
	,set_depth: null
	,validateComponent: null
	,updateComponentDisplay: null
	,__class__: haxe_ui_validation_IValidating
	,__properties__: {set_depth:"set_depth",get_depth:"get_depth"}
};
var haxe_ui_core_IComponentBase = function() { };
$hxClasses["haxe.ui.core.IComponentBase"] = haxe_ui_core_IComponentBase;
haxe_ui_core_IComponentBase.__name__ = "haxe.ui.core.IComponentBase";
haxe_ui_core_IComponentBase.__isInterface__ = true;
haxe_ui_core_IComponentBase.prototype = {
	mapEvent: null
	,handleAddComponent: null
	,__class__: haxe_ui_core_IComponentBase
};
var haxe_ui_core_Component = function() {
	this._initialSizeApplied = false;
	this.scriptAccess = true;
	this._includeInLayout = true;
	this._styleSheet = null;
	this._cachedStyleSheetRef = null;
	this._useCachedStyleSheetRef = false;
	this.classes = [];
	this.customStyle = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
	this._hidden = false;
	this.bindingRoot = false;
	this.userData = null;
	this._animatable = true;
	this._native = null;
	this._defaultLayoutClass = null;
	haxe_ui_backend_ComponentImpl.call(this);
	this.addClass(haxe_ui_Backend.get_id(),false);
	var c = js_Boot.getClass(this);
	while(c != null) {
		var css = c.__name__;
		var className = css.split(".").pop();
		this.addClass(className.toLowerCase(),false);
		this.addClass(haxe_ui_util_StringUtil.toDashes(className),false);
		if(className.toLowerCase() == "component") {
			break;
		}
		c = c.__super__;
	}
	var s = haxe_ui_Toolkit.styleSheet.buildStyleFor(this);
	if(s.native != null && this.get_hasNativeEntry() == true) {
		this.set_native(s.native);
	} else {
		this.create();
	}
};
$hxClasses["haxe.ui.core.Component"] = haxe_ui_core_Component;
haxe_ui_core_Component.__name__ = "haxe.ui.core.Component";
haxe_ui_core_Component.__interfaces__ = [haxe_ui_validation_IValidating,haxe_ui_core_IComponentBase];
haxe_ui_core_Component.addNamedComponentsFrom = function(parent,list) {
	if(parent == null) {
		return;
	}
	if(parent.get_id() != null) {
		list.push(parent);
	}
	var _g = 0;
	var _g1 = parent._children == null ? [] : parent._children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		haxe_ui_core_Component.addNamedComponentsFrom(child,list);
	}
};
haxe_ui_core_Component.__super__ = haxe_ui_backend_ComponentImpl;
haxe_ui_core_Component.prototype = $extend(haxe_ui_backend_ComponentImpl.prototype,{
	_defaultLayoutClass: null
	,create: function() {
		if(this.get_native() == false || this.get_native() == null) {
			this.registerComposite();
		}
		this.createDefaults();
		this.handleCreate(this.get_native());
		this.destroyChildren();
		this.registerBehaviours();
		this.behaviours.replaceNative();
		if(this.get_native() == false || this.get_native() == null) {
			if(this._compositeBuilderClass != null) {
				if(this._compositeBuilder == null) {
					this._compositeBuilder = Type.createInstance(this._compositeBuilderClass,[this]);
				}
				this._compositeBuilder.create();
			}
			this.createChildren();
			if(this._internalEventsClass != null && this._internalEvents == null) {
				this.registerInternalEvents(this._internalEventsClass);
			}
		} else {
			var builderClass = this.getNativeConfigProperty(".builder.@class");
			if(builderClass != null) {
				if(this._compositeBuilder == null) {
					this._compositeBuilder = Type.createInstance($hxClasses[builderClass],[this]);
				}
				this._compositeBuilder.create();
			}
		}
		this.behaviours.applyDefaults();
	}
	,_compositeBuilderClass: null
	,_compositeBuilder: null
	,registerComposite: function() {
	}
	,createDefaults: function() {
	}
	,createChildren: function() {
	}
	,destroyChildren: function() {
		this.unregisterInternalEvents();
	}
	,createLayout: function() {
		var l = null;
		if(this.get_native() == true) {
			var sizeProps = this.getNativeConfigProperties(".size");
			if(sizeProps != null && Object.prototype.hasOwnProperty.call(sizeProps.h,"class")) {
				var name = sizeProps.h["class"];
				var size = Type.createInstance($hxClasses[name],[]);
				size.config = sizeProps;
				l = new haxe_ui_layouts_DelegateLayout(size);
			} else {
				var layoutProps = this.getNativeConfigProperties(".layout");
				if(layoutProps != null && Object.prototype.hasOwnProperty.call(layoutProps.h,"class")) {
					var name = layoutProps.h["class"];
					l = Type.createInstance($hxClasses[name],[]);
				}
			}
		}
		if(l == null) {
			if(this._defaultLayoutClass != null) {
				l = Type.createInstance(this._defaultLayoutClass,[]);
			} else {
				l = new haxe_ui_layouts_DefaultLayout();
			}
		}
		return l;
	}
	,_native: null
	,get_native: function() {
		if(this._native == null) {
			return false;
		}
		if(this.get_hasNativeEntry() == false) {
			return false;
		}
		return this._native;
	}
	,set_native: function(value) {
		if(this.get_hasNativeEntry() == false) {
			return value;
		}
		if(this._native == value) {
			return value;
		}
		this._native = value;
		this.customStyle.native = value;
		if(this._native == true && this.get_hasNativeEntry()) {
			this.addClass(":native");
		} else {
			this.removeClass(":native");
		}
		this.behaviours.cache();
		this.behaviours.detatch();
		this.create();
		if(this.get_layout() != null) {
			this.set_layout(this.createLayout());
		}
		this.behaviours.restore();
		return value;
	}
	,_animatable: null
	,get_animatable: function() {
		return this._animatable;
	}
	,set_animatable: function(value) {
		if(this._animatable != value) {
			if(value == false && this._componentAnimation != null) {
				this._componentAnimation.stop();
				this._componentAnimation = null;
			}
			this._animatable = value;
		}
		this._animatable = value;
		return value;
	}
	,_componentAnimation: null
	,get_componentAnimation: function() {
		return this._componentAnimation;
	}
	,set_componentAnimation: function(value) {
		if(this._componentAnimation != value && this._animatable == true) {
			if(this._componentAnimation != null) {
				this._componentAnimation.stop();
			}
			this._componentAnimation = value;
		}
		return value;
	}
	,userData: null
	,screen: null
	,get_screen: function() {
		return haxe_ui_Toolkit.get_screen();
	}
	,bindingRoot: null
	,get_rootComponent: function() {
		var r = this;
		while(r.parentComponent != null) r = r.parentComponent;
		return r;
	}
	,get_numComponents: function() {
		if(this._compositeBuilder != null) {
			return this._compositeBuilder.get_numComponents();
		} else if(this._children == null) {
			return 0;
		} else {
			return this._children.length;
		}
	}
	,addComponent: function(child) {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.addComponent(child);
			if(v != null) {
				return v;
			}
		}
		if(this.get_native() == true) {
			var allowChildren = this.getNativeConfigPropertyBool(".@allowChildren",true);
			if(allowChildren == false) {
				return child;
			}
		}
		child.parentComponent = this;
		child._isDisposed = false;
		if(this._children == null) {
			this._children = [];
		}
		this._children.push(child);
		this.handleAddComponent(child);
		if(this._ready) {
			child.ready();
		}
		this.assignPositionClasses();
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout");
		}
		if(this.get_disabled()) {
			child.set_disabled(true);
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.onComponentAdded(child);
		}
		this.onComponentAdded(child);
		return child;
	}
	,addComponentAt: function(child,index) {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.addComponentAt(child,index);
			if(v != null) {
				return v;
			}
		}
		if(this.get_native() == true) {
			var allowChildren = this.getNativeConfigPropertyBool(".@allowChildren",true);
			if(allowChildren == false) {
				return child;
			}
		}
		child.parentComponent = this;
		child._isDisposed = false;
		if(this._children == null) {
			this._children = [];
		}
		this._children.splice(index,0,child);
		this.handleAddComponentAt(child,index);
		if(this._ready) {
			child.ready();
		}
		this.assignPositionClasses();
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout");
		}
		if(this.get_disabled()) {
			child.set_disabled(true);
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.onComponentAdded(child);
		}
		this.onComponentAdded(child);
		return child;
	}
	,onComponentAdded: function(child) {
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		if(child == null) {
			return null;
		}
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.removeComponent(child,dispose,invalidate);
			if(v != null) {
				return v;
			}
		}
		if(this._children != null) {
			if(HxOverrides.remove(this._children,child)) {
				child.parentComponent = null;
				child.set_depth(-1);
			}
			if(dispose == true) {
				child._isDisposed = true;
				child.removeAllComponents(true);
				child.unregisterEvents();
				child.destroyComponent();
			}
		}
		this.handleRemoveComponent(child,dispose);
		this.assignPositionClasses(invalidate);
		if(this._children != null && invalidate == true) {
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.onComponentRemoved(child);
		}
		this.onComponentRemoved(child);
		return child;
	}
	,removeComponentAt: function(index,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		if(this._children == null) {
			return null;
		}
		var childCount = this._children.length;
		if(this._compositeBuilder != null) {
			var compositeChildCount = this._compositeBuilder.get_numComponents();
			if(compositeChildCount != null) {
				childCount = compositeChildCount;
			}
		}
		if(index < 0 || index > childCount - 1) {
			return null;
		}
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.removeComponentAt(index,dispose,invalidate);
			if(v != null) {
				return v;
			}
		}
		this.handleRemoveComponentAt(index,dispose);
		var child = this._children[index];
		if(this._children != null) {
			if(HxOverrides.remove(this._children,child)) {
				child.parentComponent = null;
				child.set_depth(-1);
			}
			this.assignPositionClasses(invalidate);
			if(invalidate == true) {
				if(!(this._layout == null || this._layoutLocked == true)) {
					this.invalidateComponent("layout");
				}
			}
			if(dispose == true) {
				child._isDisposed = true;
				child.unregisterEvents();
				child.destroyComponent();
			}
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.onComponentRemoved(child);
		}
		this.onComponentRemoved(child);
		return child;
	}
	,onComponentRemoved: function(child) {
	}
	,assignPositionClasses: function(invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		var _g = 0;
		var _g1 = (this._children == null ? [] : this._children).length;
		while(_g < _g1) {
			var i = _g++;
			var c = (this._children == null ? [] : this._children)[i];
			if(i == 0) {
				c.swapClass("first","last",invalidate);
			} else if((this._children == null ? [] : this._children).length > 1 && i == (this._children == null ? [] : this._children).length - 1) {
				c.swapClass("last","first",invalidate);
			} else {
				c.removeClasses(["first","last"],invalidate);
			}
		}
	}
	,destroyComponent: function() {
		if(this._compositeBuilder != null) {
			this._compositeBuilder.destroy();
		}
		this.onDestroy();
	}
	,onDestroy: function() {
	}
	,walkComponents: function(callback) {
		if(callback(this) == false) {
			return;
		}
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(callback(child) == false) {
				return;
			}
		}
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var cont = [true];
			child.walkComponents((function(cont) {
				return function(c) {
					cont[0] = callback(c);
					return cont[0];
				};
			})(cont));
			if(cont[0] == false) {
				break;
			}
		}
	}
	,removeAllComponents: function(dispose) {
		if(dispose == null) {
			dispose = true;
		}
		if(this._children != null) {
			while(this._children.length > 0) {
				this._children[0].removeAllComponents(dispose);
				this.removeComponent(this._children[0],dispose,false);
			}
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
	}
	,matchesSearch: function(criteria,type,searchType) {
		if(searchType == null) {
			searchType = "id";
		}
		if(criteria != null) {
			if(!(searchType == "id" && this.get_id() == criteria)) {
				if(searchType == "css") {
					return this.hasClass(criteria) == true;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else if(type != null) {
			return js_Boot.__instanceof(this,type) == true;
		}
		return false;
	}
	,findComponent: function(criteria,type,recursive,searchType) {
		if(searchType == null) {
			searchType = "id";
		}
		if(recursive == null && criteria != null && searchType == "id") {
			recursive = true;
		}
		var match = null;
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.matchesSearch(criteria,type,searchType)) {
				match = child;
				break;
			}
		}
		if(match == null && recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				var temp = child.findComponent(criteria,type,recursive,searchType);
				if(temp != null) {
					match = temp;
					break;
				}
			}
			if(match == null && this._compositeBuilder != null) {
				match = this._compositeBuilder.findComponent(criteria,type,recursive,searchType);
			}
		}
		return match;
	}
	,findComponents: function(styleName,type,maxDepth) {
		if(maxDepth == null) {
			maxDepth = 5;
		}
		if(maxDepth == -1) {
			maxDepth = 100;
		}
		if(maxDepth <= 0) {
			return [];
		}
		--maxDepth;
		var r = [];
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var match = true;
			if(styleName != null && child.hasClass(styleName) == false) {
				match = false;
			}
			if(type != null && js_Boot.__instanceof(child,type) == false) {
				match = false;
			}
			if(match == true) {
				r.push(child);
			} else {
				var childArray = child.findComponents(styleName,type,maxDepth);
				var _g2 = 0;
				while(_g2 < childArray.length) {
					var c = childArray[_g2];
					++_g2;
					r.push(c);
				}
			}
		}
		return r;
	}
	,findAncestor: function(criteria,type,searchType) {
		if(searchType == null) {
			searchType = "id";
		}
		var match = null;
		var p = this.parentComponent;
		while(p != null) if(p.matchesSearch(criteria,type,searchType)) {
			match = p;
			break;
		} else {
			p = p.parentComponent;
		}
		return match;
	}
	,findComponentsUnderPoint: function(screenX,screenY,type) {
		var c = [];
		if(this.hitTest(screenX,screenY)) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.hitTest(screenX,screenY)) {
					var match = true;
					if(type != null && js_Boot.__instanceof(child,type) == false) {
						match = false;
					}
					if(match == true) {
						c.push(child);
					}
				}
				c = c.concat(child.findComponentsUnderPoint(screenX,screenY));
			}
		}
		return c;
	}
	,getComponentIndex: function(child) {
		if(this._compositeBuilder != null) {
			var index = this._compositeBuilder.getComponentIndex(child);
			if(index != -2147483648) {
				return index;
			}
		}
		var index = -1;
		if(this._children != null && child != null) {
			index = this._children.indexOf(child);
		}
		return index;
	}
	,setComponentIndex: function(child,index) {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.setComponentIndex(child,index);
			if(v != null) {
				return v;
			}
		}
		if(index >= 0 && index <= this._children.length && child.parentComponent == this) {
			this.handleSetComponentIndex(child,index);
			HxOverrides.remove(this._children,child);
			this._children.splice(index,0,child);
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
		return child;
	}
	,getComponentAt: function(index) {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.getComponentAt(index);
			if(v != null) {
				return v;
			}
		}
		if(this._children == null) {
			return null;
		}
		return this._children[index];
	}
	,hide: function() {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.hide();
			if(v == true) {
				return;
			}
		}
		if(this._hidden == false) {
			this.handleVisibility(false);
			this._hidden = true;
			if(this.parentComponent != null) {
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout");
				}
			}
			this.dispatchRecursively(new haxe_ui_events_UIEvent("hidden"));
		}
	}
	,show: function() {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.show();
			if(v == true) {
				return;
			}
		}
		if(this._hidden == true) {
			this.handleVisibility(true);
			this._hidden = false;
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
			if(this.parentComponent != null) {
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout");
				}
			}
			this.dispatchRecursively(new haxe_ui_events_UIEvent("shown"));
		}
	}
	,fadeIn: function(onEnd,show) {
		if(show == null) {
			show = true;
		}
		var _gthis = this;
		if(onEnd != null || show == true) {
			var prevStart = this.onAnimationStart;
			var prevEnd = this.onAnimationEnd;
			if(show == true) {
				prevStart = this.onAnimationStart;
				this.set_onAnimationStart(function(e) {
					_gthis.show();
					_gthis.set_onAnimationStart(prevStart);
				});
			}
			this.set_onAnimationEnd(function(e) {
				if(onEnd != null) {
					onEnd();
				}
				_gthis.removeClass("fade-in");
				_gthis.set_onAnimationEnd(prevEnd);
			});
		}
		this.swapClass("fade-in","fade-out");
	}
	,fadeOut: function(onEnd,hide) {
		if(hide == null) {
			hide = true;
		}
		var _gthis = this;
		if(onEnd != null || hide == true) {
			var prevEnd = this.onAnimationEnd;
			this.set_onAnimationEnd(function(e) {
				if(hide == true) {
					_gthis.hide();
				}
				if(onEnd != null) {
					onEnd();
				}
				_gthis.set_onAnimationEnd(prevEnd);
				_gthis.removeClass("fade-out");
			});
		}
		this.swapClass("fade-out","fade-in");
	}
	,_hidden: null
	,get_hidden: function() {
		if(this._hidden == true) {
			return true;
		}
		if(this.parentComponent != null) {
			return this.parentComponent.get_hidden();
		}
		return false;
	}
	,set_hidden: function(value) {
		if(value == this._hidden) {
			return value;
		}
		if(value == true) {
			this.hide();
		} else {
			this.show();
		}
		return value;
	}
	,customStyle: null
	,set_customStyle: function(v) {
		if(v != this.customStyle) {
			this.invalidateComponent("style");
		}
		return this.customStyle = v;
	}
	,classes: null
	,addClass: function(name,invalidate,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(invalidate == null) {
			invalidate = true;
		}
		if(this.classes.indexOf(name) == -1) {
			this.classes.push(name);
			if(invalidate == true) {
				this.invalidateComponent("style");
			}
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.addClass(name,invalidate,recursive);
			}
		}
	}
	,addClasses: function(names,invalidate,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(invalidate == null) {
			invalidate = true;
		}
		var needsInvalidate = false;
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			if(this.classes.indexOf(name) == -1) {
				this.classes.push(name);
				if(invalidate == true) {
					needsInvalidate = true;
				}
			}
		}
		if(needsInvalidate == true) {
			this.invalidateComponent("style");
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.addClasses(names,invalidate,recursive);
			}
		}
	}
	,removeClass: function(name,invalidate,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(invalidate == null) {
			invalidate = true;
		}
		if(this.classes.indexOf(name) != -1) {
			HxOverrides.remove(this.classes,name);
			if(invalidate == true) {
				this.invalidateComponent("style");
			}
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.removeClass(name,invalidate,recursive);
			}
		}
	}
	,removeClasses: function(names,invalidate,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(invalidate == null) {
			invalidate = true;
		}
		var needsInvalidate = false;
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			if(this.classes.indexOf(name) != -1) {
				HxOverrides.remove(this.classes,name);
				if(invalidate == true) {
					needsInvalidate = true;
				}
			}
		}
		if(needsInvalidate == true) {
			this.invalidateComponent("style");
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.removeClasses(names,invalidate,recursive);
			}
		}
	}
	,hasClass: function(name) {
		return this.classes.indexOf(name) != -1;
	}
	,swapClass: function(classToAdd,classToRemove,invalidate,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(invalidate == null) {
			invalidate = true;
		}
		var needsInvalidate = false;
		if(classToAdd != null && this.classes.indexOf(classToAdd) == -1) {
			this.classes.push(classToAdd);
			needsInvalidate = true;
		}
		if(classToRemove != null && this.classes.indexOf(classToRemove) != -1) {
			HxOverrides.remove(this.classes,classToRemove);
			needsInvalidate = true;
		}
		if(invalidate == true && needsInvalidate == true) {
			this.invalidateComponent("style");
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.swapClass(classToAdd,classToRemove,invalidate,recursive);
			}
		}
	}
	,get_styleNames: function() {
		return this.classes.join(" ");
	}
	,set_styleNames: function(value) {
		if(value == null) {
			return value;
		}
		var _g = 0;
		var _g1 = value.split(" ");
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			this.addClass(x);
		}
		return value;
	}
	,_styleString: null
	,get_styleString: function() {
		return this._styleString;
	}
	,set_styleString: function(value) {
		if(value == null || value == this._styleString) {
			return value;
		}
		var cssString = StringTools.trim(value);
		if(cssString.length == 0) {
			return value;
		}
		if(StringTools.endsWith(cssString,";") == false) {
			cssString += ";";
		}
		cssString = "_ { " + cssString + "}";
		var s = new haxe_ui_styles_Parser().parse(cssString);
		this.customStyle.mergeDirectives(s.get_rules()[0].directives);
		this._styleString = value;
		this.invalidateComponent("style");
		return value;
	}
	,_useCachedStyleSheetRef: null
	,_cachedStyleSheetRef: null
	,_styleSheet: null
	,get_styleSheet: function() {
		if(this._useCachedStyleSheetRef == true) {
			return this._cachedStyleSheetRef;
		}
		var s = null;
		var ref = this;
		while(ref != null) {
			if(ref._styleSheet != null) {
				s = ref._styleSheet;
				break;
			}
			ref = ref.parentComponent;
		}
		this._useCachedStyleSheetRef = true;
		this._cachedStyleSheetRef = s;
		return s;
	}
	,set_styleSheet: function(value) {
		this._styleSheet = value;
		this.resetCachedStyleSheetRef();
		return value;
	}
	,resetCachedStyleSheetRef: function() {
		this._cachedStyleSheetRef = null;
		this._useCachedStyleSheetRef = false;
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.resetCachedStyleSheetRef();
		}
	}
	,_includeInLayout: null
	,get_includeInLayout: function() {
		if(this._hidden == true) {
			return false;
		}
		return this._includeInLayout;
	}
	,set_includeInLayout: function(value) {
		this._includeInLayout = value;
		return value;
	}
	,get_layout: function() {
		return this._layout;
	}
	,set_layout: function(value) {
		if(value == null) {
			return value;
		}
		var tmp;
		if(this._layout != null) {
			var c = js_Boot.getClass(value);
			var tmp1 = c.__name__;
			var c = js_Boot.getClass(this._layout);
			tmp = tmp1 == c.__name__;
		} else {
			tmp = false;
		}
		if(tmp) {
			return value;
		}
		this._layout = value;
		this._layout.set_component(this);
		return value;
	}
	,lockLayout: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(this._layoutLocked == true) {
			return;
		}
		this._layoutLocked = true;
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.lockLayout(recursive);
			}
		}
	}
	,unlockLayout: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(this._layoutLocked == false) {
			return;
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.unlockLayout(recursive);
			}
		}
		this._layoutLocked = false;
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout");
		}
	}
	,ready: function() {
		var _gthis = this;
		this.set_depth(haxe_ui_util_ComponentUtil.getDepth(this));
		if(this.isComponentInvalid()) {
			this._invalidateCount = 0;
			haxe_ui_validation_ValidationManager.get_instance().add(this);
		}
		if(this._ready == false) {
			this._ready = true;
			this.handleReady();
			this.initScript();
			if((this._children == null ? [] : this._children) != null) {
				var _g = 0;
				var _g1 = this._children == null ? [] : this._children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.ready();
				}
			}
			this.invalidateComponent();
			this.behaviours.update();
			haxe_ui_Toolkit.callLater(function() {
				_gthis.invalidateComponent("data");
				_gthis.invalidateComponent("style");
				if(_gthis._compositeBuilder != null) {
					_gthis._compositeBuilder.onReady();
				}
				_gthis.onReady();
				_gthis.dispatch(new haxe_ui_events_UIEvent("ready"));
			});
		}
	}
	,onReady: function() {
	}
	,onInitialize: function() {
	}
	,onResized: function() {
	}
	,onMoved: function() {
	}
	,scriptAccess: null
	,_interp: null
	,_script: null
	,script: null
	,set_script: function(value) {
		this._script = value;
		return value;
	}
	,executeScriptCall: function(expr,variables) {
		var parser = new hscript_Parser();
		var line = parser.parseString(expr);
		var interp = this.findScriptInterp();
		interp.variables.h["this"] = this;
		if(variables != null) {
			var k = haxe_ds_StringMap.keysIterator(variables.h);
			while(k.hasNext()) {
				var k1 = k.next();
				interp.variables.h[k1] = variables.h[k1];
			}
		}
		interp.expr(line);
		var _this = interp.variables;
		if(Object.prototype.hasOwnProperty.call(_this.h,"this")) {
			delete(_this.h["this"]);
		}
		if(variables != null) {
			var k = haxe_ds_StringMap.keysIterator(variables.h);
			while(k.hasNext()) {
				var k1 = k.next();
				var _this = interp.variables;
				if(Object.prototype.hasOwnProperty.call(_this.h,k1)) {
					delete(_this.h[k1]);
				}
			}
		}
	}
	,findScriptInterp: function(refreshNamedComponents) {
		if(refreshNamedComponents == null) {
			refreshNamedComponents = true;
		}
		var interp = null;
		var c = this;
		while(c != null && interp == null) {
			if(c._interp != null) {
				interp = c._interp;
				break;
			}
			c = c.parentComponent;
		}
		if(interp == null) {
			c = this.get_rootComponent();
			c._interp = new haxe_ui_scripting_ScriptInterp();
			interp = c._interp;
		}
		if(refreshNamedComponents == true && c != null) {
			var comps = c.get_namedComponents();
			var _g = 0;
			while(_g < comps.length) {
				var comp = comps[_g];
				++_g;
				var safeId = haxe_ui_util_StringUtil.capitalizeHyphens(comp.get_id());
				interp.variables.h[safeId] = comp;
			}
		}
		return interp;
	}
	,initScript: function() {
		if(this._script != null) {
			try {
				var parser = new hscript_Parser();
				var program = parser.parseString(this._script);
				this._interp = new haxe_ui_scripting_ScriptInterp();
				var comps = this.get_namedComponents();
				var _g = 0;
				while(_g < comps.length) {
					var comp = comps[_g];
					++_g;
					if(comp.scriptAccess == true) {
						var safeId = haxe_ui_util_StringUtil.capitalizeHyphens(comp.get_id());
						this._interp.variables.h[safeId] = comp;
					}
				}
				this._interp.execute(program);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				haxe_Log.trace("Problem initializing script: " + Std.string(e),{ fileName : "haxe/ui/core/Component.hx", lineNumber : 1340, className : "haxe.ui.core.Component", methodName : "initScript"});
				haxe_ui_debug_CallStackHelper.traceExceptionStack();
			}
		}
	}
	,_scriptEvents: null
	,scriptEvents: null
	,get_scriptEvents: function() {
		return this._scriptEvents;
	}
	,addScriptEvent: function(event,script) {
		event = event.toLowerCase();
		var eventName = StringTools.startsWith(event,"on") ? event.substring(2,event.length) : event;
		if(this._scriptEvents == null) {
			this._scriptEvents = new haxe_ds_StringMap();
		}
		this._scriptEvents.h[event] = script;
		var _g = $bind(this,this._onScriptEvent);
		var eventId = event;
		this.registerEvent(eventName,function(event) {
			_g(eventId,event);
		});
	}
	,_onScriptEvent: function(eventId,event) {
		if(this._scriptEvents != null) {
			var script = this._scriptEvents.h[eventId];
			if(script != null) {
				event.cancel();
				var variables = new haxe_ds_StringMap();
				variables.h["event"] = event;
				this.executeScriptCall(script,variables);
			}
		}
	}
	,namedComponents: null
	,get_namedComponents: function() {
		var list = [];
		haxe_ui_core_Component.addNamedComponentsFrom(this,list);
		return list;
	}
	,onThemeChanged: function() {
		this._initialSizeApplied = false;
		if(this._style != null) {
			if(this._style.initialWidth != null) {
				this.set_width(0);
			}
			if(this._style.initialPercentWidth != null) {
				this.set_percentWidth(null);
			}
			if(this._style.initialHeight != null) {
				this.set_height(0);
			}
			if(this._style.initialPercentHeight != null) {
				this.set_percentHeight(null);
			}
		}
	}
	,initializeComponent: function() {
		if(this._isInitialized == true) {
			return;
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.onInitialize();
		}
		this.onInitialize();
		if(this._layout == null) {
			this.set_layout(this.createLayout());
		}
		this._isInitialized = true;
		if(this.hasEvent("initialize")) {
			this.dispatch(new haxe_ui_events_UIEvent("initialize"));
		}
	}
	,_initialSizeApplied: null
	,validateInitialSize: function(isInitialized) {
		if(isInitialized == false && this._style != null && this._initialSizeApplied == false) {
			if((this._style.initialWidth != null || this._style.initialPercentWidth != null) && (this.get_width() <= 0 && this.get_percentWidth() == null)) {
				if(this._style.initialWidth != null) {
					this.set_width(this._style.initialWidth);
					this._initialSizeApplied = true;
				} else if(this._style.initialPercentWidth != null) {
					this.set_percentWidth(this._style.initialPercentWidth);
					this._initialSizeApplied = true;
				}
			}
			if((this._style.initialHeight != null || this._style.initialPercentHeight != null) && (this.get_height() <= 0 && this.get_percentHeight() == null)) {
				if(this._style.initialHeight != null) {
					this.set_height(this._style.initialHeight);
					this._initialSizeApplied = true;
				} else if(this._style.initialPercentHeight != null) {
					this.set_percentHeight(this._style.initialPercentHeight);
					this._initialSizeApplied = true;
				}
			}
		}
	}
	,validateComponentLayout: function() {
		this.get_layout().refresh();
		while(this.validateComponentAutoSize()) this.get_layout().refresh();
		var sizeChanged = false;
		if(this._componentWidth != this._actualWidth || this._componentHeight != this._actualHeight) {
			this._actualWidth = this._componentWidth;
			this._actualHeight = this._componentHeight;
			if(this.parentComponent != null) {
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout");
				}
			}
			this.onResized();
			this.dispatch(new haxe_ui_events_UIEvent("resize"));
			sizeChanged = true;
		}
		if(this._compositeBuilder != null) {
			if(this._compositeBuilder.validateComponentLayout()) {
				sizeChanged = true;
			}
		}
		return sizeChanged;
	}
	,validateComponentStyle: function() {
		var s = haxe_ui_Toolkit.styleSheet.buildStyleFor(this);
		if(this.get_styleSheet() != null) {
			var localStyle = this.get_styleSheet().buildStyleFor(this);
			s.apply(localStyle);
		}
		s.apply(this.customStyle);
		if(this._style == null || this._style.equalTo(s) == false) {
			var marginsChanged = false;
			if(this.parentComponent != null && this._style != null) {
				marginsChanged = this._style.marginLeft != s.marginLeft || this._style.marginRight != s.marginRight || this._style.marginTop != s.marginTop || this._style.marginBottom != s.marginBottom;
			}
			this._style = s;
			this.applyStyle(s);
			if(marginsChanged == true) {
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout");
				}
			}
		}
	}
	,validateComponentPosition: function() {
		this.handlePosition(this._left,this._top,this._style);
		this.onMoved();
		this.dispatch(new haxe_ui_events_UIEvent("move"));
	}
	,updateComponentDisplay: function() {
		if(this.get_componentWidth() == null || this.get_componentHeight() == null || this.get_componentWidth() <= 0 || this.get_componentHeight() <= 0) {
			return;
		}
		this.handleSize(this.get_componentWidth(),this.get_componentHeight(),this._style);
		if(this._componentClipRect != null || this.get_style() != null && this.get_style().clip != null && this.get_style().clip == true) {
			this.handleClipRect(this._componentClipRect != null ? this._componentClipRect : new haxe_ui_geom_Rectangle(0,0,this.get_componentWidth(),this.get_componentHeight()));
		}
	}
	,validateComponentAutoSize: function() {
		var invalidate = false;
		if(this.get_autoWidth() == true || this.get_autoHeight() == true) {
			var s = this.get_layout().calcAutoSize();
			if(this.get_autoWidth() == true) {
				if(s.width != this._componentWidth) {
					this._componentWidth = s.width;
					invalidate = true;
				}
			}
			if(this.get_autoHeight() == true) {
				if(s.height != this._componentHeight) {
					this._componentHeight = s.height;
					invalidate = true;
				}
			}
		}
		return invalidate;
	}
	,applyStyle: function(style) {
		haxe_ui_backend_ComponentImpl.prototype.applyStyle.call(this,style);
		if(style != null && this._initialSizeApplied == false) {
			if((style.initialWidth != null || style.initialPercentWidth != null) && (this.get_width() <= 0 && this.get_percentWidth() == null)) {
				if(style.initialWidth != null) {
					this.set_width(style.initialWidth);
					this._initialSizeApplied = true;
				} else if(style.initialPercentWidth != null) {
					this.set_percentWidth(style.initialPercentWidth);
					this._initialSizeApplied = true;
				}
			}
			if((style.initialHeight != null || style.initialPercentHeight != null) && (this.get_height() <= 0 && this.get_percentHeight() == null)) {
				if(style.initialHeight != null) {
					this.set_height(style.initialHeight);
					this._initialSizeApplied = true;
				} else if(style.initialPercentHeight != null) {
					this.set_percentHeight(style.initialPercentHeight);
					this._initialSizeApplied = true;
				}
			}
		}
		if(style.left != null) {
			this.set_left(style.left);
		}
		if(style.top != null) {
			this.set_top(style.top);
		}
		if(style.percentWidth != null) {
			this.set_percentWidth(style.percentWidth);
		}
		if(style.percentHeight != null) {
			this.set_percentHeight(style.percentHeight);
		}
		if(style.width != null) {
			this.set_width(style.width);
		}
		if(style.height != null) {
			this.set_height(style.height);
		}
		if(style.native != null) {
			this.set_native(style.native);
		}
		if(style.hidden != null) {
			this.set_hidden(style.hidden);
		}
		if(style.animationName != null) {
			var animationKeyFrames = haxe_ui_Toolkit.styleSheet.get_animations().h[style.animationName];
			this.applyAnimationKeyFrame(animationKeyFrames,style.animationOptions);
		} else if(this.get_componentAnimation() != null) {
			this.set_componentAnimation(null);
		}
		if(style.pointerEvents != null && style.pointerEvents != "none") {
			if(this.hasEvent("mouseover",$bind(this,this.onPointerEventsMouseOver)) == false) {
				this.customStyle.cursor = "pointer";
				this.registerEvent("mouseover",$bind(this,this.onPointerEventsMouseOver));
			}
			if(this.hasEvent("mouseout",$bind(this,this.onPointerEventsMouseOut)) == false) {
				this.registerEvent("mouseout",$bind(this,this.onPointerEventsMouseOut));
			}
			if(this.hasEvent("mousedown",$bind(this,this.onPointerEventsMouseDown)) == false) {
				this.registerEvent("mousedown",$bind(this,this.onPointerEventsMouseDown));
			}
			if(this.hasEvent("mouseup",$bind(this,this.onPointerEventsMouseUp)) == false) {
				this.registerEvent("mouseup",$bind(this,this.onPointerEventsMouseUp));
			}
			this.handleFrameworkProperty("allowMouseInteraction",true);
		} else if(style.pointerEvents != null) {
			if(this.hasEvent("mouseover",$bind(this,this.onPointerEventsMouseOver)) == true) {
				this.customStyle.cursor = null;
				this.unregisterEvent("mouseover",$bind(this,this.onPointerEventsMouseOver));
			}
			if(this.hasEvent("mouseout",$bind(this,this.onPointerEventsMouseOut)) == true) {
				this.unregisterEvent("mouseout",$bind(this,this.onPointerEventsMouseOut));
			}
			if(this.hasEvent("mousedown",$bind(this,this.onPointerEventsMouseDown)) == true) {
				this.unregisterEvent("mousedown",$bind(this,this.onPointerEventsMouseDown));
			}
			if(this.hasEvent("mouseup",$bind(this,this.onPointerEventsMouseUp)) == true) {
				this.unregisterEvent("mouseup",$bind(this,this.onPointerEventsMouseUp));
			}
			this.handleFrameworkProperty("allowMouseInteraction",false);
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.applyStyle(style);
		}
	}
	,onPointerEventsMouseOver: function(e) {
		this.addClass(":hover",true,true);
	}
	,onPointerEventsMouseOut: function(e) {
		this.removeClass(":hover",true,true);
	}
	,onPointerEventsMouseDown: function(e) {
		this.addClass(":down",true,true);
	}
	,onPointerEventsMouseUp: function(e) {
		this.removeClass(":down",true,true);
	}
	,applyAnimationKeyFrame: function(animationKeyFrames,options) {
		var _gthis = this;
		if(this._animatable == false || options == null || options.duration == 0 || this._componentAnimation != null && this._componentAnimation.name == animationKeyFrames.id && options.compareToAnimation(this._componentAnimation) == true) {
			return;
		}
		if(this.hasEvent("animationstart")) {
			this.dispatch(new haxe_ui_events_AnimationEvent("animationstart"));
		}
		this.set_componentAnimation(haxe_ui_styles_animation_Animation.createWithKeyFrames(animationKeyFrames,this,options));
		this.get_componentAnimation().run(function() {
			if(_gthis.hasEvent("animationend")) {
				_gthis.dispatch(new haxe_ui_events_AnimationEvent("animationend"));
			}
		});
	}
	,cloneComponent: function() {
		var c = haxe_ui_backend_ComponentImpl.prototype.cloneComponent.call(this);
		c.set_hidden(this.get_hidden());
		if(this.get_styleNames() != null) {
			c.set_styleNames(this.get_styleNames());
		}
		if(this.get_styleString() != null) {
			c.set_styleString(this.get_styleString());
		}
		var tmp = this._ready == false;
		if(this.get_autoWidth() == false && this.get_width() > 0) {
			c.set_width(this.get_width());
		}
		if(this.get_autoHeight() == false && this.get_height() > 0) {
			c.set_height(this.get_height());
		}
		if(this._scriptEvents != null) {
			var k = haxe_ds_StringMap.keysIterator(this._scriptEvents.h);
			while(k.hasNext()) {
				var k1 = k.next();
				c.addScriptEvent(k1,this._scriptEvents.h[k1]);
			}
		}
		if(this.customStyle != null) {
			if(c.customStyle == null) {
				c.set_customStyle(new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null));
			}
			c.customStyle.apply(this.customStyle);
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,cssName: null
	,get_cssName: function() {
		var cssName = null;
		if(this._compositeBuilder != null) {
			cssName = this._compositeBuilder.get_cssName();
		}
		if(cssName == null) {
			var c = js_Boot.getClass(this);
			cssName = c.__name__.split(".").pop().toLowerCase();
		}
		return cssName;
	}
	,registerBehaviours: function() {
		haxe_ui_backend_ComponentImpl.prototype.registerBehaviours.call(this);
	}
	,get_color: function() {
		if(this.customStyle.color != null) {
			return this.customStyle.color;
		}
		if(this.get_style() == null || this.get_style().color == null) {
			return null;
		}
		return this.get_style().color;
	}
	,set_color: function(value) {
		if(this.customStyle.color == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.color = haxe_ui_util_Color.toInt(value);
		this.invalidateComponent("style");
		return value;
	}
	,get_backgroundColor: function() {
		if(this.customStyle.backgroundColor != null) {
			return this.customStyle.backgroundColor;
		}
		if(this.get_style() == null || this.get_style().backgroundColor == null) {
			return null;
		}
		return this.get_style().backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(this.customStyle.backgroundColor == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.backgroundColor = haxe_ui_util_Color.toInt(value);
		this.invalidateComponent("style");
		return value;
	}
	,get_borderColor: function() {
		if(this.customStyle.borderColor != null) {
			return this.customStyle.borderColor;
		}
		if(this.get_style() == null || this.get_style().borderColor == null) {
			return null;
		}
		return this.get_style().borderColor;
	}
	,set_borderColor: function(value) {
		if(this.customStyle.borderColor == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.borderColor = haxe_ui_util_Color.toInt(value);
		this.invalidateComponent("style");
		return value;
	}
	,get_borderSize: function() {
		if(this.customStyle.borderSize != null) {
			return this.customStyle.borderSize;
		}
		if(this.get_style() == null || this.get_style().borderSize == null) {
			return null;
		}
		return this.get_style().borderSize;
	}
	,set_borderSize: function(value) {
		if(this.customStyle.borderSize == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.borderSize = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_borderRadius: function() {
		if(this.customStyle.borderRadius != null) {
			return this.customStyle.borderRadius;
		}
		if(this.get_style() == null || this.get_style().borderRadius == null) {
			return null;
		}
		return this.get_style().borderRadius;
	}
	,set_borderRadius: function(value) {
		if(this.customStyle.borderRadius == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.borderRadius = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_paddingLeft: function() {
		if(this.customStyle.paddingLeft != null) {
			return this.customStyle.paddingLeft;
		}
		if(this.get_style() == null || this.get_style().paddingLeft == null) {
			return null;
		}
		return this.get_style().paddingLeft;
	}
	,set_paddingLeft: function(value) {
		if(this.customStyle.paddingLeft == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.paddingLeft = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_paddingRight: function() {
		if(this.customStyle.paddingRight != null) {
			return this.customStyle.paddingRight;
		}
		if(this.get_style() == null || this.get_style().paddingRight == null) {
			return null;
		}
		return this.get_style().paddingRight;
	}
	,set_paddingRight: function(value) {
		if(this.customStyle.paddingRight == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.paddingRight = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_paddingTop: function() {
		if(this.customStyle.paddingTop != null) {
			return this.customStyle.paddingTop;
		}
		if(this.get_style() == null || this.get_style().paddingTop == null) {
			return null;
		}
		return this.get_style().paddingTop;
	}
	,set_paddingTop: function(value) {
		if(this.customStyle.paddingTop == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.paddingTop = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_paddingBottom: function() {
		if(this.customStyle.paddingBottom != null) {
			return this.customStyle.paddingBottom;
		}
		if(this.get_style() == null || this.get_style().paddingBottom == null) {
			return null;
		}
		return this.get_style().paddingBottom;
	}
	,set_paddingBottom: function(value) {
		if(this.customStyle.paddingBottom == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.paddingBottom = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_marginLeft: function() {
		if(this.customStyle.marginLeft != null) {
			return this.customStyle.marginLeft;
		}
		if(this.get_style() == null || this.get_style().marginLeft == null) {
			return null;
		}
		return this.get_style().marginLeft;
	}
	,set_marginLeft: function(value) {
		if(this.customStyle.marginLeft == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.marginLeft = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_marginRight: function() {
		if(this.customStyle.marginRight != null) {
			return this.customStyle.marginRight;
		}
		if(this.get_style() == null || this.get_style().marginRight == null) {
			return null;
		}
		return this.get_style().marginRight;
	}
	,set_marginRight: function(value) {
		if(this.customStyle.marginRight == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.marginRight = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_marginTop: function() {
		if(this.customStyle.marginTop != null) {
			return this.customStyle.marginTop;
		}
		if(this.get_style() == null || this.get_style().marginTop == null) {
			return null;
		}
		return this.get_style().marginTop;
	}
	,set_marginTop: function(value) {
		if(this.customStyle.marginTop == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.marginTop = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_marginBottom: function() {
		if(this.customStyle.marginBottom != null) {
			return this.customStyle.marginBottom;
		}
		if(this.get_style() == null || this.get_style().marginBottom == null) {
			return null;
		}
		return this.get_style().marginBottom;
	}
	,set_marginBottom: function(value) {
		if(this.customStyle.marginBottom == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.marginBottom = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_clip: function() {
		if(this.customStyle.clip != null) {
			return this.customStyle.clip;
		}
		if(this.get_style() == null || this.get_style().clip == null) {
			return null;
		}
		return this.get_style().clip;
	}
	,set_clip: function(value) {
		if(this.customStyle.clip == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.clip = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_opacity: function() {
		if(this.customStyle.opacity != null) {
			return this.customStyle.opacity;
		}
		if(this.get_style() == null || this.get_style().opacity == null) {
			return null;
		}
		return this.get_style().opacity;
	}
	,set_opacity: function(value) {
		if(this.customStyle.opacity == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.opacity = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_horizontalAlign: function() {
		if(this.customStyle.horizontalAlign != null) {
			return this.customStyle.horizontalAlign;
		}
		if(this.get_style() == null || this.get_style().horizontalAlign == null) {
			return null;
		}
		return this.get_style().horizontalAlign;
	}
	,set_horizontalAlign: function(value) {
		if(this.customStyle.horizontalAlign == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.horizontalAlign = value;
		this.invalidateComponent("style");
		if(this.parentComponent != null) {
			var _this = this.parentComponent;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,get_verticalAlign: function() {
		if(this.customStyle.verticalAlign != null) {
			return this.customStyle.verticalAlign;
		}
		if(this.get_style() == null || this.get_style().verticalAlign == null) {
			return null;
		}
		return this.get_style().verticalAlign;
	}
	,set_verticalAlign: function(value) {
		if(this.customStyle.verticalAlign == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.verticalAlign = value;
		this.invalidateComponent("style");
		if(this.parentComponent != null) {
			var _this = this.parentComponent;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,self: function() {
		return new haxe_ui_core_Component();
	}
	,__onAnimationStart: null
	,onAnimationStart: null
	,set_onAnimationStart: function(value) {
		if(this.__onAnimationStart != null) {
			this.unregisterEvent("animationstart",this.__onAnimationStart);
			this.__onAnimationStart = null;
		}
		if(value != null) {
			this.__onAnimationStart = value;
			this.registerEvent("animationstart",value);
		}
		return value;
	}
	,__onAnimationEnd: null
	,onAnimationEnd: null
	,set_onAnimationEnd: function(value) {
		if(this.__onAnimationEnd != null) {
			this.unregisterEvent("animationend",this.__onAnimationEnd);
			this.__onAnimationEnd = null;
		}
		if(value != null) {
			this.__onAnimationEnd = value;
			this.registerEvent("animationend",value);
		}
		return value;
	}
	,__onClick: null
	,onClick: null
	,set_onClick: function(value) {
		if(this.__onClick != null) {
			this.unregisterEvent("click",this.__onClick);
			this.__onClick = null;
		}
		if(value != null) {
			this.__onClick = value;
			this.registerEvent("click",value);
		}
		return value;
	}
	,__onRightClick: null
	,onRightClick: null
	,set_onRightClick: function(value) {
		if(this.__onRightClick != null) {
			this.unregisterEvent("rightclick",this.__onRightClick);
			this.__onRightClick = null;
		}
		if(value != null) {
			this.__onRightClick = value;
			this.registerEvent("rightclick",value);
		}
		return value;
	}
	,__onChange: null
	,onChange: null
	,set_onChange: function(value) {
		if(this.__onChange != null) {
			this.unregisterEvent("change",this.__onChange);
			this.__onChange = null;
		}
		if(value != null) {
			this.__onChange = value;
			this.registerEvent("change",value);
		}
		return value;
	}
	,__class__: haxe_ui_core_Component
	,__properties__: $extend(haxe_ui_backend_ComponentImpl.prototype.__properties__,{set_onChange:"set_onChange",set_onRightClick:"set_onRightClick",set_onClick:"set_onClick",set_onAnimationEnd:"set_onAnimationEnd",set_onAnimationStart:"set_onAnimationStart",set_verticalAlign:"set_verticalAlign",get_verticalAlign:"get_verticalAlign",set_horizontalAlign:"set_horizontalAlign",get_horizontalAlign:"get_horizontalAlign",set_opacity:"set_opacity",get_opacity:"get_opacity",set_clip:"set_clip",get_clip:"get_clip",set_marginBottom:"set_marginBottom",get_marginBottom:"get_marginBottom",set_marginTop:"set_marginTop",get_marginTop:"get_marginTop",set_marginRight:"set_marginRight",get_marginRight:"get_marginRight",set_marginLeft:"set_marginLeft",get_marginLeft:"get_marginLeft",set_paddingBottom:"set_paddingBottom",get_paddingBottom:"get_paddingBottom",set_paddingTop:"set_paddingTop",get_paddingTop:"get_paddingTop",set_paddingRight:"set_paddingRight",get_paddingRight:"get_paddingRight",set_paddingLeft:"set_paddingLeft",get_paddingLeft:"get_paddingLeft",set_borderRadius:"set_borderRadius",get_borderRadius:"get_borderRadius",set_borderSize:"set_borderSize",get_borderSize:"get_borderSize",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_color:"set_color",get_color:"get_color",get_cssName:"get_cssName",get_namedComponents:"get_namedComponents",get_scriptEvents:"get_scriptEvents",set_script:"set_script",set_layout:"set_layout",get_layout:"get_layout",set_includeInLayout:"set_includeInLayout",get_includeInLayout:"get_includeInLayout",set_styleSheet:"set_styleSheet",get_styleSheet:"get_styleSheet",set_styleString:"set_styleString",get_styleString:"get_styleString",set_styleNames:"set_styleNames",get_styleNames:"get_styleNames",set_customStyle:"set_customStyle",set_hidden:"set_hidden",get_hidden:"get_hidden",get_numComponents:"get_numComponents",get_rootComponent:"get_rootComponent",get_screen:"get_screen",set_componentAnimation:"set_componentAnimation",get_componentAnimation:"get_componentAnimation",set_animatable:"set_animatable",get_animatable:"get_animatable",set_native:"set_native",get_native:"get_native"})
});
var haxe_ui_containers_Box = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.containers.Box"] = haxe_ui_containers_Box;
haxe_ui_containers_Box.__name__ = "haxe.ui.containers.Box";
haxe_ui_containers_Box.__super__ = haxe_ui_core_Component;
haxe_ui_containers_Box.prototype = $extend(haxe_ui_core_Component.prototype,{
	_layoutName: null
	,get_layoutName: function() {
		return this._layoutName;
	}
	,set_layoutName: function(value) {
		if(this._layoutName == value) {
			return value;
		}
		this._layoutName = value;
		this.set_layout(haxe_ui_layouts_LayoutFactory.createFromName(this.get_layoutName()));
		return value;
	}
	,createDefaults: function() {
		haxe_ui_core_Component.prototype.createDefaults.call(this);
		if(this._defaultLayoutClass == null) {
			this._defaultLayoutClass = haxe_ui_layouts_DefaultLayout;
		}
	}
	,registerComposite: function() {
		haxe_ui_core_Component.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_layouts_DefaultLayout;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("icon",haxe_ui_behaviours_DefaultBehaviour);
	}
	,get_icon: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("icon"));
	}
	,set_icon: function(value) {
		this.behaviours.set("icon",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"icon");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if(this.get_layoutName() != null) {
			c.set_layoutName(this.get_layoutName());
		}
		if(this.get_icon() != null) {
			c.set_icon(this.get_icon());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_Box();
	}
	,__class__: haxe_ui_containers_Box
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_icon:"set_icon",get_icon:"get_icon",set_layoutName:"set_layoutName",get_layoutName:"get_layoutName"})
});
var haxe_ui_containers_VBox = function() {
	haxe_ui_containers_Box.call(this);
	this.set_layout(new haxe_ui_layouts_VerticalLayout());
};
$hxClasses["haxe.ui.containers.VBox"] = haxe_ui_containers_VBox;
haxe_ui_containers_VBox.__name__ = "haxe.ui.containers.VBox";
haxe_ui_containers_VBox.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_VBox.prototype = $extend(haxe_ui_containers_Box.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_VBox();
	}
	,__class__: haxe_ui_containers_VBox
});
var MainView = function() {
	var _gthis = this;
	haxe_ui_containers_VBox.call(this);
	var c0 = new haxe_ui_containers_menus_MenuBar();
	c0.set_id("mainMenu");
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_containers_menus_Menu();
	c1.set_text("Project");
	var c2 = new haxe_ui_containers_menus_MenuItem();
	c2.set_id("projectCompileAndInject");
	c2.set_text("Compile & Inject");
	c2.set_icon("icons/settings.png");
	c1.addComponent(c2);
	var c3 = new haxe_ui_containers_menus_MenuItem();
	c3.set_id("projectCompileAndRestart");
	c3.set_text("Compile & Restart");
	c3.set_icon("icons/refresh.png");
	c1.addComponent(c3);
	var c4 = new haxe_ui_containers_menus_MenuSeparator();
	c1.addComponent(c4);
	var c5 = new haxe_ui_containers_menus_MenuItem();
	c5.set_id("projectSave");
	c5.set_text("Save");
	c5.set_icon("icons/save-all.png");
	c1.addComponent(c5);
	var c6 = new haxe_ui_containers_menus_MenuSeparator();
	c1.addComponent(c6);
	var c7 = new haxe_ui_containers_menus_MenuItem();
	c7.set_id("projectImport");
	c7.set_text("Import Project");
	c7.set_icon("icons/upload.png");
	c1.addComponent(c7);
	var c8 = new haxe_ui_containers_menus_MenuItem();
	c8.set_id("projectDownload");
	c8.set_text("Download Project");
	c8.set_icon("icons/download.png");
	c1.addComponent(c8);
	c0.addComponent(c1);
	var c9 = new haxe_ui_containers_menus_Menu();
	c9.set_text("Resources");
	var c10 = new haxe_ui_containers_menus_MenuItem();
	c10.set_id("resourcesAddSource");
	c10.set_text("Add Source...");
	c10.set_icon("icons/document.png");
	c9.addComponent(c10);
	var c11 = new haxe_ui_containers_menus_MenuItem();
	c11.set_id("resourcesAddShader");
	c11.set_text("Add Shader...");
	c11.set_icon("icons/puzzle.png");
	c9.addComponent(c11);
	var c12 = new haxe_ui_containers_menus_MenuItem();
	c12.set_id("resourcesAddAsset");
	c12.set_text("Add Asset...");
	c12.set_icon("icons/picture.png");
	c9.addComponent(c12);
	var c13 = new haxe_ui_containers_menus_MenuSeparator();
	c9.addComponent(c13);
	var c14 = new haxe_ui_containers_menus_MenuItem();
	c14.set_id("resourcesSaveActive");
	c14.set_text("Save Active");
	c14.set_icon("icons/save.png");
	c9.addComponent(c14);
	var c15 = new haxe_ui_containers_menus_MenuItem();
	c15.set_id("resourcesSaveAll");
	c15.set_text("Save All");
	c15.set_icon("icons/save-all.png");
	c9.addComponent(c15);
	c0.addComponent(c9);
	var c16 = new haxe_ui_containers_menus_Menu();
	c16.set_text("Help");
	var c17 = new haxe_ui_containers_menus_MenuItem();
	c17.set_id("helpAbout");
	c17.set_text("About...");
	c17.set_icon("icons/help.png");
	c16.addComponent(c17);
	c0.addComponent(c16);
	var c18 = new haxe_ui_components_Spacer();
	c18.set_percentWidth(100.);
	c0.addComponent(c18);
	var c19 = new haxe_ui_components_Button();
	c19.set_id("compileAndInjectButton");
	c19.set_text("Compile & Inject");
	c19.set_icon(haxe_ui_util_Variant.fromString("icons/settings.png"));
	c0.addComponent(c19);
	var c20 = new haxe_ui_components_Button();
	c20.set_id("compileAndRestartButton");
	c20.set_text("Compile & Restart");
	c20.set_icon(haxe_ui_util_Variant.fromString("icons/refresh.png"));
	c0.addComponent(c20);
	this.addComponent(c0);
	var c21 = new haxe_ui_containers_HorizontalSplitter();
	c21.set_percentWidth(100.);
	c21.set_percentHeight(100.);
	c21.set_styleString("padding: 10px;spacing: 5px;");
	var c22 = new haxe_ui_containers_VerticalSplitter();
	c22.set_percentWidth(42.);
	c22.set_percentHeight(100.);
	c22.set_styleString("spacing: 5px;");
	var c23 = new panels_Khanvas();
	c23.set_id("khanvasPanel");
	c23.set_percentWidth(100.);
	c23.set_percentHeight(70.);
	c23.set_styleString("background-color: #3a3a3a;border: 1px solid #484848;border-radius: 3px;");
	c22.addComponent(c23);
	var c24 = new panels_LogManager();
	c24.set_id("logManager");
	c24.set_percentWidth(100.);
	c24.set_percentHeight(30.);
	c24.set_styleString("background-color: #3a3a3a;border: 1px solid #484848;border-radius: 3px;");
	c22.addComponent(c24);
	c21.addComponent(c22);
	var c25 = new haxe_ui_containers_VBox();
	c25.set_percentWidth(42.);
	c25.set_percentHeight(100.);
	var c26 = new haxe_ui_containers_Box();
	c26.set_percentWidth(100.);
	c26.set_percentHeight(100.);
	var c27 = new panels_TabManager();
	c27.set_id("tabManager");
	c27.set_percentWidth(100.);
	c27.set_percentHeight(100.);
	c26.addComponent(c27);
	c25.addComponent(c26);
	c21.addComponent(c25);
	var c28 = new haxe_ui_containers_VBox();
	c28.set_percentWidth(16.);
	c28.set_percentHeight(100.);
	var c29 = new panels_ProjectManager();
	c29.set_id("projectManager");
	c29.set_percentWidth(100.);
	c29.set_percentHeight(100.);
	c28.addComponent(c29);
	c21.addComponent(c28);
	this.addComponent(c21);
	this.set_percentWidth(100.);
	this.set_percentHeight(100.);
	this.set_styleString("background-color: #242424;spacing: 10px;");
	this.bindingRoot = true;
	this.tabManager = c27;
	this.resourcesSaveAll = c15;
	this.resourcesSaveActive = c14;
	this.resourcesAddSource = c10;
	this.resourcesAddShader = c11;
	this.resourcesAddAsset = c12;
	this.projectSave = c5;
	this.projectManager = c29;
	this.projectImport = c7;
	this.projectDownload = c8;
	this.projectCompileAndRestart = c3;
	this.projectCompileAndInject = c2;
	this.mainMenu = c0;
	this.logManager = c24;
	this.khanvasPanel = c23;
	this.helpAbout = c17;
	this.compileAndRestartButton = c20;
	this.compileAndInjectButton = c19;
	var c = this.mainMenu;
	if(c != null) {
		c.registerEvent("menuselected",$bind(this,this.onMainMenu));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "mainMenu" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "MainView", methodName : "new"});
	}
	var c = this.compileAndInjectButton;
	if(c != null) {
		c.registerEvent("click",$bind(this,this.onCompileAndInject));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "compileAndInjectButton" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "MainView", methodName : "new"});
	}
	var c = this.compileAndRestartButton;
	if(c != null) {
		c.registerEvent("click",$bind(this,this.onCompileAndRestart));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "compileAndRestartButton" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "MainView", methodName : "new"});
	}
	MainView.instance = this;
	project_Project.get_instance().registerListener(this.projectManager);
	project_Project.get_instance().registerListener(this.tabManager);
	Server.log = ($_=this.logManager,$bind($_,$_.logMessage));
	var sha = "f15101ea8cc3c1ad81450f0ca02210e34dae5132";
	if(window.location.hash.length > 1) {
		sha = HxOverrides.substr(window.location.hash,1,null);
	}
	window.onhashchange = function() {
		var newSha = HxOverrides.substr(window.location.hash,1,null);
		if(newSha != project_Project.get_instance().sha) {
			window.location.reload();
		}
	};
	window.addEventListener("keydown",function(e) {
		var key = null;
		var possible = [e.key,e.keyIdentifier,e.keyCode,e.which];
		while(key == null && possible.length > 0) key = possible.pop();
		if(key != null && (key == "115" || key == "83") && (e.ctrlKey || e.metaKey) && !e.altKey) {
			e.preventDefault();
			project_Project.get_instance().saveAll();
			return false;
		}
		return true;
	});
	var scriptElement = window.document.createElement("script");
	scriptElement.onload = function(e) {
		haxe_Log.trace("kha.js loaded",{ fileName : "src/MainView.hx", lineNumber : 61, className : "MainView", methodName : "new"});
		WorkerKha.instance.load("/projects/" + sha + "/khaworker.js");
		project_Project.get_instance().refresh(sha,function() {
		});
		_gthis.logManager.logMessage("KodeGarden ready");
	};
	scriptElement.src = "kha.js";
	window.document.body.appendChild(scriptElement);
};
$hxClasses["MainView"] = MainView;
MainView.__name__ = "MainView";
MainView.__super__ = haxe_ui_containers_VBox;
MainView.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	onCompileAndRestart: function(e) {
		project_Project.get_instance().build();
	}
	,onCompileAndInject: function(e) {
		project_Project.get_instance().inject();
	}
	,onMainMenu: function(e) {
		switch(e.menuItem.get_id()) {
		case "helpAbout":
			var aboutDialog = new dialogs_AboutDialog();
			aboutDialog.show();
			break;
		case "helpExamples":
			var examplesDialog = new dialogs_ExamplesDialog();
			examplesDialog.show();
			break;
		case "projectCompileAndInject":
			project_Project.get_instance().inject();
			break;
		case "projectCompileAndRestart":
			project_Project.get_instance().build();
			break;
		case "projectDownload":
			project_Project.get_instance().download();
			break;
		case "projectImport":
			this.startProjectImport();
			break;
		case "projectSave":case "resourcesSaveAll":
			project_Project.get_instance().saveAll();
			break;
		case "resourcesAddAsset":
			this.startAddResource("asset");
			break;
		case "resourcesAddShader":
			this.startAddResource("shader");
			break;
		case "resourcesAddSource":
			this.startAddResource("source");
			break;
		case "resourcesSaveActive":
			project_Project.get_instance().save(panels_TabManager.instance.get_activeEditor().get_resource());
			break;
		}
	}
	,startProjectImport: function() {
		var importDialog = new dialogs_ImportDialog();
		importDialog.set_onDialogClosed(function(e) {
			var larr = haxe_ui_containers_dialogs_DialogButton.toString(e.button).split("|");
			if(larr.indexOf(haxe_ui_containers_dialogs_DialogButton.toString("Import")) != -1) {
				var importProgressDialog = new dialogs_ImportProgressDialog();
				importProgressDialog.projectZippedBytes = importDialog.projectZippedBytes;
				importProgressDialog.show();
			}
		});
		importDialog.show();
	}
	,startAddResource: function(type,contextPath) {
		if(contextPath == null) {
			contextPath = "";
		}
		var addResourceDialog = new dialogs_AddResourceDialog();
		addResourceDialog.set_type(type);
		addResourceDialog.set_contextPath(contextPath);
		addResourceDialog.set_onDialogClosed(function(e) {
			var larr = haxe_ui_containers_dialogs_DialogButton.toString(e.button).split("|");
			if(larr.indexOf(haxe_ui_containers_dialogs_DialogButton.toString("Confirm")) != -1) {
				project_Project.get_instance().add(addResourceDialog.addResourceParams);
			}
		});
		addResourceDialog.show();
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new MainView();
	}
	,tabManager: null
	,resourcesSaveAll: null
	,resourcesSaveActive: null
	,resourcesAddSource: null
	,resourcesAddShader: null
	,resourcesAddAsset: null
	,projectSave: null
	,projectManager: null
	,projectImport: null
	,projectDownload: null
	,projectCompileAndRestart: null
	,projectCompileAndInject: null
	,mainMenu: null
	,logManager: null
	,khanvasPanel: null
	,helpAbout: null
	,compileAndRestartButton: null
	,compileAndInjectButton: null
	,__class__: MainView
});
Math.__name__ = "Math";
var Navigation = function() {
	EventDispatcher.get_instance().registerListener(this);
};
$hxClasses["Navigation"] = Navigation;
Navigation.__name__ = "Navigation";
Navigation.__interfaces__ = [IListener];
Navigation.__properties__ = {get_instance:"get_instance"};
Navigation.get_instance = function() {
	if(Navigation._instance == null) {
		Navigation._instance = new Navigation();
	}
	return Navigation._instance;
};
Navigation.prototype = {
	selectedResource: null
	,onEvent: function(event,data) {
		if(event == 0) {
			this.selectedResource = data;
			var tmp = this.selectedResource.get_fullName();
			window.document.cookie = "lastFile=" + tmp;
		}
	}
	,__class__: Navigation
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Server = function() { };
$hxClasses["Server"] = Server;
Server.__name__ = "Server";
Server.start = function() {
	return tink_core_Future.async(function(cb) {
		if(Server._connected == true) {
			cb(true);
			return;
		}
		Server._socket = io();
		Server._socket.on("connect",function(e) {
			Server._connected = true;
			cb(true);
		});
		Server._socket.on("callback",function(msg) {
			if(msg.callid) {
				Server._calls.h[Std.parseInt("" + (msg.callid == null ? "null" : "" + msg.callid))](msg.ret);
				Server._calls.remove(Std.parseInt("" + (msg.callid == null ? "null" : "" + msg.callid)));
			}
		});
		Server._socket.on("compilation-message",function(msg) {
			Server.log(msg.message,false);
		});
		Server._socket.on("compilation-error",function(msg) {
			haxe_Log.trace(msg,{ fileName : "src/Server.hx", lineNumber : 56, className : "Server", methodName : "start"});
			Server.log(msg.message,true);
		});
	});
};
Server.call = function(id,func,args) {
	return tink_core_Future.async(function(cb) {
		args.callid = ++Server._lastId;
		args.func = func;
		args.id = id;
		Server.start().handle(function(b) {
			Server._calls.h[Server._lastId] = cb;
			Server._socket.emit("project",args);
		});
	});
};
Server.sources = function(id) {
	return Server.call(id,"sources",{ });
};
Server.source = function(id,file) {
	return Server.call(id,"source",{ file : file});
};
Server.setSource = function(id,file,content) {
	return Server.call(id,"setSource",{ file : file, content : content});
};
Server.addSource = function(id,file) {
	return Server.call(id,"addSource",{ file : file});
};
Server.shaders = function(id) {
	return Server.call(id,"shaders",{ });
};
Server.shader = function(id,file) {
	return Server.call(id,"shader",{ file : file});
};
Server.setShader = function(id,file,content) {
	return Server.call(id,"setShader",{ file : file, content : content});
};
Server.addShader = function(id,file) {
	return Server.call(id,"addShader",{ file : file});
};
Server.assets = function(id) {
	return Server.call(id,"assets",{ });
};
Server.asset = function(id,file) {
	return Server.call(id,"asset",{ file : file});
};
Server.download = function(id) {
	return Server.call(id,"download",{ });
};
Server.compile = function(id) {
	return Server.call(id,"compile",{ });
};
Server.addAsset = function(id,filename,buffer) {
	return tink_core_Future.async(function(cb) {
		var callid = ++Server._lastId;
		Server.start().handle(function(b) {
			Server._calls.h[Server._lastId] = cb;
			Server._socket.emit("uploadAsset",{ callid : callid, id : id, filename : filename, buffer : buffer});
		});
	});
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var custom_Canvas = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["custom.Canvas"] = custom_Canvas;
custom_Canvas.__name__ = "custom.Canvas";
custom_Canvas.__super__ = haxe_ui_core_Component;
custom_Canvas.prototype = $extend(haxe_ui_core_Component.prototype,{
	_el: null
	,fullscreen: function() {
		if(Reflect.getProperty(this._el,"webkitRequestFullScreen") != null) {
			var o = this._el;
			Reflect.getProperty(this._el,"webkitRequestFullScreen").apply(o,[]);
		} else if(Reflect.getProperty(this._el,"mozRequestFullScreen") != null) {
			var o = this._el;
			Reflect.getProperty(this._el,"mozRequestFullScreen").apply(o,[]);
		}
	}
	,onReady: function() {
		haxe_ui_core_Component.prototype.onReady.call(this);
		this._el = window.document.createElement("canvas");
		this._el.style.outline = "none";
		this._el.id = "khanvas";
		this.element.appendChild(this._el);
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout");
		}
	}
	,validateComponentLayout: function() {
		var b = haxe_ui_core_Component.prototype.validateComponentLayout.call(this);
		if(this._el != null && this.get_width() > 0 && this.get_height() > 0) {
			var tmp = "" + this.get_width();
			this._el.style.width = tmp + "px";
			var tmp = "" + this.get_height();
			this._el.style.height = tmp + "px";
		}
		return b;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new custom_Canvas();
	}
	,__class__: custom_Canvas
});
var haxe_ui_containers_HBox = function() {
	haxe_ui_containers_Box.call(this);
	this.set_layout(new haxe_ui_layouts_HorizontalLayout());
};
$hxClasses["haxe.ui.containers.HBox"] = haxe_ui_containers_HBox;
haxe_ui_containers_HBox.__name__ = "haxe.ui.containers.HBox";
haxe_ui_containers_HBox.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_HBox.prototype = $extend(haxe_ui_containers_Box.prototype,{
	get_continuous: function() {
		return ((this._layout) instanceof haxe_ui_layouts_HorizontalContinuousLayout);
	}
	,set_continuous: function(value) {
		if(value == true) {
			this.set_layout(new haxe_ui_layouts_HorizontalContinuousLayout());
		} else {
			this.set_layout(new haxe_ui_layouts_HorizontalLayout());
		}
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		c.set_continuous(this.get_continuous());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_HBox();
	}
	,__class__: haxe_ui_containers_HBox
	,__properties__: $extend(haxe_ui_containers_Box.prototype.__properties__,{set_continuous:"set_continuous",get_continuous:"get_continuous"})
});
var custom_FileSelector = function() {
	var _gthis = this;
	haxe_ui_containers_HBox.call(this);
	var textfield = new haxe_ui_components_TextField();
	textfield.set_percentWidth(100);
	this.addComponent(textfield);
	var button = new haxe_ui_components_Button();
	button.set_text("Select");
	this.addComponent(button);
	button.set_onClick(function(e) {
		_gthis._fileInput.click();
	});
};
$hxClasses["custom.FileSelector"] = custom_FileSelector;
custom_FileSelector.__name__ = "custom.FileSelector";
custom_FileSelector.__super__ = haxe_ui_containers_HBox;
custom_FileSelector.prototype = $extend(haxe_ui_containers_HBox.prototype,{
	_fileInput: null
	,onReady: function() {
		var _gthis = this;
		haxe_ui_containers_HBox.prototype.onReady.call(this);
		this._fileInput = window.document.createElement("input");
		this._fileInput.type = "file";
		this._fileInput.style.display = "none";
		this.element.appendChild(this._fileInput);
		this._fileInput.onchange = function(e) {
			_gthis.findComponent(null,haxe_ui_components_TextField).set_text(_gthis._fileInput.files[0].name);
			_gthis.dispatch(new haxe_ui_events_UIEvent("change"));
		};
	}
	,get_text: function() {
		return this.findComponent(null,haxe_ui_components_TextField).get_text();
	}
	,file: null
	,get_file: function() {
		return this._fileInput.files[0];
	}
	,registerBehaviours: function() {
		haxe_ui_containers_HBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_HBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new custom_FileSelector();
	}
	,__class__: custom_FileSelector
	,__properties__: $extend(haxe_ui_containers_HBox.prototype.__properties__,{get_file:"get_file"})
});
var custom_IFrame = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["custom.IFrame"] = custom_IFrame;
custom_IFrame.__name__ = "custom.IFrame";
custom_IFrame.__super__ = haxe_ui_core_Component;
custom_IFrame.prototype = $extend(haxe_ui_core_Component.prototype,{
	_iframe: null
	,onReady: function() {
		haxe_ui_core_Component.prototype.onReady.call(this);
		this._iframe = window.document.createElement("iframe");
		this._iframe.frameBorder = "none";
		this.element.appendChild(this._iframe);
		this.invalidateComponent();
	}
	,validateComponentLayout: function() {
		var r = haxe_ui_core_Component.prototype.validateComponentLayout.call(this);
		if(this._iframe != null && this.get_width() > 0 && this.get_height() > 0) {
			var tmp = this.get_width();
			this._iframe.style.width = tmp + "px";
			var tmp = this.get_height();
			this._iframe.style.height = tmp + "px";
		}
		return r;
	}
	,iframeElement: null
	,get_iframeElement: function() {
		return this._iframe;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new custom_IFrame();
	}
	,__class__: custom_IFrame
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{get_iframeElement:"get_iframeElement"})
});
var haxe_ui_backend_EventBase = function() { };
$hxClasses["haxe.ui.backend.EventBase"] = haxe_ui_backend_EventBase;
haxe_ui_backend_EventBase.__name__ = "haxe.ui.backend.EventBase";
haxe_ui_backend_EventBase.prototype = {
	cancel: function() {
	}
	,postClone: function(event) {
	}
	,__class__: haxe_ui_backend_EventBase
};
var haxe_ui_backend_EventImpl = function() { };
$hxClasses["haxe.ui.backend.EventImpl"] = haxe_ui_backend_EventImpl;
haxe_ui_backend_EventImpl.__name__ = "haxe.ui.backend.EventImpl";
haxe_ui_backend_EventImpl.__super__ = haxe_ui_backend_EventBase;
haxe_ui_backend_EventImpl.prototype = $extend(haxe_ui_backend_EventBase.prototype,{
	_originalEvent: null
	,cancel: function() {
		if(this._originalEvent != null) {
			this._originalEvent.preventDefault();
			this._originalEvent.stopImmediatePropagation();
			this._originalEvent.stopPropagation();
		}
	}
	,postClone: function(event) {
		event._originalEvent = this._originalEvent;
	}
	,__class__: haxe_ui_backend_EventImpl
});
var haxe_ui_events_UIEvent = function(type,bubble,data) {
	if(bubble == null) {
		bubble = false;
	}
	this.type = type;
	this.bubble = bubble;
	this.data = data;
	this.canceled = false;
};
$hxClasses["haxe.ui.events.UIEvent"] = haxe_ui_events_UIEvent;
haxe_ui_events_UIEvent.__name__ = "haxe.ui.events.UIEvent";
haxe_ui_events_UIEvent.__super__ = haxe_ui_backend_EventImpl;
haxe_ui_events_UIEvent.prototype = $extend(haxe_ui_backend_EventImpl.prototype,{
	bubble: null
	,type: null
	,target: null
	,data: null
	,canceled: null
	,cancel: function() {
		haxe_ui_backend_EventImpl.prototype.cancel.call(this);
		this.canceled = true;
	}
	,clone: function() {
		var c = new haxe_ui_events_UIEvent(this.type);
		c.type = this.type;
		c.bubble = this.bubble;
		c.target = this.target;
		c.data = this.data;
		c.canceled = this.canceled;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_events_UIEvent
});
var custom_TreeViewEvent = function(type,bubble,data) {
	haxe_ui_events_UIEvent.call(this,type,bubble,data);
};
$hxClasses["custom.TreeViewEvent"] = custom_TreeViewEvent;
custom_TreeViewEvent.__name__ = "custom.TreeViewEvent";
custom_TreeViewEvent.__super__ = haxe_ui_events_UIEvent;
custom_TreeViewEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	get_node: function() {
		return js_Boot.__cast(this.data , custom_TreeViewNode);
	}
	,set_node: function(value) {
		this.data = value;
		return value;
	}
	,screenX: null
	,screenY: null
	,clone: function() {
		var c = new custom_TreeViewEvent(this.type);
		c.type = this.type;
		c.bubble = this.bubble;
		c.target = this.target;
		c.data = this.data;
		c.canceled = this.canceled;
		c.screenX = this.screenX;
		c.screenY = this.screenY;
		this.postClone(c);
		return c;
	}
	,__class__: custom_TreeViewEvent
	,__properties__: {set_node:"set_node",get_node:"get_node"}
});
var haxe_ui_containers_ScrollView = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.containers.ScrollView"] = haxe_ui_containers_ScrollView;
haxe_ui_containers_ScrollView.__name__ = "haxe.ui.containers.ScrollView";
haxe_ui_containers_ScrollView.__super__ = haxe_ui_core_Component;
haxe_ui_containers_ScrollView.prototype = $extend(haxe_ui_core_Component.prototype,{
	validateComponentInternal: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		if(this.get_native() == true) {
			haxe_ui_core_Component.prototype.validateComponentInternal.call(this,nextFrame);
			return;
		}
		var scrollInvalid = this.isComponentInvalid("scroll");
		var layoutInvalid = this.isComponentInvalid("layout");
		haxe_ui_core_Component.prototype.validateComponentInternal.call(this,nextFrame);
		if(scrollInvalid || layoutInvalid) {
			(js_Boot.__cast(this._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).checkScrolls();
			(js_Boot.__cast(this._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).updateScrollRect();
		}
	}
	,ensureVisible: function(component) {
		return;
	}
	,registerComposite: function() {
		haxe_ui_core_Component.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers_ScrollViewEvents;
		this._compositeBuilderClass = haxe_ui_containers_ScrollViewBuilder;
		this._defaultLayoutClass = haxe_ui_layouts_ScrollViewLayout;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("virtual",haxe_ui_containers__$ScrollView_Virtual);
		this.behaviours.register("contentLayoutName",haxe_ui_containers__$ScrollView_ContentLayoutName,haxe_ui_util_Variant.fromString("vertical"));
		this.behaviours.register("contentWidth",haxe_ui_containers__$ScrollView_ContentWidth);
		this.behaviours.register("percentContentWidth",haxe_ui_containers__$ScrollView_PercentContentWidth);
		this.behaviours.register("contentHeight",haxe_ui_containers__$ScrollView_ContentHeight);
		this.behaviours.register("percentContentHeight",haxe_ui_containers__$ScrollView_PercentContentHeight);
		this.behaviours.register("hscrollPos",haxe_ui_containers__$ScrollView_HScrollPos);
		this.behaviours.register("hscrollMax",haxe_ui_containers__$ScrollView_HScrollMax);
		this.behaviours.register("hscrollPageSize",haxe_ui_containers__$ScrollView_HScrollPageSize);
		this.behaviours.register("vscrollPos",haxe_ui_containers__$ScrollView_VScrollPos);
		this.behaviours.register("vscrollMax",haxe_ui_containers__$ScrollView_VScrollMax);
		this.behaviours.register("vscrollPageSize",haxe_ui_containers__$ScrollView_VScrollPageSize);
		this.behaviours.register("scrollMode",haxe_ui_containers__$ScrollView_ScrollModeBehaviour,haxe_ui_util_Variant.fromString("drag"));
	}
	,get_virtual: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("virtual"));
	}
	,set_virtual: function(value) {
		this.behaviours.set("virtual",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"virtual");
		return value;
	}
	,get_contentLayoutName: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("contentLayoutName"));
	}
	,set_contentLayoutName: function(value) {
		this.behaviours.set("contentLayoutName",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"contentLayoutName");
		return value;
	}
	,get_contentWidth: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("contentWidth"));
	}
	,set_contentWidth: function(value) {
		this.behaviours.set("contentWidth",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"contentWidth");
		return value;
	}
	,get_percentContentWidth: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("percentContentWidth"));
	}
	,set_percentContentWidth: function(value) {
		this.behaviours.set("percentContentWidth",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"percentContentWidth");
		return value;
	}
	,get_contentHeight: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("contentHeight"));
	}
	,set_contentHeight: function(value) {
		this.behaviours.set("contentHeight",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"contentHeight");
		return value;
	}
	,get_percentContentHeight: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("percentContentHeight"));
	}
	,set_percentContentHeight: function(value) {
		this.behaviours.set("percentContentHeight",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"percentContentHeight");
		return value;
	}
	,get_hscrollPos: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("hscrollPos"));
	}
	,set_hscrollPos: function(value) {
		this.behaviours.set("hscrollPos",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"hscrollPos");
		return value;
	}
	,get_hscrollMax: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("hscrollMax"));
	}
	,set_hscrollMax: function(value) {
		this.behaviours.set("hscrollMax",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"hscrollMax");
		return value;
	}
	,get_hscrollPageSize: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("hscrollPageSize"));
	}
	,set_hscrollPageSize: function(value) {
		this.behaviours.set("hscrollPageSize",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"hscrollPageSize");
		return value;
	}
	,get_vscrollPos: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("vscrollPos"));
	}
	,set_vscrollPos: function(value) {
		this.behaviours.set("vscrollPos",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"vscrollPos");
		return value;
	}
	,get_vscrollMax: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("vscrollMax"));
	}
	,set_vscrollMax: function(value) {
		this.behaviours.set("vscrollMax",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"vscrollMax");
		return value;
	}
	,get_vscrollPageSize: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("vscrollPageSize"));
	}
	,set_vscrollPageSize: function(value) {
		this.behaviours.set("vscrollPageSize",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"vscrollPageSize");
		return value;
	}
	,get_scrollMode: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("scrollMode"));
	}
	,set_scrollMode: function(value) {
		this.behaviours.set("scrollMode",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"scrollMode");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_ScrollView();
	}
	,__class__: haxe_ui_containers_ScrollView
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_scrollMode:"set_scrollMode",get_scrollMode:"get_scrollMode",set_vscrollPageSize:"set_vscrollPageSize",get_vscrollPageSize:"get_vscrollPageSize",set_vscrollMax:"set_vscrollMax",get_vscrollMax:"get_vscrollMax",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",set_hscrollPageSize:"set_hscrollPageSize",get_hscrollPageSize:"get_hscrollPageSize",set_hscrollMax:"set_hscrollMax",get_hscrollMax:"get_hscrollMax",set_hscrollPos:"set_hscrollPos",get_hscrollPos:"get_hscrollPos",set_percentContentHeight:"set_percentContentHeight",get_percentContentHeight:"get_percentContentHeight",set_contentHeight:"set_contentHeight",get_contentHeight:"get_contentHeight",set_percentContentWidth:"set_percentContentWidth",get_percentContentWidth:"get_percentContentWidth",set_contentWidth:"set_contentWidth",get_contentWidth:"get_contentWidth",set_contentLayoutName:"set_contentLayoutName",get_contentLayoutName:"get_contentLayoutName",set_virtual:"set_virtual",get_virtual:"get_virtual"})
});
var custom_TreeView = function() {
	this._selectedNode = null;
	haxe_ui_containers_ScrollView.call(this);
	this.set_styleString("padding: 1px;__border: 1px solid #ABABAB;border-radius: 1px;");
};
$hxClasses["custom.TreeView"] = custom_TreeView;
custom_TreeView.__name__ = "custom.TreeView";
custom_TreeView.__super__ = haxe_ui_containers_ScrollView;
custom_TreeView.prototype = $extend(haxe_ui_containers_ScrollView.prototype,{
	addNode: function(text,icon,isExpandable) {
		if(isExpandable == null) {
			isExpandable = false;
		}
		var node = new custom_TreeViewNode(this);
		node.set_text(text);
		node.set_icon(icon);
		node.set_expandable(isExpandable);
		this.addComponent(node);
		return node;
	}
	,_selectedNode: null
	,get_selectedNode: function() {
		return this._selectedNode;
	}
	,set_selectedNode: function(value) {
		if(this._selectedNode == value) {
			return value;
		}
		if(this._selectedNode != null) {
			this._selectedNode.ui.removeClass(":selected");
			this._selectedNode.findComponent(null,haxe_ui_components_Label,true).removeClass(":selected");
		}
		this._selectedNode = value;
		this._selectedNode.ui.addClass(":selected");
		this._selectedNode.findComponent(null,haxe_ui_components_Label,true).addClass(":selected");
		var event = new custom_TreeViewEvent("nodeSelected",null,this._selectedNode);
		this.dispatch(event);
		return value;
	}
	,get_softSelectedNode: function() {
		return this._selectedNode;
	}
	,set_softSelectedNode: function(value) {
		if(this._selectedNode == value) {
			return value;
		}
		if(this._selectedNode != null) {
			this._selectedNode.ui.removeClass(":selected");
			this._selectedNode.findComponent(null,haxe_ui_components_Label,true).removeClass(":selected");
		}
		this._selectedNode = value;
		this._selectedNode.ui.addClass(":selected");
		this._selectedNode.findComponent(null,haxe_ui_components_Label,true).addClass(":selected");
		return value;
	}
	,rootNode: null
	,get_rootNode: function() {
		var node = this.findComponent("scrollview-contents",haxe_ui_core_Component,false,"css").findComponent(null,custom_TreeViewNode);
		return node;
	}
	,findNodeByPath: function(path) {
		if(path == null) {
			return null;
		}
		if(this.get_rootNode() == null) {
			return null;
		}
		if(path == "/") {
			return this.get_rootNode();
		}
		return this.get_rootNode().findNodeByPath(path);
	}
	,registerBehaviours: function() {
		haxe_ui_containers_ScrollView.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_ScrollView.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new custom_TreeView();
	}
	,__class__: custom_TreeView
	,__properties__: $extend(haxe_ui_containers_ScrollView.prototype.__properties__,{get_rootNode:"get_rootNode",set_softSelectedNode:"set_softSelectedNode",get_softSelectedNode:"get_softSelectedNode",set_selectedNode:"set_selectedNode",get_selectedNode:"get_selectedNode"})
});
var custom_TreeViewNode = function(tree) {
	this._expandable = false;
	this._expanded = false;
	var _gthis = this;
	haxe_ui_containers_VBox.call(this);
	this._tree = tree;
	this.set_styleString("spacing: 2");
	this._hbox = new haxe_ui_containers_HBox();
	this._hbox.set_styleString("spacing: 0");
	this._nodeExpander = new haxe_ui_components_Image();
	this._nodeExpander.set_resource(haxe_ui_util_Variant.fromString(custom_TreeView.BLANK_ICON));
	this._nodeExpander.set_styleString("vertical-align: center;cursor:pointer;");
	this._nodeExpander.set_onClick(function(e) {
		if(_gthis._expanded == false) {
			_gthis.expand();
		} else {
			_gthis.collapse();
		}
	});
	this._hbox.addComponent(this._nodeExpander);
	var hbox = new haxe_ui_containers_HBox();
	hbox.set_id("node");
	this.ui = hbox;
	hbox.set_styleString("spacing: 4;cursor:pointer;");
	this._nodeIcon = new haxe_ui_components_Image();
	hbox.addComponent(this._nodeIcon);
	var spacer = new haxe_ui_components_Spacer();
	spacer.set_width(5);
	this._label = new haxe_ui_components_Label();
	this._label.set_verticalAlign("center");
	hbox.addComponent(this._label);
	hbox.registerEvent("mouseover",function(e) {
		hbox.addClass(":hover");
	});
	hbox.registerEvent("mouseout",function(e) {
		hbox.removeClass(":hover");
	});
	hbox.registerEvent("click",function(e) {
		_gthis._tree.set_selectedNode(_gthis);
	});
	hbox.registerEvent("rightclick",function(e) {
		_gthis._tree.set_softSelectedNode(_gthis);
		var event = new custom_TreeViewEvent("nodeRightClick",null,_gthis);
		event.screenX = e.screenX;
		event.screenY = e.screenY;
		_gthis._tree.dispatch(event);
	});
	hbox.registerEvent("doubleclick",function(e) {
		if(_gthis._expanded == false) {
			_gthis.expand();
		} else {
			_gthis.collapse();
		}
	});
	this._hbox.addComponent(hbox);
	this.addComponent(this._hbox);
};
$hxClasses["custom.TreeViewNode"] = custom_TreeViewNode;
custom_TreeViewNode.__name__ = "custom.TreeViewNode";
custom_TreeViewNode.__super__ = haxe_ui_containers_VBox;
custom_TreeViewNode.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	_hbox: null
	,_label: null
	,_nodeExpander: null
	,_nodeIcon: null
	,_expanded: null
	,_tree: null
	,ui: null
	,findNodeByPath: function(path) {
		if(path == null) {
			return null;
		}
		var node = null;
		path = haxe_io_Path.normalize(path);
		var temp = path.split("/");
		var parts = [];
		var _g = 0;
		while(_g < temp.length) {
			var t = temp[_g];
			++_g;
			t = StringTools.trim(t);
			if(t.length == 0) {
				continue;
			}
			parts.push(t);
		}
		if(parts.length > 0) {
			var p = parts.shift();
			var nodes = this.findComponents(null,custom_TreeViewNode);
			var foundNode = null;
			var _g = 0;
			while(_g < nodes.length) {
				var n = nodes[_g];
				++_g;
				if(n.get_text() == p) {
					foundNode = n;
					break;
				}
			}
			if(foundNode != null) {
				if(parts.length > 0) {
					node = foundNode.findNodeByPath(parts.join("/"));
				} else {
					node = foundNode;
				}
			}
		}
		return node;
	}
	,findNode: function(text) {
		var nodes = this.findComponents(null,custom_TreeViewNode);
		var _g = 0;
		while(_g < nodes.length) {
			var n = nodes[_g];
			++_g;
			if(n.get_text() == text) {
				return n;
			}
		}
		return null;
	}
	,expand: function() {
		if(this._expandable == false) {
			return;
		}
		this._expanded = true;
		this.updateUI();
		var event = new custom_TreeViewEvent("nodeExpanded",null,this);
		this._tree.dispatch(event);
	}
	,expandPath: function() {
		var ref = this;
		while(ref != null) {
			ref.expand();
			ref = ref.parentNode;
		}
	}
	,collapse: function() {
		this._expanded = false;
		this.updateUI();
		var event = new custom_TreeViewEvent("nodeCollapsed",null,this);
		this._tree.dispatch(event);
	}
	,updateUI: function() {
		if(this._expanded == false) {
			this._expandable = true;
			this._nodeExpander.set_resource(haxe_ui_util_Variant.fromString(custom_TreeView.COLLAPSED_ICON));
		} else {
			this._expandable = true;
			this._nodeExpander.set_resource(haxe_ui_util_Variant.fromString(custom_TreeView.EXPANDED_ICON));
		}
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c == this._hbox) {
				continue;
			}
			if(this._expanded == false) {
				c.hide();
			} else {
				c.show();
			}
		}
	}
	,get_text: function() {
		return this._label.get_text();
	}
	,set_text: function(value) {
		haxe_ui_containers_VBox.prototype.set_text.call(this,value);
		this._label.set_text(value);
		return value;
	}
	,set_icon: function(value) {
		haxe_ui_containers_VBox.prototype.set_icon.call(this,value);
		this._nodeIcon.set_resource(haxe_ui_util_Variant.fromString(value));
		return value;
	}
	,_expandable: null
	,get_expandable: function() {
		return this._expandable;
	}
	,set_expandable: function(value) {
		if(value == true) {
			this._nodeExpander.set_resource(haxe_ui_util_Variant.fromString(custom_TreeView.COLLAPSED_ICON));
		} else {
			this._nodeExpander.set_resource(haxe_ui_util_Variant.fromString(custom_TreeView.BLANK_ICON));
		}
		this._expandable = value;
		return value;
	}
	,nodeDepth: null
	,get_nodeDepth: function() {
		var n = 0;
		var ref = this;
		while(ref != null) {
			ref = ref.parentNode;
			++n;
		}
		return n;
	}
	,nodePath: null
	,get_nodePath: function() {
		var array = [];
		var ref = this;
		while(ref != null) {
			array.push(ref.get_text());
			ref = ref.parentNode;
		}
		array.reverse();
		return array.join("/");
	}
	,parentNode: null
	,addNode: function(text,icon,isExpandable,expanded) {
		if(expanded == null) {
			expanded = false;
		}
		if(isExpandable == null) {
			isExpandable = false;
		}
		this._hbox.set_styleString("spacing: 0");
		var node = new custom_TreeViewNode(this._tree);
		node.set_expandable(isExpandable);
		if(expanded == true) {
			node.expand();
		}
		node.parentNode = this;
		node.set_marginLeft(16);
		node.set_text(text);
		node.set_icon(icon);
		var nodes = this.findComponents(null,custom_TreeViewNode);
		nodes.push(node);
		nodes.sort(function(node1,node2) {
			if(node1.get_expandable() == true && node2.get_expandable() == false) {
				return -1;
			} else if(node1.get_expandable() == false && node2.get_expandable() == true) {
				return 1;
			}
			return Reflect.compare(node1.get_text(),node2.get_text());
		});
		var index = nodes.indexOf(node);
		this.addComponentAt(node,index + 1);
		this.updateUI();
		return node;
	}
	,addNodeByPath: function(path,icon,isExpandable) {
		if(isExpandable == null) {
			isExpandable = false;
		}
		if(path == null) {
			return null;
		}
		var node = null;
		path = haxe_io_Path.normalize(path);
		var temp = path.split("/");
		var parts = [];
		var _g = 0;
		while(_g < temp.length) {
			var t = temp[_g];
			++_g;
			t = StringTools.trim(t);
			if(t.length == 0) {
				continue;
			}
			parts.push(t);
		}
		if(parts.length > 0) {
			var ref = this;
			var n = 0;
			var _g = 0;
			while(_g < parts.length) {
				var p = parts[_g];
				++_g;
				var t = ref.findNode(p);
				if(t == null) {
					var ise = isExpandable;
					var ico = icon;
					if(n < parts.length - 1) {
						ico = custom_TreeView.FOLDER_ICON;
						ise = true;
					}
					t = ref.addNode(p,ico,ise);
				}
				ref = t;
				++n;
			}
			node = ref;
		}
		return node;
	}
	,insertNodeAfter: function(text,icon,insertAfter) {
		this._hbox.set_styleString("spacing: 0");
		var index = this.getComponentIndex(insertAfter);
		if(index == -1) {
			return this.addNode(text,icon);
		}
		++index;
		if(index == (this._children == null ? [] : this._children).length) {
			return this.addNode(text,icon);
		}
		var node = new custom_TreeViewNode(this._tree);
		node.parentNode = this;
		node.set_marginLeft(16);
		node.set_text(text);
		node.set_icon(icon);
		this.addComponentAt(node,index);
		this.updateUI();
		return node;
	}
	,clear: function() {
		var nodes = this.findComponents(null,custom_TreeViewNode);
		var _g = 0;
		while(_g < nodes.length) {
			var node = nodes[_g];
			++_g;
			this.removeComponent(node);
		}
	}
	,sort: function() {
		var nodes = this.findComponents(null,custom_TreeViewNode);
		nodes.sort(function(node1,node2) {
			if(node1.get_expandable() == true && node2.get_expandable() == false) {
				return -1;
			} else if(node1.get_expandable() == false && node2.get_expandable() == true) {
				return 1;
			}
			return Reflect.compare(node1.get_text(),node2.get_text());
		});
		var i = 0;
		this.lockLayout();
		var _g = 0;
		while(_g < nodes.length) {
			var n = nodes[_g];
			++_g;
			haxe_Log.trace(n.get_text() + ", " + Std.string(n.get_expandable()),{ fileName : "src/custom/TreeView.hx", lineNumber : 484, className : "custom.TreeViewNode", methodName : "sort"});
			this.setComponentIndex(n,i + 1);
			++i;
		}
		this.unlockLayout();
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,_constructorParam_tree: null
	,self: function() {
		return new custom_TreeViewNode(this._constructorParam_tree);
	}
	,__class__: custom_TreeViewNode
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{get_nodePath:"get_nodePath",get_nodeDepth:"get_nodeDepth",set_expandable:"set_expandable",get_expandable:"get_expandable"})
});
var haxe_ui_backend_DialogBase = function() {
	this._buttonsCreated = false;
	this._dialogParent = null;
	this.button = null;
	this.centerDialog = true;
	this.draggable = false;
	this.buttons = null;
	this.modal = true;
	var _gthis = this;
	haxe_ui_containers_Box.call(this);
	this.dialogContainer = new haxe_ui_containers_VBox();
	this.dialogContainer.set_id("dialog-container");
	this.dialogContainer.set_styleNames("dialog-container");
	this.addComponent(this.dialogContainer);
	this.dialogTitle = new haxe_ui_containers_HBox();
	this.dialogTitle.set_id("dialog-title");
	this.dialogTitle.set_styleNames("dialog-title");
	this.dialogContainer.addComponent(this.dialogTitle);
	this.dialogTitleLabel = new haxe_ui_components_Label();
	this.dialogTitleLabel.set_id("dialog-title-label");
	this.dialogTitleLabel.set_styleNames("dialog-title-label");
	this.dialogTitleLabel.set_text("HaxeUI");
	this.dialogTitle.addComponent(this.dialogTitleLabel);
	this.dialogCloseButton = new haxe_ui_components_Image();
	this.dialogCloseButton.set_id("dialog-close-button");
	this.dialogCloseButton.set_styleNames("dialog-close-button");
	this.dialogTitle.addComponent(this.dialogCloseButton);
	this.dialogContent = new haxe_ui_containers_VBox();
	this.dialogContent.set_id("dialog-content");
	this.dialogContent.set_styleNames("dialog-content");
	this.dialogContainer.addComponent(this.dialogContent);
	this.dialogFooterContainer = new haxe_ui_containers_Box();
	this.dialogFooterContainer.set_percentWidth(100);
	this.dialogFooterContainer.set_id("dialog-footer-container");
	this.dialogFooterContainer.set_styleNames("dialog-footer-container");
	this.dialogContainer.addComponent(this.dialogFooterContainer);
	this.dialogFooter = new haxe_ui_containers_HBox();
	this.dialogFooter.set_id("dialog-footer");
	this.dialogFooter.set_styleNames("dialog-footer");
	this.dialogFooterContainer.addComponent(this.dialogFooter);
	this.dialogFooterContainer.hide();
	this.dialogCloseButton.set_onClick(function(e) {
		_gthis.hideDialog("Cancel");
	});
};
$hxClasses["haxe.ui.backend.DialogBase"] = haxe_ui_backend_DialogBase;
haxe_ui_backend_DialogBase.__name__ = "haxe.ui.backend.DialogBase";
haxe_ui_backend_DialogBase.__super__ = haxe_ui_containers_Box;
haxe_ui_backend_DialogBase.prototype = $extend(haxe_ui_containers_Box.prototype,{
	modal: null
	,buttons: null
	,draggable: null
	,centerDialog: null
	,button: null
	,_overlay: null
	,dialogContainer: null
	,dialogTitle: null
	,dialogTitleLabel: null
	,dialogCloseButton: null
	,dialogContent: null
	,dialogFooterContainer: null
	,dialogFooter: null
	,_dialogParent: null
	,get_dialogParent: function() {
		return this._dialogParent;
	}
	,set_dialogParent: function(value) {
		this._dialogParent = value;
		return value;
	}
	,showDialog: function(modal) {
		if(modal == null) {
			modal = true;
		}
		this.modal = modal;
		this.show();
	}
	,show: function() {
		var dp = this.get_dialogParent();
		if(this.modal) {
			this._overlay = new haxe_ui_core_Component();
			this._overlay.set_id("modal-background");
			this._overlay.addClass("modal-background");
			this._overlay.set_percentWidth(this._overlay.set_percentHeight(100));
			if(dp != null) {
				dp.addComponent(this._overlay);
			} else {
				haxe_ui_core_Screen.get_instance().addComponent(this._overlay);
			}
		}
		this.createButtons();
		if(dp != null) {
			dp.addComponent(this);
		} else {
			haxe_ui_core_Screen.get_instance().addComponent(this);
		}
		this.syncComponentValidation();
		if(this.get_autoHeight() == false) {
			this.dialogContainer.set_percentHeight(100);
			this.dialogContent.set_percentHeight(100);
		}
		if(this.centerDialog) {
			this.centerDialogComponent(js_Boot.__cast(this , haxe_ui_containers_dialogs_Dialog));
		}
	}
	,_buttonsCreated: null
	,createButtons: function() {
		if(this._buttonsCreated == true) {
			return;
		}
		if(this.buttons != null) {
			var _g = 0;
			var _g1 = haxe_ui_containers_dialogs_DialogButton.toArray(this.buttons);
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				var buttonComponent = new haxe_ui_components_Button();
				buttonComponent.set_text(haxe_ui_containers_dialogs_DialogButton.toString(button));
				buttonComponent.userData = button;
				buttonComponent.registerEvent("click",$bind(this,this.onFooterButtonClick));
				this.addFooterComponent(buttonComponent);
			}
			this._buttonsCreated = true;
		}
	}
	,get_closable: function() {
		return !this.dialogCloseButton.get_hidden();
	}
	,set_closable: function(value) {
		if(value == true) {
			this.dialogCloseButton.show();
		} else {
			this.dialogCloseButton.hide();
		}
		return value;
	}
	,validateDialog: function(button,fn) {
		fn(true);
	}
	,hide: function() {
		var _gthis = this;
		this.validateDialog(this.button,function(result) {
			if(result == true) {
				var dp = _gthis.get_dialogParent();
				if(_gthis.modal && _gthis._overlay != null) {
					if(dp != null) {
						dp.removeComponent(_gthis._overlay);
					} else {
						haxe_ui_core_Screen.get_instance().removeComponent(_gthis._overlay);
					}
				}
				if(dp != null) {
					dp.removeComponent(_gthis,false);
				} else {
					haxe_ui_core_Screen.get_instance().removeComponent(_gthis);
				}
				var event = new haxe_ui_containers_dialogs_DialogEvent("dialogClosed");
				event.button = _gthis.button;
				_gthis.dispatch(event);
			}
		});
	}
	,hideDialog: function(button) {
		this.button = button;
		this.hide();
	}
	,get_title: function() {
		return this.dialogTitleLabel.get_text();
	}
	,set_title: function(value) {
		this.dialogTitleLabel.set_text(value);
		return value;
	}
	,addComponent: function(child) {
		if(child.hasClass("dialog-container")) {
			return haxe_ui_containers_Box.prototype.addComponent.call(this,child);
		}
		return this.dialogContent.addComponent(child);
	}
	,validateComponentLayout: function() {
		var b = haxe_ui_containers_Box.prototype.validateComponentLayout.call(this);
		this.dialogTitle.set_width(this.get_layout().get_innerWidth());
		if(this.get_autoWidth() == false) {
			this.dialogContent.set_width(this.get_layout().get_innerWidth());
		}
		return b;
	}
	,addFooterComponent: function(c) {
		this.dialogFooterContainer.show();
		this.dialogFooter.addComponent(c);
	}
	,centerDialogComponent: function(dialog) {
		dialog.syncComponentValidation();
		var dp = this.get_dialogParent();
		if(dp != null) {
			dp.syncComponentValidation();
			var x = dp.get_width() / 2 - dialog.get_componentWidth() / 2;
			var y = dp.get_height() / 2 - dialog.get_componentHeight() / 2;
			dialog.moveComponent(x,y);
		} else {
			var x = haxe_ui_core_Screen.get_instance().get_width() / 2 - dialog.get_componentWidth() / 2;
			var y = haxe_ui_core_Screen.get_instance().get_height() / 2 - dialog.get_componentHeight() / 2;
			dialog.moveComponent(x,y);
		}
	}
	,onFooterButtonClick: function(event) {
		this.hideDialog(event.target.userData);
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_backend_DialogBase();
	}
	,__class__: haxe_ui_backend_DialogBase
	,__properties__: $extend(haxe_ui_containers_Box.prototype.__properties__,{set_title:"set_title",get_title:"get_title",set_closable:"set_closable",get_closable:"get_closable",set_dialogParent:"set_dialogParent",get_dialogParent:"get_dialogParent"})
});
var haxe_ui_containers_dialogs_Dialog = function() {
	haxe_ui_backend_DialogBase.call(this);
};
$hxClasses["haxe.ui.containers.dialogs.Dialog"] = haxe_ui_containers_dialogs_Dialog;
haxe_ui_containers_dialogs_Dialog.__name__ = "haxe.ui.containers.dialogs.Dialog";
haxe_ui_containers_dialogs_Dialog.__super__ = haxe_ui_backend_DialogBase;
haxe_ui_containers_dialogs_Dialog.prototype = $extend(haxe_ui_backend_DialogBase.prototype,{
	__onDialogClosed: null
	,onDialogClosed: null
	,set_onDialogClosed: function(value) {
		if(this.__onDialogClosed != null) {
			this.unregisterEvent("dialogClosed",this.__onClick);
			this.__onDialogClosed = null;
		}
		this.registerEvent("dialogClosed",value);
		this.__onDialogClosed = value;
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_backend_DialogBase.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_backend_DialogBase.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_dialogs_Dialog();
	}
	,__class__: haxe_ui_containers_dialogs_Dialog
	,__properties__: $extend(haxe_ui_backend_DialogBase.prototype.__properties__,{set_onDialogClosed:"set_onDialogClosed"})
});
var dialogs_AboutDialog = function() {
	haxe_ui_containers_dialogs_Dialog.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	c0.set_styleString("padding: 15px;spacing:25px;");
	var c1 = new haxe_ui_components_Image();
	c1.set_width(279.);
	c1.set_height(271.);
	c1.set_resource(haxe_ui_util_Variant.fromString("img/parrot.png"));
	c0.addComponent(c1);
	var c2 = new haxe_ui_containers_VBox();
	c2.set_percentWidth(100.);
	var c3 = new haxe_ui_components_Label();
	c3.set_text("KodeGarden (c) 2020");
	c3.set_styleString("font-size: 16px;");
	c2.addComponent(c3);
	var c4 = new haxe_ui_components_Label();
	c4.set_percentWidth(100.);
	c4.set_text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec id tortor felis. Nunc mollis mauris et iaculis accumsan. In quis rhoncus tellus. Sed vitae magna odio. Aliquam imperdiet magna non lorem posuere, sed semper urna sodales. Fusce vel risus a libero imperdiet egestas in ut ligula.");
	c2.addComponent(c4);
	var c5 = new haxe_ui_components_Button();
	c5.set_text("Visit kha.tech");
	c5.set_horizontalAlign("right");
	c2.addComponent(c5);
	c0.addComponent(c2);
	this.addComponent(c0);
	this.set_width(530.);
	this.set_title("About KodeGarden");
	this.bindingRoot = true;
	this.buttons = "Close";
};
$hxClasses["dialogs.AboutDialog"] = dialogs_AboutDialog;
dialogs_AboutDialog.__name__ = "dialogs.AboutDialog";
dialogs_AboutDialog.__super__ = haxe_ui_containers_dialogs_Dialog;
dialogs_AboutDialog.prototype = $extend(haxe_ui_containers_dialogs_Dialog.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_dialogs_Dialog.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_dialogs_Dialog.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new dialogs_AboutDialog();
	}
	,__class__: dialogs_AboutDialog
});
var dialogs_AddResourceDialog = function() {
	this.addResourceParams = null;
	haxe_ui_containers_dialogs_Dialog.call(this);
	var c0 = new haxe_ui_containers_Box();
	c0.set_id("errorContainer");
	c0.set_percentWidth(100.);
	c0.set_styleString("padding-top: 5px;padding-bottom:0px;");
	c0.set_hidden(true);
	var c1 = new haxe_ui_containers_HBox();
	c1.set_percentWidth(100.);
	c1.set_styleString("background-color: #6697E6;border: 1px solid #182839;padding: 5px;border-radius: 3px;");
	var c2 = new haxe_ui_components_Label();
	c2.set_id("errorText");
	c2.set_text("This is an error");
	c2.set_styleString("color: white");
	c1.addComponent(c2);
	c0.addComponent(c1);
	this.addComponent(c0);
	var c3 = new haxe_ui_containers_Grid();
	c3.set_percentWidth(100.);
	c3.set_styleString("padding: 2px;");
	var c4 = new haxe_ui_components_Label();
	c4.set_width(75.);
	c4.set_text("Type");
	c4.set_verticalAlign("center");
	c3.addComponent(c4);
	var c5 = new haxe_ui_components_DropDown();
	c5.set_id("resourceType");
	c5.set_percentWidth(100.);
	c5.set_selectedIndex(0);
	var ds5 = new haxe_ui_data_ListDataSource();
	ds5.add({ text : "Source", icon : "icons/document.png", id : "item"});
	ds5.add({ text : "Shader", icon : "icons/puzzle.png", id : "item"});
	ds5.add({ text : "Asset", icon : "icons/picture.png", id : "item"});
	c5.set_dataSource(ds5);
	c3.addComponent(c5);
	var c6 = new haxe_ui_components_Label();
	c6.set_id("sourceTemplateLabel");
	c6.set_width(75.);
	c6.set_text("Template");
	c6.set_verticalAlign("center");
	c6.set_hidden(true);
	c3.addComponent(c6);
	var c7 = new haxe_ui_components_DropDown();
	c7.set_id("sourceTemplate");
	c7.set_percentWidth(100.);
	c7.set_selectedIndex(1);
	c7.set_hidden(true);
	c7.set_dropdownSize(-1);
	var ds7 = new haxe_ui_data_ListDataSource();
	ds7.add({ text : "Abstract", id : "item"});
	ds7.add({ text : "Class", id : "item"});
	ds7.add({ text : "Enum", id : "item"});
	ds7.add({ text : "Interface", id : "item"});
	ds7.add({ text : "TypeDef", id : "item"});
	c7.set_dataSource(ds7);
	c3.addComponent(c7);
	var c8 = new haxe_ui_components_Label();
	c8.set_id("sourceNameLabel");
	c8.set_width(75.);
	c8.set_text("Name");
	c8.set_verticalAlign("center");
	c8.set_hidden(true);
	c3.addComponent(c8);
	var c9 = new haxe_ui_components_TextField();
	c9.set_id("sourceName");
	c9.set_percentWidth(100.);
	c9.set_placeholder("Enter source filename");
	c9.set_hidden(true);
	c3.addComponent(c9);
	var c10 = new haxe_ui_components_Label();
	c10.set_id("shaderTemplateLabel");
	c10.set_width(75.);
	c10.set_text("Template");
	c10.set_verticalAlign("center");
	c10.set_hidden(true);
	c3.addComponent(c10);
	var c11 = new haxe_ui_components_DropDown();
	c11.set_id("shaderTemplate");
	c11.set_percentWidth(100.);
	c11.set_selectedIndex(1);
	c11.set_hidden(true);
	var ds11 = new haxe_ui_data_ListDataSource();
	ds11.add({ text : "Empty", id : "item"});
	ds11.add({ text : "Basic", id : "item"});
	c11.set_dataSource(ds11);
	c3.addComponent(c11);
	var c12 = new haxe_ui_components_Label();
	c12.set_id("shaderNameLabel");
	c12.set_width(75.);
	c12.set_text("Name");
	c12.set_verticalAlign("center");
	c12.set_hidden(true);
	c3.addComponent(c12);
	var c13 = new haxe_ui_containers_HBox();
	c13.set_id("shaderNameContainer");
	c13.set_percentWidth(100.);
	c13.set_hidden(true);
	var c14 = new haxe_ui_components_TextField();
	c14.set_id("shaderName");
	c14.set_percentWidth(100.);
	c14.set_placeholder("Enter shader filename");
	c13.addComponent(c14);
	var c15 = new haxe_ui_components_DropDown();
	c15.set_id("shaderType");
	c15.set_width(80.);
	var ds15 = new haxe_ui_data_ListDataSource();
	ds15.add({ text : ".frag.glsl", id : "item"});
	ds15.add({ text : ".vert.glsl", id : "item"});
	c15.set_dataSource(ds15);
	c13.addComponent(c15);
	c3.addComponent(c13);
	var c16 = new haxe_ui_components_Label();
	c16.set_id("assetNameLabel");
	c16.set_width(75.);
	c16.set_text("Name");
	c16.set_verticalAlign("center");
	c16.set_hidden(true);
	c3.addComponent(c16);
	var c17 = new haxe_ui_containers_HBox();
	c17.set_id("assetNameContainer");
	c17.set_percentWidth(100.);
	c17.set_hidden(true);
	var c18 = new custom_FileSelector();
	c18.set_id("assetName");
	c18.set_percentWidth(100.);
	c17.addComponent(c18);
	c3.addComponent(c17);
	this.addComponent(c3);
	this.set_width(350.);
	this.set_title("Add Resource");
	this.bindingRoot = true;
	this.sourceTemplateLabel = c6;
	this.sourceTemplate = c7;
	this.sourceNameLabel = c8;
	this.sourceName = c9;
	this.shaderType = c15;
	this.shaderTemplateLabel = c10;
	this.shaderTemplate = c11;
	this.shaderNameLabel = c12;
	this.shaderNameContainer = c13;
	this.shaderName = c14;
	this.resourceType = c5;
	this.errorText = c2;
	this.errorContainer = c0;
	this.assetNameLabel = c16;
	this.assetNameContainer = c17;
	this.assetName = c18;
	var c = this.assetName;
	if(c != null) {
		c.registerEvent("keydown",$bind(this,this.onKeyDown));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "assetName" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "dialogs.AddResourceDialog", methodName : "new"});
	}
	var c = this.shaderName;
	if(c != null) {
		c.registerEvent("keydown",$bind(this,this.onKeyDown));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "shaderName" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "dialogs.AddResourceDialog", methodName : "new"});
	}
	var c = this.sourceName;
	if(c != null) {
		c.registerEvent("keydown",$bind(this,this.onKeyDown));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "sourceName" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "dialogs.AddResourceDialog", methodName : "new"});
	}
	var c = this.assetName;
	if(c != null) {
		c.registerEvent("keydown",$bind(this,this.onKeyDown));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "assetName" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "dialogs.AddResourceDialog", methodName : "new"});
	}
	var c = this.shaderName;
	if(c != null) {
		c.registerEvent("keydown",$bind(this,this.onKeyDown));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "shaderName" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "dialogs.AddResourceDialog", methodName : "new"});
	}
	var c = this.sourceName;
	if(c != null) {
		c.registerEvent("keydown",$bind(this,this.onKeyDown));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "sourceName" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "dialogs.AddResourceDialog", methodName : "new"});
	}
	var c = this.assetName;
	if(c != null) {
		c.registerEvent("keydown",$bind(this,this.onKeyDown));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "assetName" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "dialogs.AddResourceDialog", methodName : "new"});
	}
	var c = this.shaderName;
	if(c != null) {
		c.registerEvent("keydown",$bind(this,this.onKeyDown));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "shaderName" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "dialogs.AddResourceDialog", methodName : "new"});
	}
	var c = this.sourceName;
	if(c != null) {
		c.registerEvent("keydown",$bind(this,this.onKeyDown));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "sourceName" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "dialogs.AddResourceDialog", methodName : "new"});
	}
	var c = this.resourceType;
	if(c != null) {
		c.registerEvent("change",$bind(this,this.onResourceType));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "resourceType" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "dialogs.AddResourceDialog", methodName : "new"});
	}
	var larr = haxe_ui_containers_dialogs_DialogButton.toString("Cancel").split("|");
	var rarr = haxe_ui_containers_dialogs_DialogButton.toString("Confirm").split("|");
	var _g = 0;
	while(_g < rarr.length) {
		var r = rarr[_g];
		++_g;
		if(larr.indexOf(r) == -1) {
			larr.push(r);
		}
	}
	this.buttons = larr.join("|");
};
$hxClasses["dialogs.AddResourceDialog"] = dialogs_AddResourceDialog;
dialogs_AddResourceDialog.__name__ = "dialogs.AddResourceDialog";
dialogs_AddResourceDialog.__super__ = haxe_ui_containers_dialogs_Dialog;
dialogs_AddResourceDialog.prototype = $extend(haxe_ui_containers_dialogs_Dialog.prototype,{
	addResourceParams: null
	,onResourceType: function(e) {
		this.errorContainer.hide();
		this.updateUI();
	}
	,onKeyDown: function(e) {
		if(e.keyCode == 13) {
			this.hideDialog("Confirm");
		}
	}
	,contextPath: null
	,set_contextPath: function(value) {
		this.sourceName.set_text(value);
		this.shaderName.set_text(value);
		this.assetName.set_text(value);
		return value;
	}
	,type: null
	,set_type: function(value) {
		if(value == null) {
			return value;
		}
		switch(value.toLowerCase()) {
		case "asset":case "assets":
			this.resourceType.set_selectedIndex(2);
			break;
		case "shader":case "shaders":
			this.resourceType.set_selectedIndex(1);
			break;
		case "source":case "sources":
			this.resourceType.set_selectedIndex(0);
			break;
		}
		return value;
	}
	,validateDialog: function(button,fn) {
		this.addResourceParams = null;
		this.errorContainer.hide();
		var larr = haxe_ui_containers_dialogs_DialogButton.toString(button).split("|");
		if(larr.indexOf(haxe_ui_containers_dialogs_DialogButton.toString("Confirm")) != -1) {
			var errorMessage = null;
			switch(this.resourceType.get_selectedItem().text) {
			case "Asset":
				if(this.assetName.get_text() == null || StringTools.trim(this.assetName.get_text()).length == 0) {
					errorMessage = "Enter asset filename";
				}
				break;
			case "Shader":
				if(this.shaderName.get_text() == null || StringTools.trim(this.shaderName.get_text()).length == 0) {
					errorMessage = "Enter shader filename";
				}
				break;
			case "Source":
				if(this.sourceName.get_text() == null || StringTools.trim(this.sourceName.get_text()).length == 0) {
					errorMessage = "Enter source filename";
				}
				break;
			}
			if(errorMessage != null) {
				this.errorText.set_text(errorMessage);
				this.errorContainer.show();
				AnimationUtil.shake(this);
				fn(false);
			} else {
				switch(this.resourceType.get_selectedItem().text) {
				case "Asset":
					this.addResourceParams = { type : this.resourceType.get_selectedItem().text, filename : this.assetName.get_text(), file : this.assetName.get_file()};
					break;
				case "Shader":
					this.addResourceParams = { type : this.resourceType.get_selectedItem().text, filename : this.shaderName.get_text(), template : this.shaderTemplate.get_selectedItem().text, subType : this.shaderType.get_selectedItem().text};
					break;
				case "Source":
					this.addResourceParams = { type : this.resourceType.get_selectedItem().text, filename : this.sourceName.get_text(), template : this.sourceTemplate.get_selectedItem().text};
					break;
				}
				fn(true);
			}
		} else {
			fn(true);
		}
	}
	,updateUI: function() {
		switch(this.resourceType.get_selectedItem().text) {
		case "Asset":
			this.showSourceComponents(false);
			this.showShaderComponents(false);
			this.showAssetComponents(true);
			break;
		case "Shader":
			this.showSourceComponents(false);
			this.showShaderComponents(true);
			this.showAssetComponents(false);
			this.shaderName.set_focus(true);
			break;
		case "Source":
			this.showSourceComponents(true);
			this.showShaderComponents(false);
			this.showAssetComponents(false);
			this.sourceName.set_focus(true);
			break;
		}
	}
	,showSourceComponents: function(show) {
		if(show == null) {
			show = true;
		}
		this.sourceTemplateLabel.set_hidden(!show);
		this.sourceTemplate.set_hidden(!show);
		this.sourceNameLabel.set_hidden(!show);
		this.sourceName.set_hidden(!show);
	}
	,showShaderComponents: function(show) {
		if(show == null) {
			show = true;
		}
		this.shaderTemplateLabel.set_hidden(!show);
		this.shaderTemplate.set_hidden(!show);
		this.shaderNameLabel.set_hidden(!show);
		this.shaderNameContainer.set_hidden(!show);
	}
	,showAssetComponents: function(show) {
		if(show == null) {
			show = true;
		}
		this.assetNameLabel.set_hidden(!show);
		this.assetNameContainer.set_hidden(!show);
	}
	,registerBehaviours: function() {
		haxe_ui_containers_dialogs_Dialog.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_dialogs_Dialog.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new dialogs_AddResourceDialog();
	}
	,sourceTemplateLabel: null
	,sourceTemplate: null
	,sourceNameLabel: null
	,sourceName: null
	,shaderType: null
	,shaderTemplateLabel: null
	,shaderTemplate: null
	,shaderNameLabel: null
	,shaderNameContainer: null
	,shaderName: null
	,resourceType: null
	,errorText: null
	,errorContainer: null
	,assetNameLabel: null
	,assetNameContainer: null
	,assetName: null
	,__class__: dialogs_AddResourceDialog
	,__properties__: $extend(haxe_ui_containers_dialogs_Dialog.prototype.__properties__,{set_type:"set_type",set_contextPath:"set_contextPath"})
});
var dialogs_ExamplesDialog = function() {
	this._exampleItems = [];
	haxe_ui_containers_dialogs_Dialog.call(this);
	var c0 = new haxe_ui_containers_ScrollView();
	c0.set_percentWidth(100.);
	c0.set_percentHeight(100.);
	c0.set_percentContentWidth(100.);
	var c1 = new haxe_ui_containers_Grid();
	c1.set_id("examplesGrid");
	c1.set_percentWidth(100.);
	c1.set_columns(4);
	c0.addComponent(c1);
	this.addComponent(c0);
	this.set_width(500.);
	this.set_height(500.);
	this.set_title("Examples");
	this.bindingRoot = true;
	this.examplesGrid = c1;
	this.buttons = "Close";
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 0});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 1});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 2});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 3});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 4});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 5});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 6});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 7});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 8});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 9});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 10});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 11});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 12});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 13});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 14});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 15});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 16});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 17});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 18});
	this._exampleItems.push({ sha : "25650ad726587fc19b57699851b609531209256e", title : "Example " + 19});
};
$hxClasses["dialogs.ExamplesDialog"] = dialogs_ExamplesDialog;
dialogs_ExamplesDialog.__name__ = "dialogs.ExamplesDialog";
dialogs_ExamplesDialog.__super__ = haxe_ui_containers_dialogs_Dialog;
dialogs_ExamplesDialog.prototype = $extend(haxe_ui_containers_dialogs_Dialog.prototype,{
	_exampleItems: null
	,onReady: function() {
		haxe_ui_containers_dialogs_Dialog.prototype.onReady.call(this);
		this.populateExamples();
	}
	,populateExamples: function() {
		this.examplesGrid.removeAllComponents();
		var _g = 0;
		var _g1 = this._exampleItems;
		while(_g < _g1.length) {
			var example = [_g1[_g]];
			++_g;
			var item = [new dialogs_ExampleItem()];
			this.examplesGrid.addComponent(item[0]);
			haxe_ui_Toolkit.callLater((function(item,example) {
				return function() {
					item[0].set_itemData(example[0]);
				};
			})(item,example));
		}
	}
	,registerBehaviours: function() {
		haxe_ui_containers_dialogs_Dialog.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_dialogs_Dialog.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new dialogs_ExamplesDialog();
	}
	,examplesGrid: null
	,__class__: dialogs_ExamplesDialog
});
var dialogs_ExampleItem = function() {
	haxe_ui_containers_VBox.call(this);
	var c0 = new custom_IFrame();
	c0.set_id("iframe");
	c0.set_percentWidth(100.);
	c0.set_percentHeight(100.);
	c0.set_styleString("border: 1px solid red;");
	this.addComponent(c0);
	this.set_width(100.);
	this.set_height(100.);
	this.bindingRoot = true;
	this.iframe = c0;
};
$hxClasses["dialogs.ExampleItem"] = dialogs_ExampleItem;
dialogs_ExampleItem.__name__ = "dialogs.ExampleItem";
dialogs_ExampleItem.__super__ = haxe_ui_containers_VBox;
dialogs_ExampleItem.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	_itemData: null
	,get_itemData: function() {
		return this._itemData;
	}
	,set_itemData: function(value) {
		this._itemData = value;
		var el = this.iframe.get_iframeElement();
		el.src = this.generatePage("html,body { width: 100%; height: 100%; margin: 0; }");
		el.onload = function() {
			var scriptElement = el.contentWindow.document.createElement("script");
			scriptElement.type = "text/javascript";
			scriptElement.src = "kha.js";
			scriptElement.onload = function() {
				haxe_Log.trace("SCRIPT LOADED",{ fileName : "src/dialogs/ExamplesDialog.hx", lineNumber : 69, className : "dialogs.ExampleItem", methodName : "set_itemData"});
			};
			scriptElement.onerror = function(e,i) {
				haxe_Log.trace("ERROR - " + e,{ fileName : "src/dialogs/ExamplesDialog.hx", lineNumber : 72, className : "dialogs.ExampleItem", methodName : "set_itemData"});
				$global.console.log(e);
			};
			el.contentWindow.document.body.appendChild(scriptElement);
		};
		return value;
	}
	,generatePage: function(css,html,js) {
		var sb_b = "";
		sb_b += "<html>";
		sb_b += "<head>";
		if(css != null) {
			var cssURL = this.getBlobURL(css,"text/css");
			sb_b += Std.string("<link rel=\"stylesheet\" type=\"text/css\" href=\"" + cssURL.toString() + "\" />");
		}
		if(js != null) {
			var jsURL = this.getBlobURL(js,"text/javascript");
			sb_b += Std.string("<script src=\"" + jsURL.toString() + "\"></script>");
		}
		sb_b += "</head>";
		sb_b += "<body>";
		if(html != null) {
			sb_b += html == null ? "null" : "" + html;
		}
		sb_b += "<canvas id=\"khanvas\" tabindex=\"0\" style=\"outline: none; cursor: default;width:100px;height:100px;\"></canvas>";
		sb_b += "<script src=\"kha.js\" onload=\"console.log('ready');KhaWorker.instance.load('projects/25650ad726587fc19b57699851b609531209256e/khaworker.js')\"></script>";
		sb_b += "</body>";
		var source = sb_b += "</html>";
		return this.getBlobURL(source,"text/html");
	}
	,getBlobURL: function(code,type) {
		var b = new Blob([code],{ type : type});
		return URL.createObjectURL(b);
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new dialogs_ExampleItem();
	}
	,iframe: null
	,__class__: dialogs_ExampleItem
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{set_itemData:"set_itemData",get_itemData:"get_itemData"})
});
var dialogs_ImportDialog = function() {
	haxe_ui_containers_dialogs_Dialog.call(this);
	var c0 = new haxe_ui_containers_Grid();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Label();
	c1.set_width(95.);
	c1.set_text("Source");
	c1.set_verticalAlign("center");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_DropDown();
	c2.set_percentWidth(100.);
	c2.set_selectedIndex(1);
	var ds2 = new haxe_ui_data_ListDataSource();
	ds2.add({ text : "GitHub", id : "item"});
	ds2.add({ text : "Zip File", id : "item"});
	c2.set_dataSource(ds2);
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Label();
	c3.set_width(95.);
	c3.set_text("Repository URL");
	c3.set_verticalAlign("center");
	c3.set_hidden(true);
	c0.addComponent(c3);
	var c4 = new haxe_ui_components_TextField();
	c4.set_percentWidth(100.);
	c4.set_text("https://github.com/Kha-Samples/MampfMonster");
	c4.set_placeholder("Enter respository url");
	c4.set_hidden(true);
	c0.addComponent(c4);
	var c5 = new haxe_ui_components_Label();
	c5.set_width(95.);
	c5.set_text("Zip File");
	c5.set_verticalAlign("center");
	c0.addComponent(c5);
	var c6 = new custom_FileSelector();
	c6.set_id("zipFile");
	c6.set_percentWidth(100.);
	c0.addComponent(c6);
	this.addComponent(c0);
	this.set_width(500.);
	this.set_title("Import Project");
	this.bindingRoot = true;
	this.zipFile = c6;
	var larr = haxe_ui_containers_dialogs_DialogButton.toString("Cancel").split("|");
	var rarr = haxe_ui_containers_dialogs_DialogButton.toString("Import").split("|");
	var _g = 0;
	while(_g < rarr.length) {
		var r = rarr[_g];
		++_g;
		if(larr.indexOf(r) == -1) {
			larr.push(r);
		}
	}
	this.buttons = larr.join("|");
};
$hxClasses["dialogs.ImportDialog"] = dialogs_ImportDialog;
dialogs_ImportDialog.__name__ = "dialogs.ImportDialog";
dialogs_ImportDialog.__super__ = haxe_ui_containers_dialogs_Dialog;
dialogs_ImportDialog.prototype = $extend(haxe_ui_containers_dialogs_Dialog.prototype,{
	projectZippedBytes: null
	,validateDialog: function(button,fn) {
		var _gthis = this;
		var larr = haxe_ui_containers_dialogs_DialogButton.toString(button).split("|");
		if(larr.indexOf(haxe_ui_containers_dialogs_DialogButton.toString("Import")) != -1) {
			var reader = new FileReader();
			reader.onload = function(upload) {
				var buffer = upload.target.result;
				_gthis.projectZippedBytes = haxe_io_Bytes.ofData(buffer);
				fn(true);
			};
			reader.readAsArrayBuffer(this.zipFile.get_file());
		} else {
			fn(true);
		}
	}
	,registerBehaviours: function() {
		haxe_ui_containers_dialogs_Dialog.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_dialogs_Dialog.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new dialogs_ImportDialog();
	}
	,zipFile: null
	,__class__: dialogs_ImportDialog
});
var dialogs_ImportProgressDialog = function() {
	haxe_ui_containers_dialogs_Dialog.call(this);
	var c0 = new haxe_ui_containers_VBox();
	c0.set_percentWidth(100.);
	c0.set_styleString("padding: 10px;");
	var c1 = new haxe_ui_components_HorizontalProgress();
	c1.set_id("importProgress");
	c1.set_height(10.);
	c1.set_percentWidth(100.);
	c1.set_horizontalAlign("center");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Label();
	c2.set_id("importLabel");
	c2.set_text("Importing");
	c2.set_styleString("font-size: 11px;");
	c2.set_horizontalAlign("center");
	c0.addComponent(c2);
	this.addComponent(c0);
	this.set_width(360.);
	this.set_title("Importing Project");
	this.set_closable(false);
	this.bindingRoot = true;
	this.importProgress = c1;
	this.importLabel = c2;
};
$hxClasses["dialogs.ImportProgressDialog"] = dialogs_ImportProgressDialog;
dialogs_ImportProgressDialog.__name__ = "dialogs.ImportProgressDialog";
dialogs_ImportProgressDialog.__super__ = haxe_ui_containers_dialogs_Dialog;
dialogs_ImportProgressDialog.prototype = $extend(haxe_ui_containers_dialogs_Dialog.prototype,{
	projectZippedBytes: null
	,onReady: function() {
		var _gthis = this;
		haxe_ui_containers_dialogs_Dialog.prototype.onReady.call(this);
		project_Project.get_instance().importFromZippedBytes(this.projectZippedBytes,function(filename,current,max) {
			haxe_Log.trace(filename,{ fileName : "src/dialogs/ImportProgressDialog.hx", lineNumber : 18, className : "dialogs.ImportProgressDialog", methodName : "onReady", customParams : [current,max]});
			if(filename != null) {
				_gthis.importLabel.set_text("Importing " + filename + " (" + current + " of " + max + ")");
			}
			_gthis.importProgress.set_max(max);
			_gthis.importProgress.set_pos(current);
			if(current == max) {
				project_Project.get_instance().build();
				_gthis.hideDialog("Close");
			}
		});
	}
	,registerBehaviours: function() {
		haxe_ui_containers_dialogs_Dialog.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_dialogs_Dialog.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new dialogs_ImportProgressDialog();
	}
	,importProgress: null
	,importLabel: null
	,__class__: dialogs_ImportProgressDialog
});
var editors_ImageEditor = function() {
	this._resource = null;
	haxe_ui_containers_VBox.call(this);
	this.set_percentWidth(100.);
	this.set_percentHeight(100.);
	this.bindingRoot = true;
};
$hxClasses["editors.ImageEditor"] = editors_ImageEditor;
editors_ImageEditor.__name__ = "editors.ImageEditor";
editors_ImageEditor.__interfaces__ = [IEditor];
editors_ImageEditor.__super__ = haxe_ui_containers_VBox;
editors_ImageEditor.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	_resource: null
	,get_resource: function() {
		return this._resource;
	}
	,set_resource: function(value) {
		this._resource = value;
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new editors_ImageEditor();
	}
	,__class__: editors_ImageEditor
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{set_resource:"set_resource",get_resource:"get_resource"})
});
var project_IResourceListener = function() { };
$hxClasses["project.IResourceListener"] = project_IResourceListener;
project_IResourceListener.__name__ = "project.IResourceListener";
project_IResourceListener.__isInterface__ = true;
project_IResourceListener.prototype = {
	onDirtyChanged: null
	,onContentUpdated: null
	,__class__: project_IResourceListener
};
var editors_ShaderEditor = function() {
	this._resource = null;
	this._dirty = false;
	haxe_ui_containers_VBox.call(this);
	var c0 = new haxe_ui_editors_code_monaco_MonacoCodeEditor();
	c0.set_id("editor");
	c0.set_percentWidth(100.);
	c0.set_percentHeight(100.);
	c0.set_theme("vs-dark");
	c0.set_language("glsl");
	this.addComponent(c0);
	this.set_percentWidth(100.);
	this.set_percentHeight(100.);
	this.bindingRoot = true;
	this.editor = c0;
	var c = this.editor;
	if(c != null) {
		c.registerEvent("change",$bind(this,this.onEditorChange));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "editor" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "editors.ShaderEditor", methodName : "new"});
	}
};
$hxClasses["editors.ShaderEditor"] = editors_ShaderEditor;
editors_ShaderEditor.__name__ = "editors.ShaderEditor";
editors_ShaderEditor.__interfaces__ = [project_IResourceListener,IEditor];
editors_ShaderEditor.__super__ = haxe_ui_containers_VBox;
editors_ShaderEditor.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	onEditorChange: function(e) {
		if(this._resource.content != this.editor.get_text()) {
			this.set_dirty(true);
			this._resource.content = this.editor.get_text();
			this.dispatch(new haxe_ui_events_UIEvent("change"));
		}
	}
	,_dirty: null
	,get_dirty: function() {
		return this._dirty;
	}
	,set_dirty: function(value) {
		if(value == this._dirty) {
			return value;
		}
		this._dirty = value;
		this._resource.set_dirty(value);
		if(this._dirty == true && StringTools.endsWith(this.get_text(),"*") == false) {
			var _g = this;
			_g.set_text(_g.get_text() + "*");
		} else if(this._dirty == false && StringTools.endsWith(this.get_text(),"*") == true) {
			this.set_text(HxOverrides.substr(this.get_text(),0,this.get_text().length - 1));
		}
		return value;
	}
	,_resource: null
	,get_resource: function() {
		return this._resource;
	}
	,set_resource: function(value) {
		this._resource = value;
		this.editor.set_text(this._resource.content);
		this._resource.addListener(this);
		return value;
	}
	,onDirtyChanged: function() {
		this.set_dirty(this._resource.get_dirty());
	}
	,onContentUpdated: function() {
		this.editor.set_text(this._resource.content);
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new editors_ShaderEditor();
	}
	,editor: null
	,__class__: editors_ShaderEditor
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{set_resource:"set_resource",get_resource:"get_resource",set_dirty:"set_dirty",get_dirty:"get_dirty"})
});
var editors_SourceEditor = function() {
	this._resource = null;
	this._dirty = false;
	haxe_ui_containers_VBox.call(this);
	var c0 = new haxe_ui_editors_code_monaco_MonacoCodeEditor();
	c0.set_id("editor");
	c0.set_percentWidth(100.);
	c0.set_percentHeight(100.);
	c0.set_theme("vs-dark");
	c0.set_language("haxe");
	this.addComponent(c0);
	this.set_percentWidth(100.);
	this.set_percentHeight(100.);
	this.bindingRoot = true;
	this.editor = c0;
	var c = this.editor;
	if(c != null) {
		c.registerEvent("change",$bind(this,this.onEditorChange));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "editor" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "editors.SourceEditor", methodName : "new"});
	}
};
$hxClasses["editors.SourceEditor"] = editors_SourceEditor;
editors_SourceEditor.__name__ = "editors.SourceEditor";
editors_SourceEditor.__interfaces__ = [project_IResourceListener,IEditor];
editors_SourceEditor.__super__ = haxe_ui_containers_VBox;
editors_SourceEditor.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	onEditorChange: function(e) {
		if(this._resource.content != this.editor.get_text()) {
			this.set_dirty(true);
			this._resource.content = this.editor.get_text();
			this.dispatch(new haxe_ui_events_UIEvent("change"));
		}
	}
	,_dirty: null
	,get_dirty: function() {
		return this._dirty;
	}
	,set_dirty: function(value) {
		if(value == this._dirty) {
			return value;
		}
		this._dirty = value;
		this._resource.set_dirty(value);
		if(this._dirty == true && StringTools.endsWith(this.get_text(),"*") == false) {
			var _g = this;
			_g.set_text(_g.get_text() + "*");
		} else if(this._dirty == false && StringTools.endsWith(this.get_text(),"*") == true) {
			this.set_text(HxOverrides.substr(this.get_text(),0,this.get_text().length - 1));
		}
		return value;
	}
	,_resource: null
	,get_resource: function() {
		return this._resource;
	}
	,set_resource: function(value) {
		this._resource = value;
		this.editor.set_text(this._resource.content);
		this._resource.addListener(this);
		return value;
	}
	,onDirtyChanged: function() {
		this.set_dirty(this._resource.get_dirty());
	}
	,onContentUpdated: function() {
		this.editor.set_text(this._resource.content);
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new editors_SourceEditor();
	}
	,editor: null
	,__class__: editors_SourceEditor
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{set_resource:"set_resource",get_resource:"get_resource",set_dirty:"set_dirty",get_dirty:"get_dirty"})
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function() {
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m1 = item1.m;
				var m2 = item2.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item11 = item1.s;
				var file1 = item1.file;
				var line1 = item1.line;
				var col1 = item1.column;
				var col2 = item2.column;
				var line2 = item2.line;
				var file2 = item2.file;
				var item21 = item2.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class1 = item1.classname;
				var method1 = item1.method;
				var method2 = item2.method;
				var class2 = item2.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v1 = item1.v;
				var v2 = item2.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native"}
});
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = "haxe.ds.GenericStack";
haxe_ds_GenericStack.prototype = {
	head: null
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.prototype = {
	h: null
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.addByte(c);
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_Path = function() { };
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = tmp;
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
var haxe_io_StringInput = function(s) {
	haxe_io_BytesInput.call(this,haxe_io_Bytes.ofString(s));
};
$hxClasses["haxe.io.StringInput"] = haxe_io_StringInput;
haxe_io_StringInput.__name__ = "haxe.io.StringInput";
haxe_io_StringInput.__super__ = haxe_io_BytesInput;
haxe_io_StringInput.prototype = $extend(haxe_io_BytesInput.prototype,{
	__class__: haxe_io_StringInput
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_ui_backend_BackendImpl = function() { };
$hxClasses["haxe.ui.backend.BackendImpl"] = haxe_ui_backend_BackendImpl;
haxe_ui_backend_BackendImpl.__name__ = "haxe.ui.backend.BackendImpl";
var haxe_ui_Backend = function() { };
$hxClasses["haxe.ui.Backend"] = haxe_ui_Backend;
haxe_ui_Backend.__name__ = "haxe.ui.Backend";
haxe_ui_Backend.__properties__ = {get_id:"get_id"};
haxe_ui_Backend.get_id = function() {
	return haxe_ui_backend_BackendImpl.id;
};
haxe_ui_Backend.__super__ = haxe_ui_backend_BackendImpl;
haxe_ui_Backend.prototype = $extend(haxe_ui_backend_BackendImpl.prototype,{
	__class__: haxe_ui_Backend
});
var haxe_ui_backend_CallLaterImpl = function(fn) {
	window.requestAnimationFrame(function(timestamp) {
		fn();
	});
};
$hxClasses["haxe.ui.backend.CallLaterImpl"] = haxe_ui_backend_CallLaterImpl;
haxe_ui_backend_CallLaterImpl.__name__ = "haxe.ui.backend.CallLaterImpl";
haxe_ui_backend_CallLaterImpl.prototype = {
	__class__: haxe_ui_backend_CallLaterImpl
};
var haxe_ui_CallLater = function(fn) {
	haxe_ui_backend_CallLaterImpl.call(this,fn);
};
$hxClasses["haxe.ui.CallLater"] = haxe_ui_CallLater;
haxe_ui_CallLater.__name__ = "haxe.ui.CallLater";
haxe_ui_CallLater.__super__ = haxe_ui_backend_CallLaterImpl;
haxe_ui_CallLater.prototype = $extend(haxe_ui_backend_CallLaterImpl.prototype,{
	__class__: haxe_ui_CallLater
});
var haxe_ui_backend_AppBase = function() {
	this.__events = null;
};
$hxClasses["haxe.ui.backend.AppBase"] = haxe_ui_backend_AppBase;
haxe_ui_backend_AppBase.__name__ = "haxe.ui.backend.AppBase";
haxe_ui_backend_AppBase.prototype = {
	__events: null
	,registerEvent: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(this.__events == null) {
			this.__events = new haxe_ui_util_EventMap();
		}
		this.__events.add(type,listener,priority);
	}
	,hasEvent: function(type,listener) {
		if(this.__events == null) {
			return false;
		}
		return this.__events.contains(type,listener);
	}
	,unregisterEvent: function(type,listener) {
		if(this.__events != null) {
			this.__events.remove(type,listener);
		}
	}
	,dispatch: function(event) {
		if(this.__events != null) {
			this.__events.invoke(event.type,event,null);
		}
	}
	,build: function() {
	}
	,init: function(onReady,onEnd) {
		onReady();
	}
	,getToolkitInit: function() {
		return { };
	}
	,start: function() {
	}
	,exit: function() {
	}
	,buildPreloadList: function() {
		return [];
	}
	,__class__: haxe_ui_backend_AppBase
};
var haxe_ui_backend_AppImpl = function() {
	haxe_ui_backend_AppBase.call(this);
};
$hxClasses["haxe.ui.backend.AppImpl"] = haxe_ui_backend_AppImpl;
haxe_ui_backend_AppImpl.__name__ = "haxe.ui.backend.AppImpl";
haxe_ui_backend_AppImpl.__super__ = haxe_ui_backend_AppBase;
haxe_ui_backend_AppImpl.prototype = $extend(haxe_ui_backend_AppBase.prototype,{
	init: function(onReady,onEnd) {
		var title = haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.html5.title");
		if(title != null) {
			haxe_ui_core_Screen.get_instance().set_title(title);
		}
		if(window.document.readyState == "complete") {
			onReady();
		} else {
			window.document.body.onload = function(e) {
				onReady();
			};
		}
	}
	,getToolkitInit: function() {
		return { container : this.findContainer(haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.html5.container","body"))};
	}
	,findContainer: function(id) {
		var el = null;
		if(id == "body") {
			el = window.document.body;
		} else if(id != null) {
			el = window.document.getElementById(id);
		}
		if(el == null) {
			el = window.document.body;
		}
		el.style.overflow = "hidden";
		return el;
	}
	,__class__: haxe_ui_backend_AppImpl
});
var haxe_ui_HaxeUIApp = function(options) {
	haxe_ui_backend_AppImpl.call(this);
	haxe_ui_HaxeUIApp.instance = this;
	this._options = options;
	haxe_ui_Toolkit.build();
	this.build();
};
$hxClasses["haxe.ui.HaxeUIApp"] = haxe_ui_HaxeUIApp;
haxe_ui_HaxeUIApp.__name__ = "haxe.ui.HaxeUIApp";
haxe_ui_HaxeUIApp.__super__ = haxe_ui_backend_AppImpl;
haxe_ui_HaxeUIApp.prototype = $extend(haxe_ui_backend_AppImpl.prototype,{
	_options: null
	,ready: function(onReady,onEnd) {
		this.init(onReady,onEnd);
	}
	,init: function(onReady,onEnd) {
		if(haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.theme") != null && haxe_ui_Toolkit.get_theme() == "default") {
			haxe_ui_Toolkit.set_theme(haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.theme"));
		}
		if(this._options == null) {
			haxe_ui_Toolkit.init(this.getToolkitInit());
		} else {
			haxe_ui_Toolkit.init(this._options);
		}
		var preloadList = null;
		var preloader = null;
		preloadList = this.buildPreloadList();
		if(preloadList != null && preloadList.length > 0) {
			preloader = new haxe_ui_Preloader();
			preloader.progress(0,preloadList.length);
			this.addComponent(preloader);
			preloader.validateComponent();
		}
		this.handlePreload(preloadList,onReady,onEnd,preloader);
	}
	,handlePreload: function(list,onReady,onEnd,preloader) {
		var _gthis = this;
		if(list == null || list.length == 0) {
			if(preloader != null) {
				preloader.complete();
			}
			haxe_ui_backend_AppImpl.prototype.init.call(this,onReady,onEnd);
			return;
		}
		var item = list.shift();
		switch(item.type) {
		case "font":
			haxe_ui_ToolkitAssets.get_instance().getFont(item.resourceId,function(f) {
				if(preloader != null) {
					preloader.increment();
				}
				_gthis.handlePreload(list,onReady,onEnd,preloader);
			});
			break;
		case "image":
			haxe_ui_ToolkitAssets.get_instance().getImage(item.resourceId,function(i) {
				if(preloader != null) {
					preloader.increment();
				}
				_gthis.handlePreload(list,onReady,onEnd,preloader);
			});
			break;
		default:
			haxe_Log.trace("WARNING: unknown type to preload \"" + item.type + "\", continuing",{ fileName : "haxe/ui/HaxeUIApp.hx", lineNumber : 81, className : "haxe.ui.HaxeUIApp", methodName : "handlePreload"});
			if(preloader != null) {
				preloader.increment();
			}
			this.handlePreload(list,onReady,onEnd,preloader);
		}
	}
	,addComponent: function(component) {
		return haxe_ui_core_Screen.get_instance().addComponent(component);
	}
	,removeComponent: function(component) {
		return haxe_ui_core_Screen.get_instance().removeComponent(component);
	}
	,setComponentIndex: function(child,index) {
		return haxe_ui_core_Screen.get_instance().setComponentIndex(child,index);
	}
	,buildPreloadList: function() {
		var list = haxe_ui_backend_AppImpl.prototype.buildPreloadList.call(this);
		if(list == null) {
			list = [];
		}
		list = list.concat(haxe_ui_ToolkitAssets.get_instance().preloadList);
		return list;
	}
	,__class__: haxe_ui_HaxeUIApp
});
var haxe_ui_Preloader = function() {
	haxe_ui_core_Component.call(this);
	this.set_id("preloader");
	this.set_styleString("width:auto;height:auto;");
};
$hxClasses["haxe.ui.Preloader"] = haxe_ui_Preloader;
haxe_ui_Preloader.__name__ = "haxe.ui.Preloader";
haxe_ui_Preloader.__super__ = haxe_ui_core_Component;
haxe_ui_Preloader.prototype = $extend(haxe_ui_core_Component.prototype,{
	createChildren: function() {
		var label = new haxe_ui_components_Label();
		label.set_text("Loading");
		this.addComponent(label);
	}
	,validateComponentLayout: function() {
		var b = haxe_ui_core_Component.prototype.validateComponentLayout.call(this);
		if(this.get_width() > 0 && this.get_height() > 0) {
			this.set_left(haxe_ui_core_Screen.get_instance().get_width() / 2 - this.get_width() / 2);
			this.set_top(haxe_ui_core_Screen.get_instance().get_height() / 2 - this.get_height() / 2);
		}
		return b;
	}
	,_current: null
	,_max: null
	,progress: function(current,max) {
		this._current = current;
		this._max = max;
		if(current > 0) {
			var label = this.findComponent(null,haxe_ui_components_Label);
			var text = label.get_text();
			if(StringTools.endsWith(text,"....")) {
				text = "Loading";
			}
			label.set_text(text);
		}
	}
	,increment: function() {
		this.progress(this._current + 1,this._max);
	}
	,complete: function() {
		haxe_ui_core_Screen.get_instance().removeComponent(this);
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_Preloader();
	}
	,__class__: haxe_ui_Preloader
});
var haxe_ui_util_Properties = function() {
	this._props = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.util.Properties"] = haxe_ui_util_Properties;
haxe_ui_util_Properties.__name__ = "haxe.ui.util.Properties";
haxe_ui_util_Properties.prototype = {
	_props: null
	,exists: function(name) {
		return Object.prototype.hasOwnProperty.call(this._props.h,name);
	}
	,getProp: function(name,defaultValue) {
		var v = defaultValue;
		if(Object.prototype.hasOwnProperty.call(this._props.h,name)) {
			v = this._props.h[name];
		}
		return v;
	}
	,getPropInt: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		var v = defaultValue;
		var stringValue = this.getProp(name);
		if(stringValue != null) {
			v = Std.parseInt(stringValue);
		}
		return v;
	}
	,getPropBool: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		var v = defaultValue;
		var stringValue = this.getProp(name);
		if(stringValue != null) {
			v = stringValue == "true";
		}
		return v;
	}
	,getPropCol: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		var v = defaultValue;
		var stringValue = this.getProp(name);
		if(stringValue != null) {
			var s = stringValue;
			if(StringTools.startsWith(s,"#")) {
				s = s.substring(1,s.length);
			} else if(StringTools.startsWith(s,"0x")) {
				s = s.substring(2,s.length);
			}
			v = Std.parseInt("0x" + s);
		}
		return v;
	}
	,setProp: function(name,value) {
		this._props.h[name] = value;
	}
	,names: function() {
		return haxe_ds_StringMap.keysIterator(this._props.h);
	}
	,addAll: function(p) {
		var name = p.names();
		while(name.hasNext()) {
			var name1 = name.next();
			var this1 = this._props;
			var value = p.getProp(name1);
			this1.h[name1] = value;
		}
	}
	,__class__: haxe_ui_util_Properties
};
var haxe_ui_util_GenericConfig = function() {
	this.values = new haxe_ds_StringMap();
	this.sections = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.util.GenericConfig"] = haxe_ui_util_GenericConfig;
haxe_ui_util_GenericConfig.__name__ = "haxe.ui.util.GenericConfig";
haxe_ui_util_GenericConfig.prototype = {
	values: null
	,sections: null
	,addSection: function(name) {
		var config = new haxe_ui_util_GenericConfig();
		var array = this.sections.h[name];
		if(array == null) {
			array = [];
			this.sections.h[name] = array;
		}
		array.push(config);
		return config;
	}
	,findBy: function(section,field,value) {
		var array = this.sections.h[section];
		if(array == null) {
			return null;
		}
		if(field == null && value == null) {
			return array[0];
		}
		var r = null;
		var _g = 0;
		while(_g < array.length) {
			var item = array[_g];
			++_g;
			var key = haxe_ds_StringMap.keysIterator(item.values.h);
			while(key.hasNext()) {
				var key1 = key.next();
				if(key1 == field && item.values.h[key1] == value) {
					r = item;
					break;
				}
			}
			if(r != null) {
				break;
			}
		}
		return r;
	}
	,queryBool: function(q,defaultValue,conditionRef) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		var r = this.query(q,null,conditionRef);
		if(r == null) {
			return defaultValue;
		}
		return r == "true";
	}
	,query: function(q,defaultValue,conditionRef) {
		if(Object.prototype.hasOwnProperty.call(haxe_ui_util_GenericConfig.cache.h,q)) {
			return haxe_ui_util_GenericConfig.cache.h[q];
		}
		var regexp = new EReg("\\.(?![^\\[]*\\])","g");
		var finalArray = regexp.split(q);
		var ref = this;
		var value = null;
		var _g = 0;
		while(_g < finalArray.length) {
			var f = finalArray[_g];
			++_g;
			if(f.indexOf("[") == -1 && f.indexOf("@") == -1) {
				ref = ref.findBy(f);
			} else if(f.indexOf("[") != -1) {
				var p = f.split("[");
				var p1 = p[0];
				var p2 = p[1].split("=")[0];
				var p3 = p[1].split("=")[1];
				p3 = HxOverrides.substr(p3,0,p3.length - 1);
				ref = ref.findBy(p1,p2,p3);
			} else if(f.indexOf("@") != -1) {
				var v = HxOverrides.substr(f,1,f.length);
				value = ref.values.h[v];
				break;
			}
			if(ref == null) {
				haxe_ui_util_GenericConfig.cache.h[q] = defaultValue;
				return defaultValue;
			}
		}
		if(conditionRef != null) {
			var n = q.indexOf("]");
			var nq = q.substring(0,n + 1) + ".@condition";
			var condition = this.query(nq,null,null);
			if(condition != null) {
				var interp = new haxe_ui_scripting_ScriptInterp();
				var parser = new hscript_Parser();
				var line = parser.parseString(condition);
				interp.variables.h["this"] = conditionRef;
				var r = interp.expr(line);
				if(r == false) {
					return defaultValue;
				}
			}
		}
		if(value == null) {
			value = defaultValue;
		}
		return value;
	}
	,queryValues: function(q,conditionRef) {
		var regexp = new EReg("\\.(?![^\\[]*\\])","g");
		var finalArray = regexp.split(q);
		var ref = this;
		var _g = 0;
		while(_g < finalArray.length) {
			var f = finalArray[_g];
			++_g;
			if(f.indexOf("[") == -1 && f.indexOf("@") == -1) {
				ref = ref.findBy(f);
			} else if(f.indexOf("[") != -1) {
				var p = f.split("[");
				var p1 = p[0];
				var p2 = p[1].split("=")[0];
				var p3 = p[1].split("=")[1];
				p3 = HxOverrides.substr(p3,0,p3.length - 1);
				ref = ref.findBy(p1,p2,p3);
			}
			if(ref == null) {
				return null;
			}
		}
		if(conditionRef != null) {
			var n = q.indexOf("]");
			var nq = q.substring(0,n + 1) + ".@condition";
			var condition = this.query(nq,null,null);
			if(condition != null) {
				var interp = new haxe_ui_scripting_ScriptInterp();
				var parser = new hscript_Parser();
				var line = parser.parseString(condition);
				interp.variables.h["this"] = conditionRef;
				var r = interp.expr(line);
				if(r == false) {
					return null;
				}
			}
		}
		return ref.values;
	}
	,__class__: haxe_ui_util_GenericConfig
};
var haxe_ui_styles_CompositeStyleSheet = function() {
	this._animations = null;
	this._styleSheets = [];
};
$hxClasses["haxe.ui.styles.CompositeStyleSheet"] = haxe_ui_styles_CompositeStyleSheet;
haxe_ui_styles_CompositeStyleSheet.__name__ = "haxe.ui.styles.CompositeStyleSheet";
haxe_ui_styles_CompositeStyleSheet.prototype = {
	_styleSheets: null
	,_animations: null
	,get_animations: function() {
		if(this._animations != null) {
			return this._animations;
		}
		this._animations = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this._styleSheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var key = haxe_ds_StringMap.keysIterator(s.get_animations().h);
			while(key.hasNext()) {
				var key1 = key.next();
				var a = s.get_animations().h[key1];
				this._animations.h[key1] = a;
			}
		}
		return this._animations;
	}
	,addStyleSheet: function(styleSheet) {
		this._styleSheets.push(styleSheet);
	}
	,removeStyleSheet: function(styleSheet) {
		HxOverrides.remove(this._styleSheets,styleSheet);
	}
	,parse: function(css,styleSheetName,invalidateAll) {
		if(invalidateAll == null) {
			invalidateAll = false;
		}
		if(styleSheetName == null) {
			styleSheetName = "default";
		}
		var s = this.findStyleSheet(styleSheetName);
		if(s == null) {
			s = new haxe_ui_styles_StyleSheet();
			s.name = styleSheetName;
			this._styleSheets.push(s);
		}
		s.parse(css);
		this._animations = null;
		if(invalidateAll == true) {
			haxe_ui_core_Screen.get_instance().invalidateAll();
		}
	}
	,findStyleSheet: function(styleSheetName) {
		var _g = 0;
		var _g1 = this._styleSheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.name == styleSheetName) {
				return s;
			}
		}
		return null;
	}
	,buildStyleFor: function(c) {
		var style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		var _g = 0;
		var _g1 = this._styleSheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			style = s.buildStyleFor(c,style);
		}
		return style;
	}
	,clear: function(styleSheetName) {
		var s = this.findStyleSheet(styleSheetName);
		if(s != null) {
			s.clear();
			this._animations = null;
		}
	}
	,__class__: haxe_ui_styles_CompositeStyleSheet
	,__properties__: {get_animations:"get_animations"}
};
var haxe_ui_Toolkit = function() { };
$hxClasses["haxe.ui.Toolkit"] = haxe_ui_Toolkit;
haxe_ui_Toolkit.__name__ = "haxe.ui.Toolkit";
haxe_ui_Toolkit.__properties__ = {set_scale:"set_scale",get_scale:"get_scale",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",get_autoScaleDPIThreshold:"get_autoScaleDPIThreshold",set_pixelsPerRem:"set_pixelsPerRem",get_screen:"get_screen",get_assets:"get_assets",get_backendProperties:"get_backendProperties",set_theme:"set_theme",get_theme:"get_theme"};
haxe_ui_Toolkit.get_theme = function() {
	return haxe_ui_Toolkit._theme;
};
haxe_ui_Toolkit.set_theme = function(value) {
	if(haxe_ui_Toolkit._theme == value) {
		return value;
	}
	haxe_ui_Toolkit._theme = value;
	if(haxe_ui_Toolkit._initialized == true) {
		haxe_ui_themes_ThemeManager.get_instance().applyTheme(haxe_ui_Toolkit._theme);
		haxe_ui_core_Screen.get_instance().onThemeChanged();
		haxe_ui_core_Screen.get_instance().invalidateAll();
	}
	return value;
};
haxe_ui_Toolkit.get_backendProperties = function() {
	haxe_ui_Toolkit.buildBackend();
	return haxe_ui_Toolkit._backendProperties;
};
haxe_ui_Toolkit.build = function() {
	if(haxe_ui_Toolkit._built == true) {
		return;
	}
	haxe_ui_scripting_ScriptInterp.addClassAlias("Component","haxe.ui.core.Component");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Button","haxe.ui.components.Button");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarEvent","haxe.ui.components.CalendarEvent");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Calendar","haxe.ui.components.Calendar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CheckBox","haxe.ui.components.CheckBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Column","haxe.ui.components.Column");
	haxe_ui_scripting_ScriptInterp.addClassAlias("DropDown","haxe.ui.components.DropDown");
	haxe_ui_scripting_ScriptInterp.addClassAlias("IDropDownHandler","haxe.ui.components.IDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("DropDownHandler","haxe.ui.components.DropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ListDropDownHandler","haxe.ui.components.ListDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarDropDownHandler","haxe.ui.components.CalendarDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HGrid","haxe.ui.components.HGrid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalProgress","haxe.ui.components.HorizontalProgress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalRange","haxe.ui.components.HorizontalRange");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalScroll","haxe.ui.components.HorizontalScroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalSlider","haxe.ui.components.HorizontalSlider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Image","haxe.ui.components.Image");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Label","haxe.ui.components.Label");
	haxe_ui_scripting_ScriptInterp.addClassAlias("NumberStepper","haxe.ui.components.NumberStepper");
	haxe_ui_scripting_ScriptInterp.addClassAlias("OptionBox","haxe.ui.components.OptionBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Progress","haxe.ui.components.Progress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Range","haxe.ui.components.Range");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Scroll","haxe.ui.components.Scroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Slider","haxe.ui.components.Slider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Spacer","haxe.ui.components.Spacer");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Stepper","haxe.ui.components.Stepper");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Switch","haxe.ui.components.Switch");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TabBar","haxe.ui.components.TabBar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TextArea","haxe.ui.components.TextArea");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TextField","haxe.ui.components.TextField");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Toggle","haxe.ui.components.Toggle");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalProgress","haxe.ui.components.VerticalProgress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalRange","haxe.ui.components.VerticalRange");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalScroll","haxe.ui.components.VerticalScroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalSlider","haxe.ui.components.VerticalSlider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VGrid","haxe.ui.components.VGrid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Button","haxe.ui.components.Button");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarEvent","haxe.ui.components.CalendarEvent");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Calendar","haxe.ui.components.Calendar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CheckBox","haxe.ui.components.CheckBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Column","haxe.ui.components.Column");
	haxe_ui_scripting_ScriptInterp.addClassAlias("DropDown","haxe.ui.components.DropDown");
	haxe_ui_scripting_ScriptInterp.addClassAlias("IDropDownHandler","haxe.ui.components.IDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("DropDownHandler","haxe.ui.components.DropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ListDropDownHandler","haxe.ui.components.ListDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarDropDownHandler","haxe.ui.components.CalendarDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HGrid","haxe.ui.components.HGrid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalProgress","haxe.ui.components.HorizontalProgress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalRange","haxe.ui.components.HorizontalRange");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalScroll","haxe.ui.components.HorizontalScroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalSlider","haxe.ui.components.HorizontalSlider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Image","haxe.ui.components.Image");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Label","haxe.ui.components.Label");
	haxe_ui_scripting_ScriptInterp.addClassAlias("NumberStepper","haxe.ui.components.NumberStepper");
	haxe_ui_scripting_ScriptInterp.addClassAlias("OptionBox","haxe.ui.components.OptionBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Progress","haxe.ui.components.Progress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Range","haxe.ui.components.Range");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Scroll","haxe.ui.components.Scroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Slider","haxe.ui.components.Slider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Spacer","haxe.ui.components.Spacer");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Stepper","haxe.ui.components.Stepper");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Switch","haxe.ui.components.Switch");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TabBar","haxe.ui.components.TabBar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TextArea","haxe.ui.components.TextArea");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TextField","haxe.ui.components.TextField");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Toggle","haxe.ui.components.Toggle");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalProgress","haxe.ui.components.VerticalProgress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalRange","haxe.ui.components.VerticalRange");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalScroll","haxe.ui.components.VerticalScroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalSlider","haxe.ui.components.VerticalSlider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VGrid","haxe.ui.components.VGrid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Absolute","haxe.ui.containers.Absolute");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Accordion","haxe.ui.containers.Accordion");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Box","haxe.ui.containers.Box");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarView","haxe.ui.containers.CalendarView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ContinuousHBox","haxe.ui.containers.ContinuousHBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Frame","haxe.ui.containers.Frame");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Grid","haxe.ui.containers.Grid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Group","haxe.ui.containers.Group");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HBox","haxe.ui.containers.HBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Header","haxe.ui.containers.Header");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalSplitter","haxe.ui.containers.HorizontalSplitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("IVirtualContainer","haxe.ui.containers.IVirtualContainer");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ListView","haxe.ui.containers.ListView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ScrollView","haxe.ui.containers.ScrollView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Splitter","haxe.ui.containers.Splitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Stack","haxe.ui.containers.Stack");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TableView","haxe.ui.containers.TableView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TabView","haxe.ui.containers.TabView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VBox","haxe.ui.containers.VBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalSplitter","haxe.ui.containers.VerticalSplitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Absolute","haxe.ui.containers.Absolute");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Accordion","haxe.ui.containers.Accordion");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Box","haxe.ui.containers.Box");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarView","haxe.ui.containers.CalendarView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ContinuousHBox","haxe.ui.containers.ContinuousHBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Frame","haxe.ui.containers.Frame");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Grid","haxe.ui.containers.Grid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Group","haxe.ui.containers.Group");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HBox","haxe.ui.containers.HBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Header","haxe.ui.containers.Header");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalSplitter","haxe.ui.containers.HorizontalSplitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("IVirtualContainer","haxe.ui.containers.IVirtualContainer");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ListView","haxe.ui.containers.ListView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ScrollView","haxe.ui.containers.ScrollView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Splitter","haxe.ui.containers.Splitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Stack","haxe.ui.containers.Stack");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TableView","haxe.ui.containers.TableView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TabView","haxe.ui.containers.TabView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VBox","haxe.ui.containers.VBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalSplitter","haxe.ui.containers.VerticalSplitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuEvent","haxe.ui.containers.menus.MenuEvent");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Menu","haxe.ui.containers.menus.Menu");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuBar","haxe.ui.containers.menus.MenuBar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuCheckBox","haxe.ui.containers.menus.MenuCheckBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuItem","haxe.ui.containers.menus.MenuItem");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuOptionBox","haxe.ui.containers.menus.MenuOptionBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuSeparator","haxe.ui.containers.menus.MenuSeparator");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuEvent","haxe.ui.containers.menus.MenuEvent");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Menu","haxe.ui.containers.menus.Menu");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuBar","haxe.ui.containers.menus.MenuBar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuCheckBox","haxe.ui.containers.menus.MenuCheckBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuItem","haxe.ui.containers.menus.MenuItem");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuOptionBox","haxe.ui.containers.menus.MenuOptionBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuSeparator","haxe.ui.containers.menus.MenuSeparator");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Std","Std");
	haxe_ui_scripting_ScriptInterp.addStaticClass("Std",Std);
	haxe_ui_scripting_ScriptInterp.addClassAlias("Math","Math");
	haxe_ui_scripting_ScriptInterp.addStaticClass("Math",Math);
	haxe_ui_scripting_ScriptInterp.addClassAlias("StringTools","StringTools");
	haxe_ui_scripting_ScriptInterp.addStaticClass("StringTools",StringTools);
	haxe_ui_scripting_ScriptInterp.addClassAlias("Screen","haxe.ui.core.Screen");
	haxe_ui_scripting_ScriptInterp.addStaticClass("Screen",haxe_ui_core_Screen);
	haxe_ui_scripting_ScriptInterp.addClassAlias("MessageBox","haxe.ui.containers.dialogs.MessageBox");
	haxe_ui_scripting_ScriptInterp.addStaticClass("MessageBox",haxe_ui_containers_dialogs_MessageBox);
	haxe_ui_themes_ThemeManager.get_instance().getTheme("native").parent = "default";
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("native","haxeui-core/styles/native/main.css",-3.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("global","haxeui-core/styles/global.css",-4.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/main.css",-3.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/buttons.css",-2.99);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/dialogs.css",-2.9800000000000004);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/textinputs.css",-2.9700000000000006);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/scrollbars.css",-2.9600000000000009);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/scrollview.css",-2.9500000000000011);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/checkboxes.css",-2.9400000000000013);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/optionboxes.css",-2.9300000000000015);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/ranges.css",-2.9200000000000017);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/progressbars.css",-2.9100000000000019);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/sliders.css",-2.9000000000000021);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/steppers.css",-2.8900000000000023);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/tabs.css",-2.8800000000000026);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/listview.css",-2.8700000000000028);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/dropdowns.css",-2.860000000000003);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/tableview.css",-2.8500000000000032);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/switches.css",-2.8400000000000034);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/calendars.css",-2.8300000000000036);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/menus.css",-2.8200000000000038);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/accordion.css",-2.8100000000000041);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/propertygrids.css",-2.8000000000000043);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/frames.css",-2.7900000000000045);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/splitters.css",-2.7800000000000047);
	haxe_ui_scripting_ScriptInterp.addClassAlias("Component","haxe.ui.core.Component");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Button","haxe.ui.components.Button");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarEvent","haxe.ui.components.CalendarEvent");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Calendar","haxe.ui.components.Calendar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CheckBox","haxe.ui.components.CheckBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Column","haxe.ui.components.Column");
	haxe_ui_scripting_ScriptInterp.addClassAlias("DropDown","haxe.ui.components.DropDown");
	haxe_ui_scripting_ScriptInterp.addClassAlias("IDropDownHandler","haxe.ui.components.IDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("DropDownHandler","haxe.ui.components.DropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ListDropDownHandler","haxe.ui.components.ListDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarDropDownHandler","haxe.ui.components.CalendarDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HGrid","haxe.ui.components.HGrid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalProgress","haxe.ui.components.HorizontalProgress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalRange","haxe.ui.components.HorizontalRange");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalScroll","haxe.ui.components.HorizontalScroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalSlider","haxe.ui.components.HorizontalSlider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Image","haxe.ui.components.Image");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Label","haxe.ui.components.Label");
	haxe_ui_scripting_ScriptInterp.addClassAlias("NumberStepper","haxe.ui.components.NumberStepper");
	haxe_ui_scripting_ScriptInterp.addClassAlias("OptionBox","haxe.ui.components.OptionBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Progress","haxe.ui.components.Progress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Range","haxe.ui.components.Range");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Scroll","haxe.ui.components.Scroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Slider","haxe.ui.components.Slider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Spacer","haxe.ui.components.Spacer");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Stepper","haxe.ui.components.Stepper");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Switch","haxe.ui.components.Switch");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TabBar","haxe.ui.components.TabBar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TextArea","haxe.ui.components.TextArea");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TextField","haxe.ui.components.TextField");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Toggle","haxe.ui.components.Toggle");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalProgress","haxe.ui.components.VerticalProgress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalRange","haxe.ui.components.VerticalRange");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalScroll","haxe.ui.components.VerticalScroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalSlider","haxe.ui.components.VerticalSlider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VGrid","haxe.ui.components.VGrid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Button","haxe.ui.components.Button");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarEvent","haxe.ui.components.CalendarEvent");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Calendar","haxe.ui.components.Calendar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CheckBox","haxe.ui.components.CheckBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Column","haxe.ui.components.Column");
	haxe_ui_scripting_ScriptInterp.addClassAlias("DropDown","haxe.ui.components.DropDown");
	haxe_ui_scripting_ScriptInterp.addClassAlias("IDropDownHandler","haxe.ui.components.IDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("DropDownHandler","haxe.ui.components.DropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ListDropDownHandler","haxe.ui.components.ListDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarDropDownHandler","haxe.ui.components.CalendarDropDownHandler");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HGrid","haxe.ui.components.HGrid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalProgress","haxe.ui.components.HorizontalProgress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalRange","haxe.ui.components.HorizontalRange");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalScroll","haxe.ui.components.HorizontalScroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalSlider","haxe.ui.components.HorizontalSlider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Image","haxe.ui.components.Image");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Label","haxe.ui.components.Label");
	haxe_ui_scripting_ScriptInterp.addClassAlias("NumberStepper","haxe.ui.components.NumberStepper");
	haxe_ui_scripting_ScriptInterp.addClassAlias("OptionBox","haxe.ui.components.OptionBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Progress","haxe.ui.components.Progress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Range","haxe.ui.components.Range");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Scroll","haxe.ui.components.Scroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Slider","haxe.ui.components.Slider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Spacer","haxe.ui.components.Spacer");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Stepper","haxe.ui.components.Stepper");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Switch","haxe.ui.components.Switch");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TabBar","haxe.ui.components.TabBar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TextArea","haxe.ui.components.TextArea");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TextField","haxe.ui.components.TextField");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Toggle","haxe.ui.components.Toggle");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalProgress","haxe.ui.components.VerticalProgress");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalRange","haxe.ui.components.VerticalRange");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalScroll","haxe.ui.components.VerticalScroll");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalSlider","haxe.ui.components.VerticalSlider");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VGrid","haxe.ui.components.VGrid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Absolute","haxe.ui.containers.Absolute");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Accordion","haxe.ui.containers.Accordion");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Box","haxe.ui.containers.Box");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarView","haxe.ui.containers.CalendarView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ContinuousHBox","haxe.ui.containers.ContinuousHBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Frame","haxe.ui.containers.Frame");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Grid","haxe.ui.containers.Grid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Group","haxe.ui.containers.Group");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HBox","haxe.ui.containers.HBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Header","haxe.ui.containers.Header");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalSplitter","haxe.ui.containers.HorizontalSplitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("IVirtualContainer","haxe.ui.containers.IVirtualContainer");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ListView","haxe.ui.containers.ListView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ScrollView","haxe.ui.containers.ScrollView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Splitter","haxe.ui.containers.Splitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Stack","haxe.ui.containers.Stack");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TableView","haxe.ui.containers.TableView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TabView","haxe.ui.containers.TabView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VBox","haxe.ui.containers.VBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalSplitter","haxe.ui.containers.VerticalSplitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Absolute","haxe.ui.containers.Absolute");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Accordion","haxe.ui.containers.Accordion");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Box","haxe.ui.containers.Box");
	haxe_ui_scripting_ScriptInterp.addClassAlias("CalendarView","haxe.ui.containers.CalendarView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ContinuousHBox","haxe.ui.containers.ContinuousHBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Frame","haxe.ui.containers.Frame");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Grid","haxe.ui.containers.Grid");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Group","haxe.ui.containers.Group");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HBox","haxe.ui.containers.HBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Header","haxe.ui.containers.Header");
	haxe_ui_scripting_ScriptInterp.addClassAlias("HorizontalSplitter","haxe.ui.containers.HorizontalSplitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("IVirtualContainer","haxe.ui.containers.IVirtualContainer");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ListView","haxe.ui.containers.ListView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("ScrollView","haxe.ui.containers.ScrollView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Splitter","haxe.ui.containers.Splitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Stack","haxe.ui.containers.Stack");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TableView","haxe.ui.containers.TableView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("TabView","haxe.ui.containers.TabView");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VBox","haxe.ui.containers.VBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("VerticalSplitter","haxe.ui.containers.VerticalSplitter");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuEvent","haxe.ui.containers.menus.MenuEvent");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Menu","haxe.ui.containers.menus.Menu");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuBar","haxe.ui.containers.menus.MenuBar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuCheckBox","haxe.ui.containers.menus.MenuCheckBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuItem","haxe.ui.containers.menus.MenuItem");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuOptionBox","haxe.ui.containers.menus.MenuOptionBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuSeparator","haxe.ui.containers.menus.MenuSeparator");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuEvent","haxe.ui.containers.menus.MenuEvent");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Menu","haxe.ui.containers.menus.Menu");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuBar","haxe.ui.containers.menus.MenuBar");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuCheckBox","haxe.ui.containers.menus.MenuCheckBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuItem","haxe.ui.containers.menus.MenuItem");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuOptionBox","haxe.ui.containers.menus.MenuOptionBox");
	haxe_ui_scripting_ScriptInterp.addClassAlias("MenuSeparator","haxe.ui.containers.menus.MenuSeparator");
	haxe_ui_scripting_ScriptInterp.addClassAlias("Std","Std");
	haxe_ui_scripting_ScriptInterp.addStaticClass("Std",Std);
	haxe_ui_scripting_ScriptInterp.addClassAlias("Math","Math");
	haxe_ui_scripting_ScriptInterp.addStaticClass("Math",Math);
	haxe_ui_scripting_ScriptInterp.addClassAlias("StringTools","StringTools");
	haxe_ui_scripting_ScriptInterp.addStaticClass("StringTools",StringTools);
	haxe_ui_scripting_ScriptInterp.addClassAlias("Screen","haxe.ui.core.Screen");
	haxe_ui_scripting_ScriptInterp.addStaticClass("Screen",haxe_ui_core_Screen);
	haxe_ui_scripting_ScriptInterp.addClassAlias("MessageBox","haxe.ui.containers.dialogs.MessageBox");
	haxe_ui_scripting_ScriptInterp.addStaticClass("MessageBox",haxe_ui_containers_dialogs_MessageBox);
	haxe_ui_themes_ThemeManager.get_instance().getTheme("native").parent = "default";
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("native","haxeui-core/styles/native/main.css",-3.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("global","haxeui-core/styles/global.css",-4.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/main.css",-3.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/buttons.css",-2.99);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/dialogs.css",-2.9800000000000004);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/textinputs.css",-2.9700000000000006);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/scrollbars.css",-2.9600000000000009);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/scrollview.css",-2.9500000000000011);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/checkboxes.css",-2.9400000000000013);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/optionboxes.css",-2.9300000000000015);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/ranges.css",-2.9200000000000017);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/progressbars.css",-2.9100000000000019);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/sliders.css",-2.9000000000000021);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/steppers.css",-2.8900000000000023);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/tabs.css",-2.8800000000000026);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/listview.css",-2.8700000000000028);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/dropdowns.css",-2.860000000000003);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/tableview.css",-2.8500000000000032);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/switches.css",-2.8400000000000034);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/calendars.css",-2.8300000000000036);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/menus.css",-2.8200000000000038);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/accordion.css",-2.8100000000000041);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/propertygrids.css",-2.8000000000000043);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/frames.css",-2.7900000000000045);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/splitters.css",-2.7800000000000047);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("native","styles/native/main.css",-1);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("global","styles/main.css",-2);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","styles/default/main.css",-1);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","css/main.css",0.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","css/buttons.css",0.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","css/menus.css",0.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","css/tabs.css",0.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","css/trees.css",0.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","css/dialogs.css",0.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","css/scrolls.css",0.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","css/listviews.css",0.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","css/textinputs.css",0.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","css/progressbars.css",0.);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-code-editor/styles/code-editor.css",-2.);
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/check.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/cross-circle-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/cross-circle.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/exclamation-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/exclamation.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/information-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/information.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/question-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/question.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/down_arrow.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/down_arrow_square.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/down_arrow_white.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/haxeui.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/haxeui_small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/haxeui_tiny.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/left_arrow.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/left_arrow_white.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/option.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/right_arrow.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/right_arrow_square.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/right_arrow_white.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/sizer_gripper_horizontal.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/sizer_gripper_vertical.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/small-close-button.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/tiny-close-button.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/transparent_px.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/up_arrow.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/up_arrow_white.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/up_down_arrows.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/check.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/cross-circle-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/cross-circle.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/exclamation-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/exclamation.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/information-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/information.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/question-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/dialogs/question.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/down_arrow.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/down_arrow_square.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/down_arrow_white.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/haxeui.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/haxeui_small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/haxeui_tiny.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/left_arrow.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/left_arrow_white.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/option.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/right_arrow.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/right_arrow_square.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/right_arrow_white.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/sizer_gripper_horizontal.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/sizer_gripper_vertical.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/small-close-button.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/tiny-close-button.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/transparent_px.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/up_arrow.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/up_arrow_white.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/up_down_arrows.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "font", resourceId : "fonts/Roboto-Black.ttf"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/audio-file.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/blank.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/close.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/control-000-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/control-270-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/dialogs/info.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/document.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/download.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/example.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/file.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/folder.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/help.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/map.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/picture.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/plus.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/puzzle.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/refresh.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/save-all.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/save.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/settings.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/sound.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "icons/upload.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "img/parrot.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "img/parrot_small.png"});
	haxe_ui_core_ComponentClassMap.register("vsplitter","haxe.ui.containers.VerticalSplitter");
	haxe_ui_core_ComponentClassMap.register("vslider","haxe.ui.components.VerticalSlider");
	haxe_ui_core_ComponentClassMap.register("vscroll","haxe.ui.components.VerticalScroll");
	haxe_ui_core_ComponentClassMap.register("vrange","haxe.ui.components.VerticalRange");
	haxe_ui_core_ComponentClassMap.register("vprogress","haxe.ui.components.VerticalProgress");
	haxe_ui_core_ComponentClassMap.register("vgrid","haxe.ui.components.VGrid");
	haxe_ui_core_ComponentClassMap.register("verticalsplitter","haxe.ui.containers.VerticalSplitter");
	haxe_ui_core_ComponentClassMap.register("verticalslider","haxe.ui.components.VerticalSlider");
	haxe_ui_core_ComponentClassMap.register("verticalscroll","haxe.ui.components.VerticalScroll");
	haxe_ui_core_ComponentClassMap.register("verticalrange","haxe.ui.components.VerticalRange");
	haxe_ui_core_ComponentClassMap.register("verticalprogress","haxe.ui.components.VerticalProgress");
	haxe_ui_core_ComponentClassMap.register("vbox","haxe.ui.containers.VBox");
	haxe_ui_core_ComponentClassMap.register("treeviewnode","custom.TreeViewNode");
	haxe_ui_core_ComponentClassMap.register("treeview","custom.TreeView");
	haxe_ui_core_ComponentClassMap.register("toggle","haxe.ui.components.Toggle");
	haxe_ui_core_ComponentClassMap.register("textfield","haxe.ui.components.TextField");
	haxe_ui_core_ComponentClassMap.register("textarea","haxe.ui.components.TextArea");
	haxe_ui_core_ComponentClassMap.register("text","haxe.ui.components.Label");
	haxe_ui_core_ComponentClassMap.register("tabview","haxe.ui.containers.TabView");
	haxe_ui_core_ComponentClassMap.register("tabmanager","panels.TabManager");
	haxe_ui_core_ComponentClassMap.register("tableview","haxe.ui.containers.TableView");
	haxe_ui_core_ComponentClassMap.register("tabbar","haxe.ui.components.TabBar");
	haxe_ui_core_ComponentClassMap.register("switch","haxe.ui.components.Switch");
	haxe_ui_core_ComponentClassMap.register("stepper","haxe.ui.components.Stepper");
	haxe_ui_core_ComponentClassMap.register("stack","haxe.ui.containers.Stack");
	haxe_ui_core_ComponentClassMap.register("splitter","haxe.ui.containers.Splitter");
	haxe_ui_core_ComponentClassMap.register("spacer","haxe.ui.components.Spacer");
	haxe_ui_core_ComponentClassMap.register("sourceeditor","editors.SourceEditor");
	haxe_ui_core_ComponentClassMap.register("slider","haxe.ui.components.Slider");
	haxe_ui_core_ComponentClassMap.register("shadereditor","editors.ShaderEditor");
	haxe_ui_core_ComponentClassMap.register("scrollview","haxe.ui.containers.ScrollView");
	haxe_ui_core_ComponentClassMap.register("scroll","haxe.ui.components.Scroll");
	haxe_ui_core_ComponentClassMap.register("range","haxe.ui.components.Range");
	haxe_ui_core_ComponentClassMap.register("propertygroup","haxe.ui.containers.properties.PropertyGroup");
	haxe_ui_core_ComponentClassMap.register("propertygrid","haxe.ui.containers.properties.PropertyGrid");
	haxe_ui_core_ComponentClassMap.register("property","haxe.ui.containers.properties.Property");
	haxe_ui_core_ComponentClassMap.register("projectmanager","panels.ProjectManager");
	haxe_ui_core_ComponentClassMap.register("progress","haxe.ui.components.Progress");
	haxe_ui_core_ComponentClassMap.register("optionbox","haxe.ui.components.OptionBox");
	haxe_ui_core_ComponentClassMap.register("numberstepper","haxe.ui.components.NumberStepper");
	haxe_ui_core_ComponentClassMap.register("menuseparator","haxe.ui.containers.menus.MenuSeparator");
	haxe_ui_core_ComponentClassMap.register("menuoptionbox","haxe.ui.containers.menus.MenuOptionBox");
	haxe_ui_core_ComponentClassMap.register("menuitem","haxe.ui.containers.menus.MenuItem");
	haxe_ui_core_ComponentClassMap.register("menucheckbox","haxe.ui.containers.menus.MenuCheckBox");
	haxe_ui_core_ComponentClassMap.register("menubar","haxe.ui.containers.menus.MenuBar");
	haxe_ui_core_ComponentClassMap.register("menu","haxe.ui.containers.menus.Menu");
	haxe_ui_core_ComponentClassMap.register("logmanager","panels.LogManager");
	haxe_ui_core_ComponentClassMap.register("listview","haxe.ui.containers.ListView");
	haxe_ui_core_ComponentClassMap.register("label","haxe.ui.components.Label");
	haxe_ui_core_ComponentClassMap.register("khanvas","panels.Khanvas");
	haxe_ui_core_ComponentClassMap.register("itemrenderer","haxe.ui.core.ItemRenderer");
	haxe_ui_core_ComponentClassMap.register("imageeditor","editors.ImageEditor");
	haxe_ui_core_ComponentClassMap.register("image","haxe.ui.components.Image");
	haxe_ui_core_ComponentClassMap.register("iframe","custom.IFrame");
	haxe_ui_core_ComponentClassMap.register("hsplitter","haxe.ui.containers.HorizontalSplitter");
	haxe_ui_core_ComponentClassMap.register("hslider","haxe.ui.components.HorizontalSlider");
	haxe_ui_core_ComponentClassMap.register("hscroll","haxe.ui.components.HorizontalScroll");
	haxe_ui_core_ComponentClassMap.register("hrange","haxe.ui.components.HorizontalRange");
	haxe_ui_core_ComponentClassMap.register("hprogress","haxe.ui.components.HorizontalProgress");
	haxe_ui_core_ComponentClassMap.register("horizontalsplitter","haxe.ui.containers.HorizontalSplitter");
	haxe_ui_core_ComponentClassMap.register("horizontalslider","haxe.ui.components.HorizontalSlider");
	haxe_ui_core_ComponentClassMap.register("horizontalscroll","haxe.ui.components.HorizontalScroll");
	haxe_ui_core_ComponentClassMap.register("horizontalrange","haxe.ui.components.HorizontalRange");
	haxe_ui_core_ComponentClassMap.register("horizontalprogress","haxe.ui.components.HorizontalProgress");
	haxe_ui_core_ComponentClassMap.register("hgrid","haxe.ui.components.HGrid");
	haxe_ui_core_ComponentClassMap.register("header","haxe.ui.containers.Header");
	haxe_ui_core_ComponentClassMap.register("hbox","haxe.ui.containers.HBox");
	haxe_ui_core_ComponentClassMap.register("group","haxe.ui.containers.Group");
	haxe_ui_core_ComponentClassMap.register("grid","haxe.ui.containers.Grid");
	haxe_ui_core_ComponentClassMap.register("frame","haxe.ui.containers.Frame");
	haxe_ui_core_ComponentClassMap.register("fileselector","custom.FileSelector");
	haxe_ui_core_ComponentClassMap.register("dropdown","haxe.ui.components.DropDown");
	haxe_ui_core_ComponentClassMap.register("dialog","haxe.ui.containers.dialogs.Dialog");
	haxe_ui_core_ComponentClassMap.register("continuoushbox","haxe.ui.containers.ContinuousHBox");
	haxe_ui_core_ComponentClassMap.register("component","haxe.ui.core.Component");
	haxe_ui_core_ComponentClassMap.register("column","haxe.ui.components.Column");
	haxe_ui_core_ComponentClassMap.register("codeeditor","haxe.ui.editors.code.monaco.MonacoCodeEditor");
	haxe_ui_core_ComponentClassMap.register("checkbox","haxe.ui.components.CheckBox");
	haxe_ui_core_ComponentClassMap.register("canvas","custom.Canvas");
	haxe_ui_core_ComponentClassMap.register("calendarview","haxe.ui.containers.CalendarView");
	haxe_ui_core_ComponentClassMap.register("calendar","haxe.ui.components.Calendar");
	haxe_ui_core_ComponentClassMap.register("button","haxe.ui.components.Button");
	haxe_ui_core_ComponentClassMap.register("box","haxe.ui.containers.Box");
	haxe_ui_core_ComponentClassMap.register("basicitemrenderer","haxe.ui.core.BasicItemRenderer");
	haxe_ui_core_ComponentClassMap.register("accordion","haxe.ui.containers.Accordion");
	haxe_ui_core_ComponentClassMap.register("absolute","haxe.ui.containers.Absolute");
	haxe_ui_core_LayoutClassMap.register("virtuallayout","haxe.ui.layouts.VirtualLayout");
	haxe_ui_core_LayoutClassMap.register("virtual","haxe.ui.layouts.VirtualLayout");
	haxe_ui_core_LayoutClassMap.register("verticalvirtuallayout","haxe.ui.layouts.VerticalVirtualLayout");
	haxe_ui_core_LayoutClassMap.register("verticalvirtual","haxe.ui.layouts.VerticalVirtualLayout");
	haxe_ui_core_LayoutClassMap.register("verticallayout","haxe.ui.layouts.VerticalLayout");
	haxe_ui_core_LayoutClassMap.register("verticalgridlayout","haxe.ui.layouts.VerticalGridLayout");
	haxe_ui_core_LayoutClassMap.register("verticalgrid","haxe.ui.layouts.VerticalGridLayout");
	haxe_ui_core_LayoutClassMap.register("vertical","haxe.ui.layouts.VerticalLayout");
	haxe_ui_core_LayoutClassMap.register("scrollviewlayout","haxe.ui.layouts.ScrollViewLayout");
	haxe_ui_core_LayoutClassMap.register("scrollview","haxe.ui.layouts.ScrollViewLayout");
	haxe_ui_core_LayoutClassMap.register("layout","haxe.ui.layouts.Layout");
	haxe_ui_core_LayoutClassMap.register("horizontallayout","haxe.ui.layouts.HorizontalLayout");
	haxe_ui_core_LayoutClassMap.register("horizontalgridlayout","haxe.ui.layouts.HorizontalGridLayout");
	haxe_ui_core_LayoutClassMap.register("horizontalgrid","haxe.ui.layouts.HorizontalGridLayout");
	haxe_ui_core_LayoutClassMap.register("horizontalcontinuouslayout","haxe.ui.layouts.HorizontalContinuousLayout");
	haxe_ui_core_LayoutClassMap.register("horizontalcontinuous","haxe.ui.layouts.HorizontalContinuousLayout");
	haxe_ui_core_LayoutClassMap.register("horizontal","haxe.ui.layouts.HorizontalLayout");
	haxe_ui_core_LayoutClassMap.register("delegatelayout","haxe.ui.layouts.DelegateLayout");
	haxe_ui_core_LayoutClassMap.register("delegate","haxe.ui.layouts.DelegateLayout");
	haxe_ui_core_LayoutClassMap.register("defaultlayout","haxe.ui.layouts.DefaultLayout");
	haxe_ui_core_LayoutClassMap.register("default","haxe.ui.layouts.DefaultLayout");
	haxe_ui_core_LayoutClassMap.register("absolutelayout","haxe.ui.layouts.AbsoluteLayout");
	haxe_ui_core_LayoutClassMap.register("absolute","haxe.ui.layouts.AbsoluteLayout");
	haxe_ui_core_LayoutClassMap.register("","haxe.ui.layouts.Layout");
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["style"] = "padding:0px; padding-bottom: 1px";
	section1.values.h["nodeType"] = "button";
	section1.values.h["id"] = "haxe.ui.components.Button";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	var section2 = section1.addSection("layout");
	section2.values.h["class"] = "haxe.ui.backend.html5.native.layouts.ButtonLayout";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "text";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.SpanText";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "icon";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementImage";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["type"] = "checkbox";
	section1.values.h["id"] = "haxe.ui.components.CheckBox";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.LabeledInputElement";
	var section2 = section1.addSection("size");
	section2.values.h["incrementWidthBy"] = "16";
	section2.values.h["incrementHeightBy"] = "2";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.size.TextSize";
	var section2 = section1.addSection("behaviour");
	section2.values.h["index"] = "last";
	section2.values.h["id"] = "text";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.SpanText";
	var section2 = section1.addSection("behaviour");
	section2.values.h["removeIfNegative"] = "true";
	section2.values.h["name"] = "checked";
	section2.values.h["id"] = "selected";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	section2.values.h["child"] = "input";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["type"] = "radio";
	section1.values.h["id"] = "haxe.ui.components.OptionBox";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.LabeledInputElement";
	var section2 = section1.addSection("size");
	section2.values.h["incrementWidthBy"] = "16";
	section2.values.h["incrementHeightBy"] = "2";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.size.TextSize";
	var section2 = section1.addSection("behaviour");
	section2.values.h["index"] = "last";
	section2.values.h["id"] = "text";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.SpanText";
	var section2 = section1.addSection("behaviour");
	section2.values.h["removeIfNegative"] = "true";
	section2.values.h["name"] = "checked";
	section2.values.h["id"] = "selected";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	section2.values.h["child"] = "input";
	var section2 = section1.addSection("behaviour");
	section2.values.h["removeIfNegative"] = "true";
	section2.values.h["name"] = "name";
	section2.values.h["id"] = "componentGroup";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.RadioGroup";
	section2.values.h["child"] = "input";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["style"] = "padding-left:2px;cursor:pointer;padding-top:3px;padding-bottom:3px;";
	section1.values.h["nodeType"] = "input";
	section1.values.h["id"] = "haxe.ui.components.TextField";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	var section2 = section1.addSection("size");
	section2.values.h["class"] = "haxe.ui.backend.html5.native.size.ElementSize";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "text";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementValue";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "placeholder";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementPlaceholder";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["type"] = "number";
	section1.values.h["style"] = "padding-left:2px;cursor:pointer;padding-top:10px;padding-bottom:11px;";
	section1.values.h["nodeType"] = "input";
	section1.values.h["id"] = "haxe.ui.components.NumberStepper";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	var section2 = section1.addSection("size");
	section2.values.h["class"] = "haxe.ui.backend.html5.native.size.ElementSize";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "text";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementValue";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "step";
	section2.values.h["id"] = "step";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "pos";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementValue";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "min";
	section2.values.h["id"] = "min";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "max";
	section2.values.h["id"] = "max";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["style"] = "resize:none;line-height:1.4;";
	section1.values.h["nodeType"] = "textarea";
	section1.values.h["id"] = "haxe.ui.components.TextArea";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	var section2 = section1.addSection("size");
	section2.values.h["class"] = "haxe.ui.backend.html5.native.size.ElementSize";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "text";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementValue";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["id"] = "haxe.ui.containers.ScrollView";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	var section2 = section1.addSection("builder");
	section2.values.h["class"] = "haxe.ui.backend.html5.native.builders.ScrollViewBuilder";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "hscrollPos";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementScrollLeft";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "vscrollPos";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementScrollTop";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "contentLayoutName";
	section2.values.h["class"] = "haxe.ui.behaviours.DefaultBehaviour";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["id"] = "haxe.ui.containers.ListView";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["id"] = "haxe.ui.containers.TableView";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["style"] = "padding:3px;";
	section1.values.h["nodeType"] = "select";
	section1.values.h["id"] = "haxe.ui.components.DropDown";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	section1.values.h["allowChildren"] = "false";
	var section2 = section1.addSection("size");
	section2.values.h["class"] = "haxe.ui.backend.html5.native.size.ElementSize";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "dataSource";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.SelectDataSource";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "selectedItem";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.SelectedItem";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "selectedIndex";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.SelectedIndex";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["nodeType"] = "progress";
	section1.values.h["id"] = "haxe.ui.components.HorizontalProgress";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	var section2 = section1.addSection("size");
	section2.values.h["class"] = "haxe.ui.backend.html5.native.size.ElementSize";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "max";
	section2.values.h["id"] = "max";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "value";
	section2.values.h["id"] = "end";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["remove"] = "true";
	section2.values.h["name"] = "value";
	section2.values.h["id"] = "indeterminate";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementAttribute";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["style"] = "-webkit-transform: rotate(-90deg);-webkit-transform-origin: 100% 0%;-moz-orient: vertical;writing-mode: bt-lr;";
	section1.values.h["orient"] = "vertical";
	section1.values.h["nodeType"] = "progress";
	section1.values.h["id"] = "haxe.ui.components.VerticalProgress";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	var section2 = section1.addSection("size");
	section2.values.h["class"] = "haxe.ui.backend.html5.native.size.ElementSize";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "max";
	section2.values.h["id"] = "max";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "value";
	section2.values.h["id"] = "end";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["remove"] = "true";
	section2.values.h["name"] = "value";
	section2.values.h["id"] = "indeterminate";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementAttribute";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["type"] = "range";
	section1.values.h["style"] = "margin: 0;padding:0;";
	section1.values.h["nodeType"] = "input";
	section1.values.h["id"] = "haxe.ui.components.HorizontalSlider";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	section1.values.h["allowChildren"] = "false";
	var section2 = section1.addSection("size");
	section2.values.h["class"] = "haxe.ui.backend.html5.native.size.ElementSize";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "min";
	section2.values.h["id"] = "min";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "max";
	section2.values.h["id"] = "max";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "value";
	section2.values.h["id"] = "pos";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "value";
	section2.values.h["id"] = "start";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "value";
	section2.values.h["id"] = "end";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["type"] = "range";
	section1.values.h["style"] = "padding:0;margin: 0;-webkit-appearance: slider-vertical;-moz-orient: vertical;writing-mode: bt-lr;";
	section1.values.h["orient"] = "vertical";
	section1.values.h["nodeType"] = "input";
	section1.values.h["id"] = "haxe.ui.components.VerticalSlider";
	section1.values.h["class"] = "haxe.ui.backend.html5.native.NativeElement";
	section1.values.h["allowChildren"] = "false";
	var section2 = section1.addSection("size");
	section2.values.h["class"] = "haxe.ui.backend.html5.native.size.ElementSize";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "min";
	section2.values.h["id"] = "min";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "max";
	section2.values.h["id"] = "max";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "value";
	section2.values.h["id"] = "pos";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "value";
	section2.values.h["id"] = "start";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["name"] = "value";
	section2.values.h["id"] = "end";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
	var section2 = section1.addSection("behaviour");
	section2.values.h["id"] = "disabled";
	section2.values.h["class"] = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
	var section1 = haxe_ui_Toolkit.nativeConfig.addSection("component");
	section1.values.h["id"] = "haxe.ui.editors.code.scintilla.ScintillaEditor";
	section1.values.h["class"] = "hx.widgets.StyledTextCtrl";
	section1.values.h["allowChildren"] = "false";
	haxe_ui_Toolkit.buildBackend();
	haxe_ui_Toolkit._built = true;
};
haxe_ui_Toolkit.buildBackend = function() {
	if(haxe_ui_Toolkit._backendBuilt == true) {
		return;
	}
	haxe_ui_Toolkit._backendBuilt = true;
};
haxe_ui_Toolkit.init = function(options) {
	haxe_ui_Toolkit.build();
	haxe_ui_themes_ThemeManager.get_instance().applyTheme(haxe_ui_Toolkit._theme);
	if(options != null) {
		haxe_ui_Toolkit.get_screen().set_options(options);
		haxe_ui_ToolkitAssets.get_instance().options = options;
	}
	haxe_ui_Toolkit.get_screen().registerEvent("keydown",haxe_ui_Toolkit.onKeyDown);
	haxe_ui_Toolkit._initialized = true;
};
haxe_ui_Toolkit.onKeyDown = function(event) {
	if(event.keyCode == 9) {
		if(event.shiftKey == false) {
			haxe_ui_focus_FocusManager.get_instance().focusNext();
		} else {
			haxe_ui_focus_FocusManager.get_instance().focusPrev();
		}
	}
};
haxe_ui_Toolkit.messageBox = function(message,title,type,modal,callback) {
	if(modal == null) {
		modal = true;
	}
	if(type == null) {
		type = "info";
	} else if(type == "info") {
		type = "info";
	} else if(type == "question") {
		type = "question";
	} else if(type == "warning") {
		type = "warning";
	} else if(type == "error") {
		type = "error";
	}
	var messageBox = new haxe_ui_containers_dialogs_MessageBox();
	messageBox.set_type(type);
	messageBox.set_message(message);
	messageBox.modal = modal;
	if(title != null) {
		messageBox.set_title(title);
	}
	messageBox.show();
	if(callback != null) {
		messageBox.registerEvent("dialogClosed",function(e) {
			callback(e.button);
		});
	}
	return messageBox;
};
haxe_ui_Toolkit.dialog = function(contents,title,buttons,modal,callback) {
	if(modal == null) {
		modal = true;
	}
	var dialog = new haxe_ui_containers_dialogs_Dialog();
	dialog.modal = modal;
	if(title != null) {
		dialog.set_title(title);
	}
	if(buttons != null) {
		dialog.buttons = buttons;
	}
	dialog.addComponent(contents);
	dialog.show();
	if(callback != null) {
		dialog.registerEvent("dialogClosed",function(e) {
			callback(e.button);
		});
	}
	return dialog;
};
haxe_ui_Toolkit.get_assets = function() {
	return haxe_ui_ToolkitAssets.get_instance();
};
haxe_ui_Toolkit.get_screen = function() {
	return haxe_ui_core_Screen.get_instance();
};
haxe_ui_Toolkit.componentFromAsset = function(assetId) {
	var data = haxe_ui_ToolkitAssets.get_instance().getText(assetId);
	return haxe_ui_Toolkit.componentFromString(data,null,new haxe_ui_parsers_ui_resolvers_AssetResourceResolver(assetId));
};
haxe_ui_Toolkit.componentFromString = function(data,type,resourceResolver,callback) {
	if(data == null || data.length == 0) {
		return null;
	}
	if(type == null) {
		if(StringTools.startsWith(StringTools.trim(data),"<")) {
			type = "xml";
		}
	}
	var parser = haxe_ui_parsers_ui_ComponentParser.get(type);
	if(parser == null) {
		haxe_Log.trace("WARNING: type \"" + type + "\" not recognised",{ fileName : "haxe/ui/Toolkit.hx", lineNumber : 184, className : "haxe.ui.Toolkit", methodName : "componentFromString"});
		return null;
	}
	var c = parser.parse(data,resourceResolver);
	var _g = 0;
	var _g1 = c.styles;
	while(_g < _g1.length) {
		var style = _g1[_g];
		++_g;
		if(style.scope == "global") {
			haxe_ui_Toolkit.styleSheet.parse(style.style);
		}
	}
	var component = haxe_ui_Toolkit.buildComponentFromInfo(c,callback);
	var fullScript = "";
	var _g = 0;
	var _g1 = c.scriptlets;
	while(_g < _g1.length) {
		var scriptString = _g1[_g];
		++_g;
		fullScript += scriptString;
	}
	component.set_script(fullScript);
	return component;
};
haxe_ui_Toolkit.buildComponentFromInfo = function(c,callback) {
	if(c.condition != null && new haxe_ui_scripting_ConditionEvaluator().evaluate(c.condition) == false) {
		return null;
	}
	var className = haxe_ui_core_ComponentClassMap.get(c.type.toLowerCase());
	if(className == null) {
		haxe_Log.trace("WARNING: no class found for component: " + c.type,{ fileName : "haxe/ui/Toolkit.hx", lineNumber : 214, className : "haxe.ui.Toolkit", methodName : "buildComponentFromInfo"});
		return null;
	}
	var component = Type.createInstance($hxClasses[className],[]);
	if(component == null) {
		haxe_Log.trace("WARNING: could not create class instance: " + className,{ fileName : "haxe/ui/Toolkit.hx", lineNumber : 220, className : "haxe.ui.Toolkit", methodName : "buildComponentFromInfo"});
		return null;
	}
	if(c.id != null) {
		component.set_id(c.id);
	}
	if(c.left != null) {
		component.set_left(c.left);
	}
	if(c.top != null) {
		component.set_top(c.top);
	}
	if(c.width != null) {
		component.set_width(c.width);
	}
	if(c.height != null) {
		component.set_height(c.height);
	}
	if(c.percentWidth != null) {
		component.set_percentWidth(c.percentWidth);
	}
	if(c.percentHeight != null) {
		component.set_percentHeight(c.percentHeight);
	}
	if(c.text != null) {
		component.set_text(c.text);
	}
	if(c.styleNames != null) {
		component.set_styleNames(c.styleNames);
	}
	if(c.style != null) {
		component.set_styleString(c.style);
	}
	if(c.layout != null) {
		var layout = haxe_ui_Toolkit.buildLayoutFromInfo(c.layout);
		component.set_layout(layout);
	}
	if(((component) instanceof haxe_ui_containers_ScrollView)) {
		var scrollview = js_Boot.__cast(component , haxe_ui_containers_ScrollView);
		if(c.contentWidth != null) {
			scrollview.set_contentWidth(c.contentWidth);
		}
		if(c.contentHeight != null) {
			scrollview.set_contentHeight(c.contentHeight);
		}
		if(c.percentContentWidth != null) {
			scrollview.set_percentContentWidth(c.percentContentWidth);
		}
		if(c.percentContentHeight != null) {
			scrollview.set_percentContentHeight(c.percentContentHeight);
		}
	}
	var propName = haxe_ds_StringMap.keysIterator(c.properties.h);
	while(propName.hasNext()) {
		var propName1 = propName.next();
		var propValue = c.properties.h[propName1];
		if(Object.prototype.hasOwnProperty.call(haxe_ui_core_ComponentFieldMap.MAP.h,propName1)) {
			propName1 = haxe_ui_core_ComponentFieldMap.MAP.h[propName1];
		}
		if(StringTools.startsWith(propName1,"on")) {
			component.addScriptEvent(propName1,propValue);
		} else {
			propValue = haxe_ui_util_TypeConverter.convert(propValue);
			Reflect.setProperty(component,propName1,propValue);
		}
	}
	if(js_Boot.__implements(component,haxe_ui_core_IDataComponent) && c.data != null) {
		(js_Boot.__cast(component , haxe_ui_core_IDataComponent)).set_dataSource(new haxe_ui_data_DataSourceFactory().fromString(c.get_dataString(),haxe_ui_data_ArrayDataSource));
	}
	var _g = 0;
	var _g1 = c.children;
	while(_g < _g1.length) {
		var childInfo = _g1[_g];
		++_g;
		var childComponent = haxe_ui_Toolkit.buildComponentFromInfo(childInfo,callback);
		if(childComponent != null) {
			component.addComponent(childComponent);
		}
	}
	if(callback != null) {
		callback(component);
	}
	return component;
};
haxe_ui_Toolkit.buildLayoutFromInfo = function(l) {
	var className = haxe_ui_core_LayoutClassMap.get(l.type.toLowerCase());
	if(className == null) {
		haxe_Log.trace("WARNING: no class found for layout: " + l.type,{ fileName : "haxe/ui/Toolkit.hx", lineNumber : 279, className : "haxe.ui.Toolkit", methodName : "buildLayoutFromInfo"});
		return null;
	}
	var layout = Type.createInstance($hxClasses[className],[]);
	if(layout == null) {
		haxe_Log.trace("WARNING: could not create class instance: " + className,{ fileName : "haxe/ui/Toolkit.hx", lineNumber : 285, className : "haxe.ui.Toolkit", methodName : "buildLayoutFromInfo"});
		return null;
	}
	var propName = haxe_ds_StringMap.keysIterator(l.properties.h);
	while(propName.hasNext()) {
		var propName1 = propName.next();
		var propValue = l.properties.h[propName1];
		Reflect.setProperty(layout,propName1,haxe_ui_util_Variant.fromDynamic(propValue));
	}
	return layout;
};
haxe_ui_Toolkit.set_pixelsPerRem = function(value) {
	if(haxe_ui_Toolkit.pixelsPerRem == value) {
		return value;
	}
	haxe_ui_Toolkit.pixelsPerRem = value;
	haxe_ui_core_Screen.get_instance().refreshStyleRootComponents();
	return value;
};
haxe_ui_Toolkit.get_autoScaleDPIThreshold = function() {
	if(haxe_ui_core_Screen.get_instance().get_isRetina() == true) {
		return 192;
	}
	return 120;
};
haxe_ui_Toolkit.get_scaleX = function() {
	if(haxe_ui_Toolkit._scaleX == 0) {
		if(haxe_ui_Toolkit.autoScale == true) {
			var dpi = haxe_ui_core_Screen.get_instance().get_dpi();
			if(dpi > haxe_ui_Toolkit.get_autoScaleDPIThreshold()) {
				haxe_ui_Toolkit._scaleX = Math.round(dpi / haxe_ui_Toolkit.get_autoScaleDPIThreshold());
			} else {
				haxe_ui_Toolkit._scaleX = 1;
			}
		} else {
			haxe_ui_Toolkit._scaleX = 1;
		}
	}
	return haxe_ui_Toolkit._scaleX;
};
haxe_ui_Toolkit.set_scaleX = function(value) {
	if(haxe_ui_Toolkit._scaleX == value) {
		return value;
	}
	haxe_ui_Toolkit._scaleX = value;
	haxe_ui_Toolkit.autoScale = false;
	return value;
};
haxe_ui_Toolkit.get_scaleY = function() {
	if(haxe_ui_Toolkit._scaleY == 0) {
		if(haxe_ui_Toolkit.autoScale == true) {
			var dpi = haxe_ui_core_Screen.get_instance().get_dpi();
			if(dpi > haxe_ui_Toolkit.get_autoScaleDPIThreshold()) {
				haxe_ui_Toolkit._scaleY = Math.round(dpi / haxe_ui_Toolkit.get_autoScaleDPIThreshold());
			} else {
				haxe_ui_Toolkit._scaleY = 1;
			}
		} else {
			haxe_ui_Toolkit._scaleY = 1;
		}
	}
	return haxe_ui_Toolkit._scaleY;
};
haxe_ui_Toolkit.set_scaleY = function(value) {
	if(haxe_ui_Toolkit._scaleY == value) {
		return value;
	}
	haxe_ui_Toolkit._scaleY = value;
	haxe_ui_Toolkit.autoScale = false;
	return value;
};
haxe_ui_Toolkit.get_scale = function() {
	return Math.max(haxe_ui_Toolkit.get_scaleX(),haxe_ui_Toolkit.get_scaleY());
};
haxe_ui_Toolkit.set_scale = function(value) {
	haxe_ui_Toolkit.set_scaleX(value);
	haxe_ui_Toolkit.set_scaleY(value);
	return value;
};
haxe_ui_Toolkit.callLater = function(fn) {
	new haxe_ui_CallLater(fn);
};
var haxe_ui_backend_AssetsBase = function() {
};
$hxClasses["haxe.ui.backend.AssetsBase"] = haxe_ui_backend_AssetsBase;
haxe_ui_backend_AssetsBase.__name__ = "haxe.ui.backend.AssetsBase";
haxe_ui_backend_AssetsBase.prototype = {
	getTextDelegate: function(resourceId) {
		return null;
	}
	,getImageInternal: function(resourceId,callback) {
		callback(null);
	}
	,getImageFromHaxeResource: function(resourceId,callback) {
		callback(resourceId,null);
	}
	,imageFromBytes: function(bytes,callback) {
		callback(null);
	}
	,getFontInternal: function(resourceId,callback) {
		callback(null);
	}
	,getFontFromHaxeResource: function(resourceId,callback) {
		callback(resourceId,null);
	}
	,imageInfoFromImageData: function(imageData) {
		return { data : imageData, width : 0, height : 0};
	}
	,__class__: haxe_ui_backend_AssetsBase
};
var haxe_ui_backend_AssetsImpl = function() {
	haxe_ui_backend_AssetsBase.call(this);
};
$hxClasses["haxe.ui.backend.AssetsImpl"] = haxe_ui_backend_AssetsImpl;
haxe_ui_backend_AssetsImpl.__name__ = "haxe.ui.backend.AssetsImpl";
haxe_ui_backend_AssetsImpl.__super__ = haxe_ui_backend_AssetsBase;
haxe_ui_backend_AssetsImpl.prototype = $extend(haxe_ui_backend_AssetsBase.prototype,{
	getImageInternal: function(resourceId,callback) {
		var bytes = haxe_Resource.getBytes(resourceId);
		if(bytes != null) {
			callback(null);
			return;
		}
		var image = window.document.createElement("img");
		image.onload = function(e) {
			var imageInfo = { width : image.width, height : image.height, data : image};
			callback(imageInfo);
		};
		image.onerror = function(e) {
			callback(null);
		};
		image.src = resourceId;
	}
	,getImageFromHaxeResource: function(resourceId,callback) {
		var bytes = haxe_Resource.getBytes(resourceId);
		this.imageFromBytes(bytes,function(imageInfo) {
			callback(resourceId,imageInfo);
		});
	}
	,imageFromBytes: function(bytes,callback) {
		if(bytes == null) {
			callback(null);
			return;
		}
		var image = window.document.createElement("img");
		image.onload = function(e) {
			var imageInfo = { width : image.width, height : image.height, data : image};
			callback(imageInfo);
		};
		image.onerror = function(e) {
			window.console.log(e);
			callback(null);
		};
		var blob = new Blob([bytes.b.bufferValue]);
		var blobUrl = URL.createObjectURL(blob);
		image.src = blobUrl;
	}
	,getFontInternal: function(resourceId,callback) {
		var bytes = haxe_Resource.getBytes(resourceId);
		if(bytes == null) {
			haxe_ui_backend_html5_util_FontDetect.onFontLoaded(resourceId,function(f) {
				var fontInfo = { data : f};
				callback(fontInfo);
			},function(f) {
				callback(null);
			});
			return;
		}
		this.getFontFromHaxeResource(resourceId,function(r,f) {
			callback(f);
		});
	}
	,getFontFromHaxeResource: function(resourceId,callback) {
		var bytes = haxe_Resource.getBytes(resourceId);
		if(bytes == null) {
			callback(resourceId,null);
			return;
		}
		var fontFamilyParts = resourceId.split("/");
		var fontFamily = fontFamilyParts[fontFamilyParts.length - 1];
		if(fontFamily.indexOf(".") != -1) {
			fontFamily = HxOverrides.substr(fontFamily,0,fontFamily.indexOf("."));
		}
		var fontFace = new FontFace(fontFamily,bytes.b.bufferValue);
		fontFace.load().then(function(loadedFace) {
			window.document.fonts.add(loadedFace);
			haxe_ui_backend_html5_util_FontDetect.onFontLoaded(fontFamily,function(f) {
				var fontInfo = { data : fontFamily};
				callback(resourceId,fontInfo);
			},function(f) {
				callback(resourceId,null);
			});
		}).catch(function(error) {
			callback(resourceId,null);
		});
	}
	,__class__: haxe_ui_backend_AssetsImpl
});
var haxe_ui_ToolkitAssets = function() {
	this.options = null;
	this.preloadList = [];
	haxe_ui_backend_AssetsImpl.call(this);
};
$hxClasses["haxe.ui.ToolkitAssets"] = haxe_ui_ToolkitAssets;
haxe_ui_ToolkitAssets.__name__ = "haxe.ui.ToolkitAssets";
haxe_ui_ToolkitAssets.__properties__ = {get_instance:"get_instance"};
haxe_ui_ToolkitAssets.get_instance = function() {
	if(haxe_ui_ToolkitAssets._instance == null) {
		haxe_ui_ToolkitAssets._instance = new haxe_ui_ToolkitAssets();
	}
	return haxe_ui_ToolkitAssets._instance;
};
haxe_ui_ToolkitAssets.__super__ = haxe_ui_backend_AssetsImpl;
haxe_ui_ToolkitAssets.prototype = $extend(haxe_ui_backend_AssetsImpl.prototype,{
	preloadList: null
	,options: null
	,_fontCache: null
	,_fontCallbacks: null
	,_imageCache: null
	,_imageCallbacks: null
	,getFont: function(resourceId,callback,useCache) {
		if(useCache == null) {
			useCache = true;
		}
		var _gthis = this;
		if(this._fontCache != null && this._fontCache.h[resourceId] != null && useCache == true) {
			callback(this._fontCache.h[resourceId]);
		} else {
			if(this._fontCallbacks == null) {
				this._fontCallbacks = new haxe_ui_util_CallbackMap();
			}
			this._fontCallbacks.add(resourceId,callback);
			if(this._fontCallbacks.count(resourceId) == 1) {
				this.getFontInternal(resourceId,function(font) {
					if(font != null) {
						_gthis._onFontLoaded(resourceId,font);
					} else if(haxe_Resource.listNames().indexOf(resourceId) != -1) {
						_gthis.getFontFromHaxeResource(resourceId,$bind(_gthis,_gthis._onFontLoaded));
					} else {
						_gthis._fontCallbacks.remove(resourceId,callback);
						callback(null);
					}
				});
			}
		}
	}
	,_onFontLoaded: function(resourceId,font) {
		if(this._fontCache == null) {
			this._fontCache = new haxe_ds_StringMap();
		}
		this._fontCache.h[resourceId] = font;
		this._fontCallbacks.invokeAndRemove(resourceId,font);
	}
	,getImage: function(resourceId,callback,useCache) {
		if(useCache == null) {
			useCache = true;
		}
		var _gthis = this;
		var orginalResourceId = resourceId;
		resourceId = this.runPlugins(resourceId);
		if(this._imageCache != null && this._imageCache.h[resourceId] != null && useCache == true) {
			callback(this._imageCache.h[resourceId]);
		} else {
			if(this._imageCallbacks == null) {
				this._imageCallbacks = new haxe_ui_util_CallbackMap();
			}
			this._imageCallbacks.add(resourceId,callback);
			if(this._imageCallbacks.count(resourceId) == 1) {
				this.getImageInternal(resourceId,function(imageInfo) {
					if(imageInfo != null) {
						_gthis._onImageLoaded(resourceId,imageInfo);
					} else if(haxe_Resource.listNames().indexOf(orginalResourceId) != -1) {
						_gthis._imageCallbacks.remove(resourceId,callback);
						_gthis._imageCallbacks.add(orginalResourceId,callback);
						_gthis.getImageFromHaxeResource(orginalResourceId,$bind(_gthis,_gthis._onImageLoaded));
					} else if(haxe_Resource.listNames().indexOf(resourceId) != -1) {
						_gthis.getImageFromHaxeResource(resourceId,$bind(_gthis,_gthis._onImageLoaded));
					} else {
						_gthis._imageCallbacks.remove(resourceId,callback);
						callback(null);
					}
				});
			}
		}
	}
	,_onImageLoaded: function(resourceId,imageInfo) {
		if(imageInfo != null && (imageInfo.width == -1 || imageInfo.width == -1)) {
			haxe_Log.trace("WARNING: imageData.originalWidth == -1 || imageData.originalHeight == -1",{ fileName : "haxe/ui/ToolkitAssets.hx", lineNumber : 106, className : "haxe.ui.ToolkitAssets", methodName : "_onImageLoaded"});
		}
		if(this._imageCache == null) {
			this._imageCache = new haxe_ds_StringMap();
		}
		this._imageCache.h[resourceId] = imageInfo;
		this._imageCallbacks.invokeAndRemove(resourceId,imageInfo);
	}
	,getText: function(resourceId) {
		var s = this.getTextDelegate(resourceId);
		if(s == null) {
			s = haxe_Resource.getString(resourceId);
		}
		return s;
	}
	,getBytes: function(resourceId) {
		return null;
	}
	,_plugins: null
	,addPlugin: function(plugin) {
		if(this._plugins == null) {
			this._plugins = [];
		}
		this._plugins.push(plugin);
	}
	,runPlugins: function(asset) {
		if(this._plugins == null) {
			return asset;
		}
		var _g = 0;
		var _g1 = this._plugins;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			asset = p.invoke(asset);
		}
		return asset;
	}
	,__class__: haxe_ui_ToolkitAssets
});
var haxe_ui_assets_AssetPlugin = function() {
};
$hxClasses["haxe.ui.assets.AssetPlugin"] = haxe_ui_assets_AssetPlugin;
haxe_ui_assets_AssetPlugin.__name__ = "haxe.ui.assets.AssetPlugin";
haxe_ui_assets_AssetPlugin.prototype = {
	_props: null
	,invoke: function(asset) {
		return asset;
	}
	,setProperty: function(name,value) {
		if(this._props == null) {
			this._props = new haxe_ds_StringMap();
		}
		this._props.h[name] = value;
	}
	,getProperty: function(name,defaultValue) {
		if(this._props == null) {
			return defaultValue;
		}
		var v = this._props.h[name];
		if(v == null) {
			v = defaultValue;
		}
		return v;
	}
	,__class__: haxe_ui_assets_AssetPlugin
};
var haxe_ui_backend_ImageSurface = function() {
};
$hxClasses["haxe.ui.backend.ImageSurface"] = haxe_ui_backend_ImageSurface;
haxe_ui_backend_ImageSurface.__name__ = "haxe.ui.backend.ImageSurface";
haxe_ui_backend_ImageSurface.prototype = {
	__class__: haxe_ui_backend_ImageSurface
};
var haxe_ui_backend_ImageBase = function() {
	this._imageHeight = 0;
	this._imageWidth = 0;
	this._top = 0;
	this._left = 0;
	this.aspectRatio = 1;
	haxe_ui_backend_ImageSurface.call(this);
};
$hxClasses["haxe.ui.backend.ImageBase"] = haxe_ui_backend_ImageBase;
haxe_ui_backend_ImageBase.__name__ = "haxe.ui.backend.ImageBase";
haxe_ui_backend_ImageBase.__super__ = haxe_ui_backend_ImageSurface;
haxe_ui_backend_ImageBase.prototype = $extend(haxe_ui_backend_ImageSurface.prototype,{
	parentComponent: null
	,aspectRatio: null
	,_left: null
	,_top: null
	,_imageWidth: null
	,_imageHeight: null
	,_imageInfo: null
	,_imageClipRect: null
	,dispose: function() {
	}
	,validateData: function() {
	}
	,validatePosition: function() {
	}
	,validateDisplay: function() {
	}
	,__class__: haxe_ui_backend_ImageBase
});
var haxe_ui_backend_ImageDisplayImpl = function() {
	haxe_ui_backend_ImageBase.call(this);
	this.element = window.document.createElement("img");
	this.element.style.position = "absolute";
	this.element.style.borderRadius = "inherit";
	this.element.style.setProperty("pointer-events","none");
};
$hxClasses["haxe.ui.backend.ImageDisplayImpl"] = haxe_ui_backend_ImageDisplayImpl;
haxe_ui_backend_ImageDisplayImpl.__name__ = "haxe.ui.backend.ImageDisplayImpl";
haxe_ui_backend_ImageDisplayImpl.__super__ = haxe_ui_backend_ImageBase;
haxe_ui_backend_ImageDisplayImpl.prototype = $extend(haxe_ui_backend_ImageBase.prototype,{
	element: null
	,dispose: function() {
		if(this.element != null) {
			haxe_ui_backend_html5_HtmlUtils.removeElement(this.element);
		}
	}
	,validateData: function() {
		if(this.element.src != this._imageInfo.data.src) {
			this.element.src = this._imageInfo.data.src;
		}
	}
	,validatePosition: function() {
		var style = this.element.style;
		style.left = "" + this._left + "px";
		style.top = "" + this._top + "px";
	}
	,validateDisplay: function() {
		var style = this.element.style;
		style.width = "" + this._imageWidth + "px";
		style.height = "" + this._imageHeight + "px";
		if(this._imageClipRect != null) {
			var clipValue = "rect(" + ("" + (-this._top + this._imageClipRect.top) + "px") + "," + ("" + (-this._left + this._imageClipRect.left + this._imageClipRect.width) + "px") + "," + ("" + (-this._top + this._imageClipRect.top + this._imageClipRect.height) + "px") + "," + ("" + (-this._left + this._imageClipRect.left) + "px") + ")";
			if(this.element.style.clip != clipValue) {
				this.element.style.clip = clipValue;
			}
		} else if(this.element.style.clip != null) {
			this.element.style.removeProperty("clip");
		}
	}
	,__class__: haxe_ui_backend_ImageDisplayImpl
});
var haxe_ui_backend_MessageBoxBase = function() {
	this._type = null;
	haxe_ui_containers_dialogs_Dialog.call(this);
	var hbox = new haxe_ui_containers_HBox();
	hbox.set_percentWidth(100);
	hbox.set_styleString("spacing:10px;");
	this.addComponent(hbox);
	this.iconImage = new haxe_ui_components_Image();
	this.iconImage.set_id("iconImage");
	hbox.addComponent(this.iconImage);
	this.messageLabel = new haxe_ui_components_Label();
	this.messageLabel.set_id("messageLabel");
	this.messageLabel.set_percentWidth(100);
	hbox.addComponent(this.messageLabel);
};
$hxClasses["haxe.ui.backend.MessageBoxBase"] = haxe_ui_backend_MessageBoxBase;
haxe_ui_backend_MessageBoxBase.__name__ = "haxe.ui.backend.MessageBoxBase";
haxe_ui_backend_MessageBoxBase.__super__ = haxe_ui_containers_dialogs_Dialog;
haxe_ui_backend_MessageBoxBase.prototype = $extend(haxe_ui_containers_dialogs_Dialog.prototype,{
	iconImage: null
	,messageLabel: null
	,get_message: function() {
		return this.messageLabel.get_text();
	}
	,set_message: function(value) {
		this.messageLabel.set_text(value);
		return value;
	}
	,_type: null
	,get_type: function() {
		return this._type;
	}
	,set_type: function(value) {
		this._type = haxe_ui_containers_dialogs_MessageBoxType.toString(value);
		this.iconImage.addClass(this._type);
		this.addClass(this._type);
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_dialogs_Dialog.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_dialogs_Dialog.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_backend_MessageBoxBase();
	}
	,__class__: haxe_ui_backend_MessageBoxBase
	,__properties__: $extend(haxe_ui_containers_dialogs_Dialog.prototype.__properties__,{set_type:"set_type",get_type:"get_type",set_message:"set_message",get_message:"get_message"})
});
var haxe_ui_backend_PlatformBase = function() {
};
$hxClasses["haxe.ui.backend.PlatformBase"] = haxe_ui_backend_PlatformBase;
haxe_ui_backend_PlatformBase.__name__ = "haxe.ui.backend.PlatformBase";
haxe_ui_backend_PlatformBase.prototype = {
	getMetric: function(id) {
		return 0;
	}
	,getColor: function(id) {
		return null;
	}
	,__class__: haxe_ui_backend_PlatformBase
};
var haxe_ui_backend_PlatformImpl = function() {
	haxe_ui_backend_PlatformBase.call(this);
};
$hxClasses["haxe.ui.backend.PlatformImpl"] = haxe_ui_backend_PlatformImpl;
haxe_ui_backend_PlatformImpl.__name__ = "haxe.ui.backend.PlatformImpl";
haxe_ui_backend_PlatformImpl.calcScrollSize = function() {
	if(haxe_ui_backend_PlatformImpl._vscrollWidth >= 0 && haxe_ui_backend_PlatformImpl._hscrollHeight >= 0) {
		return;
	}
	var div = window.document.createElement("div");
	div.style.position = "absolute";
	div.style.top = "-99999px";
	div.style.left = "-99999px";
	div.style.height = "100px";
	div.style.width = "100px";
	div.style.overflow = "scroll";
	window.document.body.appendChild(div);
	haxe_ui_backend_PlatformImpl._vscrollWidth = div.offsetWidth - div.clientWidth;
	haxe_ui_backend_PlatformImpl._hscrollHeight = div.offsetHeight - div.clientHeight;
	haxe_ui_backend_html5_HtmlUtils.removeElement(div);
};
haxe_ui_backend_PlatformImpl.__super__ = haxe_ui_backend_PlatformBase;
haxe_ui_backend_PlatformImpl.prototype = $extend(haxe_ui_backend_PlatformBase.prototype,{
	getMetric: function(id) {
		switch(id) {
		case "patform.metrics.hscroll.height":
			haxe_ui_backend_PlatformImpl.calcScrollSize();
			return haxe_ui_backend_PlatformImpl._hscrollHeight;
		case "patform.metrics.vscroll.width":
			haxe_ui_backend_PlatformImpl.calcScrollSize();
			return haxe_ui_backend_PlatformImpl._vscrollWidth;
		}
		return haxe_ui_backend_PlatformBase.prototype.getMetric.call(this,id);
	}
	,__class__: haxe_ui_backend_PlatformImpl
});
var haxe_ui_backend_ScreenBase = function() {
	this._focus = null;
	this._topLevelComponents = [];
};
$hxClasses["haxe.ui.backend.ScreenBase"] = haxe_ui_backend_ScreenBase;
haxe_ui_backend_ScreenBase.__name__ = "haxe.ui.backend.ScreenBase";
haxe_ui_backend_ScreenBase.prototype = {
	_topLevelComponents: null
	,_focus: null
	,get_focus: function() {
		return this._focus;
	}
	,set_focus: function(value) {
		this._focus = value;
		return this._focus;
	}
	,_options: null
	,get_options: function() {
		return this._options;
	}
	,set_options: function(value) {
		this._options = value;
		return value;
	}
	,dpi: null
	,get_dpi: function() {
		return 72;
	}
	,get_title: function() {
		return null;
	}
	,set_title: function(s) {
		return s;
	}
	,width: null
	,get_width: function() {
		return 0;
	}
	,height: null
	,get_height: function() {
		return 0;
	}
	,isRetina: null
	,get_isRetina: function() {
		return false;
	}
	,addComponent: function(component) {
		return component;
	}
	,removeComponent: function(component) {
		return component;
	}
	,handleSetComponentIndex: function(child,index) {
	}
	,resizeComponent: function(c) {
		if(c.get_percentWidth() > 0) {
			c.set_width(this.get_width() * c.get_percentWidth() / 100);
		}
		if(c.get_percentHeight() > 0) {
			c.set_height(this.get_height() * c.get_percentHeight() / 100);
		}
	}
	,supportsEvent: function(type) {
		return false;
	}
	,mapEvent: function(type,listener) {
	}
	,unmapEvent: function(type,listener) {
	}
	,__class__: haxe_ui_backend_ScreenBase
	,__properties__: {get_isRetina:"get_isRetina",get_height:"get_height",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_dpi:"get_dpi",set_options:"set_options",get_options:"get_options",set_focus:"set_focus",get_focus:"get_focus"}
};
var haxe_ui_backend_ScreenImpl = function() {
	this._hasListener = false;
	this._percentContainerHeightAdded = false;
	this._percentContainerWidthAdded = false;
	haxe_ui_backend_ScreenBase.call(this);
	this._mapping = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.backend.ScreenImpl"] = haxe_ui_backend_ScreenImpl;
haxe_ui_backend_ScreenImpl.__name__ = "haxe.ui.backend.ScreenImpl";
haxe_ui_backend_ScreenImpl.__super__ = haxe_ui_backend_ScreenBase;
haxe_ui_backend_ScreenImpl.prototype = $extend(haxe_ui_backend_ScreenBase.prototype,{
	_mapping: null
	,set_options: function(value) {
		haxe_ui_backend_ScreenBase.prototype.set_options.call(this,value);
		var cx = haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.html5.container.width",null);
		var cy = haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.html5.container.height",null);
		var c = this.get_container();
		if(cx != null) {
			c.style.width = cx;
		}
		if(cy != null) {
			c.style.height = cy;
		}
		return value;
	}
	,get_dpi: function() {
		return haxe_ui_backend_html5_HtmlUtils.get_dpi();
	}
	,get_title: function() {
		return window.document.title;
	}
	,set_title: function(s) {
		window.document.title = s;
		return s;
	}
	,get_width: function() {
		var cx = this.get_container().offsetWidth;
		if(cx <= 0) {
			var _g = 0;
			var _g1 = this._topLevelComponents;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(c.get_width() > cx) {
					cx = c.get_width();
				}
			}
		}
		return cx;
	}
	,get_height: function() {
		var cy = this.get_container().offsetHeight;
		if(cy <= 0) {
			var _g = 0;
			var _g1 = this._topLevelComponents;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(c.get_height() > cy) {
					cy = c.get_height();
				}
			}
		}
		return cy;
	}
	,get_isRetina: function() {
		return haxe_ui_backend_html5_HtmlUtils.isRetinaDisplay();
	}
	,addComponent: function(component) {
		this.get_container().appendChild(component.element);
		component.ready();
		if(haxe_ui_Toolkit.get_scaleX() != 1 || haxe_ui_Toolkit.get_scaleY() != 1) {
			var transformString = "";
			if(haxe_ui_Toolkit.get_scaleX() != 1) {
				transformString += "scaleX(" + haxe_ui_Toolkit.get_scaleX() + ") ";
			}
			if(haxe_ui_Toolkit.get_scaleY() != 1) {
				transformString += "scaleY(" + haxe_ui_Toolkit.get_scaleY() + ") ";
			}
			component.element.style.transform = transformString;
			component.element.style.transformOrigin = "top left";
		}
		this._topLevelComponents.push(component);
		if(component.get_percentWidth() != null) {
			this.addPercentContainerWidth();
		}
		if(component.get_percentHeight() != null) {
			this.addPercentContainerHeight();
		}
		this.addResizeListener();
		this.resizeComponent(component);
		return component;
	}
	,_percentContainerWidthAdded: null
	,addPercentContainerWidth: function() {
		if(this._percentContainerWidthAdded == true) {
			return;
		}
		this._percentContainerWidthAdded = true;
		var sheet = haxe_ui_backend_html5_util_StyleSheetHelper.getValidStyleSheet();
		sheet.insertRule("#haxeui-container-parent {\r\n            margin: 0;\r\n            width: 100%;\r\n        }",sheet.cssRules.length);
		sheet.insertRule("#haxeui-container {\r\n            margin: 0;\r\n            width: 100%;\r\n        }",sheet.cssRules.length);
	}
	,_percentContainerHeightAdded: null
	,addPercentContainerHeight: function() {
		if(this._percentContainerHeightAdded == true) {
			return;
		}
		this._percentContainerHeightAdded = true;
		var sheet = haxe_ui_backend_html5_util_StyleSheetHelper.getValidStyleSheet();
		sheet.insertRule("#haxeui-container-parent {\r\n            margin: 0;\r\n            height: 100%;\r\n        }",sheet.cssRules.length);
		sheet.insertRule("#haxeui-container {\r\n            margin: 0;\r\n            height: 100%;\r\n        }",sheet.cssRules.length);
	}
	,removeComponent: function(component) {
		HxOverrides.remove(this._topLevelComponents,component);
		if(this.get_container().contains(component.element) == true) {
			this.get_container().removeChild(component.element);
		}
		return component;
	}
	,handleSetComponentIndex: function(child,index) {
		if(index == (js_Boot.__cast(this , haxe_ui_core_Screen)).rootComponents.length - 1) {
			this.get_container().appendChild(child.element);
		} else {
			haxe_ui_backend_html5_HtmlUtils.insertBefore((js_Boot.__cast(this , haxe_ui_core_Screen)).rootComponents[index + 1].element,child.element);
		}
	}
	,container: null
	,get_container: function() {
		var c = null;
		if(this.get_options() == null || this.get_options().container == null) {
			c = window.document.body;
		} else {
			c = this.get_options().container;
		}
		if(c.style.overflow == null || c.style.overflow == "") {
			c.style.overflow = "hidden";
		}
		if(c.id != "haxeui-container") {
			c.id = "haxeui-container";
			if(c.parentElement != null && c.parentElement.id != "haxeui-container-parent") {
				c.parentElement.id = "haxeui-container-parent";
			}
		}
		return c;
	}
	,_hasListener: null
	,addResizeListener: function() {
		var _gthis = this;
		if(this._hasListener == true) {
			return;
		}
		this._hasListener = true;
		window.addEventListener("resize",function(e) {
			var _g = 0;
			var _g1 = _gthis._topLevelComponents;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				_gthis.resizeComponent(c);
			}
		});
	}
	,supportsEvent: function(type) {
		return haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type] != null;
	}
	,mapEvent: function(type,listener) {
		var _gthis = this;
		var container = window.document.body;
		switch(type) {
		case "click":case "doubleclick":case "mousedown":case "mousemove":case "mouseout":case "mouseover":case "mouseup":
			if(type == "mousemove" && Object.prototype.hasOwnProperty.call(this._mapping.h,type) == false && haxe_ui_backend_html5_UserAgent.get_instance().get_chrome() == true) {
				var fn = null;
				fn = function(e) {
					container.removeEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h["mousemove"],fn);
					if(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type] != null) {
						container.removeEventListener(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type],fn);
					}
					if(Object.prototype.hasOwnProperty.call(_gthis._mapping.h,type) == false) {
						if(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type] != null) {
							container.addEventListener(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type],$bind(_gthis,_gthis.__onMouseEvent));
						}
						_gthis._mapping.h[type] = listener;
						container.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h["mousemove"],$bind(_gthis,_gthis.__onMouseEvent));
					}
				};
				container.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h["mousemove"],fn);
				if(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type] != null) {
					container.addEventListener(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type],fn);
				}
				return;
			}
			if(Object.prototype.hasOwnProperty.call(this._mapping.h,type) == false) {
				if(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type] != null) {
					container.addEventListener(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type],$bind(this,this.__onMouseEvent));
				}
				this._mapping.h[type] = listener;
				container.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onMouseEvent));
			}
			break;
		case "keydown":case "keyup":
			if(Object.prototype.hasOwnProperty.call(this._mapping.h,type) == false) {
				this._mapping.h[type] = listener;
				container.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onKeyEvent));
			}
			break;
		}
	}
	,unmapEvent: function(type,listener) {
		var container = window.document.body;
		switch(type) {
		case "click":case "doubleclick":case "mousedown":case "mousemove":case "mouseout":case "mouseover":case "mouseup":
			var _this = this._mapping;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			container.removeEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onMouseEvent));
			if(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type] != null) {
				container.removeEventListener(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type],$bind(this,this.__onMouseEvent));
			}
			break;
		case "keydown":case "keyup":
			var _this = this._mapping;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			container.removeEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onKeyEvent));
			break;
		}
	}
	,__onMouseEvent: function(event) {
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		if(type != null) {
			var fn = this._mapping.h[type];
			if(fn != null) {
				var mouseEvent = new haxe_ui_events_MouseEvent(type);
				mouseEvent._originalEvent = event;
				var touchEvent = false;
				try {
					touchEvent = ((event) instanceof TouchEvent);
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
				}
				if(touchEvent == true) {
					var te = js_Boot.__cast(event , TouchEvent);
					mouseEvent.screenX = (te.changedTouches[0].pageX - haxe_ui_core_Screen.get_instance().get_container().offsetLeft) / haxe_ui_Toolkit.get_scaleX();
					mouseEvent.screenY = (te.changedTouches[0].pageY - haxe_ui_core_Screen.get_instance().get_container().offsetTop) / haxe_ui_Toolkit.get_scaleY();
					mouseEvent.touchEvent = true;
				} else if(((event) instanceof MouseEvent)) {
					var me = js_Boot.__cast(event , MouseEvent);
					mouseEvent.buttonDown = me.buttons != 0;
					mouseEvent.screenX = (me.pageX - haxe_ui_core_Screen.get_instance().get_container().offsetLeft) / haxe_ui_Toolkit.get_scaleX();
					mouseEvent.screenY = (me.pageY - haxe_ui_core_Screen.get_instance().get_container().offsetTop) / haxe_ui_Toolkit.get_scaleY();
					mouseEvent.ctrlKey = me.ctrlKey;
					mouseEvent.shiftKey = me.shiftKey;
				}
				fn(mouseEvent);
			}
		}
	}
	,__onKeyEvent: function(event) {
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		if(type != null) {
			if(event.keyCode == 9 || event.which == 9) {
				event.preventDefault();
				event.stopImmediatePropagation();
				event.stopPropagation();
			}
			var fn = this._mapping.h[type];
			if(fn != null) {
				var keyboardEvent = new haxe_ui_events_KeyboardEvent(type);
				keyboardEvent._originalEvent = event;
				keyboardEvent.keyCode = event.keyCode;
				keyboardEvent.ctrlKey = event.ctrlKey;
				keyboardEvent.shiftKey = event.shiftKey;
				fn(keyboardEvent);
			}
		}
	}
	,__class__: haxe_ui_backend_ScreenImpl
	,__properties__: $extend(haxe_ui_backend_ScreenBase.prototype.__properties__,{get_container:"get_container"})
});
var haxe_ui_backend_TextBase = function() {
	this._textHeight = 0;
	this._textWidth = 0;
	this._height = 0;
	this._width = 0;
	this._top = 0;
	this._left = 0;
	this._htmlText = null;
	this._inputData = new haxe_ui_core_TextInputData();
	this._displayData = new haxe_ui_core_TextDisplayData();
};
$hxClasses["haxe.ui.backend.TextBase"] = haxe_ui_backend_TextBase;
haxe_ui_backend_TextBase.__name__ = "haxe.ui.backend.TextBase";
haxe_ui_backend_TextBase.prototype = {
	parentComponent: null
	,_displayData: null
	,_inputData: null
	,_text: null
	,_htmlText: null
	,_left: null
	,_top: null
	,_width: null
	,_height: null
	,_textWidth: null
	,_textHeight: null
	,_textStyle: null
	,_fontInfo: null
	,focus: function() {
	}
	,blur: function() {
	}
	,_dataSource: null
	,get_dataSource: function() {
		return this._dataSource;
	}
	,set_dataSource: function(value) {
		this._dataSource = value;
		return value;
	}
	,validateData: function() {
	}
	,validateStyle: function() {
		return false;
	}
	,validatePosition: function() {
	}
	,validateDisplay: function() {
	}
	,measureText: function() {
	}
	,__class__: haxe_ui_backend_TextBase
	,__properties__: {set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"}
};
var haxe_ui_backend_TextDisplayImpl = function() {
	this._fixedHeight = false;
	this._fixedWidth = false;
	haxe_ui_backend_TextBase.call(this);
	this._displayData.multiline = false;
	this.element = this.createElement();
};
$hxClasses["haxe.ui.backend.TextDisplayImpl"] = haxe_ui_backend_TextDisplayImpl;
haxe_ui_backend_TextDisplayImpl.__name__ = "haxe.ui.backend.TextDisplayImpl";
haxe_ui_backend_TextDisplayImpl.__super__ = haxe_ui_backend_TextBase;
haxe_ui_backend_TextDisplayImpl.prototype = $extend(haxe_ui_backend_TextBase.prototype,{
	element: null
	,_html: null
	,validateData: function() {
		var html = this.normalizeText(this._text);
		if(this._html != html) {
			this.element.innerHTML = html;
			this._html = html;
			if(this.get_autoWidth() == false) {
				this._fixedWidth = false;
				this._fixedHeight = false;
			}
		}
	}
	,_rawFontName: null
	,validateStyle: function() {
		var measureTextRequired = false;
		if(this._displayData.wordWrap == true && this.element.style.whiteSpace != null) {
			this.element.style.whiteSpace = "normal";
			this.element.style.wordBreak = "break-word";
			measureTextRequired = true;
		} else if(this._displayData.wordWrap == false && this.element.style.whiteSpace != "nowrap") {
			this.element.style.whiteSpace = "nowrap";
			measureTextRequired = true;
		}
		if(this._textStyle != null) {
			if(this.element.style.textAlign != this._textStyle.textAlign) {
				this.element.style.textAlign = this._textStyle.textAlign;
			}
			var fontSizeValue = "" + this._textStyle.fontSize + "px";
			if(this.element.style.fontSize != fontSizeValue) {
				this.element.style.fontSize = fontSizeValue;
				measureTextRequired = true;
			}
			if(this._textStyle.fontBold == true && this.element.style.fontWeight != "bold") {
				this.element.style.fontWeight = "bold";
				measureTextRequired = true;
			}
			if(this._textStyle.fontItalic == true && this.element.style.fontStyle != "italic") {
				this.element.style.fontStyle = "italic";
				measureTextRequired = true;
			}
			if(this._textStyle.fontUnderline == true && this.element.style.textDecoration != "underline") {
				this.element.style.textDecoration = "underline";
				measureTextRequired = true;
			}
			var colorValue = haxe_ui_backend_html5_HtmlUtils.color(this._textStyle.color);
			if(this.element.style.color != colorValue) {
				this.element.style.color = colorValue;
			}
			if(this._fontInfo != null && this._fontInfo.data != this._rawFontName) {
				this.element.style.fontFamily = this._fontInfo.data;
				this._rawFontName = this._fontInfo.data;
				measureTextRequired = true;
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout");
				}
			}
		}
		if(measureTextRequired == true) {
			this._fixedWidth = false;
			this._fixedHeight = false;
		}
		return measureTextRequired;
	}
	,validatePosition: function() {
		var style = this.element.style;
		style.left = "" + this._left + "px";
		style.top = "" + this._top + "px";
	}
	,_fixedWidth: null
	,_fixedHeight: null
	,validateDisplay: function() {
		var style = this.element.style;
		var allowFixed = true;
		if(this.get_autoWidth() == false && style.width != "" + this._width + "px") {
			allowFixed = false;
		}
		if(this._width > 0 && this.get_autoWidth() == false) {
			this._fixedWidth = true;
			style.width = "" + this._width + "px";
		}
		if(this._height > 0 && this.get_autoWidth() == false) {
			this._fixedHeight = true;
			style.height = "" + this._height + "px";
		}
		if(allowFixed == false) {
			this._fixedHeight = false;
		}
	}
	,measureText: function() {
		if(this._fixedWidth == true && this._fixedHeight == true) {
			return;
		}
		if(haxe_ui_backend_html5_HtmlUtils.DIV_HELPER == null) {
			haxe_ui_backend_html5_HtmlUtils.createDivHelper();
		}
		var div = haxe_ui_backend_html5_HtmlUtils.DIV_HELPER;
		this.setTempDivData(div);
		if(this._fixedWidth == false) {
			this._textWidth = div.clientWidth;
		}
		if(this._fixedHeight == false) {
			this._textHeight = div.clientHeight;
		}
	}
	,createElement: function() {
		var el = window.document.createElement("div");
		el.style.position = "absolute";
		el.style.cursor = "inherit";
		return el;
	}
	,setTempDivData: function(div) {
		var t = this._text;
		if(t == null || t.length == 0) {
			t = "|";
		}
		div.style.fontFamily = this.element.style.fontFamily;
		div.style.fontSize = this.element.style.fontSize;
		div.style.whiteSpace = this.element.style.whiteSpace;
		div.style.wordBreak = this.element.style.wordBreak;
		if(this.get_autoWidth() == false) {
			div.style.width = this._width > 0 ? "" + ("" + this._width + "px") : "";
		} else {
			div.style.width = "";
		}
		div.innerHTML = this.normalizeText(t);
	}
	,normalizeText: function(text) {
		var html = haxe_ui_backend_html5_HtmlUtils.escape(text);
		html = StringTools.replace(html,"\\n","\n");
		html = StringTools.replace(html,"\r\n","<br/>");
		html = StringTools.replace(html,"\r","<br/>");
		html = StringTools.replace(html,"\n","<br/>");
		return html;
	}
	,autoWidth: null
	,get_autoWidth: function() {
		if(((this.parentComponent) instanceof haxe_ui_components_Label)) {
			return (js_Boot.__cast(this.parentComponent , haxe_ui_components_Label)).get_autoWidth();
		}
		return false;
	}
	,__class__: haxe_ui_backend_TextDisplayImpl
	,__properties__: $extend(haxe_ui_backend_TextBase.prototype.__properties__,{get_autoWidth:"get_autoWidth"})
});
var haxe_ui_backend_TextInputImpl = function() {
	haxe_ui_backend_TextDisplayImpl.call(this);
};
$hxClasses["haxe.ui.backend.TextInputImpl"] = haxe_ui_backend_TextInputImpl;
haxe_ui_backend_TextInputImpl.__name__ = "haxe.ui.backend.TextInputImpl";
haxe_ui_backend_TextInputImpl.__super__ = haxe_ui_backend_TextDisplayImpl;
haxe_ui_backend_TextInputImpl.prototype = $extend(haxe_ui_backend_TextDisplayImpl.prototype,{
	focus: function() {
		this.element.focus({preventScroll: true});
	}
	,blur: function() {
		this.element.blur();
	}
	,onChangeEvent: function(e) {
		var newText = null;
		if(((this.parentComponent) instanceof haxe_ui_components_TextArea)) {
			newText = (js_Boot.__cast(this.element , HTMLTextAreaElement)).value;
		} else {
			newText = (js_Boot.__cast(this.element , HTMLInputElement)).value;
		}
		if(newText != this._text) {
			this._text = newText;
			this.measureText();
			if(this._inputData.onChangedCallback != null) {
				this._inputData.onChangedCallback();
			}
		}
	}
	,onScroll: function(e) {
		this._inputData.hscrollPos = this.element.scrollLeft;
		this._inputData.vscrollPos = this.element.scrollTop;
		this._inputData.hscrollMax = this._textWidth - this._width;
		this._inputData.hscrollPageSize = this._width * this._inputData.hscrollMax / this._textWidth;
		this._inputData.vscrollMax = this._textHeight - this._height;
		this._inputData.vscrollPageSize = this._height * this._inputData.vscrollMax / this._textHeight;
		if(this._inputData.onScrollCallback != null) {
			this._inputData.onScrollCallback();
		}
	}
	,validateData: function() {
		if(this._text != null) {
			var html = this.normalizeText(this._text);
			if(((this.element) instanceof HTMLInputElement)) {
				(js_Boot.__cast(this.element , HTMLInputElement)).value = html;
			} else if(((this.element) instanceof HTMLTextAreaElement)) {
				(js_Boot.__cast(this.element , HTMLTextAreaElement)).value = html;
			}
		}
		var hscrollValue = this._inputData.hscrollPos | 0;
		if(this.element.scrollLeft != hscrollValue) {
			this.element.scrollLeft = hscrollValue;
		}
		var vscrollValue = this._inputData.vscrollPos | 0;
		if(this.element.scrollTop != vscrollValue) {
			this.element.scrollTop = vscrollValue;
		}
	}
	,validateStyle: function() {
		var measureTextRequired = false;
		if(this._displayData.multiline == false && ((this.element) instanceof HTMLInputElement) == false || this._displayData.multiline == true && ((this.element) instanceof HTMLTextAreaElement) == false) {
			var newElement = this.createElement();
			this.element.parentElement.appendChild(newElement);
			haxe_ui_backend_html5_HtmlUtils.removeElement(this.element);
			this.element.removeEventListener("input",$bind(this,this.onChangeEvent));
			this.element.removeEventListener("propertychange",$bind(this,this.onChangeEvent));
			this.element.removeEventListener("scroll",$bind(this,this.onScroll));
			this.element = newElement;
			this.validateData();
			measureTextRequired = true;
		}
		if(((this.element) instanceof HTMLInputElement)) {
			var inputElement = this.element;
			if(this._inputData.password == true && inputElement.type != "password") {
				inputElement.type = "password";
			} else if(this._inputData.password == false && inputElement.type != "") {
				inputElement.type = "";
			}
		}
		if(this.parentComponent.get_disabled() || this.parentComponent._interactivityDisabled == true) {
			this.element.style.cursor = "not-allowed";
			if(((this.element) instanceof HTMLInputElement)) {
				(js_Boot.__cast(this.element , HTMLInputElement)).disabled = true;
			} else if(((this.element) instanceof HTMLTextAreaElement)) {
				(js_Boot.__cast(this.element , HTMLTextAreaElement)).disabled = true;
			}
		} else {
			this.element.style.cursor = null;
			if(((this.element) instanceof HTMLInputElement)) {
				(js_Boot.__cast(this.element , HTMLInputElement)).disabled = false;
			} else if(((this.element) instanceof HTMLTextAreaElement)) {
				(js_Boot.__cast(this.element , HTMLTextAreaElement)).disabled = false;
			}
		}
		if(!haxe_ui_backend_TextDisplayImpl.prototype.validateStyle.call(this)) {
			return measureTextRequired;
		} else {
			return true;
		}
	}
	,measureText: function() {
		if(((this.element) instanceof HTMLTextAreaElement)) {
			this._textWidth = (js_Boot.__cast(this.element , HTMLTextAreaElement)).scrollWidth;
			this._textHeight = (js_Boot.__cast(this.element , HTMLTextAreaElement)).scrollHeight;
		} else {
			haxe_ui_backend_TextDisplayImpl.prototype.measureText.call(this);
		}
		this._inputData.hscrollMax = this._textWidth - this._width;
		this._inputData.hscrollPageSize = this._width * this._inputData.hscrollMax / this._textWidth;
		this._inputData.vscrollMax = this._textHeight - this._height;
		this._inputData.vscrollPageSize = this._height * this._inputData.vscrollMax / this._textHeight;
	}
	,createElement: function() {
		if(this.element != null) {
			this.element.removeEventListener("input",$bind(this,this.onChangeEvent));
			this.element.removeEventListener("propertychange",$bind(this,this.onChangeEvent));
			this.element.removeEventListener("scroll",$bind(this,this.onScroll));
		}
		var el = null;
		if(this._displayData.multiline == false) {
			el = window.document.createElement("input");
			el.style.border = "none";
			el.style.outline = "none";
			el.style.whiteSpace = "nowrap";
			el.style.overflow = "hidden";
			el.style.cursor = "initial";
			el.style.position = "absolute";
			el.style.backgroundColor = "inherit";
			el.style.padding = "0px";
			el.style.marginLeft = "-1px";
			el.style.marginTop = "-1px";
			el.spellcheck = false;
		} else {
			el = window.document.createElement("textarea");
			el.style.border = "none";
			el.style.resize = "none";
			el.style.outline = "none";
			el.style.lineHeight = "1.4";
			el.style.padding = "0px";
			el.style.margin = "0px";
			el.style.bottom = "0px";
			el.style.right = "0px";
			el.style.overflow = "hidden";
			el.style.cursor = "initial";
			el.style.position = "absolute";
			el.style.backgroundColor = "inherit";
			el.style.whiteSpace = "normal";
			el.id = "textArea";
			el.spellcheck = false;
			el.onkeydown = function(e) {
				if(e.keyCode == 9 || e.which == 9) {
					e.preventDefault();
					e.stopImmediatePropagation();
					e.stopPropagation();
					var ta = js_Boot.__cast(el , HTMLTextAreaElement);
					var s = ta.selectionStart;
					ta.value = ta.value.substring(0,ta.selectionStart) + "\t" + ta.value.substring(ta.selectionEnd);
					ta.selectionEnd = s + 1;
					return false;
				}
				return true;
			};
		}
		el.addEventListener("input",$bind(this,this.onChangeEvent));
		el.addEventListener("propertychange",$bind(this,this.onChangeEvent));
		el.addEventListener("scroll",$bind(this,this.onScroll));
		return el;
	}
	,setTempDivData: function(div) {
		var t = this._text;
		if(t == null || t.length == 0) {
			t = "|";
		}
		div.style.fontFamily = this.element.style.fontFamily;
		div.style.fontSize = this.element.style.fontSize;
		div.style.width = "";
		div.innerHTML = this.normalizeText(t);
	}
	,normalizeText: function(text) {
		return StringTools.replace(text,"\\n","\n");
	}
	,__class__: haxe_ui_backend_TextInputImpl
});
var haxe_ui_backend_TimerImpl = function(delay,callback) {
	this._timer = new haxe_Timer(delay);
	this._timer.run = function() {
		callback();
	};
};
$hxClasses["haxe.ui.backend.TimerImpl"] = haxe_ui_backend_TimerImpl;
haxe_ui_backend_TimerImpl.__name__ = "haxe.ui.backend.TimerImpl";
haxe_ui_backend_TimerImpl.prototype = {
	_timer: null
	,stop: function() {
		this._timer.stop();
	}
	,__class__: haxe_ui_backend_TimerImpl
};
var haxe_ui_backend_html5_EventMapper = function() { };
$hxClasses["haxe.ui.backend.html5.EventMapper"] = haxe_ui_backend_html5_EventMapper;
haxe_ui_backend_html5_EventMapper.__name__ = "haxe.ui.backend.html5.EventMapper";
var haxe_ui_validation_ValidationManager = function() {
	this._displayQueue = [];
	this._queue = [];
	this.isValidating = false;
	this.isPending = false;
};
$hxClasses["haxe.ui.validation.ValidationManager"] = haxe_ui_validation_ValidationManager;
haxe_ui_validation_ValidationManager.__name__ = "haxe.ui.validation.ValidationManager";
haxe_ui_validation_ValidationManager.__properties__ = {get_instance:"get_instance"};
haxe_ui_validation_ValidationManager.get_instance = function() {
	if(haxe_ui_validation_ValidationManager.instance == null) {
		haxe_ui_validation_ValidationManager.instance = new haxe_ui_validation_ValidationManager();
	}
	return haxe_ui_validation_ValidationManager.instance;
};
haxe_ui_validation_ValidationManager.prototype = {
	isValidating: null
	,isPending: null
	,_queue: null
	,_displayQueue: null
	,_events: null
	,registerEvent: function(type,listener) {
		if(this._events == null) {
			this._events = new haxe_ui_util_EventMap();
		}
		this._events.add(type,listener);
	}
	,unregisterEvent: function(type,listener) {
		if(this._events == null) {
			this._events.remove(type,listener);
		}
	}
	,dispatch: function(event) {
		if(this._events != null) {
			this._events.invoke(event.type,event);
		}
	}
	,dispose: function() {
		this.isValidating = false;
		this._queue.splice(0,this._queue.length);
	}
	,add: function(object) {
		if(this._queue.indexOf(object) != -1) {
			return;
		}
		var queueLength = this._queue.length;
		if(this.isValidating == true) {
			var depth = object.get_depth();
			var min = 0;
			var max = queueLength;
			var i = 0;
			var otherDepth = 0;
			while(max > min) {
				i = min + max >>> 1;
				otherDepth = this._queue[i].get_depth();
				if(otherDepth == depth) {
					break;
				} else if(otherDepth < depth) {
					max = i;
				} else {
					min = i + 1;
				}
			}
			if(otherDepth >= depth) {
				++i;
			}
			this._queue.splice(i,0,object);
		} else {
			this._queue[queueLength] = object;
			if(this.isPending == false) {
				this.isPending = true;
				haxe_ui_Toolkit.callLater($bind(this,this.process));
			}
		}
	}
	,addDisplay: function(item,nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		if(this._displayQueue.indexOf(item) == -1) {
			this._displayQueue.push(item);
		}
		if(nextFrame == false) {
			this.process();
		}
	}
	,process: function() {
		if(this.isValidating == true || this.isPending == false) {
			return;
		}
		var queueLength = this._queue.length;
		if(queueLength == 0) {
			this.isPending = false;
			return;
		}
		this.isValidating = true;
		if(queueLength > 1) {
			this._queue.sort($bind(this,this.queueSortFunction));
		}
		this.dispatch(new haxe_ui_events_ValidationEvent("ValidationStart"));
		while(this._queue.length > 0) {
			var item = this._queue.shift();
			if(item.get_depth() < 0) {
				continue;
			}
			item.validateComponent();
		}
		var _g = 0;
		var _g1 = this._displayQueue.length;
		while(_g < _g1) {
			var i = _g++;
			var item = this._displayQueue[i];
			item.updateComponentDisplay();
		}
		this._displayQueue.splice(0,this._displayQueue.length);
		this.isValidating = false;
		this.isPending = false;
		this.dispatch(new haxe_ui_events_ValidationEvent("ValidationStop"));
	}
	,queueSortFunction: function(first,second) {
		var difference = second.get_depth() - first.get_depth();
		if(difference > 0) {
			return 1;
		} else if(difference < 0) {
			return -1;
		} else {
			return 0;
		}
	}
	,__class__: haxe_ui_validation_ValidationManager
};
var haxe_ui_backend_html5_HtmlUtils = function() { };
$hxClasses["haxe.ui.backend.html5.HtmlUtils"] = haxe_ui_backend_html5_HtmlUtils;
haxe_ui_backend_html5_HtmlUtils.__name__ = "haxe.ui.backend.html5.HtmlUtils";
haxe_ui_backend_html5_HtmlUtils.__properties__ = {get_dpi:"get_dpi"};
haxe_ui_backend_html5_HtmlUtils.px = function(value) {
	return "" + value + "px";
};
haxe_ui_backend_html5_HtmlUtils.color = function(value) {
	return "#" + StringTools.hex(value,6);
};
haxe_ui_backend_html5_HtmlUtils.rgba = function(value,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	var r = value >> 16 & 255;
	var g = value >> 8 & 255;
	var b = value & 255;
	return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
};
haxe_ui_backend_html5_HtmlUtils.escape = function(s) {
	s = StringTools.replace(s,"\"","&quot;");
	s = StringTools.replace(s,"'","&#39;");
	s = StringTools.replace(s,"<","&lt;");
	s = StringTools.replace(s,">","&gt;");
	return s;
};
haxe_ui_backend_html5_HtmlUtils.namedChild = function(el,child,index) {
	if(index == null) {
		index = 0;
	}
	if(child != null) {
		var list = el.getElementsByTagName(child);
		if(list.length == 0) {
			return null;
		}
		el = list.item(index);
	}
	return el;
};
haxe_ui_backend_html5_HtmlUtils.onValidationStop = function(e) {
	var tmp = haxe_ui_backend_html5_HtmlUtils.DIV_HELPER != null;
};
haxe_ui_backend_html5_HtmlUtils.createDivHelper = function() {
	if(haxe_ui_backend_html5_HtmlUtils.DIV_HELPER == null) {
		haxe_ui_backend_html5_HtmlUtils.DIV_HELPER = window.document.createElement("div");
		haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.style.position = "absolute";
		haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.style.top = "-99999px";
		haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.style.left = "-99999px";
		window.document.body.appendChild(haxe_ui_backend_html5_HtmlUtils.DIV_HELPER);
	}
};
haxe_ui_backend_html5_HtmlUtils.measureText = function(text,addWidth,addHeight,fontSize,fontName) {
	if(fontSize == null) {
		fontSize = -1;
	}
	if(addHeight == null) {
		addHeight = 0;
	}
	if(addWidth == null) {
		addWidth = 0;
	}
	if(haxe_ui_backend_html5_HtmlUtils.DIV_HELPER == null) {
		haxe_ui_backend_html5_HtmlUtils.createDivHelper();
	}
	haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.style.width = "";
	haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.style.height = "";
	if(fontSize > 0) {
		haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.style.fontSize = "" + fontSize + "px";
	} else {
		haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.style.fontSize = "";
	}
	if(fontName != null) {
		haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.style.fontFamily = fontName;
	} else {
		haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.style.fontFamily = "";
	}
	haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.innerHTML = text;
	return new haxe_ui_geom_Size(haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.clientWidth + addWidth,haxe_ui_backend_html5_HtmlUtils.DIV_HELPER.clientHeight + addHeight);
};
haxe_ui_backend_html5_HtmlUtils.get_dpi = function() {
	if(haxe_ui_backend_html5_HtmlUtils._dpi != 0) {
		return haxe_ui_backend_html5_HtmlUtils._dpi;
	}
	var div = window.document.createElement("div");
	div.style.width = "1in";
	div.style.height = "1in";
	div.style.position = "absolute";
	div.style.top = "-99999px";
	div.style.left = "-99999px";
	window.document.body.appendChild(div);
	var devicePixelRatio = window.devicePixelRatio;
	if(devicePixelRatio == null) {
		devicePixelRatio = 1;
	}
	haxe_ui_backend_html5_HtmlUtils._dpi = div.offsetWidth * devicePixelRatio;
	haxe_ui_backend_html5_HtmlUtils.removeElement(div);
	return haxe_ui_backend_html5_HtmlUtils._dpi;
};
haxe_ui_backend_html5_HtmlUtils.swapElements = function(el1,el2) {
	el2.parentElement.insertBefore(el2,el1);
};
haxe_ui_backend_html5_HtmlUtils.insertBefore = function(el,before) {
	before.parentElement.insertBefore(before,el);
};
haxe_ui_backend_html5_HtmlUtils.removeElement = function(el) {
	if(el != null && el.parentElement != null) {
		el.parentElement.removeChild(el);
	}
};
haxe_ui_backend_html5_HtmlUtils.isRetinaDisplay = function() {
	if(haxe_ui_backend_html5_HtmlUtils._isRetina == null) {
		var query = "(-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 192dpi)";
		if(window.matchMedia(query).matches) {
			haxe_ui_backend_html5_HtmlUtils._isRetina = true;
		} else {
			haxe_ui_backend_html5_HtmlUtils._isRetina = false;
		}
	}
	return haxe_ui_backend_html5_HtmlUtils._isRetina;
};
var haxe_ui_backend_html5_StyleHelper = function() { };
$hxClasses["haxe.ui.backend.html5.StyleHelper"] = haxe_ui_backend_html5_StyleHelper;
haxe_ui_backend_html5_StyleHelper.__name__ = "haxe.ui.backend.html5.StyleHelper";
haxe_ui_backend_html5_StyleHelper.apply = function(component,width,height,style) {
	var element = component.element;
	var css = element.style;
	var slice = null;
	if(style.backgroundImageSliceTop != null && style.backgroundImageSliceLeft != null && style.backgroundImageSliceBottom != null && style.backgroundImageSliceRight != null) {
		slice = new haxe_ui_geom_Rectangle(style.backgroundImageSliceLeft,style.backgroundImageSliceTop,style.backgroundImageSliceRight - style.backgroundImageSliceLeft,style.backgroundImageSliceBottom - style.backgroundImageSliceTop);
	}
	if(slice != null) {
		width = Math.round(width);
		height = Math.round(height);
	}
	css.width = "" + width + "px";
	css.height = "" + height + "px";
	if(style.borderLeftSize != null && style.borderLeftSize == style.borderRightSize && style.borderLeftSize == style.borderBottomSize && style.borderLeftSize == style.borderTopSize) {
		if(style.borderLeftSize > 0) {
			css.borderWidth = "" + style.borderLeftSize + "px";
			css.borderStyle = "solid";
		} else {
			css.removeProperty("border-width");
			css.removeProperty("border-style");
		}
	} else if(style.borderLeftSize == null && style.borderRightSize == null && style.borderBottomSize == null && style.borderTopSize == null) {
		css.removeProperty("border-width");
		css.removeProperty("border-style");
	} else {
		if(style.borderTopSize != null && style.borderTopSize > 0) {
			css.borderTopWidth = "" + style.borderTopSize + "px";
			css.borderTopStyle = "solid";
		} else {
			css.removeProperty("border-top-width");
			css.removeProperty("border-top-style");
		}
		if(style.borderLeftSize != null && style.borderLeftSize > 0) {
			css.borderLeftWidth = "" + style.borderLeftSize + "px";
			css.borderLeftStyle = "solid";
		} else {
			css.removeProperty("border-left-width");
			css.removeProperty("border-left-style");
		}
		if(style.borderBottomSize != null && style.borderBottomSize > 0) {
			css.borderBottomWidth = "" + style.borderBottomSize + "px";
			css.borderBottomStyle = "solid";
		} else {
			css.removeProperty("border-bottom-width");
			css.removeProperty("border-bottom-style");
		}
		if(style.borderRightSize != null && style.borderRightSize > 0) {
			css.borderRightWidth = "" + style.borderRightSize + "px";
			css.borderRightStyle = "solid";
		} else {
			css.removeProperty("border-right-width");
			css.removeProperty("border-right-style");
		}
	}
	if(style.borderLeftColor != null && style.borderLeftColor == style.borderRightColor && style.borderLeftColor == style.borderBottomColor && style.borderLeftColor == style.borderTopColor) {
		if(style.borderOpacity == null) {
			css.borderColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderLeftColor);
		} else {
			css.borderColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.borderLeftColor,style.borderOpacity);
		}
	} else if(style.borderLeftColor == null && style.borderRightColor == null && style.borderBottomColor == null && style.borderTopColor == null) {
		css.removeProperty("border-color");
	} else {
		if(style.borderTopColor != null) {
			if(style.borderOpacity == null) {
				css.borderTopColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderTopColor);
			} else {
				css.borderTopColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.borderTopColor,style.borderOpacity);
			}
		} else {
			css.removeProperty("border-top-color");
		}
		if(style.borderLeftColor != null) {
			if(style.borderOpacity == null) {
				css.borderLeftColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderLeftColor);
			} else {
				css.borderLeftColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.borderLeftColor,style.borderOpacity);
			}
		} else {
			css.removeProperty("border-left-color");
		}
		if(style.borderBottomColor != null) {
			if(style.borderOpacity == null) {
				css.borderBottomColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderBottomColor);
			} else {
				css.borderBottomColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.borderBottomColor,style.borderOpacity);
			}
		} else {
			css.removeProperty("border-bottom-color");
		}
		if(style.borderRightColor != null) {
			if(style.borderOpacity == null) {
				css.borderRightColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderRightColor);
			} else {
				css.borderRightColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.borderRightColor,style.borderOpacity);
			}
		} else {
			css.removeProperty("border-right-color");
		}
	}
	var background = [];
	if(style.backgroundColor != null) {
		if(style.backgroundColorEnd != null && style.backgroundColorEnd != style.backgroundColor) {
			css.removeProperty("background-color");
			var gradientStyle = style.backgroundGradientStyle;
			if(gradientStyle == null) {
				gradientStyle = "vertical";
			}
			if(style.backgroundOpacity != null) {
				if(gradientStyle == "vertical") {
					background.push("linear-gradient(to bottom, " + haxe_ui_backend_html5_HtmlUtils.rgba(style.backgroundColor,style.backgroundOpacity) + ", " + haxe_ui_backend_html5_HtmlUtils.rgba(style.backgroundColorEnd,style.backgroundOpacity) + ")");
				} else if(gradientStyle == "horizontal") {
					background.push("linear-gradient(to right, " + haxe_ui_backend_html5_HtmlUtils.rgba(style.backgroundColor,style.backgroundOpacity) + ", " + haxe_ui_backend_html5_HtmlUtils.rgba(style.backgroundColorEnd,style.backgroundOpacity) + ")");
				}
			} else if(gradientStyle == "vertical") {
				background.push("linear-gradient(to bottom, " + haxe_ui_backend_html5_HtmlUtils.color(style.backgroundColor) + ", " + haxe_ui_backend_html5_HtmlUtils.color(style.backgroundColorEnd) + ")");
			} else if(gradientStyle == "horizontal") {
				background.push("linear-gradient(to right, " + haxe_ui_backend_html5_HtmlUtils.color(style.backgroundColor) + ", " + haxe_ui_backend_html5_HtmlUtils.color(style.backgroundColorEnd) + ")");
			}
		} else {
			css.removeProperty("background");
			if(style.backgroundOpacity != null) {
				css.backgroundColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.backgroundColor,style.backgroundOpacity);
			} else {
				css.backgroundColor = haxe_ui_backend_html5_HtmlUtils.color(style.backgroundColor);
			}
		}
	} else {
		css.removeProperty("background");
		css.removeProperty("background-color");
	}
	if(style.borderRadius != null && style.borderRadius > 0 && (style.borderRadiusTopLeft == null || style.borderRadiusTopLeft == style.borderRadius) && (style.borderRadiusTopRight == null || style.borderRadiusTopRight == style.borderRadius) && (style.borderRadiusBottomLeft == null || style.borderRadiusBottomLeft == style.borderRadius) && (style.borderRadiusBottomRight == null || style.borderRadiusBottomRight == style.borderRadius)) {
		css.borderRadius = "" + style.borderRadius + "px";
	} else if(style.borderRadiusTopLeft != null && style.borderRadiusTopLeft > 0 || style.borderRadiusTopRight != null && style.borderRadiusTopRight > 0 || style.borderRadiusBottomLeft != null && style.borderRadiusBottomLeft > 0 || style.borderRadiusBottomRight != null && style.borderRadiusBottomRight > 0) {
		if(style.borderRadiusTopLeft != null && style.borderRadiusTopLeft > 0) {
			css.borderTopLeftRadius = "" + style.borderRadiusTopLeft + "px";
		} else {
			css.removeProperty("border-top-left-radius");
		}
		if(style.borderRadiusTopRight != null && style.borderRadiusTopRight > 0) {
			css.borderTopRightRadius = "" + style.borderRadiusTopRight + "px";
		} else {
			css.removeProperty("border-top-right-radius");
		}
		if(style.borderRadiusBottomLeft != null && style.borderRadiusBottomLeft > 0) {
			css.borderBottomLeftRadius = "" + style.borderRadiusBottomLeft + "px";
		} else {
			css.removeProperty("border-bottom-left-radius");
		}
		if(style.borderRadiusBottomRight != null && style.borderRadiusBottomRight > 0) {
			css.borderBottomRightRadius = "" + style.borderRadiusBottomRight + "px";
		} else {
			css.removeProperty("border-bottom-right-radius");
		}
	} else {
		css.removeProperty("border-radius");
	}
	if(style.backgroundImage != null) {
		haxe_ui_Toolkit.get_assets().getImage(style.backgroundImage,function(imageInfo) {
			if(imageInfo == null) {
				return;
			}
			var imageRect = new haxe_ui_geom_Rectangle(0,0,imageInfo.width,imageInfo.height);
			if(style.backgroundImageClipTop != null && style.backgroundImageClipLeft != null && style.backgroundImageClipBottom != null && style.backgroundImageClipRight != null) {
				imageRect = new haxe_ui_geom_Rectangle(style.backgroundImageClipLeft,style.backgroundImageClipTop,style.backgroundImageClipRight - style.backgroundImageClipLeft,style.backgroundImageClipBottom - style.backgroundImageClipTop);
			}
			if(slice == null) {
				if(imageRect.width == imageInfo.width && imageRect.height == imageInfo.height) {
					background.push("url(" + imageInfo.data.src + ")");
					if(style.backgroundImageRepeat == null) {
						css.backgroundRepeat = "no-repeat";
					} else if(style.backgroundImageRepeat == "repeat") {
						css.backgroundRepeat = "repeat";
					} else if(style.backgroundImageRepeat == "stretch") {
						css.backgroundRepeat = "no-repeat";
						css.backgroundSize = "" + ("" + width + "px") + " " + ("" + height + "px");
					}
					background.reverse();
					css.background = background.join(",");
				} else {
					var canvas = component.getCanvas(width,height);
					var ctx = canvas.getContext("2d",null);
					ctx.clearRect(0,0,width,height);
					haxe_ui_backend_html5_StyleHelper.paintBitmap(ctx,imageInfo.data,imageRect,new haxe_ui_geom_Rectangle(0,0,width,height));
				}
			} else {
				var rects = haxe_ui_geom_Slice9.buildRects(width,height,imageRect.width,imageRect.height,slice);
				var srcRects = rects.src;
				var dstRects = rects.dst;
				var canvas = component.getCanvas(width,height);
				var ctx = canvas.getContext("2d",null);
				ctx.clearRect(0,0,width,height);
				ctx.imageSmoothingEnabled = false;
				var _g = 0;
				var _g1 = srcRects.length;
				while(_g < _g1) {
					var i = _g++;
					var srcRect = new haxe_ui_geom_Rectangle(srcRects[i].left + imageRect.left,srcRects[i].top + imageRect.top,srcRects[i].width,srcRects[i].height);
					var dstRect = dstRects[i];
					haxe_ui_backend_html5_StyleHelper.paintBitmap(ctx,imageInfo.data,srcRect,dstRect);
				}
			}
		});
	} else {
		component.removeCanvas();
		css.background = background[0];
	}
};
haxe_ui_backend_html5_StyleHelper.paintBitmap = function(ctx,img,srcRect,dstRect) {
	if(srcRect.width == 0 || srcRect.height == 0) {
		return;
	}
	if(dstRect.width == 0 || dstRect.height == 0) {
		return;
	}
	ctx.drawImage(img,srcRect.left | 0,srcRect.top | 0,srcRect.width | 0,srcRect.height | 0,dstRect.left | 0,dstRect.top | 0,dstRect.width | 0,dstRect.height | 0);
};
var haxe_ui_backend_html5_UserAgent = function() {
	this._unknown = false;
	this._msie = false;
	this._firefox = false;
	this._safari = false;
	this._chrome = false;
	this._opera = false;
	var ua = $global.navigator.userAgent;
	if(ua.indexOf("Opera") != -1 || ua.indexOf("OPR") != -1) {
		this._opera = true;
	} else if(ua.indexOf("Chrome") != -1) {
		this._chrome = true;
	} else if(ua.indexOf("Safari") != -1) {
		this._safari = true;
	} else if(ua.indexOf("Firefox") != -1) {
		this._firefox = true;
	} else if(ua.indexOf("MSIE") != -1) {
		this._msie = true;
	} else {
		this._unknown = true;
	}
};
$hxClasses["haxe.ui.backend.html5.UserAgent"] = haxe_ui_backend_html5_UserAgent;
haxe_ui_backend_html5_UserAgent.__name__ = "haxe.ui.backend.html5.UserAgent";
haxe_ui_backend_html5_UserAgent.__properties__ = {get_instance:"get_instance"};
haxe_ui_backend_html5_UserAgent.get_instance = function() {
	if(haxe_ui_backend_html5_UserAgent._instance == null) {
		haxe_ui_backend_html5_UserAgent._instance = new haxe_ui_backend_html5_UserAgent();
	}
	return haxe_ui_backend_html5_UserAgent._instance;
};
haxe_ui_backend_html5_UserAgent.prototype = {
	_opera: null
	,opera: null
	,get_opera: function() {
		return this._opera;
	}
	,_chrome: null
	,chrome: null
	,get_chrome: function() {
		return this._chrome;
	}
	,_safari: null
	,safari: null
	,get_safari: function() {
		return this._safari;
	}
	,_firefox: null
	,firefox: null
	,get_firefox: function() {
		return this._firefox;
	}
	,_msie: null
	,msie: null
	,get_msie: function() {
		return this._msie;
	}
	,_unknown: null
	,unknown: null
	,get_unknown: function() {
		return this._unknown;
	}
	,__class__: haxe_ui_backend_html5_UserAgent
	,__properties__: {get_unknown:"get_unknown",get_msie:"get_msie",get_firefox:"get_firefox",get_safari:"get_safari",get_chrome:"get_chrome",get_opera:"get_opera"}
};
var haxe_ui_backend_html5_native_NativeElement = function(component) {
	this.config = null;
	this._component = component;
};
$hxClasses["haxe.ui.backend.html5.native.NativeElement"] = haxe_ui_backend_html5_native_NativeElement;
haxe_ui_backend_html5_native_NativeElement.__name__ = "haxe.ui.backend.html5.native.NativeElement";
haxe_ui_backend_html5_native_NativeElement.prototype = {
	_component: null
	,config: null
	,create: function() {
		var nodeType = this.getConfigValue("nodeType","div");
		var el = window.document.createElement(nodeType);
		el.style.boxSizing = "border-box";
		var type = this.getConfigValue("type");
		if(type != null) {
			el.setAttribute("type",type);
		}
		var orient = this.getConfigValue("orient");
		if(orient != null) {
			el.setAttribute("orient",orient);
		}
		var style = this.getConfigValue("style");
		if(style != null) {
			var styles = style.split(";");
			var _g = 0;
			while(_g < styles.length) {
				var s = styles[_g];
				++_g;
				s = StringTools.trim(s);
				if(s.length == 0) {
					continue;
				}
				var parts = s.split(":");
				if(StringTools.startsWith(StringTools.trim(parts[0]),"-webkit") && haxe_ui_backend_html5_UserAgent.get_instance().get_chrome() == false) {
					continue;
				}
				el.style.setProperty(StringTools.trim(parts[0]),StringTools.trim(parts[1]));
			}
		}
		return el;
	}
	,getConfigValue: function(name,defaultValue) {
		if(this.config == null) {
			return defaultValue;
		}
		if(Object.prototype.hasOwnProperty.call(this.config.h,name) == false) {
			return defaultValue;
		}
		return this.config.h[name];
	}
	,__class__: haxe_ui_backend_html5_native_NativeElement
};
var haxe_ui_backend_html5_native_LabeledInputElement = function(component) {
	haxe_ui_backend_html5_native_NativeElement.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.LabeledInputElement"] = haxe_ui_backend_html5_native_LabeledInputElement;
haxe_ui_backend_html5_native_LabeledInputElement.__name__ = "haxe.ui.backend.html5.native.LabeledInputElement";
haxe_ui_backend_html5_native_LabeledInputElement.__super__ = haxe_ui_backend_html5_native_NativeElement;
haxe_ui_backend_html5_native_LabeledInputElement.prototype = $extend(haxe_ui_backend_html5_native_NativeElement.prototype,{
	create: function() {
		var type = this.getConfigValue("type","button");
		var input = window.document.createElement("input");
		input.style.display = "inline";
		input.style.verticalAlign = "middle";
		input.style.margin = "0";
		input.style.marginRight = "2px";
		input.type = type;
		var label = window.document.createElement("label");
		label.appendChild(input);
		return label;
	}
	,__class__: haxe_ui_backend_html5_native_LabeledInputElement
});
var haxe_ui_behaviours_Behaviour = function(component) {
	this.config = null;
	this._component = component;
};
$hxClasses["haxe.ui.behaviours.Behaviour"] = haxe_ui_behaviours_Behaviour;
haxe_ui_behaviours_Behaviour.__name__ = "haxe.ui.behaviours.Behaviour";
haxe_ui_behaviours_Behaviour.prototype = {
	config: null
	,_component: null
	,id: null
	,set: function(value) {
	}
	,detatch: function() {
	}
	,get: function() {
		return null;
	}
	,getDynamic: function() {
		return null;
	}
	,update: function() {
	}
	,call: function(param) {
		return null;
	}
	,getConfigValue: function(name,defaultValue) {
		if(this.config == null) {
			return defaultValue;
		}
		if(Object.prototype.hasOwnProperty.call(this.config.h,name) == false) {
			return defaultValue;
		}
		return this.config.h[name];
	}
	,getConfigValueBool: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		var v = defaultValue;
		var s = this.getConfigValue(name);
		if(s != null) {
			v = s == "true";
		}
		return v;
	}
	,__class__: haxe_ui_behaviours_Behaviour
};
var haxe_ui_behaviours_ValueBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.ValueBehaviour"] = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_behaviours_ValueBehaviour.__name__ = "haxe.ui.behaviours.ValueBehaviour";
haxe_ui_behaviours_ValueBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_behaviours_ValueBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	_value: null
	,get: function() {
		return this._value;
	}
	,set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		this._value = value;
	}
	,__class__: haxe_ui_behaviours_ValueBehaviour
});
var haxe_ui_behaviours_DataBehaviour = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.DataBehaviour"] = haxe_ui_behaviours_DataBehaviour;
haxe_ui_behaviours_DataBehaviour.__name__ = "haxe.ui.behaviours.DataBehaviour";
haxe_ui_behaviours_DataBehaviour.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_behaviours_DataBehaviour.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	_dataInvalid: null
	,set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this.get())) {
			return;
		}
		this._value = value;
		this.invalidateData();
	}
	,validate: function() {
		if(this._dataInvalid) {
			this._dataInvalid = false;
			this.validateData();
		}
	}
	,invalidateData: function() {
		this._dataInvalid = true;
		this._component.invalidateComponent("data");
	}
	,validateData: function() {
	}
	,__class__: haxe_ui_behaviours_DataBehaviour
});
var haxe_ui_backend_html5_native_behaviours_ElementAttribute = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.ElementAttribute"] = haxe_ui_backend_html5_native_behaviours_ElementAttribute;
haxe_ui_backend_html5_native_behaviours_ElementAttribute.__name__ = "haxe.ui.backend.html5.native.behaviours.ElementAttribute";
haxe_ui_backend_html5_native_behaviours_ElementAttribute.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_backend_html5_native_behaviours_ElementAttribute.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var el = this._component.element;
		var name = this.getConfigValue("name");
		if(name == null) {
			return;
		}
		el = haxe_ui_backend_html5_HtmlUtils.namedChild(el,this.getConfigValue("child"));
		if(this.getConfigValueBool("remove",false) == true) {
			if(haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromBool(true))) {
				el.removeAttribute(name);
			}
			return;
		}
		el.setAttribute(name,haxe_ui_util_Variant.toString(this._value));
		var removeIfNegative = this.getConfigValueBool("removeIfNegative",false);
		if((this._value == null || haxe_ui_util_Variant.get_isBool(this._value) == true && haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromBool(false))) && removeIfNegative == true) {
			el.removeAttribute(name);
			return;
		}
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_ElementAttribute
});
var haxe_ui_backend_html5_native_behaviours_ElementDisabled = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.ElementDisabled"] = haxe_ui_backend_html5_native_behaviours_ElementDisabled;
haxe_ui_backend_html5_native_behaviours_ElementDisabled.__name__ = "haxe.ui.backend.html5.native.behaviours.ElementDisabled";
haxe_ui_backend_html5_native_behaviours_ElementDisabled.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_backend_html5_native_behaviours_ElementDisabled.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	set: function(value) {
		var el = this._component.element;
		if(haxe_ui_util_Variant.eq(value,haxe_ui_util_Variant.fromBool(true))) {
			el.setAttribute("disabled","true");
			var _g = 0;
			var _g1 = el.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.setAttribute("disabled","true");
			}
		} else {
			el.removeAttribute("disabled");
			var _g = 0;
			var _g1 = el.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.removeAttribute("disabled");
			}
		}
	}
	,get: function() {
		var el = this._component.element;
		return haxe_ui_util_Variant.fromBool(el.getAttribute("disabled") == "true");
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_ElementDisabled
});
var haxe_ui_backend_html5_native_behaviours_ElementImage = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.ElementImage"] = haxe_ui_backend_html5_native_behaviours_ElementImage;
haxe_ui_backend_html5_native_behaviours_ElementImage.__name__ = "haxe.ui.backend.html5.native.behaviours.ElementImage";
haxe_ui_backend_html5_native_behaviours_ElementImage.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_backend_html5_native_behaviours_ElementImage.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var _gthis = this;
		if(haxe_ui_util_Variant.get_isNull(this._value)) {
			return;
		}
		var el = this._component.element;
		var img = null;
		var list = el.getElementsByTagName("img");
		if(list != null && list.length == 1) {
			img = list.item(0);
		} else {
			img = window.document.createElement("img");
			img.style.display = "inline";
			img.style.verticalAlign = "middle";
			img.style.marginTop = "-1px";
			el.appendChild(img);
		}
		var imageLoader = new haxe_ui_util_ImageLoader(this._value);
		imageLoader.load(function(imageInfo) {
			if(imageInfo != null) {
				img.src = imageInfo.data.src;
				var _this = _gthis._component;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout");
				}
			}
		});
		haxe_ui_ToolkitAssets.get_instance().getImage(haxe_ui_util_Variant.toString(this._value),function(image) {
			var tmp = image != null && image.data != null;
		});
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_ElementImage
});
var haxe_ui_backend_html5_native_behaviours_ElementPlaceholder = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.ElementPlaceholder"] = haxe_ui_backend_html5_native_behaviours_ElementPlaceholder;
haxe_ui_backend_html5_native_behaviours_ElementPlaceholder.__name__ = "haxe.ui.backend.html5.native.behaviours.ElementPlaceholder";
haxe_ui_backend_html5_native_behaviours_ElementPlaceholder.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_backend_html5_native_behaviours_ElementPlaceholder.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	set: function(value) {
		var el = this._component.element;
		if(((el) instanceof HTMLTextAreaElement)) {
			(js_Boot.__cast(el , HTMLTextAreaElement)).placeholder = haxe_ui_util_Variant.toString(value);
		} else if(((el) instanceof HTMLInputElement)) {
			(js_Boot.__cast(el , HTMLInputElement)).placeholder = haxe_ui_util_Variant.toString(value);
		}
	}
	,get: function() {
		var el = this._component.element;
		if(((el) instanceof HTMLTextAreaElement)) {
			return haxe_ui_util_Variant.fromString((js_Boot.__cast(el , HTMLTextAreaElement)).placeholder);
		} else if(((el) instanceof HTMLInputElement)) {
			return haxe_ui_util_Variant.fromString((js_Boot.__cast(el , HTMLInputElement)).placeholder);
		} else {
			return null;
		}
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_ElementPlaceholder
});
var haxe_ui_backend_html5_native_behaviours_ElementProperty = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.ElementProperty"] = haxe_ui_backend_html5_native_behaviours_ElementProperty;
haxe_ui_backend_html5_native_behaviours_ElementProperty.__name__ = "haxe.ui.backend.html5.native.behaviours.ElementProperty";
haxe_ui_backend_html5_native_behaviours_ElementProperty.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_backend_html5_native_behaviours_ElementProperty.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	set: function(value) {
		var el = this._component.element;
		var name = this.getConfigValue("name");
		if(name == null) {
			return;
		}
		el = haxe_ui_backend_html5_HtmlUtils.namedChild(el,this.getConfigValue("child"));
		Reflect.setProperty(el,name,haxe_ui_util_Variant.toString(value));
	}
	,get: function() {
		var el = this._component.element;
		var name = this.getConfigValue("name");
		if(name == null) {
			return null;
		}
		el = haxe_ui_backend_html5_HtmlUtils.namedChild(el,this.getConfigValue("child"));
		return haxe_ui_util_Variant.fromDynamic(Reflect.getProperty(el,name));
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_ElementProperty
});
var haxe_ui_backend_html5_native_behaviours_ElementScrollLeft = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.ElementScrollLeft"] = haxe_ui_backend_html5_native_behaviours_ElementScrollLeft;
haxe_ui_backend_html5_native_behaviours_ElementScrollLeft.__name__ = "haxe.ui.backend.html5.native.behaviours.ElementScrollLeft";
haxe_ui_backend_html5_native_behaviours_ElementScrollLeft.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_backend_html5_native_behaviours_ElementScrollLeft.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	set: function(value) {
		this._component.element.scrollLeft = haxe_ui_util_Variant.toInt(value);
	}
	,get: function() {
		return haxe_ui_util_Variant.fromFloat(this._component.element.scrollLeft);
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_ElementScrollLeft
});
var haxe_ui_backend_html5_native_behaviours_ElementScrollTop = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.ElementScrollTop"] = haxe_ui_backend_html5_native_behaviours_ElementScrollTop;
haxe_ui_backend_html5_native_behaviours_ElementScrollTop.__name__ = "haxe.ui.backend.html5.native.behaviours.ElementScrollTop";
haxe_ui_backend_html5_native_behaviours_ElementScrollTop.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_backend_html5_native_behaviours_ElementScrollTop.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	set: function(value) {
		this._component.element.scrollTop = haxe_ui_util_Variant.toInt(value);
	}
	,get: function() {
		return haxe_ui_util_Variant.fromFloat(this._component.element.scrollTop);
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_ElementScrollTop
});
var haxe_ui_backend_html5_native_behaviours_ElementText = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.ElementText"] = haxe_ui_backend_html5_native_behaviours_ElementText;
haxe_ui_backend_html5_native_behaviours_ElementText.__name__ = "haxe.ui.backend.html5.native.behaviours.ElementText";
haxe_ui_backend_html5_native_behaviours_ElementText.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_backend_html5_native_behaviours_ElementText.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	set: function(value) {
		var el = this._component.element;
		el.textContent = haxe_ui_util_Variant.toString(value);
	}
	,get: function() {
		var el = this._component.element;
		return haxe_ui_util_Variant.fromString(el.textContent);
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_ElementText
});
var haxe_ui_backend_html5_native_behaviours_ElementValue = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.ElementValue"] = haxe_ui_backend_html5_native_behaviours_ElementValue;
haxe_ui_backend_html5_native_behaviours_ElementValue.__name__ = "haxe.ui.backend.html5.native.behaviours.ElementValue";
haxe_ui_backend_html5_native_behaviours_ElementValue.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_backend_html5_native_behaviours_ElementValue.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var el = this._component.element;
		if(((el) instanceof HTMLTextAreaElement)) {
			(js_Boot.__cast(el , HTMLTextAreaElement)).value = StringTools.replace(haxe_ui_util_Variant.toString(this._value),"\\n","\n");
		} else {
			el.setAttribute("value",haxe_ui_util_Variant.toString(this._value));
		}
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_ElementValue
});
var haxe_ui_backend_html5_native_behaviours_RadioGroup = function(component) {
	haxe_ui_backend_html5_native_behaviours_ElementAttribute.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.RadioGroup"] = haxe_ui_backend_html5_native_behaviours_RadioGroup;
haxe_ui_backend_html5_native_behaviours_RadioGroup.__name__ = "haxe.ui.backend.html5.native.behaviours.RadioGroup";
haxe_ui_backend_html5_native_behaviours_RadioGroup.__super__ = haxe_ui_backend_html5_native_behaviours_ElementAttribute;
haxe_ui_backend_html5_native_behaviours_RadioGroup.prototype = $extend(haxe_ui_backend_html5_native_behaviours_ElementAttribute.prototype,{
	validateData: function() {
		haxe_ui_backend_html5_native_behaviours_ElementAttribute.prototype.validateData.call(this);
		haxe_ui_components_OptionBoxGroups.get_instance().add(haxe_ui_util_Variant.toString(this._value),this._component);
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_RadioGroup
});
var haxe_ui_backend_html5_native_behaviours_SelectDataSource = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.SelectDataSource"] = haxe_ui_backend_html5_native_behaviours_SelectDataSource;
haxe_ui_backend_html5_native_behaviours_SelectDataSource.__name__ = "haxe.ui.backend.html5.native.behaviours.SelectDataSource";
haxe_ui_backend_html5_native_behaviours_SelectDataSource.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_backend_html5_native_behaviours_SelectDataSource.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	set: function(value) {
		var ds = haxe_ui_util_Variant.toDataSource(value);
		var el = this._component.element;
		while(el.childElementCount > 0) el.removeChild(el.children[0]);
		if(ds != null) {
			var _g = 0;
			var _g1 = ds.get_size();
			while(_g < _g1) {
				var n = _g++;
				var item = ds.get(n);
				if(item.text != null) {
					var option = window.document.createElement("option");
					option.text = item.text;
					el.appendChild(option);
				}
			}
		}
		this._component.set("dataSource",ds);
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_SelectDataSource
});
var haxe_ui_backend_html5_native_behaviours_SelectedIndex = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.SelectedIndex"] = haxe_ui_backend_html5_native_behaviours_SelectedIndex;
haxe_ui_backend_html5_native_behaviours_SelectedIndex.__name__ = "haxe.ui.backend.html5.native.behaviours.SelectedIndex";
haxe_ui_backend_html5_native_behaviours_SelectedIndex.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_backend_html5_native_behaviours_SelectedIndex.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		if(this._component.element.nodeName == "SELECT") {
			var selectElement = js_Boot.__cast(this._component.element , HTMLSelectElement);
			selectElement.selectedIndex = haxe_ui_util_Variant.toInt(this._value);
		}
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_SelectedIndex
});
var haxe_ui_backend_html5_native_behaviours_SelectedItem = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.SelectedItem"] = haxe_ui_backend_html5_native_behaviours_SelectedItem;
haxe_ui_backend_html5_native_behaviours_SelectedItem.__name__ = "haxe.ui.backend.html5.native.behaviours.SelectedItem";
haxe_ui_backend_html5_native_behaviours_SelectedItem.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_backend_html5_native_behaviours_SelectedItem.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	getDynamic: function() {
		var data = null;
		if(this._component.element.nodeName == "SELECT") {
			if(this._component.has("dataSource") == true) {
				var selectElement = js_Boot.__cast(this._component.element , HTMLSelectElement);
				var ds = this._component.get("dataSource");
				data = ds.get(selectElement.selectedIndex);
			}
		}
		return data;
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_SelectedItem
});
var haxe_ui_backend_html5_native_behaviours_SpanText = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.behaviours.SpanText"] = haxe_ui_backend_html5_native_behaviours_SpanText;
haxe_ui_backend_html5_native_behaviours_SpanText.__name__ = "haxe.ui.backend.html5.native.behaviours.SpanText";
haxe_ui_backend_html5_native_behaviours_SpanText.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_backend_html5_native_behaviours_SpanText.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var el = this._component.element;
		var span = this.getSpan(el);
		var checkbox = this.getInput(el,"checkbox");
		if(haxe_ui_util_Variant.get_isNull(this._value)) {
			haxe_ui_backend_html5_HtmlUtils.removeElement(span);
			if(checkbox != null) {
				checkbox.style.marginTop = "-15px";
			}
			return;
		}
		if(span == null) {
			span = window.document.createElement("span");
			span.style.display = "inline-block";
			span.style.verticalAlign = "middle";
			var style = this.getConfigValue("style");
			if(style != null) {
				var styles = style.split(";");
				var _g = 0;
				while(_g < styles.length) {
					var s = styles[_g];
					++_g;
					s = StringTools.trim(s);
					if(s.length == 0) {
						continue;
					}
					var parts = s.split(":");
					span.style.setProperty(StringTools.trim(parts[0]),StringTools.trim(parts[1]));
				}
			}
			if(checkbox != null) {
				checkbox.style.marginTop = "0";
			}
			el.appendChild(span);
		}
		var invalidate = false;
		if(this._component.get_autoWidth() == true) {
			this._component.element.style.width = null;
			invalidate = true;
		}
		if(this._component.get_autoHeight() == true) {
			this._component.element.style.height = null;
			invalidate = true;
		}
		span.textContent = haxe_ui_util_Variant.toString(this._value);
		if(invalidate == true) {
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		}
	}
	,getSpan: function(el) {
		var span = null;
		var list = el.getElementsByTagName("span");
		if(list.length != 0) {
			span = list.item(0);
		}
		return span;
	}
	,getInput: function(el,type) {
		var input = null;
		var list = el.getElementsByTagName("input");
		if(list.length != 0) {
			var _g = 0;
			var _g1 = list.length;
			while(_g < _g1) {
				var n = _g++;
				var child = list.item(n);
				if(((child) instanceof HTMLInputElement) && (js_Boot.__cast(child , HTMLInputElement)).type == type) {
					input = child;
					break;
				}
			}
		}
		return input;
	}
	,__class__: haxe_ui_backend_html5_native_behaviours_SpanText
});
var haxe_ui_core_CompositeBuilder = function(component) {
	this._component = component;
};
$hxClasses["haxe.ui.core.CompositeBuilder"] = haxe_ui_core_CompositeBuilder;
haxe_ui_core_CompositeBuilder.__name__ = "haxe.ui.core.CompositeBuilder";
haxe_ui_core_CompositeBuilder.prototype = {
	_component: null
	,create: function() {
	}
	,destroy: function() {
	}
	,onInitialize: function() {
	}
	,onReady: function() {
	}
	,show: function() {
		return false;
	}
	,hide: function() {
		return false;
	}
	,get_numComponents: function() {
		return null;
	}
	,get_cssName: function() {
		return null;
	}
	,addComponent: function(child) {
		return null;
	}
	,addComponentAt: function(child,index) {
		return null;
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return null;
	}
	,removeComponentAt: function(index,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return null;
	}
	,getComponentIndex: function(child) {
		return -2147483648;
	}
	,setComponentIndex: function(child,index) {
		return null;
	}
	,getComponentAt: function(index) {
		return null;
	}
	,validateComponentLayout: function() {
		return false;
	}
	,applyStyle: function(style) {
	}
	,onComponentAdded: function(child) {
	}
	,onComponentRemoved: function(child) {
	}
	,findComponent: function(criteria,type,recursive,searchType) {
		var _g = 0;
		var _g1 = this.get_numComponents();
		while(_g < _g1) {
			var i = _g++;
			var c = this.getComponentAt(i);
			var match = c.findComponent(criteria,type,recursive,searchType);
			if(match != null) {
				return match;
			}
		}
		return null;
	}
	,__class__: haxe_ui_core_CompositeBuilder
	,__properties__: {get_cssName:"get_cssName",get_numComponents:"get_numComponents"}
};
var haxe_ui_backend_html5_native_builders_ScrollViewBuilder = function(component) {
	haxe_ui_core_CompositeBuilder.call(this,component);
};
$hxClasses["haxe.ui.backend.html5.native.builders.ScrollViewBuilder"] = haxe_ui_backend_html5_native_builders_ScrollViewBuilder;
haxe_ui_backend_html5_native_builders_ScrollViewBuilder.__name__ = "haxe.ui.backend.html5.native.builders.ScrollViewBuilder";
haxe_ui_backend_html5_native_builders_ScrollViewBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_backend_html5_native_builders_ScrollViewBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_contents: null
	,create: function() {
		this.createContentContainer("vertical");
	}
	,addComponent: function(child) {
		if(child.hasClass("scrollview-contents") == false) {
			return this._contents.addComponent(child);
		}
		return null;
	}
	,addComponentAt: function(child,index) {
		if(child.hasClass("scrollview-contents") == false) {
			return this._contents.addComponentAt(child,index);
		}
		return null;
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		if(child.hasClass("scrollview-contents") == false) {
			return this._contents.removeComponent(child,dispose,invalidate);
		}
		return null;
	}
	,getComponentIndex: function(child) {
		return this._contents.getComponentIndex(child);
	}
	,setComponentIndex: function(child,index) {
		if(child.hasClass("scrollview-contents") == false) {
			return this._contents.setComponentIndex(child,index);
		}
		return null;
	}
	,getComponentAt: function(index) {
		return this._contents.getComponentAt(index);
	}
	,createContentContainer: function(layoutName) {
		if(this._contents == null) {
			this._contents = new haxe_ui_containers_Box();
			this._contents.addClass("scrollview-contents");
			this._contents.set_id("scrollview-contents");
			this._contents.set_layout(haxe_ui_layouts_LayoutFactory.createFromName(layoutName));
			this._component.addComponent(this._contents);
		}
	}
	,__class__: haxe_ui_backend_html5_native_builders_ScrollViewBuilder
});
var haxe_ui_layouts_ILayout = function() { };
$hxClasses["haxe.ui.layouts.ILayout"] = haxe_ui_layouts_ILayout;
haxe_ui_layouts_ILayout.__name__ = "haxe.ui.layouts.ILayout";
haxe_ui_layouts_ILayout.__isInterface__ = true;
var haxe_ui_layouts_Layout = function() {
};
$hxClasses["haxe.ui.layouts.Layout"] = haxe_ui_layouts_Layout;
haxe_ui_layouts_Layout.__name__ = "haxe.ui.layouts.Layout";
haxe_ui_layouts_Layout.__interfaces__ = [haxe_ui_layouts_ILayout];
haxe_ui_layouts_Layout.prototype = {
	_component: null
	,get_component: function() {
		return this._component;
	}
	,set_component: function(value) {
		this._component = value;
		if(this._component != null) {
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,findComponent: function(criteria,type,recursive,searchType) {
		if(searchType == null) {
			searchType = "id";
		}
		if(this._component == null) {
			return null;
		}
		return this._component.findComponent(criteria,type,recursive,searchType);
	}
	,refresh: function() {
		if(this._component != null && this._component.get_isReady() == true) {
			this.resizeChildren();
			this._component.handlePreReposition();
			this.repositionChildren();
			this._component.handlePostReposition();
		}
	}
	,autoSize: function() {
		if(this.get_component().get_isReady() == false) {
			return false;
		}
		var calculatedWidth = null;
		var calculatedHeight = null;
		if(this.get_component().get_autoWidth() == true || this.get_component().get_autoHeight() == true) {
			var size = this.calcAutoSize();
			if(this.get_component().get_autoWidth() == true) {
				calculatedWidth = size.width;
			}
			if(this.get_component().get_autoHeight() == true) {
				calculatedHeight = size.height;
			}
			this.get_component().resizeComponent(calculatedWidth,calculatedHeight);
		}
		if(calculatedWidth == null) {
			return calculatedHeight != null;
		} else {
			return true;
		}
	}
	,marginTop: function(child) {
		if(child == null || child.get_style() == null || child.get_style().marginTop == null) {
			return 0;
		}
		return child.get_style().marginTop;
	}
	,marginLeft: function(child) {
		if(child == null || child.get_style() == null || child.get_style().marginLeft == null) {
			return 0;
		}
		return child.get_style().marginLeft;
	}
	,marginBottom: function(child) {
		if(child == null || child.get_style() == null || child.get_style().marginBottom == null) {
			return 0;
		}
		return child.get_style().marginBottom;
	}
	,marginRight: function(child) {
		if(child == null || child.get_style() == null || child.get_style().marginRight == null) {
			return 0;
		}
		return child.get_style().marginRight;
	}
	,hidden: function(c) {
		if(c == null) {
			c = this.get_component();
		}
		return c.get_hidden();
	}
	,horizontalAlign: function(child) {
		if(child == null || child.get_style() == null || child.get_style().horizontalAlign == null) {
			return "left";
		}
		return child.get_style().horizontalAlign;
	}
	,verticalAlign: function(child) {
		if(child == null || child.get_style() == null || child.get_style().verticalAlign == null) {
			return "top";
		}
		return child.get_style().verticalAlign;
	}
	,fixedMinWidth: function(child) {
		var fixedMinWidth = false;
		if(child != null && child.get_style() != null && child.get_style().minWidth != null) {
			fixedMinWidth = child.get_componentWidth() <= child.get_style().minWidth;
		}
		return fixedMinWidth;
	}
	,fixedMinHeight: function(child) {
		var fixedMinHeight = false;
		if(child != null && child.get_style() != null && child.get_style().minHeight != null) {
			fixedMinHeight = child.get_componentHeight() <= child.get_style().minHeight;
		}
		return fixedMinHeight;
	}
	,paddingLeft: null
	,get_paddingLeft: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().paddingLeft == null) {
			return 0;
		}
		return this._component.get_style().paddingLeft;
	}
	,paddingTop: null
	,get_paddingTop: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().paddingTop == null) {
			return 0;
		}
		return this._component.get_style().paddingTop;
	}
	,paddingBottom: null
	,get_paddingBottom: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().paddingBottom == null) {
			return 0;
		}
		return this._component.get_style().paddingBottom;
	}
	,paddingRight: null
	,get_paddingRight: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().paddingRight == null) {
			return 0;
		}
		return this._component.get_style().paddingRight;
	}
	,horizontalSpacing: null
	,get_horizontalSpacing: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().horizontalSpacing == null) {
			return 0;
		}
		return this._component.get_style().horizontalSpacing;
	}
	,verticalSpacing: null
	,get_verticalSpacing: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().verticalSpacing == null) {
			return 0;
		}
		return this._component.get_style().verticalSpacing;
	}
	,innerWidth: null
	,innerHeight: null
	,get_innerWidth: function() {
		if(this.get_component() == null) {
			return 0;
		}
		return this.get_component().get_componentWidth() - (this.get_paddingLeft() + this.get_paddingRight());
	}
	,get_innerHeight: function() {
		if(this.get_component() == null) {
			return 0;
		}
		var padding = 0;
		if(this.get_component().get_style() != null && this.get_component().get_style().paddingTop != null) {
			padding = this.get_component().get_style().paddingTop + padding;
		}
		if(this.get_component().get_style() != null && this.get_component().get_style().paddingBottom != null) {
			padding = this.get_component().get_style().paddingBottom + padding;
		}
		var icy = this.get_component().get_componentHeight() - padding;
		return icy;
	}
	,resizeChildren: function() {
	}
	,repositionChildren: function() {
	}
	,usableSize: null
	,get_usableSize: function() {
		var ucx = 0;
		if(this._component.get_componentWidth() != null) {
			ucx = this._component.get_componentWidth();
			ucx -= this.get_paddingLeft() + this.get_paddingRight();
		}
		var ucy = 0;
		if(this._component.get_componentHeight() != null) {
			ucy = this._component.get_componentHeight();
			ucy -= this.get_paddingTop() + this.get_paddingBottom();
		}
		return new haxe_ui_geom_Size(ucx,ucy);
	}
	,usableWidth: null
	,get_usableWidth: function() {
		return this.get_usableSize().width;
	}
	,usableHeight: null
	,get_usableHeight: function() {
		return this.get_usableSize().height;
	}
	,calcAutoWidth: function() {
		return this.calcAutoSize().width;
	}
	,calcAutoHeight: function() {
		return this.calcAutoSize().height;
	}
	,calcAutoSize: function(exclusions) {
		var x1 = 16777215;
		var x2 = 0;
		var y1 = 16777215;
		var y2 = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false || this.excluded(exclusions,child) == true) {
				continue;
			}
			if(child.get_percentWidth() == null) {
				if(child.get_left() < x1) {
					x1 = child.get_left();
				}
				if(child.get_componentWidth() != null && child.get_left() + child.get_componentWidth() > x2) {
					x2 = child.get_left() + child.get_componentWidth();
				}
			}
			if(child.get_percentHeight() == null) {
				if(child.get_top() < y1) {
					y1 = child.get_top();
				}
				if(child.get_componentHeight() != null && child.get_top() + child.get_componentHeight() > y2) {
					y2 = child.get_top() + child.get_componentHeight();
				}
			}
		}
		if(x1 == 16777215) {
			x1 = 0;
		}
		if(y1 == 16777215) {
			y1 = 0;
		}
		var w = x2 - x1 + (this.get_paddingLeft() + this.get_paddingRight());
		var h = y2 - y1 + (this.get_paddingTop() + this.get_paddingBottom());
		if(((this) instanceof haxe_ui_layouts_AbsoluteLayout)) {
			w += x1;
			h += y1;
		}
		return new haxe_ui_geom_Size(w,h);
	}
	,excluded: function(exclusions,child) {
		if(exclusions == null) {
			return false;
		}
		return exclusions.indexOf(child) != -1;
	}
	,__class__: haxe_ui_layouts_Layout
	,__properties__: {get_usableHeight:"get_usableHeight",get_usableWidth:"get_usableWidth",get_usableSize:"get_usableSize",get_innerHeight:"get_innerHeight",get_innerWidth:"get_innerWidth",get_verticalSpacing:"get_verticalSpacing",get_horizontalSpacing:"get_horizontalSpacing",get_paddingRight:"get_paddingRight",get_paddingBottom:"get_paddingBottom",get_paddingTop:"get_paddingTop",get_paddingLeft:"get_paddingLeft",set_component:"set_component",get_component:"get_component"}
};
var haxe_ui_layouts_DefaultLayout = function() {
	this._calcFullHeights = false;
	this._calcFullWidths = false;
	haxe_ui_layouts_Layout.call(this);
};
$hxClasses["haxe.ui.layouts.DefaultLayout"] = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_DefaultLayout.__name__ = "haxe.ui.layouts.DefaultLayout";
haxe_ui_layouts_DefaultLayout.__super__ = haxe_ui_layouts_Layout;
haxe_ui_layouts_DefaultLayout.prototype = $extend(haxe_ui_layouts_Layout.prototype,{
	_calcFullWidths: null
	,_calcFullHeights: null
	,resizeChildren: function() {
		var usableSize = this.get_usableSize();
		var percentWidth = 100;
		var percentHeight = 100;
		var fullWidthValue = 100;
		var fullHeightValue = 100;
		if(this._calcFullWidths == true || this._calcFullHeights == true) {
			var n1 = 0;
			var n2 = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(this._calcFullWidths == true && child.get_percentWidth() != null && child.get_percentWidth() == 100) {
					++n1;
				}
				if(this._calcFullHeights == true && child.get_percentHeight() != null && child.get_percentHeight() == 100) {
					++n2;
				}
			}
			if(n1 > 0) {
				fullWidthValue = 100 / n1;
			}
			if(n2 > 0) {
				fullHeightValue = 100 / n2;
			}
		}
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var cx = null;
			var cy = null;
			if(child.get_percentWidth() != null) {
				var childPercentWidth = child.get_percentWidth();
				if(childPercentWidth == 100) {
					childPercentWidth = fullWidthValue;
				}
				cx = usableSize.width * childPercentWidth / percentWidth - this.marginLeft(child) - this.marginRight(child);
			}
			if(child.get_percentHeight() != null) {
				var childPercentHeight = child.get_percentHeight();
				if(childPercentHeight == 100) {
					childPercentHeight = fullHeightValue;
				}
				cy = usableSize.height * childPercentHeight / percentHeight - this.marginTop(child) - this.marginBottom(child);
			}
			if(this.fixedMinWidth(child) && child.get_percentWidth() != null) {
				percentWidth -= child.get_percentWidth();
			}
			if(this.fixedMinHeight(child) && child.get_percentHeight() != null) {
				percentHeight -= child.get_percentHeight();
			}
			child.resizeComponent(cx,cy);
		}
	}
	,repositionChildren: function() {
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var xpos = 0;
			var ypos = 0;
			switch(this.horizontalAlign(child)) {
			case "center":
				xpos = (this.get_component().get_componentWidth() - child.get_componentWidth()) / 2 + this.marginLeft(child) - this.marginRight(child);
				break;
			case "right":
				xpos = this.get_component().get_componentWidth() - (child.get_componentWidth() + this.get_paddingRight() + this.marginRight(child));
				break;
			default:
				xpos = this.get_paddingLeft() + this.marginLeft(child);
			}
			switch(this.verticalAlign(child)) {
			case "bottom":
				ypos = this.get_component().get_componentHeight() - (child.get_componentHeight() + this.get_paddingBottom() + this.marginBottom(child));
				break;
			case "center":
				ypos = (this.get_component().get_componentHeight() - child.get_componentHeight()) / 2 + this.marginTop(child) - this.marginBottom(child);
				break;
			default:
				ypos = this.get_paddingTop() + this.marginTop(child);
			}
			child.moveComponent(xpos,ypos);
		}
	}
	,__class__: haxe_ui_layouts_DefaultLayout
});
var haxe_ui_backend_html5_native_layouts_ButtonLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.backend.html5.native.layouts.ButtonLayout"] = haxe_ui_backend_html5_native_layouts_ButtonLayout;
haxe_ui_backend_html5_native_layouts_ButtonLayout.__name__ = "haxe.ui.backend.html5.native.layouts.ButtonLayout";
haxe_ui_backend_html5_native_layouts_ButtonLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_backend_html5_native_layouts_ButtonLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	calcAutoSize: function(exclusions) {
		var textSize = haxe_ui_backend_html5_HtmlUtils.measureText(this.get_component().get_text(),0,0,this.get_component().get_style().fontSize,this.get_component().get_style().fontName);
		var iconCX = this.getIconWidth();
		var iconCY = this.getIconHeight();
		var cx = textSize.width;
		var cy = textSize.height;
		var iconPosition = this.get_component().get_style().iconPosition;
		if(iconPosition == "top" || iconPosition == "bottom") {
			if(iconCX > cx) {
				cx = iconCX;
			}
			cy += iconCY + this.get_component().get_style().verticalSpacing;
		} else {
			cx += iconCX + this.get_component().get_style().horizontalSpacing;
			if(iconCY > cy) {
				cy = iconCY;
			}
		}
		var size = new haxe_ui_geom_Size(cx,cy);
		size.width += this.get_paddingLeft() + this.get_paddingRight();
		size.height += this.get_paddingTop() + this.get_paddingBottom();
		return size;
	}
	,repositionChildren: function() {
		var el = this.get_component().element;
		if(el.childElementCount == 2) {
			var first = el.firstElementChild;
			var last = el.lastElementChild;
			var _g = this.get_component().get_style().iconPosition;
			if(_g == null) {
				if(((first) instanceof HTMLImageElement) == false) {
					haxe_ui_backend_html5_HtmlUtils.swapElements(first,last);
				}
			} else {
				switch(_g) {
				case "bottom":case "right":
					if(((last) instanceof HTMLImageElement) == false) {
						haxe_ui_backend_html5_HtmlUtils.swapElements(first,last);
					}
					break;
				case "left":case "top":
					if(((first) instanceof HTMLImageElement) == false) {
						haxe_ui_backend_html5_HtmlUtils.swapElements(first,last);
					}
					break;
				default:
				}
			}
			var img = this.getIcon();
			if(img != null) {
				var _g = this.get_component().get_style().iconPosition;
				if(_g == null) {
					var tmp = "" + this._component.get_style().horizontalSpacing + "px";
					img.style.marginRight = tmp;
				} else {
					switch(_g) {
					case "bottom":
						var tmp = "" + this._component.get_style().verticalSpacing + "px";
						img.style.marginTop = tmp;
						break;
					case "left":
						var tmp = "" + this._component.get_style().horizontalSpacing + "px";
						img.style.marginRight = tmp;
						break;
					case "right":
						var tmp = "" + this._component.get_style().horizontalSpacing + "px";
						img.style.marginLeft = tmp;
						break;
					case "top":
						var tmp = "" + this._component.get_style().verticalSpacing + "px";
						img.style.marginBottom = tmp;
						break;
					default:
						var tmp = "" + this._component.get_style().horizontalSpacing + "px";
						img.style.marginRight = tmp;
					}
				}
			}
			var text = this.getText();
			if(text != null) {
				var _g = this.get_component().get_style().iconPosition;
				if(_g == null) {
					text.style.display = "inline-block";
				} else {
					switch(_g) {
					case "left":case "right":
						text.style.display = "inline-block";
						break;
					case "bottom":case "top":
						text.style.display = "block";
						break;
					default:
					}
				}
			}
		}
	}
	,getIconWidth: function() {
		var cx = 0;
		var icon = this.getIcon();
		if(icon != null) {
			cx = icon.offsetWidth;
		}
		return cx;
	}
	,getIconHeight: function() {
		var cy = 0;
		var icon = this.getIcon();
		if(icon != null) {
			cy = icon.offsetHeight;
		}
		return cy;
	}
	,getIcon: function() {
		var img = null;
		var el = this.get_component().element;
		var list = el.getElementsByTagName("img");
		if(list != null && list.length == 1) {
			img = list.item(0);
		}
		return img;
	}
	,getText: function() {
		var span = null;
		var el = this.get_component().element;
		var list = el.getElementsByTagName("span");
		if(list != null && list.length == 1) {
			span = list.item(0);
		}
		return span;
	}
	,__class__: haxe_ui_backend_html5_native_layouts_ButtonLayout
});
var haxe_ui_layouts_DelegateLayoutSize = function() {
};
$hxClasses["haxe.ui.layouts.DelegateLayoutSize"] = haxe_ui_layouts_DelegateLayoutSize;
haxe_ui_layouts_DelegateLayoutSize.__name__ = "haxe.ui.layouts.DelegateLayoutSize";
haxe_ui_layouts_DelegateLayoutSize.prototype = {
	component: null
	,config: null
	,width: null
	,get_width: function() {
		return 0;
	}
	,height: null
	,get_height: function() {
		return 0;
	}
	,usableWidthModifier: null
	,get_usableWidthModifier: function() {
		return 0;
	}
	,usableHeightModifier: null
	,get_usableHeightModifier: function() {
		return 0;
	}
	,getString: function(name,defaultValue) {
		if(this.config == null) {
			return defaultValue;
		}
		if(Object.prototype.hasOwnProperty.call(this.config.h,name) == false) {
			return defaultValue;
		}
		return this.config.h[name];
	}
	,getInt: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		var v = this.getString(name);
		if(v == null) {
			return defaultValue;
		}
		return Std.parseInt(v);
	}
	,getBool: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		var v = this.getString(name);
		if(v == null) {
			return defaultValue;
		}
		return v == "true";
	}
	,__class__: haxe_ui_layouts_DelegateLayoutSize
	,__properties__: {get_usableHeightModifier:"get_usableHeightModifier",get_usableWidthModifier:"get_usableWidthModifier",get_height:"get_height",get_width:"get_width"}
};
var haxe_ui_backend_html5_native_size_ButtonSize = function() {
	haxe_ui_layouts_DelegateLayoutSize.call(this);
};
$hxClasses["haxe.ui.backend.html5.native.size.ButtonSize"] = haxe_ui_backend_html5_native_size_ButtonSize;
haxe_ui_backend_html5_native_size_ButtonSize.__name__ = "haxe.ui.backend.html5.native.size.ButtonSize";
haxe_ui_backend_html5_native_size_ButtonSize.__super__ = haxe_ui_layouts_DelegateLayoutSize;
haxe_ui_backend_html5_native_size_ButtonSize.prototype = $extend(haxe_ui_layouts_DelegateLayoutSize.prototype,{
	get_width: function() {
		var size = haxe_ui_backend_html5_HtmlUtils.measureText(this.component.get_text(),0,0,this.component.get_style().fontSize,this.component.get_style().fontName);
		var iconCX = this.getIconWidth();
		var cx = size.width;
		var iconPosition = this.component.get_style().iconPosition;
		if(iconPosition == "top" || iconPosition == "bottom") {
			if(iconCX > cx) {
				cx = iconCX;
			}
		} else {
			cx += iconCX + this.component.get_style().horizontalSpacing;
		}
		return cx + this.getInt("incrementWidthBy");
	}
	,get_height: function() {
		var size = haxe_ui_backend_html5_HtmlUtils.measureText(this.component.get_text(),0,0,this.component.get_style().fontSize,this.component.get_style().fontName);
		var iconCY = this.getIconHeight();
		var cy = size.height;
		var iconPosition = this.component.get_style().iconPosition;
		if(iconPosition == "top" || iconPosition == "bottom") {
			cy += iconCY + this.component.get_style().verticalSpacing;
		} else if(iconCY > cy) {
			cy = iconCY;
		}
		return cy + this.getInt("incrementHeightBy");
	}
	,getIconWidth: function() {
		var cx = 0;
		var icon = this.getIcon();
		if(icon != null) {
			cx = icon.offsetWidth;
		}
		return cx;
	}
	,getIconHeight: function() {
		var cy = 0;
		var icon = this.getIcon();
		if(icon != null) {
			cy = icon.offsetHeight;
		}
		return cy;
	}
	,getIcon: function() {
		var img = null;
		var el = this.component.element;
		var list = el.getElementsByTagName("img");
		if(list != null && list.length == 1) {
			img = list.item(0);
		}
		return img;
	}
	,__class__: haxe_ui_backend_html5_native_size_ButtonSize
});
var haxe_ui_backend_html5_native_size_ComponentSize = function() {
	haxe_ui_layouts_DelegateLayoutSize.call(this);
};
$hxClasses["haxe.ui.backend.html5.native.size.ComponentSize"] = haxe_ui_backend_html5_native_size_ComponentSize;
haxe_ui_backend_html5_native_size_ComponentSize.__name__ = "haxe.ui.backend.html5.native.size.ComponentSize";
haxe_ui_backend_html5_native_size_ComponentSize.__super__ = haxe_ui_layouts_DelegateLayoutSize;
haxe_ui_backend_html5_native_size_ComponentSize.prototype = $extend(haxe_ui_layouts_DelegateLayoutSize.prototype,{
	get_width: function() {
		var w = this.component.get_componentWidth();
		if(w == null || w <= 0) {
			w = this.getInt("defaultWidth");
		}
		return w;
	}
	,get_height: function() {
		var h = this.component.get_componentHeight();
		if(h == null || h <= 0) {
			h = this.getInt("defaultHeight");
		}
		return h;
	}
	,__class__: haxe_ui_backend_html5_native_size_ComponentSize
});
var haxe_ui_backend_html5_native_size_ElementSize = function() {
	haxe_ui_layouts_DelegateLayoutSize.call(this);
};
$hxClasses["haxe.ui.backend.html5.native.size.ElementSize"] = haxe_ui_backend_html5_native_size_ElementSize;
haxe_ui_backend_html5_native_size_ElementSize.__name__ = "haxe.ui.backend.html5.native.size.ElementSize";
haxe_ui_backend_html5_native_size_ElementSize.__super__ = haxe_ui_layouts_DelegateLayoutSize;
haxe_ui_backend_html5_native_size_ElementSize.prototype = $extend(haxe_ui_layouts_DelegateLayoutSize.prototype,{
	get_width: function() {
		var w = this.component.element.offsetWidth;
		if(((this.component) instanceof haxe_ui_components_VerticalSlider)) {
			if(w == this.component.element.offsetHeight) {
				w = 21;
			}
		} else if(((this.component) instanceof haxe_ui_components_VerticalProgress)) {
			if(this.component.element.offsetWidth > this.component.element.offsetHeight) {
				w = this.component.element.offsetHeight;
			}
		}
		return w;
	}
	,get_height: function() {
		var h = this.component.element.offsetHeight;
		if(((this.component) instanceof haxe_ui_components_VerticalProgress)) {
			if(this.component.element.offsetWidth > this.component.element.offsetHeight) {
				h = this.component.element.offsetWidth;
			}
		}
		return h;
	}
	,__class__: haxe_ui_backend_html5_native_size_ElementSize
});
var haxe_ui_backend_html5_native_size_FontHeight = function() {
	haxe_ui_layouts_DelegateLayoutSize.call(this);
};
$hxClasses["haxe.ui.backend.html5.native.size.FontHeight"] = haxe_ui_backend_html5_native_size_FontHeight;
haxe_ui_backend_html5_native_size_FontHeight.__name__ = "haxe.ui.backend.html5.native.size.FontHeight";
haxe_ui_backend_html5_native_size_FontHeight.__super__ = haxe_ui_layouts_DelegateLayoutSize;
haxe_ui_backend_html5_native_size_FontHeight.prototype = $extend(haxe_ui_layouts_DelegateLayoutSize.prototype,{
	get_width: function() {
		return this.component.get_width();
	}
	,get_height: function() {
		return haxe_ui_backend_html5_HtmlUtils.measureText("|").height + this.getInt("incrementBy");
	}
	,__class__: haxe_ui_backend_html5_native_size_FontHeight
});
var haxe_ui_backend_html5_native_size_TextSize = function() {
	haxe_ui_layouts_DelegateLayoutSize.call(this);
};
$hxClasses["haxe.ui.backend.html5.native.size.TextSize"] = haxe_ui_backend_html5_native_size_TextSize;
haxe_ui_backend_html5_native_size_TextSize.__name__ = "haxe.ui.backend.html5.native.size.TextSize";
haxe_ui_backend_html5_native_size_TextSize.__super__ = haxe_ui_layouts_DelegateLayoutSize;
haxe_ui_backend_html5_native_size_TextSize.prototype = $extend(haxe_ui_layouts_DelegateLayoutSize.prototype,{
	get_width: function() {
		var text = this.component.get_text();
		if(text == null) {
			text = "";
		}
		var size = haxe_ui_backend_html5_HtmlUtils.measureText(text,0,0,this.component.get_style().fontSize,this.component.get_style().fontName);
		return size.width + this.getInt("incrementWidthBy");
	}
	,get_height: function() {
		var text = this.component.get_text();
		if(text == null) {
			text = "|";
		}
		var size = haxe_ui_backend_html5_HtmlUtils.measureText(text,0,0,this.component.get_style().fontSize,this.component.get_style().fontName);
		return size.height + this.getInt("incrementHeightBy");
	}
	,__class__: haxe_ui_backend_html5_native_size_TextSize
});
var haxe_ui_backend_html5_util_FontDetect = function() {
};
$hxClasses["haxe.ui.backend.html5.util.FontDetect"] = haxe_ui_backend_html5_util_FontDetect;
haxe_ui_backend_html5_util_FontDetect.__name__ = "haxe.ui.backend.html5.util.FontDetect";
haxe_ui_backend_html5_util_FontDetect.init = function() {
	if(haxe_ui_backend_html5_util_FontDetect._initialized == true) {
		return;
	}
	haxe_ui_backend_html5_util_FontDetect._initialized = true;
	var body = window.document.body;
	var firstChild = window.document.body.firstChild;
	var div = window.document.createElement("div");
	div.id = "fontdetectHelper";
	haxe_ui_backend_html5_util_FontDetect.span = window.document.createElement("span");
	haxe_ui_backend_html5_util_FontDetect.span.innerText = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	div.appendChild(haxe_ui_backend_html5_util_FontDetect.span);
	body.insertBefore(div,firstChild);
	div.style.position = "absolute";
	div.style.visibility = "hidden";
	div.style.top = "-200px";
	div.style.left = "-100000px";
	div.style.width = "100000px";
	div.style.height = "200px";
	div.style.fontSize = "100px";
};
haxe_ui_backend_html5_util_FontDetect.onFontLoaded = function(cssFontName,onLoad,onFail,options) {
	if(cssFontName == null) {
		return;
	}
	var msInterval = 10;
	if(options != null && options.msInterval != null) {
		msInterval = options.msInterval;
	}
	var msTimeout = 2000;
	if(options != null && options.msTimeout != null) {
		msTimeout = options.msTimeout;
	}
	if(onLoad == null && onFail == null) {
		return;
	}
	if(haxe_ui_backend_html5_util_FontDetect._initialized == false) {
		haxe_ui_backend_html5_util_FontDetect.init();
	}
	if(haxe_ui_backend_html5_util_FontDetect.isFontLoaded(cssFontName)) {
		if(onLoad != null) {
			onLoad(cssFontName);
		}
		return;
	}
	var utStart = new Date().getTime();
	var idInterval = 0;
	idInterval = window.setInterval(function() {
		if(haxe_ui_backend_html5_util_FontDetect.isFontLoaded(cssFontName)) {
			window.clearInterval(idInterval);
			if(onLoad != null) {
				onLoad(cssFontName);
			}
			return;
		} else {
			var utNow = new Date().getTime();
			if(utNow - utStart > msTimeout) {
				window.clearInterval(idInterval);
				if(onFail != null) {
					onFail(cssFontName);
				}
			}
		}
	},msInterval);
};
haxe_ui_backend_html5_util_FontDetect.isFontLoaded = function(cssFontName) {
	var wThisFont = 0;
	var wPrevFont = 0;
	if(haxe_ui_backend_html5_util_FontDetect._initialized == false) {
		haxe_ui_backend_html5_util_FontDetect.init();
	}
	var _g = 0;
	var _g1 = haxe_ui_backend_html5_util_FontDetect._aFallbackFonts.length;
	while(_g < _g1) {
		var ix = _g++;
		haxe_ui_backend_html5_util_FontDetect.span.style.fontFamily = cssFontName + "," + haxe_ui_backend_html5_util_FontDetect._aFallbackFonts[ix];
		wThisFont = haxe_ui_backend_html5_util_FontDetect.span.offsetWidth;
		if(ix > 0 && wThisFont != wPrevFont) {
			return false;
		}
		wPrevFont = wThisFont;
	}
	return true;
};
haxe_ui_backend_html5_util_FontDetect.prototype = {
	__class__: haxe_ui_backend_html5_util_FontDetect
};
var haxe_ui_backend_html5_util_StyleSheetHelper = function() {
};
$hxClasses["haxe.ui.backend.html5.util.StyleSheetHelper"] = haxe_ui_backend_html5_util_StyleSheetHelper;
haxe_ui_backend_html5_util_StyleSheetHelper.__name__ = "haxe.ui.backend.html5.util.StyleSheetHelper";
haxe_ui_backend_html5_util_StyleSheetHelper.getValidStyleSheet = function() {
	if(haxe_ui_backend_html5_util_StyleSheetHelper._sheet != null) {
		return haxe_ui_backend_html5_util_StyleSheetHelper._sheet;
	}
	var sheet = null;
	var _g = 0;
	var _g1 = window.document.styleSheets;
	while(_g < _g1.length) {
		var test = _g1[_g];
		++_g;
		var css = js_Boot.__cast(test , CSSStyleSheet);
		if(css.ownerNode.nodeName == "STYLE" && css.href == null) {
			sheet = css;
			break;
		}
	}
	if(sheet == null) {
		var styleElement = window.document.createElement("style");
		styleElement.appendChild(window.document.createTextNode(""));
		window.document.head.appendChild(styleElement);
		sheet = js_Boot.__cast(styleElement.sheet , CSSStyleSheet);
	}
	haxe_ui_backend_html5_util_StyleSheetHelper._sheet = sheet;
	return sheet;
};
haxe_ui_backend_html5_util_StyleSheetHelper.prototype = {
	__class__: haxe_ui_backend_html5_util_StyleSheetHelper
};
var haxe_ui_behaviours_Behaviours = function(component) {
	this._actualUpdateOrder = null;
	this._updateOrder = [];
	this._instances = new haxe_ds_StringMap();
	this._registry = new haxe_ds_StringMap();
	this._component = component;
};
$hxClasses["haxe.ui.behaviours.Behaviours"] = haxe_ui_behaviours_Behaviours;
haxe_ui_behaviours_Behaviours.__name__ = "haxe.ui.behaviours.Behaviours";
haxe_ui_behaviours_Behaviours.prototype = {
	_component: null
	,_registry: null
	,_instances: null
	,register: function(id,cls,defaultValue) {
		var info = { id : id, cls : cls, defaultValue : defaultValue, isSet : false};
		this._registry.h[id] = info;
		HxOverrides.remove(this._updateOrder,id);
		this._updateOrder.push(id);
		this._actualUpdateOrder = null;
	}
	,isRegistered: function(id) {
		return Object.prototype.hasOwnProperty.call(this._registry.h,id);
	}
	,replaceNative: function() {
		if(this._component.get_native() == false || this._component.get_hasNativeEntry() == false) {
			return;
		}
		var ids = [];
		var id = haxe_ds_StringMap.keysIterator(this._registry.h);
		while(id.hasNext()) {
			var id1 = id.next();
			ids.push(id1);
		}
		var _g = 0;
		while(_g < ids.length) {
			var id = ids[_g];
			++_g;
			var nativeProps = this._component.getNativeConfigProperties(".behaviour[id=" + id + "]");
			if(nativeProps != null && Object.prototype.hasOwnProperty.call(nativeProps.h,"class")) {
				var registered = this._registry.h[id];
				var name = nativeProps.h["class"];
				var info = { id : id, cls : $hxClasses[name], defaultValue : registered.defaultValue, config : nativeProps, isSet : false};
				this._registry.h[id] = info;
			}
		}
	}
	,validateData: function() {
		var _g = 0;
		var _g1 = this.get_actualUpdateOrder();
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var b = this._instances.h[key];
			if(((b) instanceof haxe_ui_behaviours_DataBehaviour)) {
				(js_Boot.__cast(b , haxe_ui_behaviours_DataBehaviour)).validate();
			}
		}
	}
	,_updateOrder: null
	,get_updateOrder: function() {
		return this._updateOrder;
	}
	,set_updateOrder: function(value) {
		this._updateOrder = value;
		this._actualUpdateOrder = null;
		return value;
	}
	,_actualUpdateOrder: null
	,actualUpdateOrder: null
	,get_actualUpdateOrder: function() {
		if(this._actualUpdateOrder == null) {
			this._actualUpdateOrder = this._updateOrder.slice();
			var key = haxe_ds_StringMap.keysIterator(this._instances.h);
			while(key.hasNext()) {
				var key1 = key.next();
				if(this._actualUpdateOrder.indexOf(key1) == -1) {
					this._actualUpdateOrder.push(key1);
				}
			}
		}
		return this._actualUpdateOrder;
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.get_actualUpdateOrder();
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var b = this._instances.h[key];
			if(b != null) {
				b.update();
			}
		}
	}
	,find: function(id,create) {
		if(create == null) {
			create = true;
		}
		var b = this._instances.h[id];
		if(b == null && create == true) {
			var info = this._registry.h[id];
			if(info != null) {
				b = Type.createInstance(info.cls,[this._component]);
				if(b != null) {
					b.config = info.config;
					b.id = id;
					this._instances.h[id] = b;
					this._actualUpdateOrder = null;
				} else {
					var c = js_Boot.getClass(this._component);
					haxe_Log.trace("WARNING: problem creating behaviour class '" + Std.string(info.cls) + "' for '" + c.__name__ + ":" + id + "'",{ fileName : "haxe/ui/behaviours/Behaviours.hx", lineNumber : 140, className : "haxe.ui.behaviours.Behaviours", methodName : "find"});
				}
			}
		}
		if(b == null) {
			throw haxe_Exception.thrown("behaviour " + id + " not found");
		}
		return b;
	}
	,_cache: null
	,cache: function() {
		this._cache = new haxe_ds_StringMap();
		var registeredKey = haxe_ds_StringMap.keysIterator(this._registry.h);
		while(registeredKey.hasNext()) {
			var registeredKey1 = registeredKey.next();
			var v = this._registry.h[registeredKey1].defaultValue;
			var instance = this._instances.h[registeredKey1];
			if(instance != null) {
				v = instance.get();
			}
			if(v != null) {
				this._cache.h[registeredKey1] = v;
			}
		}
	}
	,detatch: function() {
		var b = haxe_ds_StringMap.valueIterator(this._instances.h);
		while(b.hasNext()) {
			var b1 = b.next();
			b1.detatch();
		}
		this._instances = new haxe_ds_StringMap();
	}
	,restore: function() {
		if(this._cache == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.get_actualUpdateOrder();
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var v = this._cache.h[key];
			if(v != null) {
				this.set(key,v);
			}
		}
		this._cache = null;
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,set: function(id,value) {
		this.lock();
		var b = this.find(id);
		var changed = null;
		if(((b) instanceof haxe_ui_behaviours_ValueBehaviour)) {
			var v = (js_Boot.__cast(b , haxe_ui_behaviours_ValueBehaviour))._value;
			changed = haxe_ui_util_Variant.neq(v,value);
		}
		b.set(value);
		var info = this._registry.h[id];
		info.isSet = true;
		this.unlock();
		var autoDispatch = b.getConfigValue("autoDispatch",null);
		if(autoDispatch != null) {
			var arr = autoDispatch.split(".");
			var eventName = arr.pop().toLowerCase();
			var cls = arr.join(".");
			var event = Type.createInstance($hxClasses[cls],[eventName]);
			if(eventName != "change") {
				b._component.dispatch(event);
			} else if(changed == true || changed == null) {
				b._component.dispatch(event);
			}
		}
	}
	,get: function(id) {
		this.lock();
		var b = this.find(id);
		var v = null;
		if(b != null) {
			var info = this._registry.h[id];
			if(info.isSet == false && info.defaultValue != null && js_Boot.getClass(b) == haxe_ui_behaviours_DefaultBehaviour) {
				v = info.defaultValue;
			} else {
				v = b.get();
			}
		}
		this.unlock();
		return v;
	}
	,getDynamic: function(id) {
		this.lock();
		var b = this.find(id);
		var v = null;
		if(b != null) {
			v = b.getDynamic();
		}
		this.unlock();
		return v;
	}
	,call: function(id,param) {
		return this.find(id).call(param);
	}
	,applyDefaults: function() {
		var order = this._updateOrder.slice();
		var key = haxe_ds_StringMap.keysIterator(this._registry.h);
		while(key.hasNext()) {
			var key1 = key.next();
			if(order.indexOf(key1) == -1) {
				order.push(key1);
			}
		}
		var _g = 0;
		while(_g < order.length) {
			var key = order[_g];
			++_g;
			var r = this._registry.h[key];
			if(r.defaultValue != null) {
				this.set(key,r.defaultValue);
			}
		}
	}
	,__class__: haxe_ui_behaviours_Behaviours
	,__properties__: {get_actualUpdateOrder:"get_actualUpdateOrder",set_updateOrder:"set_updateOrder",get_updateOrder:"get_updateOrder"}
};
var haxe_ui_behaviours_DefaultBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.DefaultBehaviour"] = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_behaviours_DefaultBehaviour.__name__ = "haxe.ui.behaviours.DefaultBehaviour";
haxe_ui_behaviours_DefaultBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_behaviours_DefaultBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	_value: null
	,get: function() {
		return this._value;
	}
	,set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		this._value = value;
		haxe_ui_behaviours_Behaviour.prototype.set.call(this,value);
	}
	,__class__: haxe_ui_behaviours_DefaultBehaviour
});
var haxe_ui_behaviours_InvalidatingBehaviour = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.InvalidatingBehaviour"] = haxe_ui_behaviours_InvalidatingBehaviour;
haxe_ui_behaviours_InvalidatingBehaviour.__name__ = "haxe.ui.behaviours.InvalidatingBehaviour";
haxe_ui_behaviours_InvalidatingBehaviour.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_behaviours_InvalidatingBehaviour.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	get: function() {
		return this._value;
	}
	,set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		haxe_ui_behaviours_ValueBehaviour.prototype.set.call(this,value);
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
	}
	,__class__: haxe_ui_behaviours_InvalidatingBehaviour
});
var haxe_ui_behaviours_LayoutBehaviour = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.LayoutBehaviour"] = haxe_ui_behaviours_LayoutBehaviour;
haxe_ui_behaviours_LayoutBehaviour.__name__ = "haxe.ui.behaviours.LayoutBehaviour";
haxe_ui_behaviours_LayoutBehaviour.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_behaviours_LayoutBehaviour.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this.get())) {
			return;
		}
		this._value = value;
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
	}
	,__class__: haxe_ui_behaviours_LayoutBehaviour
});
var haxe_ui_binding_PropertyInfo = function() {
	this.objects = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.binding.PropertyInfo"] = haxe_ui_binding_PropertyInfo;
haxe_ui_binding_PropertyInfo.__name__ = "haxe.ui.binding.PropertyInfo";
haxe_ui_binding_PropertyInfo.prototype = {
	name: null
	,script: null
	,objects: null
	,addObject: function(objectId,objectProp) {
		var array = this.objects.h[objectId];
		if(array == null) {
			array = [];
			this.objects.h[objectId] = array;
		}
		if(array.indexOf(objectProp) == -1) {
			array.push(objectProp);
		}
	}
	,__class__: haxe_ui_binding_PropertyInfo
};
var haxe_ui_binding_TargetInfo = function() {
	this.props = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.binding.TargetInfo"] = haxe_ui_binding_TargetInfo;
haxe_ui_binding_TargetInfo.__name__ = "haxe.ui.binding.TargetInfo";
haxe_ui_binding_TargetInfo.prototype = {
	props: null
	,addBinding: function(sourceProp,target,targetProp) {
		var map = this.props.h[sourceProp];
		if(map == null) {
			map = new haxe_ds_ObjectMap();
			this.props.h[sourceProp] = map;
		}
		var array = map.h[target.__id__];
		if(array == null) {
			array = [];
			map.set(target,array);
		}
		array.push(targetProp);
	}
	,__class__: haxe_ui_binding_TargetInfo
};
var haxe_ui_binding_BindingInfo = function() {
	this.props = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.binding.BindingInfo"] = haxe_ui_binding_BindingInfo;
haxe_ui_binding_BindingInfo.__name__ = "haxe.ui.binding.BindingInfo";
haxe_ui_binding_BindingInfo.prototype = {
	props: null
	,addProp: function(name,script) {
		var p = this.props.h[name];
		if(p == null) {
			p = new haxe_ui_binding_PropertyInfo();
			p.name = name;
			p.script = script;
			this.props.h[name] = p;
		}
		return p;
	}
	,__class__: haxe_ui_binding_BindingInfo
};
var haxe_ui_binding_BindingManager = function() {
	this.interp = new haxe_ui_scripting_ScriptInterp();
};
$hxClasses["haxe.ui.binding.BindingManager"] = haxe_ui_binding_BindingManager;
haxe_ui_binding_BindingManager.__name__ = "haxe.ui.binding.BindingManager";
haxe_ui_binding_BindingManager.__properties__ = {get_instance:"get_instance"};
haxe_ui_binding_BindingManager.get_instance = function() {
	if(haxe_ui_binding_BindingManager._instance == null) {
		haxe_ui_binding_BindingManager._instance = new haxe_ui_binding_BindingManager();
	}
	return haxe_ui_binding_BindingManager._instance;
};
haxe_ui_binding_BindingManager.prototype = {
	add: function(c,prop,script) {
		var n1 = script.indexOf("${");
		while(n1 != -1) {
			var n2 = script.indexOf("}",n1);
			var scriptPart = HxOverrides.substr(script,n1 + 2,n2 - n1 - 2);
			var parser = new hscript_Parser();
			var expr = parser.parseString(scriptPart);
			var info = haxe_ui_binding_BindingManager.bindingInfo.h[c.__id__];
			if(info == null) {
				info = new haxe_ui_binding_BindingInfo();
				haxe_ui_binding_BindingManager.bindingInfo.set(c,info);
			}
			var propInfo = info.addProp(prop,script);
			this.extractFields(expr,propInfo);
			var objectId = haxe_ds_StringMap.keysIterator(propInfo.objects.h);
			while(objectId.hasNext()) {
				var objectId1 = objectId.next();
				var _g = 0;
				var _g1 = propInfo.objects.h[objectId1];
				while(_g < _g1.length) {
					var fieldId = _g1[_g];
					++_g;
					var targetInfo = haxe_ui_binding_BindingManager.targets.h[objectId1];
					if(targetInfo == null) {
						targetInfo = new haxe_ui_binding_TargetInfo();
						haxe_ui_binding_BindingManager.targets.h[objectId1] = targetInfo;
					}
					targetInfo.addBinding(fieldId,c,propInfo);
				}
			}
			this.handleProp(c,propInfo);
			n1 = script.indexOf("${",n2);
		}
	}
	,componentPropChanged: function(c,prop) {
		if(c == null || c.get_id() == null) {
			return;
		}
		var this1 = haxe_ui_binding_BindingManager.targets;
		var key = c.get_id();
		var targetInfo = this1.h[key];
		if(targetInfo == null) {
			return;
		}
		var map = targetInfo.props.h[prop];
		if(map == null) {
			return;
		}
		var t = map.keys();
		while(t.hasNext()) {
			var t1 = t.next();
			var array = map.h[t1.__id__];
			var _g = 0;
			while(_g < array.length) {
				var prop = array[_g];
				++_g;
				this.handleProp(t1,prop);
			}
		}
	}
	,handleProp: function(t,prop) {
		var result = this.interpolate(prop.script,prop,t);
		var currentType = Type.typeof(Reflect.getProperty(t,prop.name));
		if(currentType == ValueType.TFloat) {
			result = parseFloat(Std.string(result));
		} else if(currentType == ValueType.TInt) {
			result = Std.parseInt(Std.string(result));
		} else if(currentType == ValueType.TBool) {
			result = Std.string(result) == "true";
		}
		Reflect.setProperty(t,prop.name,result);
	}
	,interpolate: function(s,prop,t) {
		var copy = s;
		var n1 = copy.indexOf("${");
		while(n1 != -1) {
			var n2 = copy.indexOf("}",n1);
			var before = HxOverrides.substr(copy,0,n1);
			var after = HxOverrides.substr(copy,n2 + 1,copy.length);
			var script = HxOverrides.substr(copy,n1 + 2,n2 - n1 - 2);
			var result = this.exec(script,prop,t);
			copy = before + result + after;
			n1 = copy.indexOf("${");
		}
		return copy;
	}
	,interp: null
	,exec: function(script,prop,t) {
		var parser = new hscript_Parser();
		var expr = parser.parseString(script);
		var root = this.findRoot(t);
		var objectId = haxe_ds_StringMap.keysIterator(prop.objects.h);
		while(objectId.hasNext()) {
			var objectId1 = objectId.next();
			var this1 = this.interp.variables;
			var value = root.findComponent(objectId1);
			this1.h[objectId1] = value;
		}
		this.interp.variables.h["this"] = t;
		var result = null;
		try {
			result = this.interp.expr(expr);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		return result;
	}
	,findRoot: function(c) {
		var root = c;
		var ref = c;
		while(ref != null) {
			root = ref;
			if(root.bindingRoot) {
				break;
			}
			ref = ref.parentComponent;
		}
		return root;
	}
	,extractFields: function(expr,propInfo) {
		switch(expr._hx_index) {
		case 0:
			var _g = expr.c;
			break;
		case 1:
			var objectId = expr.v;
			propInfo.addObject(objectId,"value");
			break;
		case 5:
			var _g = expr.f;
			var _g1 = expr.e;
			switch(_g1._hx_index) {
			case 1:
				var fieldId = _g;
				var objectId = _g1.v;
				propInfo.addObject(objectId,fieldId);
				break;
			case 5:
				var _g = _g1.e;
				if(_g._hx_index == 1) {
					var fieldId = _g1.f;
					var objectId = _g.v;
					propInfo.addObject(objectId,fieldId);
				} else {
					haxe_Log.trace(expr,{ fileName : "haxe/ui/binding/BindingManager.hx", lineNumber : 232, className : "haxe.ui.binding.BindingManager", methodName : "extractFields"});
				}
				break;
			default:
				haxe_Log.trace(expr,{ fileName : "haxe/ui/binding/BindingManager.hx", lineNumber : 232, className : "haxe.ui.binding.BindingManager", methodName : "extractFields"});
			}
			break;
		case 6:
			var e2 = expr.e2;
			var e1 = expr.e1;
			var op = expr.op;
			this.extractFields(e1,propInfo);
			this.extractFields(e2,propInfo);
			break;
		case 7:
			var e = expr.e;
			var prefix = expr.prefix;
			var op = expr.op;
			this.extractFields(e,propInfo);
			break;
		case 8:
			var params = expr.params;
			var e = expr.e;
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.extractFields(p,propInfo);
			}
			break;
		case 17:
			var values = expr.e;
			var _g = 0;
			while(_g < values.length) {
				var v = values[_g];
				++_g;
				this.extractFields(v,propInfo);
			}
			break;
		default:
			haxe_Log.trace(expr,{ fileName : "haxe/ui/binding/BindingManager.hx", lineNumber : 232, className : "haxe.ui.binding.BindingManager", methodName : "extractFields"});
		}
	}
	,__class__: haxe_ui_binding_BindingManager
};
var haxe_ui_focus_IFocusable = function() { };
$hxClasses["haxe.ui.focus.IFocusable"] = haxe_ui_focus_IFocusable;
haxe_ui_focus_IFocusable.__name__ = "haxe.ui.focus.IFocusable";
haxe_ui_focus_IFocusable.__isInterface__ = true;
haxe_ui_focus_IFocusable.prototype = {
	get_focus: null
	,set_focus: null
	,get_allowFocus: null
	,set_allowFocus: null
	,__class__: haxe_ui_focus_IFocusable
	,__properties__: {set_allowFocus:"set_allowFocus",get_allowFocus:"get_allowFocus",set_focus:"set_focus",get_focus:"get_focus"}
};
var haxe_ui_core_InteractiveComponent = function() {
	this._allowFocus = true;
	this._focus = false;
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.core.InteractiveComponent"] = haxe_ui_core_InteractiveComponent;
haxe_ui_core_InteractiveComponent.__name__ = "haxe.ui.core.InteractiveComponent";
haxe_ui_core_InteractiveComponent.__interfaces__ = [haxe_ui_focus_IFocusable];
haxe_ui_core_InteractiveComponent.__super__ = haxe_ui_core_Component;
haxe_ui_core_InteractiveComponent.prototype = $extend(haxe_ui_core_Component.prototype,{
	_focus: null
	,get_focus: function() {
		return this._focus;
	}
	,set_focus: function(value) {
		if(this._focus == value || this.get_allowFocus() == false) {
			return value;
		}
		this._focus = value;
		var eventType = null;
		if(this._focus == true) {
			this.addClass(":active");
			eventType = "focusin";
			haxe_ui_focus_FocusManager.get_instance().set_focus(js_Boot.__cast(this , haxe_ui_focus_IFocusable));
			var scrollview = this.findAncestor(null,haxe_ui_containers_ScrollView);
			if(scrollview != null) {
				scrollview.ensureVisible(this);
			}
		} else {
			this.removeClass(":active");
			eventType = "focusout";
			haxe_ui_focus_FocusManager.get_instance().set_focus(null);
		}
		this.invalidateComponent("data");
		this.dispatch(new haxe_ui_events_FocusEvent(eventType));
		return value;
	}
	,_allowFocus: null
	,get_allowFocus: function() {
		return this._allowFocus;
	}
	,set_allowFocus: function(value) {
		if(this._allowFocus == value) {
			return value;
		}
		this._allowFocus = value;
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js_Boot.__implements(child,haxe_ui_focus_IFocusable)) {
				(js_Boot.__cast(child , haxe_ui_focus_IFocusable)).set_allowFocus(value);
			}
		}
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("allowInteraction",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(true));
	}
	,get_allowInteraction: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("allowInteraction"));
	}
	,set_allowInteraction: function(value) {
		this.behaviours.set("allowInteraction",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"allowInteraction");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		c.set_allowInteraction(this.get_allowInteraction());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_core_InteractiveComponent();
	}
	,__class__: haxe_ui_core_InteractiveComponent
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_allowInteraction:"set_allowInteraction",get_allowInteraction:"get_allowInteraction",set_allowFocus:"set_allowFocus",get_allowFocus:"get_allowFocus",set_focus:"set_focus",get_focus:"get_focus"})
});
var haxe_ui_components_Button = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.Button"] = haxe_ui_components_Button;
haxe_ui_components_Button.__name__ = "haxe.ui.components.Button";
haxe_ui_components_Button.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_Button.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	applyStyle: function(style) {
		haxe_ui_core_InteractiveComponent.prototype.applyStyle.call(this,style);
		if(style.icon != null) {
			this.set_icon(haxe_ui_util_Variant.fromString(style.icon));
		}
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("repeater",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("repeatInterval",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromFloat(50));
		this.behaviours.register("easeInRepeater",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("remainPressed",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("toggle",haxe_ui_components__$Button_ToggleBehaviour);
		this.behaviours.register("selected",haxe_ui_components__$Button_SelectedBehaviour);
		this.behaviours.register("text",haxe_ui_components__$Button_TextBehaviour);
		this.behaviours.register("icon",haxe_ui_components__$Button_IconBehaviour);
	}
	,get_repeater: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("repeater"));
	}
	,set_repeater: function(value) {
		this.behaviours.set("repeater",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"repeater");
		return value;
	}
	,get_repeatInterval: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("repeatInterval"));
	}
	,set_repeatInterval: function(value) {
		this.behaviours.set("repeatInterval",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"repeatInterval");
		return value;
	}
	,get_easeInRepeater: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("easeInRepeater"));
	}
	,set_easeInRepeater: function(value) {
		this.behaviours.set("easeInRepeater",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"easeInRepeater");
		return value;
	}
	,get_remainPressed: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("remainPressed"));
	}
	,set_remainPressed: function(value) {
		this.behaviours.set("remainPressed",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"remainPressed");
		return value;
	}
	,get_toggle: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("toggle"));
	}
	,set_toggle: function(value) {
		this.behaviours.set("toggle",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"toggle");
		return value;
	}
	,get_selected: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("selected"));
	}
	,set_selected: function(value) {
		this.behaviours.set("selected",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selected");
		return value;
	}
	,get_icon: function() {
		return this.behaviours.get("icon");
	}
	,set_icon: function(value) {
		this.behaviours.set("icon",value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"icon");
		return value;
	}
	,get_value: function() {
		return this.get_text();
	}
	,set_value: function(value) {
		this.set_text(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"text");
		return value;
	}
	,get_iconPosition: function() {
		if(this.customStyle.iconPosition != null) {
			return this.customStyle.iconPosition;
		}
		if(this.get_style() == null || this.get_style().iconPosition == null) {
			return null;
		}
		return this.get_style().iconPosition;
	}
	,set_iconPosition: function(value) {
		if(this.customStyle.iconPosition == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.iconPosition = value;
		this.invalidateComponent("style");
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout");
		}
		return value;
	}
	,get_fontSize: function() {
		if(this.customStyle.fontSize != null) {
			return this.customStyle.fontSize;
		}
		if(this.get_style() == null || this.get_style().fontSize == null) {
			return null;
		}
		return this.get_style().fontSize;
	}
	,set_fontSize: function(value) {
		if(this.customStyle.fontSize == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.fontSize = value;
		this.invalidateComponent("style");
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout");
		}
		return value;
	}
	,get_textAlign: function() {
		if(this.customStyle.textAlign != null) {
			return this.customStyle.textAlign;
		}
		if(this.get_style() == null || this.get_style().textAlign == null) {
			return null;
		}
		return this.get_style().textAlign;
	}
	,set_textAlign: function(value) {
		if(this.customStyle.textAlign == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.textAlign = value;
		this.invalidateComponent("style");
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout");
		}
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		c.set_repeater(this.get_repeater());
		c.set_repeatInterval(this.get_repeatInterval());
		c.set_easeInRepeater(this.get_easeInRepeater());
		c.set_remainPressed(this.get_remainPressed());
		c.set_toggle(this.get_toggle());
		c.set_selected(this.get_selected());
		if(this.get_icon() != null) {
			c.set_icon(this.get_icon());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Button();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components_ButtonEvents;
		this._compositeBuilderClass = haxe_ui_components_ButtonBuilder;
		this._defaultLayoutClass = haxe_ui_components_ButtonLayout;
	}
	,__class__: haxe_ui_components_Button
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_iconPosition:"set_iconPosition",get_iconPosition:"get_iconPosition",set_icon:"set_icon",get_icon:"get_icon",set_selected:"set_selected",get_selected:"get_selected",set_toggle:"set_toggle",get_toggle:"get_toggle",set_remainPressed:"set_remainPressed",get_remainPressed:"get_remainPressed",set_easeInRepeater:"set_easeInRepeater",get_easeInRepeater:"get_easeInRepeater",set_repeatInterval:"set_repeatInterval",get_repeatInterval:"get_repeatInterval",set_repeater:"set_repeater",get_repeater:"get_repeater"})
});
var haxe_ui_components_ButtonLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components.ButtonLayout"] = haxe_ui_components_ButtonLayout;
haxe_ui_components_ButtonLayout.__name__ = "haxe.ui.components.ButtonLayout";
haxe_ui_components_ButtonLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components_ButtonLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	iconPosition: null
	,get_iconPosition: function() {
		if(this.get_component().get_style() == null || this.get_component().get_style().iconPosition == null) {
			return "left";
		}
		return this.get_component().get_style().iconPosition;
	}
	,resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		var label = this.get_component().findComponent(null,haxe_ui_components_Label,false);
		var icon = this.get_component().findComponent("button-icon",null,false);
		if(this._component.get_autoWidth() == false) {
			var ucx = this.get_usableSize();
			if(label != null) {
				var cx = ucx.width;
				if(icon != null && (this.get_iconPosition() == "far-right" || this.get_iconPosition() == "far-left" || this.get_iconPosition() == "left" || this.get_iconPosition() == "right")) {
					cx -= icon.get_width() + this.get_verticalSpacing();
				}
				label.set_width(cx);
			}
		}
	}
	,repositionChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.repositionChildren.call(this);
		var label = this.get_component().findComponent(null,haxe_ui_components_Label,false);
		var icon = this.get_component().findComponent("button-icon",null,false);
		switch(this.get_iconPosition()) {
		case "far-left":
			if(label != null && icon != null) {
				var x = this.get_paddingLeft();
				if(this.get_iconPosition() == "far-left") {
					icon.set_left(x + this.marginLeft(icon) - this.marginRight(icon));
					x += this.get_horizontalSpacing() + icon.get_componentWidth();
					label.set_left(x + this.marginLeft(label) - this.marginRight(label));
				}
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			} else if(label != null) {
				label.set_left(this.get_paddingLeft());
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
			} else if(icon != null) {
				icon.set_left(this.get_component().get_componentWidth() / 2 - icon.get_componentWidth() / 2 | 0);
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			}
			break;
		case "far-right":
			if(label != null && icon != null) {
				var cx = label.get_componentWidth() + icon.get_componentWidth() + this.get_horizontalSpacing();
				var x = this.get_component().get_componentWidth() / 2 - cx / 2 | 0;
				if(this.get_iconPosition() == "far-right") {
					if(cx + this.get_paddingLeft() + this.get_paddingRight() < this.get_component().get_componentWidth()) {
						label.set_left(this.get_paddingLeft());
						x += this.get_horizontalSpacing() + label.get_componentWidth();
						icon.set_left(this.get_component().get_componentWidth() - icon.get_componentWidth() - this.get_paddingRight() + this.marginLeft(icon) - this.marginRight(icon));
					} else {
						label.set_left(this.get_paddingLeft());
						x += this.get_horizontalSpacing() + label.get_componentWidth();
						icon.set_left(x + this.marginLeft(icon) - this.marginRight(icon));
					}
				}
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			} else if(label != null) {
				label.set_left(this.get_paddingLeft());
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
			} else if(icon != null) {
				icon.set_left(this.get_component().get_componentWidth() / 2 - icon.get_componentWidth() / 2 | 0);
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			}
			break;
		case "left":case "right":
			if(label != null && icon != null) {
				var cx = label.get_componentWidth() + icon.get_componentWidth() + this.get_horizontalSpacing();
				var x = this.get_component().get_componentWidth() / 2 - cx / 2 | 0;
				if((js_Boot.__cast(this.get_component() , haxe_ui_components_Button)).get_textAlign() == "left") {
					x = this.get_paddingLeft();
				}
				if(this.get_iconPosition() == "right") {
					label.set_left(x + this.marginLeft(label) - this.marginRight(label));
					x += this.get_horizontalSpacing() + label.get_componentWidth();
					icon.set_left(x + this.marginLeft(icon) - this.marginRight(icon));
				} else {
					icon.set_left(x + this.marginLeft(icon) - this.marginRight(icon));
					x += this.get_horizontalSpacing() + icon.get_componentWidth();
					label.set_left(x + this.marginLeft(label) - this.marginRight(label));
				}
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			} else if(label != null) {
				label.set_left(this.getTextAlignPos(label,this.get_component().get_componentWidth()));
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
			} else if(icon != null) {
				icon.set_left(this.get_component().get_componentWidth() / 2 - icon.get_componentWidth() / 2 | 0);
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			}
			break;
		case "bottom":case "top":
			if(label != null && icon != null) {
				var cy = label.get_componentHeight() + icon.get_componentHeight() + this.get_verticalSpacing();
				var y = this.get_component().get_componentHeight() / 2 - cy / 2 | 0;
				if(this.get_iconPosition() == "bottom") {
					label.set_top(y + this.marginTop(label) - this.marginBottom(label));
					y += this.get_verticalSpacing() + label.get_componentHeight();
					icon.set_top(y + this.marginTop(icon) - this.marginBottom(icon));
				} else {
					icon.set_top(y + this.marginTop(icon) - this.marginBottom(icon));
					y += this.get_verticalSpacing() + icon.get_componentHeight();
					label.set_top(y + this.marginTop(label) - this.marginBottom(label));
				}
				label.set_left(this.getTextAlignPos(label,this.get_component().get_componentWidth()));
				icon.set_left((this.get_component().get_componentWidth() / 2 - icon.get_componentWidth() / 2 | 0) + this.marginLeft(icon) - this.marginRight(icon));
			} else if(label != null) {
				label.set_left((this.get_component().get_componentWidth() / 2 - label.get_componentWidth() / 2 | 0) + this.marginLeft(label) - this.marginRight(label));
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
			} else if(icon != null) {
				icon.set_left((this.get_component().get_componentWidth() / 2 - icon.get_componentWidth() / 2 | 0) + this.marginLeft(icon) - this.marginRight(icon));
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			}
			break;
		}
	}
	,getTextAlignPos: function(label,usableWidth) {
		switch((js_Boot.__cast(this.get_component() , haxe_ui_components_Button)).get_textAlign()) {
		case "left":
			return this.marginLeft(label) + this.get_paddingLeft();
		case "right":
			return usableWidth - label.get_componentWidth() - this.marginRight(label) - this.get_paddingRight();
		default:
			return (usableWidth / 2 - label.get_componentWidth() / 2 | 0) + this.marginLeft(label) - this.marginRight(label);
		}
	}
	,__class__: haxe_ui_components_ButtonLayout
	,__properties__: $extend(haxe_ui_layouts_DefaultLayout.prototype.__properties__,{get_iconPosition:"get_iconPosition"})
});
var haxe_ui_components__$Button_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Button.TextBehaviour"] = haxe_ui_components__$Button_TextBehaviour;
haxe_ui_components__$Button_TextBehaviour.__name__ = "haxe.ui.components._Button.TextBehaviour";
haxe_ui_components__$Button_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Button_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var label = this._component.findComponent(null,haxe_ui_components_Label,false);
		if(label == null) {
			label = new haxe_ui_components_Label();
			label.set_id("button-label");
			label.scriptAccess = false;
			this._component.addComponent(label);
			var _this = this._component;
			var force = true;
			if(force == null) {
				force = false;
			}
			_this.invalidateComponent("style");
			if(force == true) {
				_this._style = null;
			}
		}
		label.set_text(haxe_ui_util_Variant.toString(this._value));
	}
	,__class__: haxe_ui_components__$Button_TextBehaviour
});
var haxe_ui_components__$Button_IconBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Button.IconBehaviour"] = haxe_ui_components__$Button_IconBehaviour;
haxe_ui_components__$Button_IconBehaviour.__name__ = "haxe.ui.components._Button.IconBehaviour";
haxe_ui_components__$Button_IconBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Button_IconBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var icon = this._component.findComponent("button-icon",null,false);
		if(icon == null) {
			icon = new haxe_ui_components_Image();
			icon.addClass("icon");
			icon.set_id("button-icon");
			icon.scriptAccess = false;
			this._component.addComponentAt(icon,0);
			var _this = this._component;
			var force = true;
			if(force == null) {
				force = false;
			}
			_this.invalidateComponent("style");
			if(force == true) {
				_this._style = null;
			}
		}
		icon.set_resource(this._value);
	}
	,__class__: haxe_ui_components__$Button_IconBehaviour
});
var haxe_ui_components__$Button_ToggleBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Button.ToggleBehaviour"] = haxe_ui_components__$Button_ToggleBehaviour;
haxe_ui_components__$Button_ToggleBehaviour.__name__ = "haxe.ui.components._Button.ToggleBehaviour";
haxe_ui_components__$Button_ToggleBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Button_ToggleBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	_value: null
	,get: function() {
		return this._value;
	}
	,set: function(value) {
		if(haxe_ui_util_Variant.eq(this._value,value)) {
			return;
		}
		this._value = value;
		var button = js_Boot.__cast(this._component , haxe_ui_components_Button);
		if(haxe_ui_util_Variant.eq(value,haxe_ui_util_Variant.fromBool(false))) {
			button.set_selected(false);
		}
		button.registerInternalEvents(button._internalEventsClass,true);
	}
	,__class__: haxe_ui_components__$Button_ToggleBehaviour
});
var haxe_ui_components__$Button_SelectedBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Button.SelectedBehaviour"] = haxe_ui_components__$Button_SelectedBehaviour;
haxe_ui_components__$Button_SelectedBehaviour.__name__ = "haxe.ui.components._Button.SelectedBehaviour";
haxe_ui_components__$Button_SelectedBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Button_SelectedBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var button = js_Boot.__cast(this._component , haxe_ui_components_Button);
		if(button.get_toggle() == false) {
			return;
		}
		if(haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromBool(false))) {
			button.removeClass(":down",true,true);
		} else {
			button.addClass(":down",true,true);
		}
		var events = js_Boot.__cast(button._internalEvents , haxe_ui_components_ButtonEvents);
		if(events.lastMouseEvent != null && button.hitTest(events.lastMouseEvent.screenX,events.lastMouseEvent.screenY)) {
			button.addClass(":hover",true,true);
			events.lastMouseEvent = null;
		} else {
			button.removeClass(":hover",true,true);
		}
		events.dispatchChanged();
	}
	,__class__: haxe_ui_components__$Button_SelectedBehaviour
});
var haxe_ui_events_Events = function(target) {
	this._target = target;
};
$hxClasses["haxe.ui.events.Events"] = haxe_ui_events_Events;
haxe_ui_events_Events.__name__ = "haxe.ui.events.Events";
haxe_ui_events_Events.prototype = {
	_target: null
	,register: function() {
	}
	,unregister: function() {
	}
	,registerEvent: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(this.hasEvent(type,listener) == false) {
			this._target.registerEvent(type,listener,priority);
		}
	}
	,hasEvent: function(type,listener) {
		return this._target.hasEvent(type,listener);
	}
	,unregisterEvent: function(type,listener) {
		this._target.unregisterEvent(type,listener);
	}
	,dispatch: function(event) {
		this._target.dispatch(event);
	}
	,__class__: haxe_ui_events_Events
};
var haxe_ui_components_ButtonEvents = function(button) {
	this.lastMouseEvent = null;
	this._repeatInterval = 0;
	this._repeater = false;
	this._down = false;
	haxe_ui_events_Events.call(this,button);
	this._button = button;
};
$hxClasses["haxe.ui.components.ButtonEvents"] = haxe_ui_components_ButtonEvents;
haxe_ui_components_ButtonEvents.__name__ = "haxe.ui.components.ButtonEvents";
haxe_ui_components_ButtonEvents.__super__ = haxe_ui_events_Events;
haxe_ui_components_ButtonEvents.prototype = $extend(haxe_ui_events_Events.prototype,{
	_button: null
	,_down: null
	,_repeatTimer: null
	,_repeater: null
	,_repeatInterval: null
	,lastMouseEvent: null
	,register: function() {
		if(this.hasEvent("mouseover",$bind(this,this.onMouseOver)) == false) {
			this.registerEvent("mouseover",$bind(this,this.onMouseOver));
		}
		if(this.hasEvent("mouseout",$bind(this,this.onMouseOut)) == false) {
			this.registerEvent("mouseout",$bind(this,this.onMouseOut));
		}
		if(this.hasEvent("mousedown",$bind(this,this.onMouseDown)) == false) {
			this.registerEvent("mousedown",$bind(this,this.onMouseDown));
		}
		if(this._button.get_toggle() == true) {
			this.registerEvent("click",$bind(this,this.onMouseClick));
		}
	}
	,unregister: function() {
		this.unregisterEvent("mouseover",$bind(this,this.onMouseOver));
		this.unregisterEvent("mouseout",$bind(this,this.onMouseOut));
		this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
		this.unregisterEvent("click",$bind(this,this.onMouseClick));
	}
	,onMouseOver: function(event) {
		if(this._button.get_toggle() == true && this._button.hasClass(":down")) {
			return;
		}
		if(event.buttonDown == false || this._down == false) {
			this._button.addClass(":hover",true,true);
		} else {
			this._button.addClass(":down",true,true);
		}
	}
	,onMouseOut: function(event) {
		if(this._button.get_toggle() == true && this._button.get_selected() == true) {
			return;
		}
		if(this._button.get_remainPressed() == false) {
			this._button.removeClass(":down",true,true);
		}
		this._button.removeClass(":hover",true,true);
	}
	,onMouseDown: function(event) {
		var _gthis = this;
		if(haxe_ui_focus_FocusManager.get_instance().get_focusInfo() != null && haxe_ui_focus_FocusManager.get_instance().get_focusInfo().currentFocus != null) {
			haxe_ui_focus_FocusManager.get_instance().get_focusInfo().currentFocus.set_focus(false);
		}
		if(this._button.get_repeater() == true && this._repeatInterval == 0) {
			this._repeatInterval = this._button.get_easeInRepeater() ? this._button.get_repeatInterval() * 2 : this._button.get_repeatInterval();
		}
		this._down = true;
		this._button.addClass(":down",true,true);
		this._button.get_screen().registerEvent("mouseup",$bind(this,this.onMouseUp));
		if(this._repeater == true && this._repeatInterval == this._button.get_repeatInterval()) {
			this._repeatTimer = new haxe_ui_util_Timer(this._repeatInterval,$bind(this,this.onRepeatTimer));
		} else if(this._button.get_repeater() == true) {
			if(this._repeatTimer != null) {
				this._repeatTimer.stop();
				this._repeatTimer = null;
			}
			haxe_ui_util_Timer.delay(function() {
				if(_gthis._repeater == true && _gthis._repeatTimer == null) {
					if(_gthis._button.get_easeInRepeater() == true && _gthis._repeatInterval > _gthis._button.get_repeatInterval()) {
						var tmp = _gthis._repeatInterval - (_gthis._repeatInterval - _gthis._button.get_repeatInterval()) / 2 | 0;
						_gthis._repeatInterval = tmp;
						_gthis.onRepeatTimer();
					}
					_gthis.onMouseDown(event);
				}
			},this._repeatInterval);
		}
		this._repeater = this._button.get_repeater();
	}
	,onMouseUp: function(event) {
		var _gthis = this;
		this._down = this._repeater = false;
		this._repeatInterval = this._button.get_easeInRepeater() ? this._button.get_repeatInterval() * 2 : this._button.get_repeatInterval();
		this._button.get_screen().unregisterEvent("mouseup",$bind(this,this.onMouseUp));
		if(this._button.get_toggle() == true) {
			return;
		}
		this._button.removeClass(":down",true,true);
		haxe_ui_Toolkit.callLater(function() {
			var over = _gthis._button.hitTest(event.screenX,event.screenY);
			if(event.touchEvent == false && over == true) {
				_gthis._button.addClass(":hover",true,true);
			} else if(over == false) {
				_gthis._button.removeClass(":hover",true,true);
			}
		});
		if(this._repeatTimer != null) {
			this._repeatTimer.stop();
			this._repeatTimer = null;
		}
	}
	,onRepeatTimer: function() {
		if(this._button.hasClass(":hover") && this._down == true) {
			var event = new haxe_ui_events_MouseEvent("click");
			this._button.dispatch(event);
		}
	}
	,onMouseClick: function(event) {
		this._button.set_selected(!this._button.get_selected());
		if(this._button.get_selected() == false) {
			this._button.removeClass(":down",true,true);
		}
		if(this._button.hitTest(event.screenX,event.screenY)) {
			this._button.addClass(":hover",true,true);
		}
	}
	,dispatchChanged: function() {
		this._button.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,__class__: haxe_ui_components_ButtonEvents
});
var haxe_ui_components_ButtonBuilder = function(button) {
	haxe_ui_core_CompositeBuilder.call(this,button);
	this._button = button;
};
$hxClasses["haxe.ui.components.ButtonBuilder"] = haxe_ui_components_ButtonBuilder;
haxe_ui_components_ButtonBuilder.__name__ = "haxe.ui.components.ButtonBuilder";
haxe_ui_components_ButtonBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components_ButtonBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_button: null
	,applyStyle: function(style) {
		var label = this._button.findComponent(null,haxe_ui_components_Label);
		if(label != null && (label.customStyle.color != style.color || label.customStyle.fontName != style.fontName || label.customStyle.fontSize != style.fontSize || label.customStyle.cursor != style.cursor || label.customStyle.textAlign != style.textAlign)) {
			label.customStyle.color = style.color;
			label.customStyle.fontName = style.fontName;
			label.customStyle.fontSize = style.fontSize;
			label.customStyle.cursor = style.cursor;
			label.customStyle.textAlign = style.textAlign;
			label.invalidateComponent("style");
		}
		var icon = this._button.findComponent("button-icon",null,false);
		if(icon != null && icon.customStyle.cursor != style.cursor) {
			icon.customStyle.cursor = style.cursor;
			icon.invalidateComponent("style");
		}
	}
	,__class__: haxe_ui_components_ButtonBuilder
});
var haxe_ui_components_CalendarEvent = function(type,bubble,data) {
	haxe_ui_events_UIEvent.call(this,type,bubble,data);
};
$hxClasses["haxe.ui.components.CalendarEvent"] = haxe_ui_components_CalendarEvent;
haxe_ui_components_CalendarEvent.__name__ = "haxe.ui.components.CalendarEvent";
haxe_ui_components_CalendarEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_components_CalendarEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	__class__: haxe_ui_components_CalendarEvent
});
var haxe_ui_containers_Grid = function() {
	this._columns = -1;
	haxe_ui_containers_Box.call(this);
	if(this._columns == -1) {
		this.set_columns(2);
	}
};
$hxClasses["haxe.ui.containers.Grid"] = haxe_ui_containers_Grid;
haxe_ui_containers_Grid.__name__ = "haxe.ui.containers.Grid";
haxe_ui_containers_Grid.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_Grid.prototype = $extend(haxe_ui_containers_Box.prototype,{
	_columns: null
	,get_columns: function() {
		return (js_Boot.__cast(this._layout , haxe_ui_layouts_VerticalGridLayout)).get_columns();
	}
	,set_columns: function(value) {
		if(this._layout == null) {
			this.set_layout(this.createLayout());
		}
		(js_Boot.__cast(this._layout , haxe_ui_layouts_VerticalGridLayout)).set_columns(value);
		this._columns = value;
		return value;
	}
	,createDefaults: function() {
		haxe_ui_containers_Box.prototype.createDefaults.call(this);
		this._defaultLayoutClass = haxe_ui_layouts_VerticalGridLayout;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		c.set_columns(this.get_columns());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_Grid();
	}
	,__class__: haxe_ui_containers_Grid
	,__properties__: $extend(haxe_ui_containers_Box.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns"})
});
var haxe_ui_components_Calendar = function() {
	haxe_ui_containers_Grid.call(this);
};
$hxClasses["haxe.ui.components.Calendar"] = haxe_ui_components_Calendar;
haxe_ui_components_Calendar.__name__ = "haxe.ui.components.Calendar";
haxe_ui_components_Calendar.__super__ = haxe_ui_containers_Grid;
haxe_ui_components_Calendar.prototype = $extend(haxe_ui_containers_Grid.prototype,{
	previousMonth: function() {
		this.behaviours.call("previousMonth",null);
	}
	,nextMonth: function() {
		this.behaviours.call("nextMonth",null);
	}
	,previousYear: function() {
		this.behaviours.call("previousYear",null);
	}
	,nextYear: function() {
		this.behaviours.call("nextYear",null);
	}
	,createDefaults: function() {
		haxe_ui_containers_Grid.prototype.createDefaults.call(this);
		this._defaultLayoutClass = haxe_ui_components__$Calendar_Layout;
	}
	,registerComposite: function() {
		haxe_ui_containers_Grid.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components__$Calendar_Events;
		this._compositeBuilderClass = haxe_ui_components__$Calendar_Builder;
		this._defaultLayoutClass = haxe_ui_components__$Calendar_Layout;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Grid.prototype.registerBehaviours.call(this);
		this.behaviours.register("date",haxe_ui_components__$Calendar_DateBehaviour);
		this.behaviours.register("selectedDate",haxe_ui_components__$Calendar_SelectedDateBehaviour);
		this.behaviours.register("previousMonth",haxe_ui_components__$Calendar_PreviousMonthBehaviour);
		this.behaviours.register("nextMonth",haxe_ui_components__$Calendar_NextMonthBehaviour);
		this.behaviours.register("previousYear",haxe_ui_components__$Calendar_PreviousYearBehaviour);
		this.behaviours.register("nextYear",haxe_ui_components__$Calendar_NextYearBehaviour);
	}
	,get_date: function() {
		return haxe_ui_util_Variant.toDate(this.behaviours.get("date"));
	}
	,set_date: function(value) {
		this.behaviours.set("date",haxe_ui_util_Variant.fromDate(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"date");
		return value;
	}
	,get_selectedDate: function() {
		return haxe_ui_util_Variant.toDate(this.behaviours.get("selectedDate"));
	}
	,set_selectedDate: function(value) {
		this.behaviours.set("selectedDate",haxe_ui_util_Variant.fromDate(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedDate");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Grid.prototype.cloneComponent.call(this);
		if(this.get_date() != null) {
			c.set_date(this.get_date());
		}
		if(this.get_selectedDate() != null) {
			c.set_selectedDate(this.get_selectedDate());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Calendar();
	}
	,__class__: haxe_ui_components_Calendar
	,__properties__: $extend(haxe_ui_containers_Grid.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate",set_date:"set_date",get_date:"get_date"})
});
var haxe_ui_components__$Calendar_PreviousMonthBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.PreviousMonthBehaviour"] = haxe_ui_components__$Calendar_PreviousMonthBehaviour;
haxe_ui_components__$Calendar_PreviousMonthBehaviour.__name__ = "haxe.ui.components._Calendar.PreviousMonthBehaviour";
haxe_ui_components__$Calendar_PreviousMonthBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Calendar_PreviousMonthBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var calendar = js_Boot.__cast(this._component , haxe_ui_components_Calendar);
		calendar.set_date(haxe_ui_components__$Calendar_DateUtils.previousMonth(calendar.get_date()));
		return null;
	}
	,__class__: haxe_ui_components__$Calendar_PreviousMonthBehaviour
});
var haxe_ui_components__$Calendar_NextMonthBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.NextMonthBehaviour"] = haxe_ui_components__$Calendar_NextMonthBehaviour;
haxe_ui_components__$Calendar_NextMonthBehaviour.__name__ = "haxe.ui.components._Calendar.NextMonthBehaviour";
haxe_ui_components__$Calendar_NextMonthBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Calendar_NextMonthBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var calendar = js_Boot.__cast(this._component , haxe_ui_components_Calendar);
		calendar.set_date(haxe_ui_components__$Calendar_DateUtils.nextMonth(calendar.get_date()));
		return null;
	}
	,__class__: haxe_ui_components__$Calendar_NextMonthBehaviour
});
var haxe_ui_components__$Calendar_PreviousYearBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.PreviousYearBehaviour"] = haxe_ui_components__$Calendar_PreviousYearBehaviour;
haxe_ui_components__$Calendar_PreviousYearBehaviour.__name__ = "haxe.ui.components._Calendar.PreviousYearBehaviour";
haxe_ui_components__$Calendar_PreviousYearBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Calendar_PreviousYearBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var calendar = js_Boot.__cast(this._component , haxe_ui_components_Calendar);
		calendar.set_date(haxe_ui_components__$Calendar_DateUtils.previousYear(calendar.get_date()));
		return null;
	}
	,__class__: haxe_ui_components__$Calendar_PreviousYearBehaviour
});
var haxe_ui_components__$Calendar_NextYearBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.NextYearBehaviour"] = haxe_ui_components__$Calendar_NextYearBehaviour;
haxe_ui_components__$Calendar_NextYearBehaviour.__name__ = "haxe.ui.components._Calendar.NextYearBehaviour";
haxe_ui_components__$Calendar_NextYearBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Calendar_NextYearBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var calendar = js_Boot.__cast(this._component , haxe_ui_components_Calendar);
		calendar.set_date(haxe_ui_components__$Calendar_DateUtils.nextYear(calendar.get_date()));
		return null;
	}
	,__class__: haxe_ui_components__$Calendar_NextYearBehaviour
});
var haxe_ui_components__$Calendar_SelectedDateBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.SelectedDateBehaviour"] = haxe_ui_components__$Calendar_SelectedDateBehaviour;
haxe_ui_components__$Calendar_SelectedDateBehaviour.__name__ = "haxe.ui.components._Calendar.SelectedDateBehaviour";
haxe_ui_components__$Calendar_SelectedDateBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$Calendar_SelectedDateBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	set: function(value) {
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
		var date = haxe_ui_util_Variant.toDate(value);
		this._component.invalidateComponent("data");
		var calendar = js_Boot.__cast(this._component , haxe_ui_components_Calendar);
		calendar.set_date(date);
		this._component.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,__class__: haxe_ui_components__$Calendar_SelectedDateBehaviour
});
var haxe_ui_components__$Calendar_DateBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.DateBehaviour"] = haxe_ui_components__$Calendar_DateBehaviour;
haxe_ui_components__$Calendar_DateBehaviour.__name__ = "haxe.ui.components._Calendar.DateBehaviour";
haxe_ui_components__$Calendar_DateBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Calendar_DateBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var date = haxe_ui_util_Variant.toDate(this._value);
		if(date == null) {
			return;
		}
		var year = date.getFullYear();
		var month = date.getMonth();
		var day = date.getDate();
		var startDay = new Date(year,month,1,0,0,0).getDay();
		var endDay = haxe_ui_components__$Calendar_DateUtils.getEndDay(month,year);
		var _g = 0;
		var _this = this._component;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.set_opacity(.3);
			child.removeClass("calendar-off-day");
			child.removeClass("calendar-day");
			child.removeClass("calendar-day-selected");
			child.removeClass(":hover");
		}
		var prevMonth = haxe_ui_components__$Calendar_DateUtils.previousMonth(date);
		var last = haxe_ui_components__$Calendar_DateUtils.getEndDay(prevMonth.getMonth(),prevMonth.getFullYear());
		var n = startDay - 1;
		var _g = 0;
		var _g1 = startDay;
		while(_g < _g1) {
			var i = _g++;
			var _this = this._component;
			var item = (_this._children == null ? [] : _this._children)[n];
			item.addClass("calendar-off-day");
			--n;
			item.set_text("" + last);
			--last;
		}
		var selectedDate = (js_Boot.__cast(this._component , haxe_ui_components_Calendar)).get_selectedDate();
		if(selectedDate == null) {
			selectedDate = new Date();
		}
		var _g = 0;
		var _g1 = endDay;
		while(_g < _g1) {
			var i = _g++;
			var _this = this._component;
			var item = (_this._children == null ? [] : _this._children)[i + startDay];
			item.addClass("calendar-day");
			item.set_opacity(1);
			item.set_hidden(false);
			item.set_text("" + (i + 1));
			if(i + 1 == selectedDate.getDate() && month == selectedDate.getMonth() && year == selectedDate.getFullYear()) {
				item.addClass("calendar-day-selected");
			}
			last = i + startDay;
		}
		++last;
		var n = 0;
		var _g = last;
		var _this = this._component;
		var _g1 = (_this._children == null ? [] : _this._children).length;
		while(_g < _g1) {
			var i = _g++;
			var _this = this._component;
			var item = (_this._children == null ? [] : _this._children)[i];
			item.addClass("calendar-off-day");
			item.set_text("" + (n + 1));
			++n;
		}
		this._component.registerInternalEvents(null,true);
		this._component.dispatch(new haxe_ui_components_CalendarEvent("datechange"));
	}
	,__class__: haxe_ui_components__$Calendar_DateBehaviour
});
var haxe_ui_components__$Calendar_DateUtils = function() { };
$hxClasses["haxe.ui.components._Calendar.DateUtils"] = haxe_ui_components__$Calendar_DateUtils;
haxe_ui_components__$Calendar_DateUtils.__name__ = "haxe.ui.components._Calendar.DateUtils";
haxe_ui_components__$Calendar_DateUtils.getEndDay = function(month,year) {
	var endDay = -1;
	switch(month) {
	case 1:
		if(year % 400 == 0 || year % 100 != 0 && year % 4 == 0) {
			endDay = 29;
		} else {
			endDay = 28;
		}
		break;
	case 3:case 5:case 8:case 10:
		endDay = 30;
		break;
	default:
		endDay = 31;
	}
	return endDay;
};
haxe_ui_components__$Calendar_DateUtils.previousMonth = function(date) {
	var year = date.getFullYear();
	var month = date.getMonth();
	var day = date.getDate();
	--month;
	if(month < 0) {
		month = 11;
		--year;
	}
	day = js_Boot.__cast(Math.min(day,haxe_ui_components__$Calendar_DateUtils.getEndDay(month,year)) , Int);
	date = new Date(year,month,day,0,0,0);
	return date;
};
haxe_ui_components__$Calendar_DateUtils.nextMonth = function(date) {
	var year = date.getFullYear();
	var month = date.getMonth();
	var day = date.getDate();
	++month;
	if(month > 11) {
		month = 0;
		++year;
	}
	day = js_Boot.__cast(Math.min(day,haxe_ui_components__$Calendar_DateUtils.getEndDay(month,year)) , Int);
	date = new Date(year,month,day,0,0,0);
	return date;
};
haxe_ui_components__$Calendar_DateUtils.previousYear = function(date) {
	var year = date.getFullYear();
	var month = date.getMonth();
	var day = date.getDate();
	--year;
	day = js_Boot.__cast(Math.min(day,haxe_ui_components__$Calendar_DateUtils.getEndDay(month,year)) , Int);
	date = new Date(year,month,day,0,0,0);
	return date;
};
haxe_ui_components__$Calendar_DateUtils.nextYear = function(date) {
	var year = date.getFullYear();
	var month = date.getMonth();
	var day = date.getDate();
	++year;
	day = js_Boot.__cast(Math.min(day,haxe_ui_components__$Calendar_DateUtils.getEndDay(month,year)) , Int);
	date = new Date(year,month,day,0,0,0);
	return date;
};
var haxe_ui_components__$Calendar_Events = function(target) {
	haxe_ui_events_Events.call(this,target);
};
$hxClasses["haxe.ui.components._Calendar.Events"] = haxe_ui_components__$Calendar_Events;
haxe_ui_components__$Calendar_Events.__name__ = "haxe.ui.components._Calendar.Events";
haxe_ui_components__$Calendar_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$Calendar_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	register: function() {
		this.unregister();
		var _g = 0;
		var _this = this._target;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.hasEvent("click",$bind(this,this.onDayClicked)) == false && child.hasClass("calendar-day")) {
				child.registerEvent("click",$bind(this,this.onDayClicked));
			}
		}
	}
	,unregister: function() {
		var _g = 0;
		var _this = this._target;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.unregisterEvent("click",$bind(this,this.onDayClicked));
		}
	}
	,onDayClicked: function(event) {
		var calendar = js_Boot.__cast(this._target , haxe_ui_components_Calendar);
		var day = Std.parseInt(event.target.get_text());
		var month = calendar.get_date().getMonth();
		var year = calendar.get_date().getFullYear();
		calendar.set_selectedDate(new Date(year,month,day,0,0,0));
	}
	,__class__: haxe_ui_components__$Calendar_Events
});
var haxe_ui_components__$Calendar_Builder = function(calendar) {
	haxe_ui_core_CompositeBuilder.call(this,calendar);
	this._calendar = calendar;
};
$hxClasses["haxe.ui.components._Calendar.Builder"] = haxe_ui_components__$Calendar_Builder;
haxe_ui_components__$Calendar_Builder.__name__ = "haxe.ui.components._Calendar.Builder";
haxe_ui_components__$Calendar_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$Calendar_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_calendar: null
	,create: function() {
		this._calendar.set_columns(7);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.scriptAccess = false;
		this._calendar.addComponent(item);
		this._calendar.set_date(new Date());
	}
	,__class__: haxe_ui_components__$Calendar_Builder
});
var haxe_ui_layouts_VerticalGridLayout = function() {
	this._columns = 1;
	haxe_ui_layouts_Layout.call(this);
};
$hxClasses["haxe.ui.layouts.VerticalGridLayout"] = haxe_ui_layouts_VerticalGridLayout;
haxe_ui_layouts_VerticalGridLayout.__name__ = "haxe.ui.layouts.VerticalGridLayout";
haxe_ui_layouts_VerticalGridLayout.__super__ = haxe_ui_layouts_Layout;
haxe_ui_layouts_VerticalGridLayout.prototype = $extend(haxe_ui_layouts_Layout.prototype,{
	_columns: null
	,get_columns: function() {
		return this._columns;
	}
	,set_columns: function(value) {
		if(this._columns == value) {
			return value;
		}
		this._columns = value;
		if(this._component != null) {
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_Layout.prototype.get_usableSize.call(this);
		var columnWidths = this.calcColumnWidths(size,false);
		var rowHeights = this.calcRowHeights(size,false);
		var _g = 0;
		while(_g < columnWidths.length) {
			var columnWidth = columnWidths[_g];
			++_g;
			size.width -= columnWidth;
		}
		var _g = 0;
		while(_g < rowHeights.length) {
			var rowHeight = rowHeights[_g];
			++_g;
			size.height -= rowHeight;
		}
		var _this = this.get_component();
		if((_this._children == null ? [] : _this._children).length > 1) {
			var _this = this.get_component();
			var rows = Math.ceil((_this._children == null ? [] : _this._children).length / this.get_columns());
			var c = this.get_columns();
			var _this = this.get_component();
			var c1 = Math.min(c,(_this._children == null ? [] : _this._children).length);
			size.width -= this.get_horizontalSpacing() * (c1 - 1);
			size.height -= this.get_verticalSpacing() * (rows - 1);
		}
		if(size.width < 0) {
			size.width = 0;
		}
		if(size.height < 0) {
			size.height = 0;
		}
		return size;
	}
	,resizeChildren: function() {
		var size = this.get_usableSize();
		var columnWidths = this.calcColumnWidths(size,true);
		var rowHeights = this.calcRowHeights(size,true);
		var explicitWidths = this.calcExplicitWidths();
		var explicitHeights = this.calcExplicitHeights();
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var cx = null;
			var cy = null;
			if(child.get_percentWidth() != null) {
				var ucx = columnWidths[columnIndex];
				if(explicitWidths[columnIndex] == false) {
					cx = ucx;
				} else {
					cx = ucx * child.get_percentWidth() / 100;
				}
			}
			if(child.get_percentHeight() != null) {
				var ucy = rowHeights[rowIndex];
				if(explicitHeights[rowIndex] == false) {
					cy = ucy;
				} else {
					cy = ucy * child.get_percentHeight() / 100;
				}
			}
			child.resizeComponent(cx,cy);
			++columnIndex;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				++rowIndex;
			}
		}
	}
	,repositionChildren: function() {
		var size = this.get_usableSize();
		var columnWidths = this.calcColumnWidths(size,true);
		var rowHeights = this.calcRowHeights(size,true);
		var rowIndex = 0;
		var columnIndex = 0;
		var xpos = this.get_paddingLeft();
		var ypos = this.get_paddingTop();
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var halign = this.horizontalAlign(child);
			var valign = this.verticalAlign(child);
			var xposChild = 0;
			var yposChild = 0;
			switch(halign) {
			case "center":
				xposChild = xpos + (columnWidths[columnIndex] - child.get_componentWidth()) * 0.5 + this.marginLeft(child) - this.marginRight(child);
				break;
			case "right":
				xposChild = xpos + (columnWidths[columnIndex] - child.get_componentWidth()) + this.marginLeft(child) - this.marginRight(child);
				break;
			default:
				xposChild = xpos + this.marginLeft(child) - this.marginRight(child);
			}
			switch(valign) {
			case "bottom":
				yposChild = ypos + (rowHeights[rowIndex] - child.get_componentHeight()) + this.marginTop(child) - this.marginBottom(child);
				break;
			case "center":
				yposChild = ypos + (rowHeights[rowIndex] - child.get_componentHeight()) * 0.5 + this.marginTop(child) - this.marginBottom(child);
				break;
			default:
				yposChild = ypos + this.marginTop(child) - this.marginBottom(child);
			}
			child.moveComponent(xposChild,yposChild);
			xpos += columnWidths[columnIndex] + this.get_horizontalSpacing();
			++columnIndex;
			if(columnIndex >= this.get_columns()) {
				xpos = this.get_paddingLeft();
				ypos += rowHeights[rowIndex] + this.get_verticalSpacing();
				columnIndex = 0;
				++rowIndex;
			}
		}
	}
	,calcColumnWidths: function(usableSize,includePercentage) {
		var columnWidths = [];
		var _g = 0;
		var _g1 = this._columns;
		while(_g < _g1) {
			var _ = _g++;
			columnWidths.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentWidth() == null) {
				if(child.get_componentWidth() > columnWidths[columnIndex]) {
					columnWidths[columnIndex] = child.get_componentWidth();
				}
			}
			++columnIndex;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				++rowIndex;
			}
		}
		if(includePercentage) {
			rowIndex = 0;
			columnIndex = 0;
			var fullWidthsCounts = [0];
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentWidth() != null && child.get_percentWidth() == 100) {
					fullWidthsCounts[rowIndex]++;
				}
				++columnIndex;
				if(columnIndex >= this._columns) {
					columnIndex = 0;
					++rowIndex;
					fullWidthsCounts.push(0);
				}
			}
			rowIndex = 0;
			columnIndex = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentWidth() != null) {
					var childPercentWidth = child.get_percentWidth();
					if(childPercentWidth == 100 && fullWidthsCounts[rowIndex] != 0) {
						var f = fullWidthsCounts[rowIndex];
						if(rowIndex > 0 && fullWidthsCounts[rowIndex - 1] != 0) {
							f = fullWidthsCounts[rowIndex - 1];
						}
						childPercentWidth = 100 / f;
					}
					var cx = usableSize.width * childPercentWidth / 100;
					if(cx > columnWidths[columnIndex]) {
						columnWidths[columnIndex] = cx;
					}
				}
				++columnIndex;
				if(columnIndex >= this._columns) {
					columnIndex = 0;
					++rowIndex;
				}
			}
		}
		return columnWidths;
	}
	,calcRowHeights: function(usableSize,includePercentage) {
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
			}
		}
		var rowCount = visibleChildren / this._columns | 0;
		if(visibleChildren % this._columns != 0) {
			++rowCount;
		}
		var rowHeights = [];
		var _g = 0;
		var _g1 = rowCount;
		while(_g < _g1) {
			var _ = _g++;
			rowHeights.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentHeight() == null) {
				if(child.get_height() > rowHeights[rowIndex]) {
					rowHeights[rowIndex] = child.get_height();
				}
			}
			++columnIndex;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				++rowIndex;
			}
		}
		if(includePercentage) {
			rowIndex = 0;
			columnIndex = 0;
			var newRow = true;
			var fullHeightRowCount = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentHeight() != null && child.get_percentHeight() == 100) {
					if(newRow == true) {
						newRow = false;
						++fullHeightRowCount;
					}
				}
				++columnIndex;
				if(columnIndex >= this._columns) {
					columnIndex = 0;
					++rowIndex;
					newRow = true;
				}
			}
			rowIndex = 0;
			columnIndex = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentHeight() != null) {
					var childPercentHeight = child.get_percentHeight();
					if(childPercentHeight == 100 && fullHeightRowCount > 1) {
						childPercentHeight = 100 / fullHeightRowCount;
					}
					var cy = usableSize.height * childPercentHeight / 100;
					if(cy > rowHeights[rowIndex]) {
						rowHeights[rowIndex] = cy;
					} else {
						var tmp = usableSize.height > rowHeights[rowIndex];
					}
				}
				++columnIndex;
				if(columnIndex >= this._columns) {
					columnIndex = 0;
					++rowIndex;
				}
			}
		}
		return rowHeights;
	}
	,calcExplicitWidths: function() {
		var explicitWidths = [];
		var _g = 0;
		var _g1 = this._columns;
		while(_g < _g1) {
			var _ = _g++;
			explicitWidths.push(false);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentWidth() == null && child.get_componentWidth() > 0) {
				explicitWidths[columnIndex] = true;
			}
			++columnIndex;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				++rowIndex;
			}
		}
		return explicitWidths;
	}
	,calcExplicitHeights: function() {
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
			}
		}
		var rowCount = visibleChildren / this.get_columns() | 0;
		if(visibleChildren % this._columns != 0) {
			++rowCount;
		}
		var explicitHeights = [];
		var _g = 0;
		var _g1 = rowCount;
		while(_g < _g1) {
			var _ = _g++;
			explicitHeights.push(false);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentHeight() == null && child.get_componentHeight() > 0) {
				explicitHeights[columnIndex % this._columns] = true;
			}
			++columnIndex;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				++rowIndex;
			}
		}
		return explicitHeights;
	}
	,__class__: haxe_ui_layouts_VerticalGridLayout
	,__properties__: $extend(haxe_ui_layouts_Layout.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns"})
});
var haxe_ui_components__$Calendar_Layout = function() {
	haxe_ui_layouts_VerticalGridLayout.call(this);
};
$hxClasses["haxe.ui.components._Calendar.Layout"] = haxe_ui_components__$Calendar_Layout;
haxe_ui_components__$Calendar_Layout.__name__ = "haxe.ui.components._Calendar.Layout";
haxe_ui_components__$Calendar_Layout.__super__ = haxe_ui_layouts_VerticalGridLayout;
haxe_ui_components__$Calendar_Layout.prototype = $extend(haxe_ui_layouts_VerticalGridLayout.prototype,{
	resizeChildren: function() {
		var max = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_layout() == null) {
				continue;
			}
			if(child.get_width() > child.get_layout().get_paddingLeft() + child.get_layout().get_paddingRight() && child.get_width() > max) {
				max = child.get_width();
			}
			if(child.get_width() > child.get_layout().get_paddingTop() + child.get_layout().get_paddingBottom() && child.get_height() > max) {
				max = child.get_height();
			}
		}
		if(max > 0) {
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.set_width(max);
				child.set_height(max);
			}
		}
	}
	,__class__: haxe_ui_components__$Calendar_Layout
});
var haxe_ui_components_CheckBox = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.CheckBox"] = haxe_ui_components_CheckBox;
haxe_ui_components_CheckBox.__name__ = "haxe.ui.components.CheckBox";
haxe_ui_components_CheckBox.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_CheckBox.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("text",haxe_ui_components__$CheckBox_TextBehaviour);
		this.behaviours.register("selected",haxe_ui_components__$CheckBox_SelectedBehaviour);
	}
	,get_selected: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("selected"));
	}
	,set_selected: function(value) {
		this.behaviours.set("selected",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"value");
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selected");
		return value;
	}
	,get_value: function() {
		return this.get_selected();
	}
	,set_value: function(value) {
		this.set_selected(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selected");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		c.set_selected(this.get_selected());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_CheckBox();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components__$CheckBox_Events;
		this._compositeBuilderClass = haxe_ui_components_CheckBoxBuilder;
		this._defaultLayoutClass = haxe_ui_components__$CheckBox_CheckBoxLayout;
	}
	,__class__: haxe_ui_components_CheckBox
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_selected:"set_selected",get_selected:"get_selected"})
});
var haxe_ui_components_CheckBoxValue = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.CheckBoxValue"] = haxe_ui_components_CheckBoxValue;
haxe_ui_components_CheckBoxValue.__name__ = "haxe.ui.components.CheckBoxValue";
haxe_ui_components_CheckBoxValue.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_CheckBoxValue.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	onReady: function() {
		this.createIcon();
	}
	,applyStyle: function(style) {
		haxe_ui_core_InteractiveComponent.prototype.applyStyle.call(this,style);
		var icon = this.findComponent(null,haxe_ui_components_Image);
		if(icon != null) {
			icon.set_resource(haxe_ui_util_Variant.fromString(style.icon));
		}
	}
	,createIcon: function() {
		var icon = this.findComponent(null,haxe_ui_components_Image);
		if(icon == null && this.parentComponent != null) {
			icon = new haxe_ui_components_Image();
			icon.set_id("" + this.parentComponent.get_cssName() + "-icon");
			icon.addClass("" + this.parentComponent.get_cssName() + "-icon");
			if(this.get_style() != null && this.get_style().icon != null) {
				icon.set_resource(haxe_ui_util_Variant.fromString(this.get_style().icon));
			}
			this.addComponent(icon);
		}
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_CheckBoxValue();
	}
	,__class__: haxe_ui_components_CheckBoxValue
});
var haxe_ui_components__$CheckBox_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._CheckBox.TextBehaviour"] = haxe_ui_components__$CheckBox_TextBehaviour;
haxe_ui_components__$CheckBox_TextBehaviour.__name__ = "haxe.ui.components._CheckBox.TextBehaviour";
haxe_ui_components__$CheckBox_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$CheckBox_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var label = this._component.findComponent(null,haxe_ui_components_Label,false);
		if(label == null) {
			label = new haxe_ui_components_Label();
			label.set_id("" + this._component.get_cssName() + "-label");
			label.addClass("" + this._component.get_cssName() + "-label");
			label.scriptAccess = false;
			this._component.addComponent(label);
			var _this = this._component;
			var force = true;
			if(force == null) {
				force = false;
			}
			_this.invalidateComponent("style");
			if(force == true) {
				_this._style = null;
			}
		}
		label.set_text(haxe_ui_util_Variant.toString(this._value));
	}
	,__class__: haxe_ui_components__$CheckBox_TextBehaviour
});
var haxe_ui_components__$CheckBox_SelectedBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._CheckBox.SelectedBehaviour"] = haxe_ui_components__$CheckBox_SelectedBehaviour;
haxe_ui_components__$CheckBox_SelectedBehaviour.__name__ = "haxe.ui.components._CheckBox.SelectedBehaviour";
haxe_ui_components__$CheckBox_SelectedBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$CheckBox_SelectedBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var valueComponent = this._component.findComponent(null,haxe_ui_components_CheckBoxValue);
		if(valueComponent == null) {
			return;
		}
		valueComponent.createIcon();
		if(haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromBool(true))) {
			valueComponent.addClass(":selected");
		} else {
			valueComponent.removeClass(":selected");
		}
		this._component.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,__class__: haxe_ui_components__$CheckBox_SelectedBehaviour
});
var haxe_ui_components__$CheckBox_Events = function(checkbox) {
	haxe_ui_events_Events.call(this,checkbox);
	this._checkbox = checkbox;
};
$hxClasses["haxe.ui.components._CheckBox.Events"] = haxe_ui_components__$CheckBox_Events;
haxe_ui_components__$CheckBox_Events.__name__ = "haxe.ui.components._CheckBox.Events";
haxe_ui_components__$CheckBox_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$CheckBox_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_checkbox: null
	,register: function() {
		if(this.hasEvent("mouseover",$bind(this,this.onMouseOver)) == false) {
			this.registerEvent("mouseover",$bind(this,this.onMouseOver));
		}
		if(this.hasEvent("mouseout",$bind(this,this.onMouseOut)) == false) {
			this.registerEvent("mouseout",$bind(this,this.onMouseOut));
		}
		if(this.hasEvent("click",$bind(this,this.onClick)) == false) {
			this.registerEvent("click",$bind(this,this.onClick));
		}
	}
	,unregister: function() {
		this.unregisterEvent("mouseover",$bind(this,this.onMouseOver));
		this.unregisterEvent("mouseout",$bind(this,this.onMouseOut));
		this.unregisterEvent("click",$bind(this,this.onClick));
	}
	,onMouseOver: function(event) {
		this._target.addClass(":hover");
		this._target.findComponent(null,haxe_ui_components_CheckBoxValue).addClass(":hover");
	}
	,onMouseOut: function(event) {
		this._target.removeClass(":hover");
		this._target.findComponent(null,haxe_ui_components_CheckBoxValue).removeClass(":hover");
	}
	,onClick: function(event) {
		this._checkbox.set_selected(!this._checkbox.get_selected());
	}
	,__class__: haxe_ui_components__$CheckBox_Events
});
var haxe_ui_components_CheckBoxBuilder = function(checkbox) {
	haxe_ui_core_CompositeBuilder.call(this,checkbox);
	this._checkbox = checkbox;
};
$hxClasses["haxe.ui.components.CheckBoxBuilder"] = haxe_ui_components_CheckBoxBuilder;
haxe_ui_components_CheckBoxBuilder.__name__ = "haxe.ui.components.CheckBoxBuilder";
haxe_ui_components_CheckBoxBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components_CheckBoxBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_checkbox: null
	,create: function() {
		if(this._checkbox.findComponent(null,haxe_ui_components_CheckBoxValue) == null) {
			var value = new haxe_ui_components_CheckBoxValue();
			value.set_id("" + this._checkbox.get_cssName() + "-value");
			value.addClass("" + this._checkbox.get_cssName() + "-value");
			value.scriptAccess = false;
			this._checkbox.addComponent(value);
		}
	}
	,applyStyle: function(style) {
		var label = this._checkbox.findComponent(null,haxe_ui_components_Label);
		if(label != null && (label.customStyle.color != style.color || label.customStyle.fontName != style.fontName || label.customStyle.fontSize != style.fontSize || label.customStyle.cursor != style.cursor)) {
			label.customStyle.color = style.color;
			label.customStyle.fontName = style.fontName;
			label.customStyle.fontSize = style.fontSize;
			label.customStyle.cursor = style.cursor;
			label.invalidateComponent("style");
		}
	}
	,get_cssName: function() {
		return "checkbox";
	}
	,__class__: haxe_ui_components_CheckBoxBuilder
});
var haxe_ui_layouts_HorizontalLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
	this._calcFullWidths = true;
};
$hxClasses["haxe.ui.layouts.HorizontalLayout"] = haxe_ui_layouts_HorizontalLayout;
haxe_ui_layouts_HorizontalLayout.__name__ = "haxe.ui.layouts.HorizontalLayout";
haxe_ui_layouts_HorizontalLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_HorizontalLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		var xpos = this.get_paddingLeft();
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var ypos = 0;
			switch(this.verticalAlign(child)) {
			case "bottom":
				if(child.get_componentHeight() < this.get_component().get_componentHeight()) {
					ypos = this.get_component().get_componentHeight() - (child.get_componentHeight() + this.get_paddingBottom() + this.marginTop(child));
				}
				break;
			case "center":
				ypos = (this.get_component().get_componentHeight() - child.get_componentHeight()) / 2 + this.marginTop(child) - this.marginBottom(child);
				break;
			default:
				ypos = this.get_paddingTop() + this.marginTop(child);
			}
			child.moveComponent(xpos + this.marginLeft(child),ypos);
			xpos += child.get_componentWidth() + this.get_horizontalSpacing();
		}
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
				continue;
			}
			if(child.get_componentWidth() > 0 && (child.get_percentWidth() == null || this.fixedMinWidth(child) == true)) {
				size.width -= child.get_componentWidth() + this.marginLeft(child) + this.marginRight(child);
			}
		}
		if(visibleChildren > 1) {
			size.width -= this.get_horizontalSpacing() * (visibleChildren - 1);
		}
		if(size.width < 0) {
			size.width = 0;
		}
		return size;
	}
	,__class__: haxe_ui_layouts_HorizontalLayout
});
var haxe_ui_components__$CheckBox_CheckBoxLayout = function() {
	haxe_ui_layouts_HorizontalLayout.call(this);
};
$hxClasses["haxe.ui.components._CheckBox.CheckBoxLayout"] = haxe_ui_components__$CheckBox_CheckBoxLayout;
haxe_ui_components__$CheckBox_CheckBoxLayout.__name__ = "haxe.ui.components._CheckBox.CheckBoxLayout";
haxe_ui_components__$CheckBox_CheckBoxLayout.__super__ = haxe_ui_layouts_HorizontalLayout;
haxe_ui_components__$CheckBox_CheckBoxLayout.prototype = $extend(haxe_ui_layouts_HorizontalLayout.prototype,{
	repositionChildren: function() {
		haxe_ui_layouts_HorizontalLayout.prototype.repositionChildren.call(this);
		var icon = this._component.findComponent(null,haxe_ui_components_Image,true);
		if(icon != null) {
			icon.set_left(Math.round(icon.get_left()));
			icon.set_top(Math.round(icon.get_top()));
		}
	}
	,__class__: haxe_ui_components__$CheckBox_CheckBoxLayout
});
var haxe_ui_components_Column = function() {
	haxe_ui_components_Button.call(this);
};
$hxClasses["haxe.ui.components.Column"] = haxe_ui_components_Column;
haxe_ui_components_Column.__name__ = "haxe.ui.components.Column";
haxe_ui_components_Column.__super__ = haxe_ui_components_Button;
haxe_ui_components_Column.prototype = $extend(haxe_ui_components_Button.prototype,{
	get_sortable: function() {
		return this.hasClass("sortable");
	}
	,set_sortable: function(value) {
		if(value == true) {
			this.addClass("sortable");
		} else {
			this.removeClass("sortable");
		}
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_components_Button.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Button.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Column();
	}
	,__class__: haxe_ui_components_Column
	,__properties__: $extend(haxe_ui_components_Button.prototype.__properties__,{set_sortable:"set_sortable",get_sortable:"get_sortable"})
});
var haxe_ui_core_IDataComponent = function() { };
$hxClasses["haxe.ui.core.IDataComponent"] = haxe_ui_core_IDataComponent;
haxe_ui_core_IDataComponent.__name__ = "haxe.ui.core.IDataComponent";
haxe_ui_core_IDataComponent.__isInterface__ = true;
haxe_ui_core_IDataComponent.prototype = {
	get_dataSource: null
	,set_dataSource: null
	,__class__: haxe_ui_core_IDataComponent
	,__properties__: {set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"}
};
var haxe_ui_components_DropDown = function() {
	haxe_ui_components_Button.call(this);
};
$hxClasses["haxe.ui.components.DropDown"] = haxe_ui_components_DropDown;
haxe_ui_components_DropDown.__name__ = "haxe.ui.components.DropDown";
haxe_ui_components_DropDown.__interfaces__ = [haxe_ui_core_IDataComponent];
haxe_ui_components_DropDown.__super__ = haxe_ui_components_Button;
haxe_ui_components_DropDown.prototype = $extend(haxe_ui_components_Button.prototype,{
	hideDropDown: function() {
		this.behaviours.call("hideDropDown",null);
	}
	,registerComposite: function() {
		haxe_ui_components_Button.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components_DropDownEvents;
		this._compositeBuilderClass = haxe_ui_components_DropDownBuilder;
	}
	,registerBehaviours: function() {
		haxe_ui_components_Button.prototype.registerBehaviours.call(this);
		this.behaviours.register("handlerStyleNames",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("dataSource",haxe_ui_components__$DropDown_DataSourceBehaviour);
		this.behaviours.register("type",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromString("list"));
		this.behaviours.register("virtual",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("dropdownWidth",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("dropdownHeight",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("dropdownSize",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("selectedIndex",haxe_ui_components__$DropDown_SelectedIndexBehaviour,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("selectedItem",haxe_ui_components__$DropDown_SelectedItemBehaviour);
		this.behaviours.register("hideDropDown",haxe_ui_components__$DropDown_HideDropDown);
	}
	,get_handlerStyleNames: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("handlerStyleNames"));
	}
	,set_handlerStyleNames: function(value) {
		this.behaviours.set("handlerStyleNames",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"handlerStyleNames");
		return value;
	}
	,get_dataSource: function() {
		return haxe_ui_util_Variant.toDataSource(this.behaviours.get("dataSource"));
	}
	,set_dataSource: function(value) {
		this.behaviours.set("dataSource",haxe_ui_util_Variant.fromDataSource(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"dataSource");
		return value;
	}
	,get_type: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("type"));
	}
	,set_type: function(value) {
		this.behaviours.set("type",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"type");
		return value;
	}
	,get_virtual: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("virtual"));
	}
	,set_virtual: function(value) {
		this.behaviours.set("virtual",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"virtual");
		return value;
	}
	,get_dropdownWidth: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("dropdownWidth"));
	}
	,set_dropdownWidth: function(value) {
		this.behaviours.set("dropdownWidth",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"dropdownWidth");
		return value;
	}
	,get_dropdownHeight: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("dropdownHeight"));
	}
	,set_dropdownHeight: function(value) {
		this.behaviours.set("dropdownHeight",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"dropdownHeight");
		return value;
	}
	,get_dropdownSize: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("dropdownSize"));
	}
	,set_dropdownSize: function(value) {
		this.behaviours.set("dropdownSize",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"dropdownSize");
		return value;
	}
	,get_selectedIndex: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("selectedIndex"));
	}
	,set_selectedIndex: function(value) {
		this.behaviours.set("selectedIndex",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedIndex");
		return value;
	}
	,get_selectedItem: function() {
		return this.behaviours.getDynamic("selectedItem");
	}
	,set_selectedItem: function(value) {
		this.behaviours.set("selectedItem",haxe_ui_util_Variant.fromDynamic(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"value");
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedItem");
		return value;
	}
	,get_value: function() {
		return this.get_selectedItem();
	}
	,set_value: function(value) {
		this.set_selectedItem(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedItem");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Button.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_DropDown();
	}
	,__class__: haxe_ui_components_DropDown
	,__properties__: $extend(haxe_ui_components_Button.prototype.__properties__,{set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",set_dropdownSize:"set_dropdownSize",get_dropdownSize:"get_dropdownSize",set_dropdownHeight:"set_dropdownHeight",get_dropdownHeight:"get_dropdownHeight",set_dropdownWidth:"set_dropdownWidth",get_dropdownWidth:"get_dropdownWidth",set_virtual:"set_virtual",get_virtual:"get_virtual",set_type:"set_type",get_type:"get_type",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource",set_handlerStyleNames:"set_handlerStyleNames",get_handlerStyleNames:"get_handlerStyleNames"})
});
var haxe_ui_components__$DropDown_HideDropDown = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._DropDown.HideDropDown"] = haxe_ui_components__$DropDown_HideDropDown;
haxe_ui_components__$DropDown_HideDropDown.__name__ = "haxe.ui.components._DropDown.HideDropDown";
haxe_ui_components__$DropDown_HideDropDown.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$DropDown_HideDropDown.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	call: function(param) {
		var events = js_Boot.__cast(this._component._internalEvents , haxe_ui_components_DropDownEvents);
		events.hideDropDown();
		return null;
	}
	,__class__: haxe_ui_components__$DropDown_HideDropDown
});
var haxe_ui_components__$DropDown_DataSourceBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._DropDown.DataSourceBehaviour"] = haxe_ui_components__$DropDown_DataSourceBehaviour;
haxe_ui_components__$DropDown_DataSourceBehaviour.__name__ = "haxe.ui.components._DropDown.DataSourceBehaviour";
haxe_ui_components__$DropDown_DataSourceBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$DropDown_DataSourceBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		if(this._value == null || haxe_ui_util_Variant.get_isNull(this._value) == true) {
			this._value = haxe_ui_util_Variant.fromDataSource(new haxe_ui_data_ArrayDataSource());
		}
		return this._value;
	}
	,set: function(value) {
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		handler.reset();
		if(this._component.get_text() == null && this._component.get_isReady()) {
			(js_Boot.__cast(this._component , haxe_ui_components_DropDown)).set_selectedIndex(0);
		}
	}
	,__class__: haxe_ui_components__$DropDown_DataSourceBehaviour
});
var haxe_ui_components__$DropDown_SelectedIndexBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._DropDown.SelectedIndexBehaviour"] = haxe_ui_components__$DropDown_SelectedIndexBehaviour;
haxe_ui_components__$DropDown_SelectedIndexBehaviour.__name__ = "haxe.ui.components._DropDown.SelectedIndexBehaviour";
haxe_ui_components__$DropDown_SelectedIndexBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$DropDown_SelectedIndexBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		handler.set_selectedIndex(haxe_ui_util_Variant.toInt(this._value));
	}
	,get: function() {
		if(this._component.get_isReady() == false) {
			return haxe_ui_behaviours_DataBehaviour.prototype.get.call(this);
		}
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		return haxe_ui_util_Variant.fromFloat(handler.get_selectedIndex());
	}
	,set: function(value) {
		if(this._component.get_isReady() == false) {
			haxe_ui_behaviours_DataBehaviour.prototype.set.call(this,value);
			return;
		}
		if(haxe_ui_util_Variant.eq(value,this.get())) {
			return;
		}
		this._value = value;
		this.invalidateData();
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		handler.set_selectedIndex(haxe_ui_util_Variant.toInt(this._value));
	}
	,__class__: haxe_ui_components__$DropDown_SelectedIndexBehaviour
});
var haxe_ui_components__$DropDown_SelectedItemBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._DropDown.SelectedItemBehaviour"] = haxe_ui_components__$DropDown_SelectedItemBehaviour;
haxe_ui_components__$DropDown_SelectedItemBehaviour.__name__ = "haxe.ui.components._DropDown.SelectedItemBehaviour";
haxe_ui_components__$DropDown_SelectedItemBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$DropDown_SelectedItemBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		handler.set_selectedItem(this._value);
	}
	,getDynamic: function() {
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		return handler.get_selectedItem();
	}
	,set: function(value) {
		if(this._component.get_isReady() == false) {
			haxe_ui_behaviours_DataBehaviour.prototype.set.call(this,value);
			return;
		}
		if(haxe_ui_util_Variant.eq(value,this.getDynamic())) {
			return;
		}
		this._value = value;
		this.invalidateData();
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		handler.set_selectedItem(value);
	}
	,__class__: haxe_ui_components__$DropDown_SelectedItemBehaviour
});
var haxe_ui_components_IDropDownHandler = function() { };
$hxClasses["haxe.ui.components.IDropDownHandler"] = haxe_ui_components_IDropDownHandler;
haxe_ui_components_IDropDownHandler.__name__ = "haxe.ui.components.IDropDownHandler";
haxe_ui_components_IDropDownHandler.__isInterface__ = true;
haxe_ui_components_IDropDownHandler.prototype = {
	get_component: null
	,get_selectedIndex: null
	,set_selectedIndex: null
	,get_selectedItem: null
	,set_selectedItem: null
	,component: null
	,prepare: null
	,reset: null
	,applyDefault: null
	,__class__: haxe_ui_components_IDropDownHandler
	,__properties__: {set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",get_component:"get_component"}
};
var haxe_ui_components_DropDownHandler = function(dropdown) {
	this._dropdown = dropdown;
};
$hxClasses["haxe.ui.components.DropDownHandler"] = haxe_ui_components_DropDownHandler;
haxe_ui_components_DropDownHandler.__name__ = "haxe.ui.components.DropDownHandler";
haxe_ui_components_DropDownHandler.__interfaces__ = [haxe_ui_components_IDropDownHandler];
haxe_ui_components_DropDownHandler.prototype = {
	_dropdown: null
	,component: null
	,get_component: function() {
		return null;
	}
	,prepare: function(wrapper) {
	}
	,reset: function() {
	}
	,get_selectedIndex: function() {
		return -1;
	}
	,set_selectedIndex: function(value) {
		return value;
	}
	,get_selectedItem: function() {
		return null;
	}
	,set_selectedItem: function(value) {
		return value;
	}
	,applyDefault: function() {
	}
	,__class__: haxe_ui_components_DropDownHandler
	,__properties__: {set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",get_component:"get_component"}
};
var haxe_ui_components_ListDropDownHandler = function(dropdown) {
	this._cachedSelectedItem = null;
	this._cachedSelectedIndex = -1;
	haxe_ui_components_DropDownHandler.call(this,dropdown);
};
$hxClasses["haxe.ui.components.ListDropDownHandler"] = haxe_ui_components_ListDropDownHandler;
haxe_ui_components_ListDropDownHandler.__name__ = "haxe.ui.components.ListDropDownHandler";
haxe_ui_components_ListDropDownHandler.__super__ = haxe_ui_components_DropDownHandler;
haxe_ui_components_ListDropDownHandler.prototype = $extend(haxe_ui_components_DropDownHandler.prototype,{
	_listview: null
	,get_component: function() {
		this.createListView();
		return this._listview;
	}
	,reset: function() {
		if(this._listview != null) {
			this._listview.set_dataSource(this._dropdown.get_dataSource());
		}
	}
	,prepare: function(wrapper) {
		var itemCount = 4;
		if(this._dropdown.get_dropdownSize() != null) {
			itemCount = this._dropdown.get_dropdownSize();
		}
		if(this._listview.get_dataSource() != null && this._listview.get_dataSource().get_size() < itemCount) {
			itemCount = this._listview.get_dataSource().get_size();
		}
		if(itemCount > 0) {
			this._listview.set_itemCount(itemCount);
		}
		if(this._dropdown.get_dropdownWidth() == null) {
			wrapper.syncComponentValidation();
			this._listview.set_width(this._dropdown.get_width() - (wrapper.get_layout().get_paddingLeft() + wrapper.get_layout().get_paddingRight()));
		} else {
			this._listview.set_width(this._dropdown.get_dropdownWidth());
		}
		if(this._dropdown.get_dropdownHeight() != null) {
			this._listview.set_height(this._dropdown.get_dropdownHeight());
		}
		var selectedIndex = this._dropdown.get_selectedIndex();
		if(this._dropdown.get_dataSource() != null && this._dropdown.get_text() != null && selectedIndex < 0) {
			var text = this._dropdown.get_text();
			var itemIndex = this.indexOfItem(text);
			if(itemIndex != -1) {
				selectedIndex = itemIndex;
			}
		}
		this._listview.unregisterEvent("change",$bind(this,this.onListChange));
		this._listview.set_selectedIndex(selectedIndex);
		this._listview.syncComponentValidation();
		this._listview.registerEvent("change",$bind(this,this.onListChange));
	}
	,_cachedSelectedIndex: null
	,get_selectedIndex: function() {
		if(this._listview == null) {
			return this._cachedSelectedIndex;
		}
		return this._listview.get_selectedIndex();
	}
	,set_selectedIndex: function(value) {
		if(this._listview != null && this._cachedSelectedIndex != value) {
			this._cachedSelectedIndex = value;
			this._listview.set_selectedIndex(value);
		} else if(this._cachedSelectedIndex != value) {
			this._cachedSelectedIndex = value;
			this._dropdown.dispatch(new haxe_ui_events_UIEvent("change"));
		}
		if(this._dropdown.get_dataSource() != null && value >= 0 && value < this._dropdown.get_dataSource().get_size()) {
			var data = this._dropdown.get_dataSource().get(value);
			var text = null;
			if(Type.typeof(data) == ValueType.TObject) {
				text = data.text;
				if(text == null) {
					text = data.value;
				}
			} else {
				text = Std.string(data);
			}
			this._dropdown.set_text(text);
		}
		return value;
	}
	,indexOfItem: function(text) {
		var index = -1;
		if(this._dropdown.get_dataSource() != null) {
			var _g = 0;
			var _g1 = this._dropdown.get_dataSource().get_size();
			while(_g < _g1) {
				var i = _g++;
				var item = this._dropdown.get_dataSource().get(i);
				if(item == text || item.value == text || item.text == text) {
					index = i;
				}
			}
		}
		return index;
	}
	,get_selectedItem: function() {
		if(this._listview == null) {
			if(this._cachedSelectedIndex >= 0 && this._cachedSelectedIndex < this._dropdown.get_dataSource().get_size()) {
				var data = this._dropdown.get_dataSource().get(this._cachedSelectedIndex);
				return data;
			} else {
				return this._cachedSelectedItem;
			}
		}
		return this._listview.get_selectedItem();
	}
	,_cachedSelectedItem: null
	,set_selectedItem: function(value) {
		var v = value;
		var index = this.indexOfItem(haxe_ui_util_Variant.toString(v));
		this.set_selectedIndex(index);
		return value;
	}
	,createListView: function() {
		if(this._listview == null) {
			this._listview = new haxe_ui_containers_ListView();
			this._listview.set_virtual(this._dropdown.get_virtual());
			this._listview.set_dataSource(this._dropdown.get_dataSource());
		}
	}
	,onListChange: function(event) {
		if(this._listview.get_selectedItem() == null) {
			return;
		}
		var currentHover = this._listview.findComponent(":hover",null,true,"css");
		if(currentHover != null) {
			currentHover.removeClass(":hover");
		}
		var selectedItem = this._listview.get_selectedItem();
		var text = null;
		if(Type.typeof(selectedItem) == ValueType.TObject) {
			text = this._listview.get_selectedItem().text;
			if(text == null) {
				text = this._listview.get_selectedItem().value;
			}
		} else {
			text = Std.string(selectedItem);
		}
		this._dropdown.set_text(text);
		(js_Boot.__cast(this._dropdown._internalEvents , haxe_ui_components_DropDownEvents)).hideDropDown();
		this._dropdown.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,applyDefault: function() {
		var indexToSelect = 0;
		if(this._cachedSelectedItem != null) {
			var v = this._cachedSelectedItem;
			var index = this.indexOfItem(haxe_ui_util_Variant.toString(v));
			if(index != -1) {
				indexToSelect = index;
			}
		}
		this._dropdown.set_selectedIndex(indexToSelect);
	}
	,__class__: haxe_ui_components_ListDropDownHandler
});
var haxe_ui_components_CalendarDropDownHandler = function(dropdown) {
	this._cachedSelectedDate = null;
	haxe_ui_components_DropDownHandler.call(this,dropdown);
};
$hxClasses["haxe.ui.components.CalendarDropDownHandler"] = haxe_ui_components_CalendarDropDownHandler;
haxe_ui_components_CalendarDropDownHandler.__name__ = "haxe.ui.components.CalendarDropDownHandler";
haxe_ui_components_CalendarDropDownHandler.__super__ = haxe_ui_components_DropDownHandler;
haxe_ui_components_CalendarDropDownHandler.prototype = $extend(haxe_ui_components_DropDownHandler.prototype,{
	_calendar: null
	,get_component: function() {
		if(this._calendar == null) {
			this._calendar = new haxe_ui_containers_CalendarView();
			this._calendar.registerEvent("change",$bind(this,this.onCalendarChange));
		}
		return this._calendar;
	}
	,prepare: function(wrapper) {
		if(this._dropdown.get_dropdownWidth() != null) {
			this._calendar.set_width(this._dropdown.get_dropdownWidth());
		}
		if(this._dropdown.get_dropdownHeight() != null) {
			this._calendar.set_height(this._dropdown.get_dropdownHeight());
		}
		if(this._cachedSelectedDate != null) {
			this._calendar.unregisterEvent("change",$bind(this,this.onCalendarChange));
			this._calendar.set_selectedDate(this._cachedSelectedDate);
			this._calendar.registerEvent("change",$bind(this,this.onCalendarChange));
		}
		this._calendar.syncComponentValidation();
	}
	,_cachedSelectedDate: null
	,get_selectedItem: function() {
		if(this._calendar == null) {
			return this._cachedSelectedDate;
		}
		return this._calendar.get_selectedDate();
	}
	,set_selectedItem: function(value) {
		if(value == null) {
			return value;
		}
		var v = value;
		var date = null;
		if(haxe_ui_util_Variant.get_isString(v) == true) {
			date = HxOverrides.strDate(haxe_ui_util_Variant.toString(v));
		} else if(haxe_ui_util_Variant.get_isDate(v)) {
			date = haxe_ui_util_Variant.toDate(v);
		}
		if(this._calendar != null && date != null) {
			if(HxOverrides.dateStr(date) == HxOverrides.dateStr(this._calendar.get_selectedDate())) {
				this._dropdown.set_text(DateTools.format(date,haxe_ui_components_CalendarDropDownHandler.DATE_FORMAT));
				return value;
			}
			this._cachedSelectedDate = date;
			this._calendar.set_selectedDate(date);
		} else if(date != null) {
			this._cachedSelectedDate = date;
			this._dropdown.set_text(DateTools.format(this._cachedSelectedDate,haxe_ui_components_CalendarDropDownHandler.DATE_FORMAT));
		}
		return value;
	}
	,onCalendarChange: function(event) {
		if(this._calendar.get_selectedDate() == null) {
			return;
		}
		this._cachedSelectedDate = this._calendar.get_selectedDate();
		this._dropdown.set_text(DateTools.format(this._calendar.get_selectedDate(),haxe_ui_components_CalendarDropDownHandler.DATE_FORMAT));
		(js_Boot.__cast(this._dropdown._internalEvents , haxe_ui_components_DropDownEvents)).hideDropDown();
		this._dropdown.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,applyDefault: function() {
		var now = new Date();
		this._dropdown.set_selectedItem(now);
	}
	,__class__: haxe_ui_components_CalendarDropDownHandler
});
var haxe_ui_components_DropDownEvents = function(dropdown) {
	this._wrapper = null;
	this._overlay = null;
	haxe_ui_components_ButtonEvents.call(this,dropdown);
	this._dropdown = dropdown;
};
$hxClasses["haxe.ui.components.DropDownEvents"] = haxe_ui_components_DropDownEvents;
haxe_ui_components_DropDownEvents.__name__ = "haxe.ui.components.DropDownEvents";
haxe_ui_components_DropDownEvents.__super__ = haxe_ui_components_ButtonEvents;
haxe_ui_components_DropDownEvents.prototype = $extend(haxe_ui_components_ButtonEvents.prototype,{
	_dropdown: null
	,register: function() {
		haxe_ui_components_ButtonEvents.prototype.register.call(this);
		this.registerEvent("mousedown",$bind(this,this.onClick));
	}
	,unregister: function() {
		haxe_ui_components_ButtonEvents.prototype.unregister.call(this);
		this.unregisterEvent("mousedown",$bind(this,this.onClick));
	}
	,onClick: function(event) {
		this._dropdown.set_selected(!this._dropdown.get_selected());
		if(this._dropdown.get_selected() == true) {
			this.showDropDown();
		} else {
			this.hideDropDown();
		}
	}
	,onMouseClick: function(event) {
	}
	,_overlay: null
	,_wrapper: null
	,showDropDown: function() {
		var handler = (js_Boot.__cast(this._dropdown._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		if(handler == null) {
			return;
		}
		if(this._wrapper == null) {
			this._wrapper = new haxe_ui_containers_Box();
			this._wrapper.addClass("popup");
			this._wrapper.addClass("dropdown-popup");
			this._wrapper.set_styleNames(this._dropdown.get_handlerStyleNames());
			this._wrapper.addComponent(handler.get_component());
			var filler = new haxe_ui_core_Component();
			filler.set_horizontalAlign("right");
			filler.set_includeInLayout(false);
			filler.addClass("dropdown-filler");
			filler.set_id("dropdown-filler");
			this._wrapper.addComponent(filler);
		}
		var componentOffset = this._dropdown.getComponentOffset();
		if(this._dropdown.get_style().mode != null && this._dropdown.get_style().mode == "mobile") {
			if(this._overlay == null) {
				this._overlay = new haxe_ui_core_Component();
				this._overlay.set_id("modal-background");
				this._overlay.addClass("modal-background");
				this._overlay.set_percentWidth(this._overlay.set_percentHeight(100));
			}
			haxe_ui_core_Screen.get_instance().addComponent(this._overlay);
			handler.prepare(this._wrapper);
			haxe_ui_core_Screen.get_instance().addComponent(this._wrapper);
			this._wrapper.set_left(haxe_ui_core_Screen.get_instance().get_width() / 2 - this._wrapper.get_actualComponentWidth() / 2);
			this._wrapper.set_top(haxe_ui_core_Screen.get_instance().get_height() / 2 - this._wrapper.get_actualComponentHeight() / 2);
		} else {
			this._wrapper.set_left(this._dropdown.get_screenLeft() + componentOffset.x);
			this._wrapper.set_top(this._dropdown.get_screenTop() + (this._dropdown.get_actualComponentHeight() - haxe_ui_Toolkit.get_scaleY()) + componentOffset.y);
			haxe_ui_core_Screen.get_instance().addComponent(this._wrapper);
			handler.prepare(this._wrapper);
			this._wrapper.syncComponentValidation();
			var cx = this._wrapper.get_width() - this._dropdown.get_width();
			var filler = this._wrapper.findComponent("dropdown-filler",null,false);
			if(cx > 0 && filler != null) {
				this._wrapper.addClass("dropdown-popup-expanded");
				cx += 2;
				filler.set_width(cx);
				filler.set_left(this._wrapper.get_width() - cx);
				filler.set_hidden(false);
			} else if(filler != null) {
				filler.set_hidden(true);
				this._wrapper.removeClass("dropdown-popup-expanded");
			}
			if(this._wrapper.get_screenLeft() + this._wrapper.get_actualComponentWidth() > haxe_ui_core_Screen.get_instance().get_width()) {
				this._wrapper.set_left(this._wrapper.get_screenLeft() - this._wrapper.get_actualComponentWidth() + this._dropdown.get_actualComponentWidth());
			}
			if(this._wrapper.get_screenTop() + this._wrapper.get_actualComponentHeight() > haxe_ui_core_Screen.get_instance().get_height()) {
				this._wrapper.set_top(this._dropdown.get_screenTop() - this._wrapper.get_actualComponentHeight());
			}
		}
		haxe_ui_core_Screen.get_instance().registerEvent("mousedown",$bind(this,this.onScreenMouseDown));
		haxe_ui_core_Screen.get_instance().registerEvent("rightmousedown",$bind(this,this.onScreenMouseDown));
	}
	,hideDropDown: function() {
		var handler = (js_Boot.__cast(this._dropdown._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		if(handler == null) {
			return;
		}
		if(this._overlay != null) {
			haxe_ui_core_Screen.get_instance().removeComponent(this._overlay);
			this._overlay = null;
		}
		this._dropdown.set_selected(false);
		if(this._wrapper != null) {
			haxe_ui_core_Screen.get_instance().removeComponent(this._wrapper);
		}
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousedown",$bind(this,this.onScreenMouseDown));
		haxe_ui_core_Screen.get_instance().unregisterEvent("rightmousedown",$bind(this,this.onScreenMouseDown));
	}
	,onScreenMouseDown: function(event) {
		var handler = (js_Boot.__cast(this._dropdown._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		if(handler.get_component().hitTest(event.screenX,event.screenY) == true) {
			return;
		}
		var componentOffset = this._dropdown.getComponentOffset();
		if(this._dropdown.hitTest(event.screenX - componentOffset.x,event.screenY - componentOffset.y) == true) {
			return;
		}
		this.hideDropDown();
	}
	,dispatchChanged: function() {
	}
	,__class__: haxe_ui_components_DropDownEvents
});
var haxe_ui_components_DropDownBuilder = function(dropdown) {
	haxe_ui_components_ButtonBuilder.call(this,dropdown);
	this._dropdown = dropdown;
	var this1 = haxe_ui_components_DropDownBuilder.HANDLER_MAP;
	var value = haxe_ui_components_ListDropDownHandler.__name__;
	this1.h["list"] = value;
	var this1 = haxe_ui_components_DropDownBuilder.HANDLER_MAP;
	var value = haxe_ui_components_CalendarDropDownHandler.__name__;
	this1.h["date"] = value;
};
$hxClasses["haxe.ui.components.DropDownBuilder"] = haxe_ui_components_DropDownBuilder;
haxe_ui_components_DropDownBuilder.__name__ = "haxe.ui.components.DropDownBuilder";
haxe_ui_components_DropDownBuilder.__super__ = haxe_ui_components_ButtonBuilder;
haxe_ui_components_DropDownBuilder.prototype = $extend(haxe_ui_components_ButtonBuilder.prototype,{
	_dropdown: null
	,_handler: null
	,handler: null
	,get_handler: function() {
		if(this._handler == null) {
			var this1 = haxe_ui_components_DropDownBuilder.HANDLER_MAP;
			var key = this._dropdown.get_type();
			var handlerClass = this1.h[key];
			if(handlerClass == null) {
				handlerClass = this._dropdown.get_type();
			}
			this._handler = Type.createInstance($hxClasses[handlerClass],[this._dropdown]);
		}
		return this._handler;
	}
	,onReady: function() {
		haxe_ui_components_ButtonBuilder.prototype.onReady.call(this);
		if(this._dropdown.get_text() == null) {
			this.get_handler().applyDefault();
		}
	}
	,create: function() {
		this._dropdown.set_toggle(true);
	}
	,destroy: function() {
		var events = js_Boot.__cast(this._dropdown._internalEvents , haxe_ui_components_DropDownEvents);
		events.hideDropDown();
		if(this._handler != null && this._handler.get_component() != null) {
			this._handler.get_component().destroyComponent();
		}
	}
	,__class__: haxe_ui_components_DropDownBuilder
	,__properties__: $extend(haxe_ui_components_ButtonBuilder.prototype.__properties__,{get_handler:"get_handler"})
});
var haxe_ui_components_HGrid = function() {
	haxe_ui_core_Component.call(this);
	this.set_rows(1);
};
$hxClasses["haxe.ui.components.HGrid"] = haxe_ui_components_HGrid;
haxe_ui_components_HGrid.__name__ = "haxe.ui.components.HGrid";
haxe_ui_components_HGrid.__super__ = haxe_ui_core_Component;
haxe_ui_components_HGrid.prototype = $extend(haxe_ui_core_Component.prototype,{
	createDefaults: function() {
		haxe_ui_core_Component.prototype.createDefaults.call(this);
		this._defaultLayoutClass = haxe_ui_layouts_HorizontalGridLayout;
	}
	,_rows: null
	,get_rows: function() {
		return this._rows;
	}
	,set_rows: function(value) {
		if(this._rows != value) {
			this._rows = value;
			(js_Boot.__cast(this.get_layout() , haxe_ui_layouts_HorizontalGridLayout)).set_rows(value);
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		c.set_rows(this.get_rows());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_HGrid();
	}
	,__class__: haxe_ui_components_HGrid
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_rows:"set_rows",get_rows:"get_rows"})
});
var haxe_ui_core_IDirectionalComponent = function() { };
$hxClasses["haxe.ui.core.IDirectionalComponent"] = haxe_ui_core_IDirectionalComponent;
haxe_ui_core_IDirectionalComponent.__name__ = "haxe.ui.core.IDirectionalComponent";
haxe_ui_core_IDirectionalComponent.__isInterface__ = true;
var haxe_ui_components_Range = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.Range"] = haxe_ui_components_Range;
haxe_ui_components_Range.__name__ = "haxe.ui.components.Range";
haxe_ui_components_Range.__interfaces__ = [haxe_ui_core_IDirectionalComponent];
haxe_ui_components_Range.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_Range.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	posFromCoord: function(coord) {
		return haxe_ui_util_Variant.toFloat(this.behaviours.call("posFromCoord",coord));
	}
	,get_cssName: function() {
		return "range";
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("min",haxe_ui_components__$Range_RangeMin,haxe_ui_util_Variant.fromFloat(0));
		this.behaviours.register("max",haxe_ui_components__$Range_RangeMax,haxe_ui_util_Variant.fromFloat(100));
		this.behaviours.register("start",haxe_ui_components__$Range_RangeStart,null);
		this.behaviours.register("end",haxe_ui_components__$Range_RangeEnd,haxe_ui_util_Variant.fromFloat(0));
		this.behaviours.register("precision",haxe_ui_behaviours_InvalidatingBehaviour);
		this.behaviours.register("step",haxe_ui_behaviours_InvalidatingBehaviour);
		this.behaviours.register("allowInteraction",haxe_ui_components__$Range_AllowInteraction,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("posFromCoord",haxe_ui_behaviours_DefaultBehaviour);
	}
	,get_min: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("min"));
	}
	,set_min: function(value) {
		this.behaviours.set("min",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"min");
		return value;
	}
	,get_max: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("max"));
	}
	,set_max: function(value) {
		this.behaviours.set("max",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"max");
		return value;
	}
	,get_start: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("start"));
	}
	,set_start: function(value) {
		this.behaviours.set("start",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"start");
		return value;
	}
	,get_end: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("end"));
	}
	,set_end: function(value) {
		this.behaviours.set("end",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"end");
		return value;
	}
	,get_precision: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("precision"));
	}
	,set_precision: function(value) {
		this.behaviours.set("precision",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"precision");
		return value;
	}
	,get_step: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("step"));
	}
	,set_step: function(value) {
		this.behaviours.set("step",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"step");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		c.set_min(this.get_min());
		c.set_max(this.get_max());
		if(this.get_start() != null) {
			c.set_start(this.get_start());
		}
		c.set_end(this.get_end());
		c.set_precision(this.get_precision());
		c.set_step(this.get_step());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Range();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_components__$Range_Builder;
	}
	,__class__: haxe_ui_components_Range
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_step:"set_step",get_step:"get_step",set_precision:"set_precision",get_precision:"get_precision",set_end:"set_end",get_end:"get_end",set_start:"set_start",get_start:"get_start",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min"})
});
var haxe_ui_components_Progress = function() {
	haxe_ui_components_Range.call(this);
	this.behaviours.set_updateOrder(["min","max","pos","indeterminate"]);
};
$hxClasses["haxe.ui.components.Progress"] = haxe_ui_components_Progress;
haxe_ui_components_Progress.__name__ = "haxe.ui.components.Progress";
haxe_ui_components_Progress.__interfaces__ = [haxe_ui_core_IDirectionalComponent];
haxe_ui_components_Progress.__super__ = haxe_ui_components_Range;
haxe_ui_components_Progress.prototype = $extend(haxe_ui_components_Range.prototype,{
	get_cssName: function() {
		return "progress";
	}
	,registerBehaviours: function() {
		haxe_ui_components_Range.prototype.registerBehaviours.call(this);
		this.behaviours.register("indeterminate",haxe_ui_components__$Progress_Indeterminate);
		this.behaviours.register("pos",haxe_ui_components__$Progress_Pos);
		this.behaviours.register("min",haxe_ui_components__$Progress_Min);
	}
	,get_indeterminate: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("indeterminate"));
	}
	,set_indeterminate: function(value) {
		this.behaviours.set("indeterminate",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"indeterminate");
		return value;
	}
	,get_pos: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("pos"));
	}
	,set_pos: function(value) {
		this.behaviours.set("pos",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"value");
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pos");
		return value;
	}
	,get_value: function() {
		return this.get_pos();
	}
	,set_value: function(value) {
		this.set_pos(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pos");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Range.prototype.cloneComponent.call(this);
		c.set_indeterminate(this.get_indeterminate());
		c.set_pos(this.get_pos());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Progress();
	}
	,__class__: haxe_ui_components_Progress
	,__properties__: $extend(haxe_ui_components_Range.prototype.__properties__,{set_pos:"set_pos",get_pos:"get_pos",set_indeterminate:"set_indeterminate",get_indeterminate:"get_indeterminate"})
});
var haxe_ui_components_HorizontalProgress = function() {
	haxe_ui_components_Progress.call(this);
};
$hxClasses["haxe.ui.components.HorizontalProgress"] = haxe_ui_components_HorizontalProgress;
haxe_ui_components_HorizontalProgress.__name__ = "haxe.ui.components.HorizontalProgress";
haxe_ui_components_HorizontalProgress.__super__ = haxe_ui_components_Progress;
haxe_ui_components_HorizontalProgress.prototype = $extend(haxe_ui_components_Progress.prototype,{
	posFromCoord: function(coord) {
		return haxe_ui_util_Variant.toFloat(this.behaviours.call("posFromCoord",coord));
	}
	,registerBehaviours: function() {
		haxe_ui_components_Progress.prototype.registerBehaviours.call(this);
		this.behaviours.register("posFromCoord",haxe_ui_components_HorizontalRangePosFromCoord);
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Progress.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_HorizontalProgress();
	}
	,registerComposite: function() {
		haxe_ui_components_Progress.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_components_HorizontalRangeLayout;
	}
	,__class__: haxe_ui_components_HorizontalProgress
});
var haxe_ui_components_HorizontalRange = function() {
	haxe_ui_components_Range.call(this);
};
$hxClasses["haxe.ui.components.HorizontalRange"] = haxe_ui_components_HorizontalRange;
haxe_ui_components_HorizontalRange.__name__ = "haxe.ui.components.HorizontalRange";
haxe_ui_components_HorizontalRange.__super__ = haxe_ui_components_Range;
haxe_ui_components_HorizontalRange.prototype = $extend(haxe_ui_components_Range.prototype,{
	posFromCoord: function(coord) {
		return haxe_ui_util_Variant.toFloat(this.behaviours.call("posFromCoord",coord));
	}
	,registerComposite: function() {
		haxe_ui_components_Range.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_components_HorizontalRangeLayout;
	}
	,registerBehaviours: function() {
		haxe_ui_components_Range.prototype.registerBehaviours.call(this);
		this.behaviours.register("posFromCoord",haxe_ui_components_HorizontalRangePosFromCoord);
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Range.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_HorizontalRange();
	}
	,__class__: haxe_ui_components_HorizontalRange
});
var haxe_ui_components_HorizontalRangePosFromCoord = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components.HorizontalRangePosFromCoord"] = haxe_ui_components_HorizontalRangePosFromCoord;
haxe_ui_components_HorizontalRangePosFromCoord.__name__ = "haxe.ui.components.HorizontalRangePosFromCoord";
haxe_ui_components_HorizontalRangePosFromCoord.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components_HorizontalRangePosFromCoord.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(pos) {
		var range = js_Boot.__cast(this._component , haxe_ui_components_Range);
		var p = js_Boot.__cast(pos , haxe_ui_geom_Point);
		var xpos = p.x - range.get_layout().get_paddingLeft();
		var ucx = range.get_layout().get_usableWidth();
		if(xpos >= ucx) {
			xpos = ucx;
		}
		var m = range.get_max() - range.get_min();
		var d = ucx / m;
		var v = xpos + range.get_start() * d;
		var p = v / d;
		return haxe_ui_util_Variant.fromFloat(p);
	}
	,__class__: haxe_ui_components_HorizontalRangePosFromCoord
});
var haxe_ui_components_HorizontalRangeLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components.HorizontalRangeLayout"] = haxe_ui_components_HorizontalRangeLayout;
haxe_ui_components_HorizontalRangeLayout.__name__ = "haxe.ui.components.HorizontalRangeLayout";
haxe_ui_components_HorizontalRangeLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components_HorizontalRangeLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		var range = js_Boot.__cast(this.get_component() , haxe_ui_components_Range);
		var value = this.findComponent("" + range.get_cssName() + "-value");
		if(value != null) {
			var ucx = this.get_usableWidth();
			var m = range.get_max() - range.get_min();
			var d = ucx / m;
			var startInPixels = range.get_start() * d - range.get_min() * d;
			var endInPixels = range.get_end() * d - range.get_min() * d;
			var cx = Math.round(endInPixels - startInPixels);
			if(cx < 0) {
				cx = 0;
			} else if(cx > ucx) {
				cx = ucx;
			}
			if(cx == 0) {
				value.set_width(0);
				value.set_hidden(true);
			} else {
				value.set_width(cx);
				value.set_hidden(false);
			}
		}
	}
	,repositionChildren: function() {
		var range = js_Boot.__cast(this.get_component() , haxe_ui_components_Range);
		var value = this.findComponent("" + range.get_cssName() + "-value");
		var ucx = this.get_usableWidth();
		var m = range.get_max() - range.get_min();
		var d = ucx / m;
		var startInPixels = range.get_start() * d - range.get_min() * d;
		value.set_left(this.get_paddingLeft() + startInPixels);
		value.set_top(this.get_paddingTop());
	}
	,__class__: haxe_ui_components_HorizontalRangeLayout
});
var haxe_ui_components_Scroll = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.Scroll"] = haxe_ui_components_Scroll;
haxe_ui_components_Scroll.__name__ = "haxe.ui.components.Scroll";
haxe_ui_components_Scroll.__interfaces__ = [haxe_ui_core_IDirectionalComponent];
haxe_ui_components_Scroll.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_Scroll.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	posFromCoord: function(coord) {
		return haxe_ui_util_Variant.toFloat(this.behaviours.call("posFromCoord",coord));
	}
	,applyPageFromCoord: function(coord) {
		return haxe_ui_util_Variant.toFloat(this.behaviours.call("applyPageFromCoord",coord));
	}
	,createChildren: function() {
		this.createButton("deinc").set_repeater(true);
		this.createButton("inc").set_repeater(true);
		this.createButton("thumb").set_remainPressed(true);
		this.registerInternalEvents(haxe_ui_components__$Scroll_Events);
	}
	,createButton: function(type) {
		var b = this.findComponent("scroll-" + type + "-button",haxe_ui_components_Button);
		if(b == null) {
			b = new haxe_ui_components_Button();
			b.scriptAccess = false;
			b.customStyle.native = false;
			b.set_id("scroll-" + type + "-button");
			b.addClass(type);
			b.set_allowFocus(false);
			this.addComponent(b);
		}
		return b;
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("min",haxe_ui_components__$Scroll_ScrollValueBehaviour,haxe_ui_util_Variant.fromFloat(0));
		this.behaviours.register("max",haxe_ui_components__$Scroll_ScrollValueBehaviour,haxe_ui_util_Variant.fromFloat(100));
		this.behaviours.register("pageSize",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromFloat(0));
		this.behaviours.register("pos",haxe_ui_components__$Scroll_ScrollValueBehaviour,haxe_ui_util_Variant.fromFloat(0));
		this.behaviours.register("increment",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromFloat(20));
	}
	,get_min: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("min"));
	}
	,set_min: function(value) {
		this.behaviours.set("min",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"min");
		return value;
	}
	,get_max: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("max"));
	}
	,set_max: function(value) {
		this.behaviours.set("max",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"max");
		return value;
	}
	,get_pageSize: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("pageSize"));
	}
	,set_pageSize: function(value) {
		this.behaviours.set("pageSize",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pageSize");
		return value;
	}
	,get_pos: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("pos"));
	}
	,set_pos: function(value) {
		this.behaviours.set("pos",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pos");
		return value;
	}
	,get_increment: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("increment"));
	}
	,set_increment: function(value) {
		this.behaviours.set("increment",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"increment");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Scroll();
	}
	,__class__: haxe_ui_components_Scroll
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_increment:"set_increment",get_increment:"get_increment",set_pos:"set_pos",get_pos:"get_pos",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min"})
});
var haxe_ui_components_HorizontalScroll = function() {
	haxe_ui_components_Scroll.call(this);
};
$hxClasses["haxe.ui.components.HorizontalScroll"] = haxe_ui_components_HorizontalScroll;
haxe_ui_components_HorizontalScroll.__name__ = "haxe.ui.components.HorizontalScroll";
haxe_ui_components_HorizontalScroll.__super__ = haxe_ui_components_Scroll;
haxe_ui_components_HorizontalScroll.prototype = $extend(haxe_ui_components_Scroll.prototype,{
	registerBehaviours: function() {
		haxe_ui_components_Scroll.prototype.registerBehaviours.call(this);
		this.behaviours.register("posFromCoord",haxe_ui_components__$HorizontalScroll_PosFromCoord);
		this.behaviours.register("applyPageFromCoord",haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord);
	}
	,createChildren: function() {
		haxe_ui_components_Scroll.prototype.createChildren.call(this);
		if(this.get_componentWidth() <= 0) {
			this.set_componentWidth(150);
		}
	}
	,createDefaults: function() {
		haxe_ui_components_Scroll.prototype.createDefaults.call(this);
		this._defaultLayoutClass = haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout;
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Scroll.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_HorizontalScroll();
	}
	,__class__: haxe_ui_components_HorizontalScroll
});
var haxe_ui_components__$HorizontalScroll_PosFromCoord = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._HorizontalScroll.PosFromCoord"] = haxe_ui_components__$HorizontalScroll_PosFromCoord;
haxe_ui_components__$HorizontalScroll_PosFromCoord.__name__ = "haxe.ui.components._HorizontalScroll.PosFromCoord";
haxe_ui_components__$HorizontalScroll_PosFromCoord.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$HorizontalScroll_PosFromCoord.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(pos) {
		var p = js_Boot.__cast(pos , haxe_ui_geom_Point);
		var scroll = js_Boot.__cast(this._component , haxe_ui_components_Scroll);
		var deinc = this._component.findComponent("scroll-deinc-button");
		var thumb = this._component.findComponent("scroll-thumb-button");
		var xpos = p.x;
		var minX = 0;
		if(deinc != null && deinc.get_hidden() == false) {
			minX = deinc.get_width() + scroll.get_layout().get_horizontalSpacing();
		}
		var maxX = scroll.get_layout().get_usableWidth() - thumb.get_width();
		if(deinc != null && deinc.get_hidden() == false) {
			maxX += deinc.get_width() + scroll.get_layout().get_horizontalSpacing();
		}
		if(xpos < minX) {
			xpos = minX;
		} else if(xpos > maxX) {
			xpos = maxX;
		}
		var ucx = scroll.get_layout().get_usableWidth();
		ucx -= thumb.get_width();
		var m = scroll.get_max() - scroll.get_min() | 0;
		var v = xpos - minX;
		var value = scroll.get_min() + v / ucx * m;
		return haxe_ui_util_Variant.fromFloat(value);
	}
	,__class__: haxe_ui_components__$HorizontalScroll_PosFromCoord
});
var haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._HorizontalScroll.ApplyPageFromCoord"] = haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord;
haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord.__name__ = "haxe.ui.components._HorizontalScroll.ApplyPageFromCoord";
haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(pos) {
		var p = js_Boot.__cast(pos , haxe_ui_geom_Point);
		var scroll = js_Boot.__cast(this._component , haxe_ui_components_Scroll);
		var thumb = this._component.findComponent("scroll-thumb-button");
		if(p.x < thumb.get_screenLeft()) {
			var _g = scroll;
			_g.set_pos(_g.get_pos() - scroll.get_pageSize());
		} else if(p.x > thumb.get_screenLeft() + thumb.get_width()) {
			var _g = scroll;
			_g.set_pos(_g.get_pos() + scroll.get_pageSize());
		}
		return null;
	}
	,__class__: haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord
});
var haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._HorizontalScroll.HorizontalScrollLayout"] = haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout;
haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout.__name__ = "haxe.ui.components._HorizontalScroll.HorizontalScrollLayout";
haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		var scroll = js_Boot.__cast(this.get_component() , haxe_ui_components_Scroll);
		var thumb = this.get_component().findComponent("scroll-thumb-button");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var ucx = this.get_usableWidth();
			var thumbWidth = scroll.get_pageSize() / m * ucx;
			if(thumbWidth < this.get_innerHeight()) {
				thumbWidth = this.get_innerHeight();
			} else if(thumbWidth > ucx) {
				thumbWidth = ucx;
			}
			if(thumbWidth > 0 && isNaN(thumbWidth) == false) {
				thumb.set_width(thumbWidth);
			}
		}
	}
	,repositionChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.repositionChildren.call(this);
		var deinc = this.get_component().findComponent("scroll-deinc-button");
		var inc = this.get_component().findComponent("scroll-inc-button");
		if(inc != null && this.hidden(inc) == false) {
			inc.set_left(this.get_component().get_width() - inc.get_width() - this.get_paddingRight());
		}
		var scroll = js_Boot.__cast(this.get_component() , haxe_ui_components_Scroll);
		var thumb = this.get_component().findComponent("scroll-thumb-button");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var u = this.get_usableWidth();
			u -= thumb.get_componentWidth();
			var x = (scroll.get_pos() - scroll.get_min()) / m * u;
			x += this.get_paddingLeft();
			if(deinc != null && this.hidden(deinc) == false) {
				x += deinc.get_width() + this.get_horizontalSpacing();
			}
			thumb.set_left(x);
			thumb.set_top(Math.round(thumb.get_top()));
		}
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		var deinc = this.get_component().findComponent("scroll-deinc-button");
		var inc = this.get_component().findComponent("scroll-inc-button");
		if(deinc != null && this.hidden(deinc) == false) {
			ucx -= deinc.get_width() + this.get_horizontalSpacing();
		}
		if(inc != null && this.hidden(inc) == false) {
			ucx -= inc.get_width() + this.get_horizontalSpacing();
		}
		return ucx;
	}
	,__class__: haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout
});
var haxe_ui_components_Slider = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.Slider"] = haxe_ui_components_Slider;
haxe_ui_components_Slider.__name__ = "haxe.ui.components.Slider";
haxe_ui_components_Slider.__interfaces__ = [haxe_ui_core_IDirectionalComponent];
haxe_ui_components_Slider.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_Slider.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	posFromCoord: function(coord) {
		return haxe_ui_util_Variant.toFloat(this.behaviours.call("posFromCoord",coord));
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("min",haxe_ui_components__$Slider_MinBehaviour,haxe_ui_util_Variant.fromFloat(0));
		this.behaviours.register("max",haxe_ui_components__$Slider_MaxBehaviour,haxe_ui_util_Variant.fromFloat(100));
		this.behaviours.register("precision",haxe_ui_behaviours_DefaultBehaviour,null);
		this.behaviours.register("start",haxe_ui_components__$Slider_StartBehaviour,null);
		this.behaviours.register("end",haxe_ui_components__$Slider_EndBehaviour,haxe_ui_util_Variant.fromFloat(0));
		this.behaviours.register("pos",haxe_ui_components__$Slider_PosBehaviour);
		this.behaviours.register("posFromCoord",haxe_ui_components__$Slider_PosFromCoord);
	}
	,get_min: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("min"));
	}
	,set_min: function(value) {
		this.behaviours.set("min",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"min");
		return value;
	}
	,get_max: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("max"));
	}
	,set_max: function(value) {
		this.behaviours.set("max",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"max");
		return value;
	}
	,get_precision: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("precision"));
	}
	,set_precision: function(value) {
		this.behaviours.set("precision",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"precision");
		return value;
	}
	,get_start: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("start"));
	}
	,set_start: function(value) {
		this.behaviours.set("start",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"start");
		return value;
	}
	,get_end: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("end"));
	}
	,set_end: function(value) {
		this.behaviours.set("end",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"end");
		return value;
	}
	,get_pos: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("pos"));
	}
	,set_pos: function(value) {
		this.behaviours.set("pos",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"value");
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pos");
		return value;
	}
	,get_value: function() {
		return this.get_pos();
	}
	,set_value: function(value) {
		this.set_pos(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pos");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		c.set_min(this.get_min());
		c.set_max(this.get_max());
		if(this.get_precision() != null) {
			c.set_precision(this.get_precision());
		}
		if(this.get_start() != null) {
			c.set_start(this.get_start());
		}
		c.set_end(this.get_end());
		c.set_pos(this.get_pos());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Slider();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_components_SliderBuilder;
	}
	,__class__: haxe_ui_components_Slider
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_pos:"set_pos",get_pos:"get_pos",set_end:"set_end",get_end:"get_end",set_start:"set_start",get_start:"get_start",set_precision:"set_precision",get_precision:"get_precision",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min"})
});
var haxe_ui_components_HorizontalSlider = function() {
	haxe_ui_components_Slider.call(this);
};
$hxClasses["haxe.ui.components.HorizontalSlider"] = haxe_ui_components_HorizontalSlider;
haxe_ui_components_HorizontalSlider.__name__ = "haxe.ui.components.HorizontalSlider";
haxe_ui_components_HorizontalSlider.__super__ = haxe_ui_components_Slider;
haxe_ui_components_HorizontalSlider.prototype = $extend(haxe_ui_components_Slider.prototype,{
	registerComposite: function() {
		haxe_ui_components_Slider.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_components_HorizontalSliderLayout;
		this._compositeBuilderClass = haxe_ui_components__$HorizontalSlider_Builder;
	}
	,registerBehaviours: function() {
		haxe_ui_components_Slider.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Slider.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_HorizontalSlider();
	}
	,__class__: haxe_ui_components_HorizontalSlider
});
var haxe_ui_components_HorizontalSliderLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components.HorizontalSliderLayout"] = haxe_ui_components_HorizontalSliderLayout;
haxe_ui_components_HorizontalSliderLayout.__name__ = "haxe.ui.components.HorizontalSliderLayout";
haxe_ui_components_HorizontalSliderLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components_HorizontalSliderLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.repositionChildren.call(this);
		var range = this.findComponent(null,haxe_ui_components_Range);
		var rangeValue = range.findComponent("range-value");
		var startThumb = this.findComponent("start-thumb");
		var endThumb = this.findComponent("end-thumb");
		if(startThumb != null) {
			startThumb.set_left(range.get_left() + rangeValue.get_left() - startThumb.get_width() / 2);
		}
		endThumb.set_left(range.get_left() + rangeValue.get_left() + rangeValue.get_width() - endThumb.get_width() / 2);
	}
	,__class__: haxe_ui_components_HorizontalSliderLayout
});
var haxe_ui_components_SliderBuilder = function(component) {
	haxe_ui_core_CompositeBuilder.call(this,component);
};
$hxClasses["haxe.ui.components.SliderBuilder"] = haxe_ui_components_SliderBuilder;
haxe_ui_components_SliderBuilder.__name__ = "haxe.ui.components.SliderBuilder";
haxe_ui_components_SliderBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components_SliderBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	create: function() {
		if(this._component.findComponent("range") == null) {
			var v = this.createValueComponent();
			v.scriptAccess = false;
			v.set_id("range");
			v.addClass("slider-value");
			v.set_start(v.set_end(0));
			this._component.addComponent(v);
		}
		this.createThumb("end-thumb");
	}
	,getStartOffset: function() {
		return 0;
	}
	,createValueComponent: function() {
		return null;
	}
	,createThumb: function(id) {
		if(this._component.findComponent(id) != null) {
			return;
		}
		var b = new haxe_ui_components_Button();
		b.scriptAccess = false;
		b.set_id(id);
		b.addClass(id);
		b.set_remainPressed(true);
		this._component.addComponent(b);
		this._component.registerInternalEvents(haxe_ui_components__$Slider_Events,true);
	}
	,__class__: haxe_ui_components_SliderBuilder
});
var haxe_ui_components__$HorizontalSlider_Builder = function(slider) {
	haxe_ui_components_SliderBuilder.call(this,slider);
	this._slider = slider;
};
$hxClasses["haxe.ui.components._HorizontalSlider.Builder"] = haxe_ui_components__$HorizontalSlider_Builder;
haxe_ui_components__$HorizontalSlider_Builder.__name__ = "haxe.ui.components._HorizontalSlider.Builder";
haxe_ui_components__$HorizontalSlider_Builder.__super__ = haxe_ui_components_SliderBuilder;
haxe_ui_components__$HorizontalSlider_Builder.prototype = $extend(haxe_ui_components_SliderBuilder.prototype,{
	_slider: null
	,createValueComponent: function() {
		return new haxe_ui_components_HorizontalRange();
	}
	,getStartOffset: function() {
		var start = 0;
		if(this._slider.get_start() != null) {
			start = this._slider.get_start();
		}
		return start;
	}
	,__class__: haxe_ui_components__$HorizontalSlider_Builder
});
var haxe_ui_components_Image = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.components.Image"] = haxe_ui_components_Image;
haxe_ui_components_Image.__name__ = "haxe.ui.components.Image";
haxe_ui_components_Image.__super__ = haxe_ui_core_Component;
haxe_ui_components_Image.prototype = $extend(haxe_ui_core_Component.prototype,{
	registerComposite: function() {
		haxe_ui_core_Component.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_components__$Image_ImageLayout;
		this._compositeBuilderClass = haxe_ui_components__$Image_Builder;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("resource",haxe_ui_components__$Image_ResourceBehaviour);
		this.behaviours.register("scaleMode",haxe_ui_behaviours_InvalidatingBehaviour,haxe_ui_util_Variant.fromString("fill"));
		this.behaviours.register("imageHorizontalAlign",haxe_ui_behaviours_InvalidatingBehaviour,haxe_ui_util_Variant.fromString("center"));
		this.behaviours.register("imageVerticalAlign",haxe_ui_behaviours_InvalidatingBehaviour,haxe_ui_util_Variant.fromString("center"));
		this.behaviours.register("originalWidth",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("originalHeight",haxe_ui_behaviours_DefaultBehaviour);
	}
	,get_resource: function() {
		return this.behaviours.get("resource");
	}
	,set_resource: function(value) {
		this.behaviours.set("resource",value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"value");
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"resource");
		return value;
	}
	,get_scaleMode: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("scaleMode"));
	}
	,set_scaleMode: function(value) {
		this.behaviours.set("scaleMode",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"scaleMode");
		return value;
	}
	,get_imageHorizontalAlign: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("imageHorizontalAlign"));
	}
	,set_imageHorizontalAlign: function(value) {
		this.behaviours.set("imageHorizontalAlign",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"imageHorizontalAlign");
		return value;
	}
	,get_imageVerticalAlign: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("imageVerticalAlign"));
	}
	,set_imageVerticalAlign: function(value) {
		this.behaviours.set("imageVerticalAlign",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"imageVerticalAlign");
		return value;
	}
	,get_originalWidth: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("originalWidth"));
	}
	,set_originalWidth: function(value) {
		this.behaviours.set("originalWidth",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"originalWidth");
		return value;
	}
	,get_originalHeight: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("originalHeight"));
	}
	,set_originalHeight: function(value) {
		this.behaviours.set("originalHeight",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"originalHeight");
		return value;
	}
	,get_value: function() {
		return haxe_ui_util_Variant.toDynamic(this.get_resource());
	}
	,set_value: function(value) {
		this.set_resource(haxe_ui_util_Variant.fromDynamic(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"resource");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if(this.get_resource() != null) {
			c.set_resource(this.get_resource());
		}
		if(this.get_scaleMode() != null) {
			c.set_scaleMode(this.get_scaleMode());
		}
		if(this.get_imageHorizontalAlign() != null) {
			c.set_imageHorizontalAlign(this.get_imageHorizontalAlign());
		}
		if(this.get_imageVerticalAlign() != null) {
			c.set_imageVerticalAlign(this.get_imageVerticalAlign());
		}
		c.set_originalWidth(this.get_originalWidth());
		c.set_originalHeight(this.get_originalHeight());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Image();
	}
	,__class__: haxe_ui_components_Image
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_originalHeight:"set_originalHeight",get_originalHeight:"get_originalHeight",set_originalWidth:"set_originalWidth",get_originalWidth:"get_originalWidth",set_imageVerticalAlign:"set_imageVerticalAlign",get_imageVerticalAlign:"get_imageVerticalAlign",set_imageHorizontalAlign:"set_imageHorizontalAlign",get_imageHorizontalAlign:"get_imageHorizontalAlign",set_scaleMode:"set_scaleMode",get_scaleMode:"get_scaleMode",set_resource:"set_resource",get_resource:"get_resource"})
});
var haxe_ui_components__$Image_ImageLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._Image.ImageLayout"] = haxe_ui_components__$Image_ImageLayout;
haxe_ui_components__$Image_ImageLayout.__name__ = "haxe.ui.components._Image.ImageLayout";
haxe_ui_components__$Image_ImageLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$Image_ImageLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	get_imageScaleMode: function() {
		return (js_Boot.__cast(this._component , haxe_ui_components_Image)).get_scaleMode();
	}
	,get_imageHorizontalAlign: function() {
		return (js_Boot.__cast(this._component , haxe_ui_components_Image)).get_imageHorizontalAlign();
	}
	,get_imageVerticalAlign: function() {
		return (js_Boot.__cast(this._component , haxe_ui_components_Image)).get_imageVerticalAlign();
	}
	,resizeChildren: function() {
		if(this.get_component().hasImageDisplay()) {
			var image = js_Boot.__cast(this._component , haxe_ui_components_Image);
			var imageDisplay = image.getImageDisplay();
			var maxWidth = this.get_usableSize().width;
			var maxHeight = this.get_usableSize().height;
			if(this.get_component().get_autoWidth() == true) {
				maxWidth = -1;
			}
			if(this._component.get_autoHeight() == true) {
				maxHeight = -1;
			}
			var scaleW = maxWidth != -1 ? maxWidth / image.get_originalWidth() : 1;
			var scaleH = maxHeight != -1 ? maxHeight / image.get_originalHeight() : 1;
			if(this.get_imageScaleMode() != "fill") {
				var scale;
				switch(this.get_imageScaleMode()) {
				case "fitheight":
					scale = scaleH;
					break;
				case "fitinside":
					scale = scaleW < scaleH ? scaleW : scaleH;
					break;
				case "fitoutside":
					scale = scaleW > scaleH ? scaleW : scaleH;
					break;
				case "fitwidth":
					scale = scaleW;
					break;
				default:
					scale = 1;
				}
				imageDisplay.set_imageWidth(image.get_originalWidth() * scale);
				imageDisplay.set_imageHeight(image.get_originalHeight() * scale);
			} else {
				imageDisplay.set_imageWidth(image.get_originalWidth() * scaleW);
				imageDisplay.set_imageHeight(image.get_originalHeight() * scaleH);
			}
		}
	}
	,repositionChildren: function() {
		if(this.get_component().hasImageDisplay()) {
			var image = js_Boot.__cast(this._component , haxe_ui_components_Image);
			var imageDisplay = this._component.getImageDisplay();
			switch(image.get_imageHorizontalAlign()) {
			case "center":
				imageDisplay.set_left((this._component.get_componentWidth() - imageDisplay.get_imageWidth()) / 2);
				break;
			case "left":
				imageDisplay.set_left(this.get_paddingLeft());
				break;
			case "right":
				imageDisplay.set_left(this._component.get_componentWidth() - imageDisplay.get_imageWidth() - this.get_paddingRight());
				break;
			}
			switch(image.get_imageVerticalAlign()) {
			case "bottom":
				imageDisplay.set_top(this._component.get_componentHeight() - imageDisplay.get_imageHeight() - this.get_paddingBottom());
				break;
			case "center":
				imageDisplay.set_top((this._component.get_componentHeight() - imageDisplay.get_imageHeight()) / 2);
				break;
			case "top":
				imageDisplay.set_top(this.get_paddingTop());
				break;
			}
		}
	}
	,calcAutoSize: function(exclusions) {
		var size = haxe_ui_layouts_DefaultLayout.prototype.calcAutoSize.call(this,exclusions);
		if(this.get_component().hasImageDisplay()) {
			size.width += this.get_component().getImageDisplay().get_imageWidth();
			size.height += this.get_component().getImageDisplay().get_imageHeight();
		}
		return size;
	}
	,refresh: function() {
		haxe_ui_layouts_DefaultLayout.prototype.refresh.call(this);
		this.updateClipRect();
	}
	,updateClipRect: function() {
		if(this.get_component().hasImageDisplay()) {
			var usz = this.get_usableSize();
			var imageDisplay = this.get_component().getImageDisplay();
			var rc = imageDisplay.get_imageClipRect();
			if(imageDisplay.get_imageWidth() > usz.width || imageDisplay.get_imageHeight() > usz.height) {
				if(rc == null) {
					rc = new haxe_ui_geom_Rectangle();
				}
				rc.top = this.get_paddingLeft();
				rc.left = this.get_paddingTop();
				rc.width = usz.width;
				rc.height = usz.height;
			} else {
				rc = null;
			}
			imageDisplay.set_imageClipRect(rc);
		}
	}
	,__class__: haxe_ui_components__$Image_ImageLayout
	,__properties__: $extend(haxe_ui_layouts_DefaultLayout.prototype.__properties__,{get_imageVerticalAlign:"get_imageVerticalAlign",get_imageHorizontalAlign:"get_imageHorizontalAlign",get_imageScaleMode:"get_imageScaleMode"})
});
var haxe_ui_components__$Image_ResourceBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Image.ResourceBehaviour"] = haxe_ui_components__$Image_ResourceBehaviour;
haxe_ui_components__$Image_ResourceBehaviour.__name__ = "haxe.ui.components._Image.ResourceBehaviour";
haxe_ui_components__$Image_ResourceBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Image_ResourceBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var _gthis = this;
		if(this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) {
			this._component.removeImageDisplay();
			this._component.invalidateComponent();
			return;
		}
		var imageLoader = new haxe_ui_util_ImageLoader(this._value);
		imageLoader.load(function(imageInfo) {
			if(imageInfo != null) {
				if(_gthis._value == null || haxe_ui_util_Variant.get_isNull(_gthis._value)) {
					_gthis._component.removeImageDisplay();
					_gthis._component.invalidateComponent();
					return;
				}
				var image = js_Boot.__cast(_gthis._component , haxe_ui_components_Image);
				var display = image.getImageDisplay();
				if(display != null) {
					display.set_imageInfo(imageInfo);
					image.set_originalWidth(imageInfo.width);
					image.set_originalHeight(imageInfo.height);
					if(image.autoSize() == true && image.parentComponent != null) {
						var _this = image.parentComponent;
						if(!(_this._layout == null || _this._layoutLocked == true)) {
							_this.invalidateComponent("layout");
						}
					}
					image.invalidateComponent();
					display.validateComponent();
				}
			}
		});
	}
	,__class__: haxe_ui_components__$Image_ResourceBehaviour
});
var haxe_ui_components__$Image_Builder = function(image) {
	haxe_ui_core_CompositeBuilder.call(this,image);
	this._image = image;
};
$hxClasses["haxe.ui.components._Image.Builder"] = haxe_ui_components__$Image_Builder;
haxe_ui_components__$Image_Builder.__name__ = "haxe.ui.components._Image.Builder";
haxe_ui_components__$Image_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$Image_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_image: null
	,applyStyle: function(style) {
		if(style.resource != null) {
			this._image.set_resource(haxe_ui_util_Variant.fromString(style.resource));
		}
	}
	,__class__: haxe_ui_components__$Image_Builder
});
var haxe_ui_components_Label = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.components.Label"] = haxe_ui_components_Label;
haxe_ui_components_Label.__name__ = "haxe.ui.components.Label";
haxe_ui_components_Label.__super__ = haxe_ui_core_Component;
haxe_ui_components_Label.prototype = $extend(haxe_ui_core_Component.prototype,{
	registerComposite: function() {
		haxe_ui_core_Component.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_components__$Label_Builder;
		this._defaultLayoutClass = haxe_ui_components__$Label_LabelLayout;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("text",haxe_ui_components__$Label_TextBehaviour);
		this.behaviours.register("htmlText",haxe_ui_components__$Label_HtmlTextBehaviour);
	}
	,get_htmlText: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("htmlText"));
	}
	,set_htmlText: function(value) {
		this.behaviours.set("htmlText",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"htmlText");
		return value;
	}
	,get_value: function() {
		return this.get_text();
	}
	,set_value: function(value) {
		this.set_text(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"text");
		return value;
	}
	,get_textAlign: function() {
		if(this.customStyle.textAlign != null) {
			return this.customStyle.textAlign;
		}
		if(this.get_style() == null || this.get_style().textAlign == null) {
			return null;
		}
		return this.get_style().textAlign;
	}
	,set_textAlign: function(value) {
		if(this.customStyle.textAlign == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		this.customStyle.textAlign = value;
		this.invalidateComponent("style");
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout");
		}
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if(this.get_htmlText() != null) {
			c.set_htmlText(this.get_htmlText());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Label();
	}
	,__class__: haxe_ui_components_Label
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText"})
});
var haxe_ui_components__$Label_LabelLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._Label.LabelLayout"] = haxe_ui_components__$Label_LabelLayout;
haxe_ui_components__$Label_LabelLayout.__name__ = "haxe.ui.components._Label.LabelLayout";
haxe_ui_components__$Label_LabelLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$Label_LabelLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	resizeChildren: function() {
		if(this.get_component().get_autoWidth() == false) {
			this.get_component().getTextDisplay().set_width(this.get_component().get_componentWidth() - this.get_paddingLeft() - this.get_paddingRight());
			this.get_component().getTextDisplay().set_wordWrap(true);
		} else {
			this.get_component().getTextDisplay().set_width(this.get_component().getTextDisplay().get_textWidth());
		}
		if(this.get_component().get_autoHeight() == true) {
			this.get_component().getTextDisplay().set_height(this.get_component().getTextDisplay().get_textHeight());
		} else {
			this.get_component().getTextDisplay().set_height(this.get_component().get_height());
		}
	}
	,repositionChildren: function() {
		if(this.get_component().hasTextDisplay() == true) {
			this.get_component().getTextDisplay().set_left(this.get_paddingLeft());
			this.get_component().getTextDisplay().set_top(this.get_paddingTop());
		}
	}
	,calcAutoSize: function(exclusions) {
		var size = haxe_ui_layouts_DefaultLayout.prototype.calcAutoSize.call(this,exclusions);
		if(this.get_component().hasTextDisplay() == true) {
			size.width += this.get_component().getTextDisplay().get_textWidth();
			size.height += this.get_component().getTextDisplay().get_textHeight();
		}
		return size;
	}
	,textAlign: function(child) {
		if(child == null || child.get_style() == null || child.get_style().textAlign == null) {
			return "left";
		}
		return child.get_style().textAlign;
	}
	,__class__: haxe_ui_components__$Label_LabelLayout
});
var haxe_ui_components__$Label_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Label.TextBehaviour"] = haxe_ui_components__$Label_TextBehaviour;
haxe_ui_components__$Label_TextBehaviour.__name__ = "haxe.ui.components._Label.TextBehaviour";
haxe_ui_components__$Label_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Label_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		if(this._component.getTextDisplay().get_textStyle() != this._component.get_style()) {
			var _this = this._component;
			var force = true;
			if(force == null) {
				force = false;
			}
			_this.invalidateComponent("style");
			if(force == true) {
				_this._style = null;
			}
		}
		this._component.getTextDisplay().set_text("" + (this._value == null ? "null" : haxe_ui_util_Variant.toString(this._value)));
	}
	,__class__: haxe_ui_components__$Label_TextBehaviour
});
var haxe_ui_components__$Label_HtmlTextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Label.HtmlTextBehaviour"] = haxe_ui_components__$Label_HtmlTextBehaviour;
haxe_ui_components__$Label_HtmlTextBehaviour.__name__ = "haxe.ui.components._Label.HtmlTextBehaviour";
haxe_ui_components__$Label_HtmlTextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Label_HtmlTextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		this._component.getTextDisplay().set_htmlText("" + (this._value == null ? "null" : haxe_ui_util_Variant.toString(this._value)));
	}
	,__class__: haxe_ui_components__$Label_HtmlTextBehaviour
});
var haxe_ui_components__$Label_Builder = function(label) {
	haxe_ui_core_CompositeBuilder.call(this,label);
	this._label = label;
};
$hxClasses["haxe.ui.components._Label.Builder"] = haxe_ui_components__$Label_Builder;
haxe_ui_components__$Label_Builder.__name__ = "haxe.ui.components._Label.Builder";
haxe_ui_components__$Label_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$Label_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_label: null
	,applyStyle: function(style) {
		if(this._label.hasTextDisplay() == true) {
			this._label.getTextDisplay().set_textStyle(style);
		}
	}
	,__class__: haxe_ui_components__$Label_Builder
});
var haxe_ui_components_NumberStepper = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.NumberStepper"] = haxe_ui_components_NumberStepper;
haxe_ui_components_NumberStepper.__name__ = "haxe.ui.components.NumberStepper";
haxe_ui_components_NumberStepper.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_NumberStepper.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("pos",haxe_ui_components__$NumberStepper_PosBehaviour,haxe_ui_util_Variant.fromFloat(0));
		this.behaviours.register("step",haxe_ui_components__$NumberStepper_StepBehaviour,haxe_ui_util_Variant.fromFloat(1));
		this.behaviours.register("min",haxe_ui_components__$NumberStepper_MinBehaviour,null);
		this.behaviours.register("max",haxe_ui_components__$NumberStepper_MaxBehaviour,null);
		this.behaviours.register("precision",haxe_ui_components__$NumberStepper_PrecisionBehaviour,null);
	}
	,get_pos: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("pos"));
	}
	,set_pos: function(value) {
		this.behaviours.set("pos",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"value");
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pos");
		return value;
	}
	,get_step: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("step"));
	}
	,set_step: function(value) {
		this.behaviours.set("step",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"step");
		return value;
	}
	,get_min: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("min"));
	}
	,set_min: function(value) {
		this.behaviours.set("min",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"min");
		return value;
	}
	,get_max: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("max"));
	}
	,set_max: function(value) {
		this.behaviours.set("max",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"max");
		return value;
	}
	,get_precision: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("precision"));
	}
	,set_precision: function(value) {
		this.behaviours.set("precision",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"precision");
		return value;
	}
	,get_value: function() {
		return this.get_pos();
	}
	,set_value: function(value) {
		this.set_pos(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pos");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		c.set_pos(this.get_pos());
		c.set_step(this.get_step());
		if(this.get_min() != null) {
			c.set_min(this.get_min());
		}
		if(this.get_max() != null) {
			c.set_max(this.get_max());
		}
		if(this.get_precision() != null) {
			c.set_precision(this.get_precision());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_NumberStepper();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components__$NumberStepper_Events;
		this._compositeBuilderClass = haxe_ui_components__$NumberStepper_Builder;
		this._defaultLayoutClass = haxe_ui_layouts_HorizontalLayout;
	}
	,__class__: haxe_ui_components_NumberStepper
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_precision:"set_precision",get_precision:"get_precision",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_step:"set_step",get_step:"get_step",set_pos:"set_pos",get_pos:"get_pos"})
});
var haxe_ui_components__$NumberStepper_PosBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._NumberStepper.PosBehaviour"] = haxe_ui_components__$NumberStepper_PosBehaviour;
haxe_ui_components__$NumberStepper_PosBehaviour.__name__ = "haxe.ui.components._NumberStepper.PosBehaviour";
haxe_ui_components__$NumberStepper_PosBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$NumberStepper_PosBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var step = this._component.findComponent("stepper-step",haxe_ui_components_Stepper);
		var preciseValue = haxe_ui_util_Variant.toFloat(this._value);
		if(step.get_precision() != null) {
			var precision = step.get_precision();
			if(precision == null) {
				precision = 0;
			}
			preciseValue = Math.round(preciseValue * Math.pow(10,precision)) / Math.pow(10,precision);
		}
		var v = preciseValue;
		var min = step.get_min();
		var max = step.get_max();
		if(v == null || isNaN(v)) {
			preciseValue = min;
		} else {
			if(min != null && v < min) {
				v = min;
			} else if(max != null && v > max) {
				v = max;
			}
			preciseValue = v;
		}
		step.set_pos(preciseValue);
		var textfield = this._component.findComponent("stepper-textfield",haxe_ui_components_TextField);
		var value = haxe_ui_util_StringUtil.padDecimal(preciseValue,step.get_precision());
		textfield.set_text(value);
		var event = new haxe_ui_events_UIEvent("change");
		this._component.dispatch(event);
	}
	,__class__: haxe_ui_components__$NumberStepper_PosBehaviour
});
var haxe_ui_components__$NumberStepper_StepBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._NumberStepper.StepBehaviour"] = haxe_ui_components__$NumberStepper_StepBehaviour;
haxe_ui_components__$NumberStepper_StepBehaviour.__name__ = "haxe.ui.components._NumberStepper.StepBehaviour";
haxe_ui_components__$NumberStepper_StepBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$NumberStepper_StepBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		var step = this._component.findComponent("stepper-step",haxe_ui_components_Stepper);
		return haxe_ui_util_Variant.fromFloat(step.get_step());
	}
	,set: function(value) {
		var step = this._component.findComponent("stepper-step",haxe_ui_components_Stepper);
		step.set_step(haxe_ui_util_Variant.toFloat(value));
	}
	,__class__: haxe_ui_components__$NumberStepper_StepBehaviour
});
var haxe_ui_components__$NumberStepper_MinBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._NumberStepper.MinBehaviour"] = haxe_ui_components__$NumberStepper_MinBehaviour;
haxe_ui_components__$NumberStepper_MinBehaviour.__name__ = "haxe.ui.components._NumberStepper.MinBehaviour";
haxe_ui_components__$NumberStepper_MinBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$NumberStepper_MinBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		var step = this._component.findComponent("stepper-step",haxe_ui_components_Stepper);
		return haxe_ui_util_Variant.fromFloat(step.get_min());
	}
	,set: function(value) {
		var step = this._component.findComponent("stepper-step",haxe_ui_components_Stepper);
		step.set_min(haxe_ui_util_Variant.toFloat(value));
	}
	,__class__: haxe_ui_components__$NumberStepper_MinBehaviour
});
var haxe_ui_components__$NumberStepper_MaxBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._NumberStepper.MaxBehaviour"] = haxe_ui_components__$NumberStepper_MaxBehaviour;
haxe_ui_components__$NumberStepper_MaxBehaviour.__name__ = "haxe.ui.components._NumberStepper.MaxBehaviour";
haxe_ui_components__$NumberStepper_MaxBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$NumberStepper_MaxBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		var step = this._component.findComponent("stepper-step",haxe_ui_components_Stepper);
		return haxe_ui_util_Variant.fromFloat(step.get_max());
	}
	,set: function(value) {
		var step = this._component.findComponent("stepper-step",haxe_ui_components_Stepper);
		step.set_max(haxe_ui_util_Variant.toFloat(value));
	}
	,__class__: haxe_ui_components__$NumberStepper_MaxBehaviour
});
var haxe_ui_components__$NumberStepper_PrecisionBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._NumberStepper.PrecisionBehaviour"] = haxe_ui_components__$NumberStepper_PrecisionBehaviour;
haxe_ui_components__$NumberStepper_PrecisionBehaviour.__name__ = "haxe.ui.components._NumberStepper.PrecisionBehaviour";
haxe_ui_components__$NumberStepper_PrecisionBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$NumberStepper_PrecisionBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		var step = this._component.findComponent("stepper-step",haxe_ui_components_Stepper);
		return haxe_ui_util_Variant.fromFloat(step.get_precision());
	}
	,set: function(value) {
		var step = this._component.findComponent("stepper-step",haxe_ui_components_Stepper);
		step.set_precision(haxe_ui_util_Variant.toInt(value));
	}
	,__class__: haxe_ui_components__$NumberStepper_PrecisionBehaviour
});
var haxe_ui_components__$NumberStepper_Builder = function(stepper) {
	haxe_ui_core_CompositeBuilder.call(this,stepper);
	this._stepper = stepper;
};
$hxClasses["haxe.ui.components._NumberStepper.Builder"] = haxe_ui_components__$NumberStepper_Builder;
haxe_ui_components__$NumberStepper_Builder.__name__ = "haxe.ui.components._NumberStepper.Builder";
haxe_ui_components__$NumberStepper_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$NumberStepper_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_stepper: null
	,create: function() {
		this._stepper.addClass("textfield");
		var textfield = new haxe_ui_components_TextField();
		textfield.addClass("stepper-textfield");
		textfield.set_id("stepper-textfield");
		textfield.set_restrictChars("0-9\\-\\.\\,");
		this._stepper.addComponent(textfield);
		var step = new haxe_ui_components_Stepper();
		step.addClass("stepper-step");
		step.set_id("stepper-step");
		this._stepper.addComponent(step);
	}
	,applyStyle: function(style) {
		var textfield = this._stepper.findComponent(null,haxe_ui_components_TextField);
		if(textfield != null && (textfield.customStyle.color != style.color || textfield.customStyle.fontName != style.fontName || textfield.customStyle.fontSize != style.fontSize || textfield.customStyle.cursor != style.cursor || textfield.customStyle.textAlign != style.textAlign)) {
			textfield.customStyle.color = style.color;
			textfield.customStyle.fontName = style.fontName;
			textfield.customStyle.fontSize = style.fontSize;
			textfield.customStyle.cursor = style.cursor;
			textfield.customStyle.textAlign = style.textAlign;
			textfield.invalidateComponent("style");
		}
	}
	,__class__: haxe_ui_components__$NumberStepper_Builder
});
var haxe_ui_components__$NumberStepper_Events = function(stepper) {
	haxe_ui_events_Events.call(this,stepper);
	this._stepper = stepper;
};
$hxClasses["haxe.ui.components._NumberStepper.Events"] = haxe_ui_components__$NumberStepper_Events;
haxe_ui_components__$NumberStepper_Events.__name__ = "haxe.ui.components._NumberStepper.Events";
haxe_ui_components__$NumberStepper_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$NumberStepper_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_stepper: null
	,register: function() {
		if(!this.hasEvent("mousewheel",$bind(this,this.onMouseWheel))) {
			this.registerEvent("mousewheel",$bind(this,this.onMouseWheel));
		}
		if(!this._stepper.hasEvent("keydown",$bind(this,this.onKeyDown))) {
			this._stepper.registerEvent("keydown",$bind(this,this.onKeyDown));
		}
		var textfield = this._stepper.findComponent("stepper-textfield",haxe_ui_components_TextField);
		if(!textfield.hasEvent("keyup",$bind(this,this.onTextFieldKeyUp))) {
			textfield.registerEvent("keyup",$bind(this,this.onTextFieldKeyUp));
		}
		if(!textfield.hasEvent("focusin",$bind(this,this.onTextFieldFocusIn))) {
			textfield.registerEvent("focusin",$bind(this,this.onTextFieldFocusIn));
		}
		if(!textfield.hasEvent("focusout",$bind(this,this.onTextFieldFocusOut))) {
			textfield.registerEvent("focusout",$bind(this,this.onTextFieldFocusOut));
		}
		if(!textfield.hasEvent("change",$bind(this,this.onTextFieldChange))) {
			textfield.registerEvent("change",$bind(this,this.onTextFieldChange));
		}
		var step = this._stepper.findComponent("stepper-step",haxe_ui_components_Stepper);
		if(!step.hasEvent("change",$bind(this,this.onStepChange))) {
			step.registerEvent("change",$bind(this,this.onStepChange));
		}
		if(!step.hasEvent("mousedown",$bind(this,this.onStepMouseDown))) {
			step.registerEvent("mousedown",$bind(this,this.onStepMouseDown));
		}
	}
	,unregister: function() {
		this.unregisterEvent("mousewheel",$bind(this,this.onMouseWheel));
		this._stepper.unregisterEvent("keydown",$bind(this,this.onKeyDown));
		var textfield = this._stepper.findComponent("stepper-textfield",haxe_ui_components_TextField);
		textfield.unregisterEvent("keyup",$bind(this,this.onTextFieldKeyUp));
		textfield.unregisterEvent("focusin",$bind(this,this.onTextFieldFocusIn));
		textfield.unregisterEvent("focusout",$bind(this,this.onTextFieldFocusOut));
		textfield.unregisterEvent("change",$bind(this,this.onTextFieldChange));
		var step = this._stepper.findComponent("stepper-step",haxe_ui_components_Stepper);
		step.unregisterEvent("change",$bind(this,this.onStepChange));
		step.unregisterEvent("mousedown",$bind(this,this.onStepMouseDown));
	}
	,onKeyDown: function(event) {
		var step = this._stepper.findComponent("stepper-step",haxe_ui_components_Stepper);
		if(event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 107) {
			step.increment();
		}
		if(event.keyCode == 40 || event.keyCode == 37 || event.keyCode == 109) {
			step.deincrement();
		}
		if(event.keyCode == 36) {
			step.set_pos(step.get_min());
		}
		if(event.keyCode == 35) {
			step.set_pos(step.get_max());
		}
	}
	,onMouseWheel: function(event) {
		event.cancel();
		var textfield = this._stepper.findComponent("stepper-textfield",haxe_ui_components_TextField);
		textfield.set_focus(true);
		var step = this._stepper.findComponent("stepper-step",haxe_ui_components_Stepper);
		if(event.delta > 0) {
			step.increment();
		} else {
			step.deincrement();
		}
	}
	,onStepChange: function(event) {
		var step = this._stepper.findComponent("stepper-step",haxe_ui_components_Stepper);
		this._stepper.set_pos(step.get_pos());
	}
	,onStepMouseDown: function(event) {
		var textfield = this._stepper.findComponent("stepper-textfield",haxe_ui_components_TextField);
		textfield.set_focus(true);
	}
	,onTextFieldKeyUp: function(event) {
		if(event.keyCode == 13) {
			var textfield = this._stepper.findComponent("stepper-textfield",haxe_ui_components_TextField);
			textfield.set_focus(false);
		}
		event.cancel();
	}
	,onTextFieldFocusIn: function(event) {
		this._stepper.addClass(":active");
	}
	,onTextFieldFocusOut: function(event) {
		this._stepper.removeClass(":active");
		var textfield = this._stepper.findComponent("stepper-textfield",haxe_ui_components_TextField);
		if(textfield != null) {
			var tmp = this._stepper;
			var v = parseFloat(textfield.get_text());
			var min = this._stepper.get_min();
			var max = this._stepper.get_max();
			var tmp1;
			if(v == null || isNaN(v)) {
				tmp1 = min;
			} else {
				if(min != null && v < min) {
					v = min;
				} else if(max != null && v > max) {
					v = max;
				}
				tmp1 = v;
			}
			tmp.set_pos(tmp1);
			textfield.set_text(Std.string(this._stepper.get_pos()));
		} else {
			event.cancel();
		}
	}
	,onTextFieldChange: function(event) {
		var step = this._stepper.findComponent("stepper-step",haxe_ui_components_Stepper);
		var textfield = this._stepper.findComponent("stepper-textfield",haxe_ui_components_TextField);
		var lastChar = textfield.get_text().charAt(textfield.get_text().length - 1);
		var maxCappedVal = Math.min(parseFloat(textfield.get_text()),this._stepper.get_max());
		textfield.set_text(maxCappedVal == null ? "null" : "" + maxCappedVal);
		if(Std.parseInt(lastChar) == null) {
			var _g = textfield;
			_g.set_text(_g.get_text() + lastChar);
		}
	}
	,__class__: haxe_ui_components__$NumberStepper_Events
});
var haxe_ui_components_OptionBox = function() {
	haxe_ui_components_CheckBox.call(this);
};
$hxClasses["haxe.ui.components.OptionBox"] = haxe_ui_components_OptionBox;
haxe_ui_components_OptionBox.__name__ = "haxe.ui.components.OptionBox";
haxe_ui_components_OptionBox.__super__ = haxe_ui_components_CheckBox;
haxe_ui_components_OptionBox.prototype = $extend(haxe_ui_components_CheckBox.prototype,{
	registerComposite: function() {
		haxe_ui_components_CheckBox.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_components_OptionBoxBuilder;
	}
	,registerBehaviours: function() {
		haxe_ui_components_CheckBox.prototype.registerBehaviours.call(this);
		this.behaviours.register("componentGroup",haxe_ui_components__$OptionBox_GroupBehaviour,haxe_ui_util_Variant.fromString("defaultGroup"));
		this.behaviours.register("selected",haxe_ui_components__$OptionBox_SelectedBehaviour);
		this.behaviours.register("selectedOption",haxe_ui_components__$OptionBox_SelectedOptionBehaviour);
	}
	,get_componentGroup: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("componentGroup"));
	}
	,set_componentGroup: function(value) {
		this.behaviours.set("componentGroup",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"componentGroup");
		return value;
	}
	,get_selectedOption: function() {
		return haxe_ui_util_Variant.toComponent(this.behaviours.get("selectedOption"));
	}
	,set_selectedOption: function(value) {
		this.behaviours.set("selectedOption",haxe_ui_util_Variant.fromComponent(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedOption");
		return value;
	}
	,get_value: function() {
		return this.get_selected();
	}
	,set_value: function(value) {
		this.set_selected(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selected");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_CheckBox.prototype.cloneComponent.call(this);
		if(this.get_componentGroup() != null) {
			c.set_componentGroup(this.get_componentGroup());
		}
		if(this.get_selectedOption() != null) {
			c.set_selectedOption(this.get_selectedOption());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_OptionBox();
	}
	,__class__: haxe_ui_components_OptionBox
	,__properties__: $extend(haxe_ui_components_CheckBox.prototype.__properties__,{set_selectedOption:"set_selectedOption",get_selectedOption:"get_selectedOption",set_componentGroup:"set_componentGroup",get_componentGroup:"get_componentGroup"})
});
var haxe_ui_components__$OptionBox_GroupBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._OptionBox.GroupBehaviour"] = haxe_ui_components__$OptionBox_GroupBehaviour;
haxe_ui_components__$OptionBox_GroupBehaviour.__name__ = "haxe.ui.components._OptionBox.GroupBehaviour";
haxe_ui_components__$OptionBox_GroupBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$OptionBox_GroupBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		haxe_ui_components_OptionBoxGroups.get_instance().add(haxe_ui_util_Variant.toString(this._value),this._component);
	}
	,__class__: haxe_ui_components__$OptionBox_GroupBehaviour
});
var haxe_ui_components__$OptionBox_SelectedBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._OptionBox.SelectedBehaviour"] = haxe_ui_components__$OptionBox_SelectedBehaviour;
haxe_ui_components__$OptionBox_SelectedBehaviour.__name__ = "haxe.ui.components._OptionBox.SelectedBehaviour";
haxe_ui_components__$OptionBox_SelectedBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$OptionBox_SelectedBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var optionbox = js_Boot.__cast(this._component , haxe_ui_components_OptionBox);
		if(optionbox.get_componentGroup() != null && haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromBool(false))) {
			var arr = haxe_ui_components_OptionBoxGroups.get_instance().get(optionbox.get_componentGroup());
			var hasSelection = false;
			if(arr != null) {
				var _g = 0;
				while(_g < arr.length) {
					var option = arr[_g];
					++_g;
					if(option != this._component && option.get_selected() == true) {
						hasSelection = true;
						break;
					}
				}
			}
			if(hasSelection == false) {
				this._value = haxe_ui_util_Variant.fromBool(true);
				return;
			}
		}
		if(optionbox.get_componentGroup() != null && haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromBool(true))) {
			var arr = haxe_ui_components_OptionBoxGroups.get_instance().get(optionbox.get_componentGroup());
			if(arr != null) {
				var _g = 0;
				while(_g < arr.length) {
					var option = arr[_g];
					++_g;
					if(option != this._component) {
						option.set_selected(false);
					}
				}
			}
		}
		var valueComponent = this._component.findComponent("optionbox-value",haxe_ui_components_CheckBoxValue);
		if(valueComponent == null) {
			return;
		}
		valueComponent.createIcon();
		if(haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromBool(true))) {
			valueComponent.addClass(":selected");
			this._component.dispatch(new haxe_ui_events_UIEvent("change"));
		} else {
			valueComponent.removeClass(":selected");
		}
	}
	,__class__: haxe_ui_components__$OptionBox_SelectedBehaviour
});
var haxe_ui_components__$OptionBox_SelectedOptionBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._OptionBox.SelectedOptionBehaviour"] = haxe_ui_components__$OptionBox_SelectedOptionBehaviour;
haxe_ui_components__$OptionBox_SelectedOptionBehaviour.__name__ = "haxe.ui.components._OptionBox.SelectedOptionBehaviour";
haxe_ui_components__$OptionBox_SelectedOptionBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$OptionBox_SelectedOptionBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	get: function() {
		var optionbox = js_Boot.__cast(this._component , haxe_ui_components_OptionBox);
		var arr = haxe_ui_components_OptionBoxGroups.get_instance().get(optionbox.get_componentGroup());
		var selectionOption = null;
		if(arr != null) {
			var _g = 0;
			while(_g < arr.length) {
				var test = arr[_g];
				++_g;
				if(test.get_selected() == true) {
					selectionOption = test;
					break;
				}
			}
		}
		return haxe_ui_util_Variant.fromComponent(selectionOption);
	}
	,__class__: haxe_ui_components__$OptionBox_SelectedOptionBehaviour
});
var haxe_ui_components_OptionBoxBuilder = function(checkbox) {
	haxe_ui_components_CheckBoxBuilder.call(this,checkbox);
};
$hxClasses["haxe.ui.components.OptionBoxBuilder"] = haxe_ui_components_OptionBoxBuilder;
haxe_ui_components_OptionBoxBuilder.__name__ = "haxe.ui.components.OptionBoxBuilder";
haxe_ui_components_OptionBoxBuilder.__super__ = haxe_ui_components_CheckBoxBuilder;
haxe_ui_components_OptionBoxBuilder.prototype = $extend(haxe_ui_components_CheckBoxBuilder.prototype,{
	get_cssName: function() {
		return "optionbox";
	}
	,__class__: haxe_ui_components_OptionBoxBuilder
});
var haxe_ui_components_OptionBoxGroups = function() {
	this._groups = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.components.OptionBoxGroups"] = haxe_ui_components_OptionBoxGroups;
haxe_ui_components_OptionBoxGroups.__name__ = "haxe.ui.components.OptionBoxGroups";
haxe_ui_components_OptionBoxGroups.__properties__ = {get_instance:"get_instance"};
haxe_ui_components_OptionBoxGroups.get_instance = function() {
	if(haxe_ui_components_OptionBoxGroups._instance == null) {
		haxe_ui_components_OptionBoxGroups._instance = new haxe_ui_components_OptionBoxGroups();
	}
	return haxe_ui_components_OptionBoxGroups._instance;
};
haxe_ui_components_OptionBoxGroups.prototype = {
	_groups: null
	,get: function(name) {
		return this._groups.h[name];
	}
	,set: function(name,options) {
		this._groups.h[name] = options;
	}
	,add: function(name,optionbox) {
		var arr = this.get(name);
		if(arr == null) {
			arr = [];
		}
		if(arr.indexOf(optionbox) == -1) {
			arr.push(optionbox);
		}
		this.set(name,arr);
	}
	,__class__: haxe_ui_components_OptionBoxGroups
};
var haxe_ui_components__$Progress_Pos = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Progress.Pos"] = haxe_ui_components__$Progress_Pos;
haxe_ui_components__$Progress_Pos.__name__ = "haxe.ui.components._Progress.Pos";
haxe_ui_components__$Progress_Pos.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$Progress_Pos.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		var progress = js_Boot.__cast(this._component , haxe_ui_components_Progress);
		return haxe_ui_util_Variant.fromFloat(progress.get_end());
	}
	,set: function(value) {
		var progress = js_Boot.__cast(this._component , haxe_ui_components_Progress);
		progress.set_end(haxe_ui_util_Variant.toFloat(value));
	}
	,__class__: haxe_ui_components__$Progress_Pos
});
var haxe_ui_components__$Progress_Min = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Progress.Min"] = haxe_ui_components__$Progress_Min;
haxe_ui_components__$Progress_Min.__name__ = "haxe.ui.components._Progress.Min";
haxe_ui_components__$Progress_Min.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$Progress_Min.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	set: function(value) {
		var progress = js_Boot.__cast(this._component , haxe_ui_components_Progress);
		progress.set_start(haxe_ui_util_Variant.toFloat(value));
	}
	,__class__: haxe_ui_components__$Progress_Min
});
var haxe_ui_components__$Progress_Indeterminate = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Progress.Indeterminate"] = haxe_ui_components__$Progress_Indeterminate;
haxe_ui_components__$Progress_Indeterminate.__name__ = "haxe.ui.components._Progress.Indeterminate";
haxe_ui_components__$Progress_Indeterminate.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_components__$Progress_Indeterminate.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	get: function() {
		return this._value;
	}
	,set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		haxe_ui_behaviours_ValueBehaviour.prototype.set.call(this,value);
		if(haxe_ui_util_Variant.eq(value,haxe_ui_util_Variant.fromBool(false))) {
			this._component.removeClass(":indeterminate");
		} else {
			this._component.addClass(":indeterminate");
		}
	}
	,detatch: function() {
		haxe_ui_behaviours_ValueBehaviour.prototype.detatch.call(this);
		this._component.removeClass(":indeterminate");
	}
	,__class__: haxe_ui_components__$Progress_Indeterminate
});
var haxe_ui_components__$Range_RangeMin = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Range.RangeMin"] = haxe_ui_components__$Range_RangeMin;
haxe_ui_components__$Range_RangeMin.__name__ = "haxe.ui.components._Range.RangeMin";
haxe_ui_components__$Range_RangeMin.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Range_RangeMin.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var range = js_Boot.__cast(this._component , haxe_ui_components_Range);
		range.set_min(haxe_ui_util_Variant.toFloat(this._value));
		if(range.get_start() < range.get_min()) {
			range.set_start(range.get_min());
		}
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
	}
	,__class__: haxe_ui_components__$Range_RangeMin
});
var haxe_ui_components__$Range_RangeMax = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Range.RangeMax"] = haxe_ui_components__$Range_RangeMax;
haxe_ui_components__$Range_RangeMax.__name__ = "haxe.ui.components._Range.RangeMax";
haxe_ui_components__$Range_RangeMax.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Range_RangeMax.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var range = js_Boot.__cast(this._component , haxe_ui_components_Range);
		range.set_max(haxe_ui_util_Variant.toFloat(this._value));
		if(range.get_end() > range.get_max()) {
			range.set_end(range.get_max());
		}
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
	}
	,__class__: haxe_ui_components__$Range_RangeMax
});
var haxe_ui_components__$Range_RangeStart = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Range.RangeStart"] = haxe_ui_components__$Range_RangeStart;
haxe_ui_components__$Range_RangeStart.__name__ = "haxe.ui.components._Range.RangeStart";
haxe_ui_components__$Range_RangeStart.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Range_RangeStart.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var range = js_Boot.__cast(this._component , haxe_ui_components_Range);
		if(this._value != null && haxe_ui_util_Variant.lt(this._value,haxe_ui_util_Variant.fromFloat(range.get_min()))) {
			this._value = haxe_ui_util_Variant.fromFloat(range.get_min());
		} else if(this._value != null && haxe_ui_util_Variant.gt(this._value,haxe_ui_util_Variant.fromFloat(range.get_max()))) {
			this._value = haxe_ui_util_Variant.fromFloat(range.get_max());
		}
		range.set_start(haxe_ui_util_Variant.toFloat(this._value));
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
		var changeEvent = new haxe_ui_events_UIEvent("change");
		this._component.dispatch(changeEvent);
	}
	,__class__: haxe_ui_components__$Range_RangeStart
});
var haxe_ui_components__$Range_RangeEnd = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Range.RangeEnd"] = haxe_ui_components__$Range_RangeEnd;
haxe_ui_components__$Range_RangeEnd.__name__ = "haxe.ui.components._Range.RangeEnd";
haxe_ui_components__$Range_RangeEnd.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Range_RangeEnd.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var range = js_Boot.__cast(this._component , haxe_ui_components_Range);
		if(this._value != null && haxe_ui_util_Variant.lt(this._value,haxe_ui_util_Variant.fromFloat(range.get_min()))) {
			this._value = haxe_ui_util_Variant.fromFloat(range.get_min());
		} else if(this._value != null && haxe_ui_util_Variant.gt(this._value,haxe_ui_util_Variant.fromFloat(range.get_max()))) {
			this._value = haxe_ui_util_Variant.fromFloat(range.get_max());
		}
		range.set_end(haxe_ui_util_Variant.toFloat(this._value));
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
		var changeEvent = new haxe_ui_events_UIEvent("change");
		this._component.dispatch(changeEvent);
	}
	,__class__: haxe_ui_components__$Range_RangeEnd
});
var haxe_ui_components__$Range_AllowInteraction = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Range.AllowInteraction"] = haxe_ui_components__$Range_AllowInteraction;
haxe_ui_components__$Range_AllowInteraction.__name__ = "haxe.ui.components._Range.AllowInteraction";
haxe_ui_components__$Range_AllowInteraction.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$Range_AllowInteraction.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		return haxe_ui_util_Variant.fromBool(this._component._internalEvents != null);
	}
	,set: function(value) {
		if(this._component.get_native() == true) {
			return;
		}
		if(haxe_ui_util_Variant.eq(value,haxe_ui_util_Variant.fromBool(true))) {
			this._component.registerInternalEvents(haxe_ui_components__$Range_Events);
		} else {
			this._component.unregisterInternalEvents();
		}
	}
	,__class__: haxe_ui_components__$Range_AllowInteraction
});
var haxe_ui_components__$Range_Events = function(range) {
	haxe_ui_events_Events.call(this,range);
	this._range = range;
	this.register();
};
$hxClasses["haxe.ui.components._Range.Events"] = haxe_ui_components__$Range_Events;
haxe_ui_components__$Range_Events.__name__ = "haxe.ui.components._Range.Events";
haxe_ui_components__$Range_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$Range_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_range: null
	,register: function() {
		this._range.registerEvent("mousedown",$bind(this,this.onMouseDown));
	}
	,unregister: function() {
		this._range.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
	}
	,onMouseDown: function(e) {
		var pt = new haxe_ui_geom_Point(e.get_localX(),e.get_localY());
		var pos = this._range.posFromCoord(pt);
		this.applyPos(pos);
		haxe_ui_core_Screen.get_instance().registerEvent("mouseup",$bind(this,this.onScreenMouseUp));
		haxe_ui_core_Screen.get_instance().registerEvent("mousemove",$bind(this,this.onScreenMouseMove));
	}
	,onScreenMouseUp: function(e) {
		haxe_ui_core_Screen.get_instance().unregisterEvent("mouseup",$bind(this,this.onScreenMouseUp));
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousemove",$bind(this,this.onScreenMouseMove));
	}
	,onScreenMouseMove: function(e) {
		var pt = new haxe_ui_geom_Point(e.screenX - this._range.get_screenLeft(),e.screenY - this._range.get_screenTop());
		var pos = this._range.posFromCoord(pt);
		this.applyPos(pos);
	}
	,applyPos: function(pos) {
		var precision = this._range.get_precision();
		if(precision == null) {
			precision = 0;
		}
		pos = Math.round(pos * Math.pow(10,precision)) / Math.pow(10,precision);
		if(this._range.get_step() > 0) {
			pos = Math.ceil(pos / this._range.get_step()) * this._range.get_step();
		}
		if(((this._range) instanceof haxe_ui_components_Progress)) {
			(js_Boot.__cast(this._range , haxe_ui_components_Progress)).set_pos(pos);
			return;
		}
		var d1 = this._range.get_end() - this._range.get_start();
		var d2 = pos - this._range.get_start();
		if(d2 < d1 / 2) {
			this._range.set_start(pos);
		} else if(d2 >= d1 / 2) {
			this._range.set_end(pos);
		} else if(pos > this._range.get_start()) {
			this._range.set_end(pos);
		} else if(pos < this._range.get_end()) {
			this._range.set_start(pos);
		}
	}
	,__class__: haxe_ui_components__$Range_Events
});
var haxe_ui_components__$Range_Builder = function(component) {
	haxe_ui_core_CompositeBuilder.call(this,component);
};
$hxClasses["haxe.ui.components._Range.Builder"] = haxe_ui_components__$Range_Builder;
haxe_ui_components__$Range_Builder.__name__ = "haxe.ui.components._Range.Builder";
haxe_ui_components__$Range_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$Range_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	create: function() {
		haxe_ui_core_CompositeBuilder.prototype.create.call(this);
		if(this._component.findComponent("${_component.cssName}-value") == null) {
			var v = new haxe_ui_core_Component();
			v.set_id("" + this._component.get_cssName() + "-value");
			v.addClass("" + this._component.get_cssName() + "-value",false);
			this._component.addComponent(v);
		}
	}
	,__class__: haxe_ui_components__$Range_Builder
});
var haxe_ui_components__$Scroll_Events = function(scroll) {
	haxe_ui_events_Events.call(this,scroll);
	this._scroll = scroll;
	this._deincButton = this._scroll.findComponent("scroll-deinc-button");
	this._incButton = this._scroll.findComponent("scroll-inc-button");
	this._thumb = this._scroll.findComponent("scroll-thumb-button");
};
$hxClasses["haxe.ui.components._Scroll.Events"] = haxe_ui_components__$Scroll_Events;
haxe_ui_components__$Scroll_Events.__name__ = "haxe.ui.components._Scroll.Events";
haxe_ui_components__$Scroll_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$Scroll_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_scroll: null
	,_deincButton: null
	,_incButton: null
	,_thumb: null
	,register: function() {
		if(this.hasEvent("mousedown",$bind(this,this.onMouseDown)) == false) {
			this.registerEvent("mousedown",$bind(this,this.onMouseDown));
		}
		if(this._deincButton != null && this._deincButton.hasEvent("click",$bind(this,this.onDeinc)) == false) {
			this._deincButton.registerEvent("click",$bind(this,this.onDeinc));
		}
		if(this._incButton != null && this._incButton.hasEvent("click",$bind(this,this.onInc)) == false) {
			this._incButton.registerEvent("click",$bind(this,this.onInc));
		}
		if(this._thumb != null && this._thumb.hasEvent("mousedown",$bind(this,this.onThumbMouseDown)) == false) {
			this._thumb.registerEvent("mousedown",$bind(this,this.onThumbMouseDown));
		}
	}
	,unregister: function() {
		this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
		if(this._deincButton != null) {
			this._deincButton.unregisterEvent("click",$bind(this,this.onDeinc));
		}
		if(this._incButton != null) {
			this._incButton.unregisterEvent("click",$bind(this,this.onInc));
		}
		if(this._thumb != null) {
			this._thumb.unregisterEvent("mousedown",$bind(this,this.onThumbMouseDown));
		}
	}
	,onMouseDown: function(event) {
		var componentOffset = this._scroll.getComponentOffset();
		if(this._deincButton.hitTest(event.screenX - componentOffset.x,event.screenY - componentOffset.y) == false && this._incButton.hitTest(event.screenX - componentOffset.x,event.screenY - componentOffset.y) == false) {
			this._scroll.applyPageFromCoord(new haxe_ui_geom_Point(event.screenX - componentOffset.x,event.screenY - componentOffset.y));
		}
	}
	,onDeinc: function(event) {
		var _g = this._scroll;
		_g.set_pos(_g.get_pos() - this._scroll.get_increment());
	}
	,onInc: function(event) {
		var _g = this._scroll;
		_g.set_pos(_g.get_pos() + this._scroll.get_increment());
	}
	,_mouseDownOffset: null
	,onThumbMouseDown: function(event) {
		event.cancel();
		this._mouseDownOffset = new haxe_ui_geom_Point();
		var tmp = event.screenX - this._thumb.get_left();
		var tmp1 = this._scroll.get_layout().get_paddingLeft();
		this._mouseDownOffset.x = tmp + tmp1;
		var tmp = event.screenY - this._thumb.get_top();
		var tmp1 = this._scroll.get_layout().get_paddingTop();
		this._mouseDownOffset.y = tmp + tmp1;
		this._scroll.get_screen().registerEvent("mouseup",$bind(this,this.onScreenMouseUp));
		this._scroll.get_screen().registerEvent("mousemove",$bind(this,this.onScreenMouseMove));
	}
	,onScreenMouseUp: function(event) {
		this._mouseDownOffset = null;
		this._scroll.get_screen().unregisterEvent("mouseup",$bind(this,this.onScreenMouseUp));
		this._scroll.get_screen().unregisterEvent("mousemove",$bind(this,this.onScreenMouseMove));
	}
	,onScreenMouseMove: function(event) {
		if(this._mouseDownOffset == null) {
			return;
		}
		var coord = new haxe_ui_geom_Point(event.screenX - this._mouseDownOffset.x,event.screenY - this._mouseDownOffset.y);
		this._scroll.set_pos(this._scroll.posFromCoord(coord));
	}
	,__class__: haxe_ui_components__$Scroll_Events
});
var haxe_ui_components__$Scroll_ScrollValueBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Scroll.ScrollValueBehaviour"] = haxe_ui_components__$Scroll_ScrollValueBehaviour;
haxe_ui_components__$Scroll_ScrollValueBehaviour.__name__ = "haxe.ui.components._Scroll.ScrollValueBehaviour";
haxe_ui_components__$Scroll_ScrollValueBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Scroll_ScrollValueBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this.get())) {
			return;
		}
		haxe_ui_behaviours_DataBehaviour.prototype.set.call(this,value);
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
	}
	,validateData: function() {
		var scroll = js_Boot.__cast(this._component , haxe_ui_components_Scroll);
		var pos = scroll.get_pos();
		var min = scroll.get_min();
		var max = scroll.get_max();
		if(pos < min) {
			scroll.set_pos(min);
		} else if(pos > max) {
			scroll.set_pos(max);
		}
		var changeEvent = new haxe_ui_events_UIEvent("change");
		scroll.dispatch(changeEvent);
	}
	,__class__: haxe_ui_components__$Scroll_ScrollValueBehaviour
});
var haxe_ui_components__$Slider_StartBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Slider.StartBehaviour"] = haxe_ui_components__$Slider_StartBehaviour;
haxe_ui_components__$Slider_StartBehaviour.__name__ = "haxe.ui.components._Slider.StartBehaviour";
haxe_ui_components__$Slider_StartBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Slider_StartBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_SliderBuilder);
		if(this._component.findComponent("start-thumb") == null) {
			builder.createThumb("start-thumb");
		}
		var slider = js_Boot.__cast(this._component , haxe_ui_components_Slider);
		if(this._value != null && haxe_ui_util_Variant.lt(this._value,haxe_ui_util_Variant.fromFloat(slider.get_min()))) {
			this._value = haxe_ui_util_Variant.fromFloat(slider.get_min());
		}
		if(this._value != null && haxe_ui_util_Variant.gt(this._value,haxe_ui_util_Variant.fromFloat(slider.get_max()))) {
			this._value = haxe_ui_util_Variant.fromFloat(slider.get_max());
		}
		if(slider.get_precision() != null) {
			var v = haxe_ui_util_Variant.toFloat(this._value);
			var precision = slider.get_precision();
			if(precision == null) {
				precision = 0;
			}
			this._value = haxe_ui_util_Variant.fromFloat(Math.round(v * Math.pow(10,precision)) / Math.pow(10,precision));
		}
		this._component.findComponent(null,haxe_ui_components_Range).set_start(haxe_ui_util_Variant.toFloat(this._value));
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
	}
	,__class__: haxe_ui_components__$Slider_StartBehaviour
});
var haxe_ui_components__$Slider_EndBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Slider.EndBehaviour"] = haxe_ui_components__$Slider_EndBehaviour;
haxe_ui_components__$Slider_EndBehaviour.__name__ = "haxe.ui.components._Slider.EndBehaviour";
haxe_ui_components__$Slider_EndBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Slider_EndBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var slider = js_Boot.__cast(this._component , haxe_ui_components_Slider);
		if(this._value != null && haxe_ui_util_Variant.lt(this._value,haxe_ui_util_Variant.fromFloat(slider.get_min()))) {
			this._value = haxe_ui_util_Variant.fromFloat(slider.get_min());
		}
		if(this._value != null && haxe_ui_util_Variant.gt(this._value,haxe_ui_util_Variant.fromFloat(slider.get_max()))) {
			this._value = haxe_ui_util_Variant.fromFloat(slider.get_max());
		}
		if(slider.get_precision() != null) {
			var v = haxe_ui_util_Variant.toFloat(this._value);
			var precision = slider.get_precision();
			if(precision == null) {
				precision = 0;
			}
			this._value = haxe_ui_util_Variant.fromFloat(Math.round(v * Math.pow(10,precision)) / Math.pow(10,precision));
		}
		this._component.findComponent(null,haxe_ui_components_Range).set_end(haxe_ui_util_Variant.toFloat(this._value));
		(js_Boot.__cast(this._component , haxe_ui_components_Slider)).set_pos(haxe_ui_util_Variant.toFloat(this._value));
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
	}
	,__class__: haxe_ui_components__$Slider_EndBehaviour
});
var haxe_ui_components__$Slider_MinBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Slider.MinBehaviour"] = haxe_ui_components__$Slider_MinBehaviour;
haxe_ui_components__$Slider_MinBehaviour.__name__ = "haxe.ui.components._Slider.MinBehaviour";
haxe_ui_components__$Slider_MinBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Slider_MinBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		if((js_Boot.__cast(this._component , haxe_ui_components_Slider)).get_start() == null) {
			this._component.findComponent(null,haxe_ui_components_Range).set_start(haxe_ui_util_Variant.toFloat(this._value));
		}
		this._component.findComponent(null,haxe_ui_components_Range).set_min(haxe_ui_util_Variant.toFloat(this._value));
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
	}
	,__class__: haxe_ui_components__$Slider_MinBehaviour
});
var haxe_ui_components__$Slider_MaxBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Slider.MaxBehaviour"] = haxe_ui_components__$Slider_MaxBehaviour;
haxe_ui_components__$Slider_MaxBehaviour.__name__ = "haxe.ui.components._Slider.MaxBehaviour";
haxe_ui_components__$Slider_MaxBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Slider_MaxBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		this._component.findComponent(null,haxe_ui_components_Range).set_max(haxe_ui_util_Variant.toFloat(this._value));
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
	}
	,__class__: haxe_ui_components__$Slider_MaxBehaviour
});
var haxe_ui_components__$Slider_PosBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Slider.PosBehaviour"] = haxe_ui_components__$Slider_PosBehaviour;
haxe_ui_components__$Slider_PosBehaviour.__name__ = "haxe.ui.components._Slider.PosBehaviour";
haxe_ui_components__$Slider_PosBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Slider_PosBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	get: function() {
		return haxe_ui_util_Variant.fromFloat((js_Boot.__cast(this._component , haxe_ui_components_Slider)).get_end());
	}
	,validateData: function() {
		(js_Boot.__cast(this._component , haxe_ui_components_Slider)).set_end(haxe_ui_util_Variant.toFloat(this._value));
	}
	,__class__: haxe_ui_components__$Slider_PosBehaviour
});
var haxe_ui_components__$Slider_PosFromCoord = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Slider.PosFromCoord"] = haxe_ui_components__$Slider_PosFromCoord;
haxe_ui_components__$Slider_PosFromCoord.__name__ = "haxe.ui.components._Slider.PosFromCoord";
haxe_ui_components__$Slider_PosFromCoord.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Slider_PosFromCoord.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(coord) {
		var range = this._component.findComponent(null,haxe_ui_components_Range);
		return haxe_ui_util_Variant.fromFloat(range.posFromCoord(coord));
	}
	,__class__: haxe_ui_components__$Slider_PosFromCoord
});
var haxe_ui_components__$Slider_Events = function(slider) {
	this._offset = null;
	haxe_ui_events_Events.call(this,slider);
	this._slider = slider;
	this._range = slider.findComponent(null,haxe_ui_components_Range);
};
$hxClasses["haxe.ui.components._Slider.Events"] = haxe_ui_components__$Slider_Events;
haxe_ui_components__$Slider_Events.__name__ = "haxe.ui.components._Slider.Events";
haxe_ui_components__$Slider_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$Slider_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_slider: null
	,_endThumb: null
	,_startThumb: null
	,_range: null
	,_activeThumb: null
	,register: function() {
		this._startThumb = this._slider.findComponent("start-thumb");
		if(this._startThumb != null && this._startThumb.hasEvent("mousedown",$bind(this,this.onThumbMouseDown)) == false) {
			this._startThumb.registerEvent("mousedown",$bind(this,this.onThumbMouseDown));
		}
		this._endThumb = this._slider.findComponent("end-thumb");
		if(this._endThumb != null && this._endThumb.hasEvent("mousedown",$bind(this,this.onThumbMouseDown)) == false) {
			this._endThumb.registerEvent("mousedown",$bind(this,this.onThumbMouseDown));
		}
		if(this._range.hasEvent("mousedown",$bind(this,this.onRangeMouseDown)) == false) {
			this._range.registerEvent("mousedown",$bind(this,this.onRangeMouseDown));
		}
		if(this._range.hasEvent("change",$bind(this,this.onRangeChange)) == false) {
			this._range.registerEvent("change",$bind(this,this.onRangeChange));
		}
	}
	,unregister: function() {
		if(this._startThumb != null) {
			this._startThumb.unregisterEvent("mousedown",$bind(this,this.onThumbMouseDown));
		}
		if(this._endThumb != null) {
			this._endThumb.unregisterEvent("mousedown",$bind(this,this.onThumbMouseDown));
		}
		this._range.unregisterEvent("mousedown",$bind(this,this.onRangeMouseDown));
		this._range.unregisterEvent("change",$bind(this,this.onRangeChange));
	}
	,onRangeChange: function(e) {
		this._slider.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,onRangeMouseDown: function(e) {
		if(this._startThumb != null && this._startThumb.hitTest(e.screenX,e.screenY) == true) {
			return;
		}
		if(this._endThumb != null && this._endThumb.hitTest(e.screenX,e.screenY) == true) {
			return;
		}
		e.cancel();
		var coord = new haxe_ui_geom_Point();
		coord.x = e.screenX - this._slider.get_screenLeft() - this._slider.get_paddingLeft();
		coord.y = e.screenY - this._slider.get_screenTop() - this._slider.get_paddingTop();
		var pos = this._slider.posFromCoord(coord);
		if(this._startThumb == null) {
			this._slider.set_pos(pos);
			this.startDrag(this._endThumb,this._endThumb.get_width() / 2,this._endThumb.get_height() / 2);
			return;
		}
		var builder = js_Boot.__cast(this._slider._compositeBuilder , haxe_ui_components_SliderBuilder);
		var d1 = this._slider.get_end() - this._slider.get_start();
		var d2 = pos - this._slider.get_start();
		if(d2 < d1 / 2) {
			pos -= builder.getStartOffset();
			this._slider.set_start(pos);
			this.startDrag(this._startThumb,this._startThumb.get_width() / 2,this._startThumb.get_height() / 2);
		} else if(d2 >= d1 / 2) {
			pos -= builder.getStartOffset();
			this._slider.set_end(pos);
			this.startDrag(this._endThumb,this._endThumb.get_width() / 2,this._endThumb.get_height() / 2);
		} else if(pos > this._slider.get_start()) {
			this._slider.set_end(pos);
			this.startDrag(this._endThumb,this._endThumb.get_width() / 2,this._endThumb.get_height() / 2);
		} else if(pos < this._slider.get_end()) {
			this._slider.set_start(pos);
			this.startDrag(this._startThumb,this._startThumb.get_width() / 2,this._startThumb.get_height() / 2);
		}
	}
	,_offset: null
	,onThumbMouseDown: function(e) {
		e.cancel();
		this.startDrag(js_Boot.__cast(e.target , haxe_ui_components_Button),e.get_localX(),e.get_localY());
	}
	,startDrag: function(thumb,offsetX,offsetY) {
		this._offset = new haxe_ui_geom_Point(offsetX,offsetY);
		this._activeThumb = thumb;
		haxe_ui_core_Screen.get_instance().registerEvent("mousemove",$bind(this,this.onScreenMouseMove));
		haxe_ui_core_Screen.get_instance().registerEvent("mouseup",$bind(this,this.onScreenMouseUp));
	}
	,onScreenMouseUp: function(e) {
		this._activeThumb = null;
		haxe_ui_core_Screen.get_instance().unregisterEvent("mouseup",$bind(this,this.onScreenMouseUp));
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousemove",$bind(this,this.onScreenMouseMove));
	}
	,onScreenMouseMove: function(e) {
		var coord = new haxe_ui_geom_Point();
		coord.x = e.screenX - this._slider.get_screenLeft() - this._offset.x - this._slider.get_paddingLeft() + this._activeThumb.get_width() / 2;
		coord.y = e.screenY - this._slider.get_screenTop() - this._offset.y - this._slider.get_paddingTop() + this._activeThumb.get_height() / 2;
		var pos = this._slider.posFromCoord(coord);
		var builder = js_Boot.__cast(this._slider._compositeBuilder , haxe_ui_components_SliderBuilder);
		if(this._activeThumb == this._startThumb) {
			pos -= builder.getStartOffset();
			if(pos > this._slider.get_end()) {
				pos = this._slider.get_end();
			}
			this._slider.set_start(pos);
		} else if(this._activeThumb == this._endThumb) {
			pos -= builder.getStartOffset();
			this._slider.set_end(pos);
		}
	}
	,__class__: haxe_ui_components__$Slider_Events
});
var haxe_ui_components_Spacer = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.components.Spacer"] = haxe_ui_components_Spacer;
haxe_ui_components_Spacer.__name__ = "haxe.ui.components.Spacer";
haxe_ui_components_Spacer.__super__ = haxe_ui_core_Component;
haxe_ui_components_Spacer.prototype = $extend(haxe_ui_core_Component.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Spacer();
	}
	,__class__: haxe_ui_components_Spacer
});
var haxe_ui_components_Stepper = function() {
	haxe_ui_containers_VBox.call(this);
};
$hxClasses["haxe.ui.components.Stepper"] = haxe_ui_components_Stepper;
haxe_ui_components_Stepper.__name__ = "haxe.ui.components.Stepper";
haxe_ui_components_Stepper.__super__ = haxe_ui_containers_VBox;
haxe_ui_components_Stepper.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	increment: function() {
		return this.behaviours.call("increment",null);
	}
	,deincrement: function() {
		return this.behaviours.call("deincrement",null);
	}
	,registerComposite: function() {
		haxe_ui_containers_VBox.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components__$Stepper_Events;
		this._compositeBuilderClass = haxe_ui_components__$Stepper_Builder;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
		this.behaviours.register("pos",haxe_ui_components__$Stepper_PosBehaviour);
		this.behaviours.register("step",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromFloat(1));
		this.behaviours.register("min",haxe_ui_behaviours_DefaultBehaviour,null);
		this.behaviours.register("max",haxe_ui_behaviours_DefaultBehaviour,null);
		this.behaviours.register("precision",haxe_ui_behaviours_DefaultBehaviour,null);
		this.behaviours.register("repeater",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(true));
		this.behaviours.register("repeatInterval",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromFloat(100));
		this.behaviours.register("increment",haxe_ui_components__$Stepper_IncBehaviour);
		this.behaviours.register("deincrement",haxe_ui_components__$Stepper_DeincBehaviour);
	}
	,get_pos: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("pos"));
	}
	,set_pos: function(value) {
		this.behaviours.set("pos",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"value");
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pos");
		return value;
	}
	,get_step: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("step"));
	}
	,set_step: function(value) {
		this.behaviours.set("step",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"step");
		return value;
	}
	,get_min: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("min"));
	}
	,set_min: function(value) {
		this.behaviours.set("min",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"min");
		return value;
	}
	,get_max: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("max"));
	}
	,set_max: function(value) {
		this.behaviours.set("max",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"max");
		return value;
	}
	,get_precision: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("precision"));
	}
	,set_precision: function(value) {
		this.behaviours.set("precision",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"precision");
		return value;
	}
	,get_repeater: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("repeater"));
	}
	,set_repeater: function(value) {
		this.behaviours.set("repeater",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"repeater");
		return value;
	}
	,get_repeatInterval: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("repeatInterval"));
	}
	,set_repeatInterval: function(value) {
		this.behaviours.set("repeatInterval",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"repeatInterval");
		return value;
	}
	,get_value: function() {
		return this.get_pos();
	}
	,set_value: function(value) {
		this.set_pos(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pos");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		c.set_pos(this.get_pos());
		c.set_step(this.get_step());
		if(this.get_min() != null) {
			c.set_min(this.get_min());
		}
		if(this.get_max() != null) {
			c.set_max(this.get_max());
		}
		if(this.get_precision() != null) {
			c.set_precision(this.get_precision());
		}
		c.set_repeater(this.get_repeater());
		c.set_repeatInterval(this.get_repeatInterval());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Stepper();
	}
	,__class__: haxe_ui_components_Stepper
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{set_repeatInterval:"set_repeatInterval",get_repeatInterval:"get_repeatInterval",set_repeater:"set_repeater",get_repeater:"get_repeater",set_precision:"set_precision",get_precision:"get_precision",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_step:"set_step",get_step:"get_step",set_pos:"set_pos",get_pos:"get_pos"})
});
var haxe_ui_components__$Stepper_PosBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Stepper.PosBehaviour"] = haxe_ui_components__$Stepper_PosBehaviour;
haxe_ui_components__$Stepper_PosBehaviour.__name__ = "haxe.ui.components._Stepper.PosBehaviour";
haxe_ui_components__$Stepper_PosBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Stepper_PosBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var stepper = js_Boot.__cast(this._component , haxe_ui_components_Stepper);
		var v = haxe_ui_util_Variant.toFloat(this._value);
		var min = stepper.get_min();
		var max = stepper.get_max();
		var v1;
		if(v == null || isNaN(v)) {
			v1 = min;
		} else {
			if(min != null && v < min) {
				v = min;
			} else if(max != null && v > max) {
				v = max;
			}
			v1 = v;
		}
		stepper.set_pos(v1);
		this._value = haxe_ui_util_Variant.fromFloat(v1);
		var event = new haxe_ui_events_UIEvent("change");
		this._component.dispatch(event);
	}
	,__class__: haxe_ui_components__$Stepper_PosBehaviour
});
var haxe_ui_components__$Stepper_IncBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Stepper.IncBehaviour"] = haxe_ui_components__$Stepper_IncBehaviour;
haxe_ui_components__$Stepper_IncBehaviour.__name__ = "haxe.ui.components._Stepper.IncBehaviour";
haxe_ui_components__$Stepper_IncBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Stepper_IncBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var stepper = js_Boot.__cast(this._component , haxe_ui_components_Stepper);
		var newPos = stepper.get_pos();
		newPos += stepper.get_step();
		if(stepper.get_max() != null && newPos > stepper.get_max()) {
			newPos = stepper.get_max();
		}
		if(stepper.get_precision() != null) {
			var precision = stepper.get_precision();
			if(precision == null) {
				precision = 0;
			}
			newPos = Math.round(newPos * Math.pow(10,precision)) / Math.pow(10,precision);
		}
		stepper.set_pos(newPos);
		return null;
	}
	,__class__: haxe_ui_components__$Stepper_IncBehaviour
});
var haxe_ui_components__$Stepper_DeincBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Stepper.DeincBehaviour"] = haxe_ui_components__$Stepper_DeincBehaviour;
haxe_ui_components__$Stepper_DeincBehaviour.__name__ = "haxe.ui.components._Stepper.DeincBehaviour";
haxe_ui_components__$Stepper_DeincBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Stepper_DeincBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var stepper = js_Boot.__cast(this._component , haxe_ui_components_Stepper);
		var newPos = stepper.get_pos();
		newPos -= stepper.get_step();
		if(stepper.get_min() != null && newPos < stepper.get_min()) {
			newPos = stepper.get_min();
		}
		if(stepper.get_precision() != null) {
			var precision = stepper.get_precision();
			if(precision == null) {
				precision = 0;
			}
			newPos = Math.round(newPos * Math.pow(10,precision)) / Math.pow(10,precision);
		}
		stepper.set_pos(newPos);
		return null;
	}
	,__class__: haxe_ui_components__$Stepper_DeincBehaviour
});
var haxe_ui_components__$Stepper_Builder = function(stepper) {
	haxe_ui_core_CompositeBuilder.call(this,stepper);
	this._stepper = stepper;
};
$hxClasses["haxe.ui.components._Stepper.Builder"] = haxe_ui_components__$Stepper_Builder;
haxe_ui_components__$Stepper_Builder.__name__ = "haxe.ui.components._Stepper.Builder";
haxe_ui_components__$Stepper_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$Stepper_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_stepper: null
	,create: function() {
		var button = new haxe_ui_components_Button();
		button.set_styleNames("stepper-button stepper-inc");
		button.set_id("stepper-inc");
		button.set_repeater(this._stepper.get_repeater());
		button.set_easeInRepeater(true);
		button.set_repeatInterval(this._stepper.get_repeatInterval());
		this._stepper.addComponent(button);
		var button = new haxe_ui_components_Button();
		button.set_styleNames("stepper-button stepper-deinc");
		button.set_id("stepper-deinc");
		button.set_repeater(this._stepper.get_repeater());
		button.set_easeInRepeater(true);
		button.set_repeatInterval(this._stepper.get_repeatInterval());
		this._stepper.addComponent(button);
	}
	,__class__: haxe_ui_components__$Stepper_Builder
});
var haxe_ui_components__$Stepper_Events = function(stepper) {
	haxe_ui_events_Events.call(this,stepper);
	this._stepper = stepper;
};
$hxClasses["haxe.ui.components._Stepper.Events"] = haxe_ui_components__$Stepper_Events;
haxe_ui_components__$Stepper_Events.__name__ = "haxe.ui.components._Stepper.Events";
haxe_ui_components__$Stepper_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$Stepper_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_stepper: null
	,register: function() {
		var button = this._stepper.findComponent("stepper-inc",haxe_ui_components_Button);
		if(!button.hasEvent("click",$bind(this,this.onInc))) {
			button.registerEvent("click",$bind(this,this.onInc));
		}
		var button = this._stepper.findComponent("stepper-deinc",haxe_ui_components_Button);
		if(!button.hasEvent("click",$bind(this,this.onDeinc))) {
			button.registerEvent("click",$bind(this,this.onDeinc));
		}
	}
	,unregister: function() {
		var button = this._stepper.findComponent("stepper-inc",haxe_ui_components_Button);
		button.unregisterEvent("click",$bind(this,this.onInc));
		var button = this._stepper.findComponent("stepper-deinc",haxe_ui_components_Button);
		button.unregisterEvent("click",$bind(this,this.onDeinc));
	}
	,onInc: function(event) {
		this._stepper.increment();
	}
	,onDeinc: function(event) {
		this._stepper.deincrement();
	}
	,__class__: haxe_ui_components__$Stepper_Events
});
var haxe_ui_components_Switch = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.components.Switch"] = haxe_ui_components_Switch;
haxe_ui_components_Switch.__name__ = "haxe.ui.components.Switch";
haxe_ui_components_Switch.__super__ = haxe_ui_core_Component;
haxe_ui_components_Switch.prototype = $extend(haxe_ui_core_Component.prototype,{
	registerComposite: function() {
		haxe_ui_core_Component.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_components__$Switch_Builder;
		this._defaultLayoutClass = haxe_ui_layouts_HorizontalLayout;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("selected",haxe_ui_components__$Switch_SelectedBehaviour);
		this.behaviours.register("value",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("text",haxe_ui_components__$Switch_TextBehaviour);
		this.behaviours.register("textOn",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("textOff",haxe_ui_behaviours_DefaultBehaviour);
	}
	,get_selected: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("selected"));
	}
	,set_selected: function(value) {
		this.behaviours.set("selected",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selected");
		return value;
	}
	,get_textOn: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("textOn"));
	}
	,set_textOn: function(value) {
		this.behaviours.set("textOn",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"textOn");
		return value;
	}
	,get_textOff: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("textOff"));
	}
	,set_textOff: function(value) {
		this.behaviours.set("textOff",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"textOff");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		c.set_selected(this.get_selected());
		if(this.get_textOn() != null) {
			c.set_textOn(this.get_textOn());
		}
		if(this.get_textOff() != null) {
			c.set_textOff(this.get_textOff());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Switch();
	}
	,__class__: haxe_ui_components_Switch
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_textOff:"set_textOff",get_textOff:"get_textOff",set_textOn:"set_textOn",get_textOn:"get_textOn",set_selected:"set_selected",get_selected:"get_selected"})
});
var haxe_ui_components__$Switch_SelectedBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Switch.SelectedBehaviour"] = haxe_ui_components__$Switch_SelectedBehaviour;
haxe_ui_components__$Switch_SelectedBehaviour.__name__ = "haxe.ui.components._Switch.SelectedBehaviour";
haxe_ui_components__$Switch_SelectedBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Switch_SelectedBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		this._component.findComponent(null,haxe_ui_components__$Switch_SwitchButtonSub).set_selected(haxe_ui_util_Variant.toBool(this._value));
	}
	,__class__: haxe_ui_components__$Switch_SelectedBehaviour
});
var haxe_ui_components__$Switch_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Switch.TextBehaviour"] = haxe_ui_components__$Switch_TextBehaviour;
haxe_ui_components__$Switch_TextBehaviour.__name__ = "haxe.ui.components._Switch.TextBehaviour";
haxe_ui_components__$Switch_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Switch_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var label = this._component.findComponent(null,haxe_ui_components_Label,false);
		if(label == null) {
			label = new haxe_ui_components_Label();
			label.set_styleNames("switch-label");
			label.set_id("switch-label");
			label.scriptAccess = false;
			this._component.addComponentAt(label,0);
			var spacer = new haxe_ui_components_Spacer();
			spacer.set_percentWidth(100);
			this._component.addComponentAt(spacer,1);
			var _this = this._component;
			var force = true;
			if(force == null) {
				force = false;
			}
			_this.invalidateComponent("style");
			if(force == true) {
				_this._style = null;
			}
		}
		label.set_text(haxe_ui_util_Variant.toString(this._value));
	}
	,__class__: haxe_ui_components__$Switch_TextBehaviour
});
var haxe_ui_components__$Switch_Builder = function(s) {
	haxe_ui_core_CompositeBuilder.call(this,s);
	this._switch = s;
};
$hxClasses["haxe.ui.components._Switch.Builder"] = haxe_ui_components__$Switch_Builder;
haxe_ui_components__$Switch_Builder.__name__ = "haxe.ui.components._Switch.Builder";
haxe_ui_components__$Switch_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$Switch_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_switch: null
	,_button: null
	,_label: null
	,create: function() {
		var _gthis = this;
		if(this._button == null) {
			this._button = new haxe_ui_components__$Switch_SwitchButtonSub();
			this._button.set_onChange(function(e) {
				_gthis._switch.set_selected(_gthis._button.get_selected());
				_gthis._switch.dispatch(new haxe_ui_events_UIEvent("change"));
			});
			this._component.addComponent(this._button);
		}
	}
	,__class__: haxe_ui_components__$Switch_Builder
});
var haxe_ui_components__$Switch_SwitchButtonSub = function() {
	this._pos = 0;
	this._unselectedText = "";
	this._selectedText = "";
	this._selected = false;
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components._Switch.SwitchButtonSub"] = haxe_ui_components__$Switch_SwitchButtonSub;
haxe_ui_components__$Switch_SwitchButtonSub.__name__ = "haxe.ui.components._Switch.SwitchButtonSub";
haxe_ui_components__$Switch_SwitchButtonSub.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components__$Switch_SwitchButtonSub.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	_button: null
	,_label: null
	,createChildren: function() {
		var _gthis = this;
		haxe_ui_core_InteractiveComponent.prototype.createChildren.call(this);
		if(this._button == null) {
			this._label = new haxe_ui_components_Label();
			this._label.set_id("switch-label");
			this._label.addClass("switch-label");
			this._label.set_text(this._unselectedText);
			this.addComponent(this._label);
			this._button = new haxe_ui_components_Button();
			this._button.set_id("switch-button");
			this._button.addClass("switch-button");
			this.addComponent(this._button);
			this.set_onClick(function(e) {
				_gthis.set_selected(!_gthis.get_selected());
			});
			var component = new haxe_ui_core_Component();
			component.addClass("switch-button-sub-extra");
			this.addComponentAt(component,0);
		}
	}
	,_selected: null
	,get_selected: function() {
		return this._selected;
	}
	,set_selected: function(value) {
		if(value == this._selected) {
			return value;
		}
		this.invalidateComponent("data");
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout");
		}
		this._selected = value;
		if(this._selected == false) {
			this._label.set_text(this._unselectedText);
			this._label.removeClass(":selected");
			this.removeClass(":selected",true,true);
			this.addClass(":unselected",true,true);
		} else {
			this._label.set_text(this._selectedText);
			this._label.addClass(":selected");
			this.removeClass(":unselected",true,true);
			this.addClass(":selected",true,true);
		}
		var event = new haxe_ui_events_UIEvent("change");
		this.dispatch(event);
		return value;
	}
	,_selectedText: null
	,get_selectedText: function() {
		return this._selectedText;
	}
	,set_selectedText: function(value) {
		this._selectedText = value;
		if(this._ready && this._selected == true) {
			this._label.set_text(this._selectedText);
		}
		return value;
	}
	,_unselectedText: null
	,get_unselectedText: function() {
		return this._unselectedText;
	}
	,set_unselectedText: function(value) {
		this._unselectedText = value;
		if(this._ready && this._selected == false) {
			this._label.set_text(this._unselectedText);
		}
		return value;
	}
	,_pos: null
	,get_pos: function() {
		return this._pos;
	}
	,set_pos: function(value) {
		if(this._pos == value) {
			return value;
		}
		this._pos = value;
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout");
		}
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		c.set_selected(this.get_selected());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components__$Switch_SwitchButtonSub();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_components__$Switch_SwitchButtonLayout;
	}
	,__class__: haxe_ui_components__$Switch_SwitchButtonSub
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_pos:"set_pos",get_pos:"get_pos",set_unselectedText:"set_unselectedText",get_unselectedText:"get_unselectedText",set_selectedText:"set_selectedText",get_selectedText:"get_selectedText",set_selected:"set_selected",get_selected:"get_selected"})
});
var haxe_ui_components__$Switch_SwitchButtonLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._Switch.SwitchButtonLayout"] = haxe_ui_components__$Switch_SwitchButtonLayout;
haxe_ui_components__$Switch_SwitchButtonLayout.__name__ = "haxe.ui.components._Switch.SwitchButtonLayout";
haxe_ui_components__$Switch_SwitchButtonLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$Switch_SwitchButtonLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		var switchComp = js_Boot.__cast(this._component , haxe_ui_components__$Switch_SwitchButtonSub);
		var button = switchComp.findComponent("switch-button");
		var label = switchComp.findComponent("switch-label");
		if(button == null || label == null) {
			return;
		}
		button.set_top(this.get_paddingTop());
		label.set_top(this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2);
		if(switchComp.get_selected() == true) {
			label.set_left(button.get_componentWidth() / 2 - label.get_componentWidth() / 2);
		} else {
			label.set_left(button.get_left() + button.get_componentWidth() + button.get_componentWidth() / 2 - label.get_componentWidth() / 2);
		}
		var ucx = this.get_usableWidth() - button.get_width();
		var min = 0;
		var max = 100;
		var x = (switchComp.get_pos() - min) / (max - min) * ucx;
		button.set_left(this.get_paddingLeft() + x);
		var extra = switchComp.findComponent("switch-button-sub-extra",null,null,"css");
		if(extra != null) {
			extra.set_top(this._component.get_height() / 2 - extra.get_height() / 2);
		}
	}
	,__class__: haxe_ui_components__$Switch_SwitchButtonLayout
});
var haxe_ui_components_TabBar = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.components.TabBar"] = haxe_ui_components_TabBar;
haxe_ui_components_TabBar.__name__ = "haxe.ui.components.TabBar";
haxe_ui_components_TabBar.__super__ = haxe_ui_core_Component;
haxe_ui_components_TabBar.prototype = $extend(haxe_ui_core_Component.prototype,{
	removeTab: function(index) {
		this.behaviours.call("removeTab",index);
	}
	,getTab: function(index) {
		return haxe_ui_util_Variant.toComponent(this.behaviours.call("getTab",index));
	}
	,registerComposite: function() {
		haxe_ui_core_Component.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_components__$TabBar_Builder;
		this._internalEventsClass = haxe_ui_components__$TabBar_Events;
		this._defaultLayoutClass = haxe_ui_components__$TabBar_Layout;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("selectedIndex",haxe_ui_components__$TabBar_SelectedIndex,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("selectedTab",haxe_ui_components__$TabBar_SelectedTab);
		this.behaviours.register("tabPosition",haxe_ui_components__$TabBar_TabPosition,haxe_ui_util_Variant.fromString("top"));
		this.behaviours.register("tabCount",haxe_ui_components__$TabBar_TabCount);
		this.behaviours.register("closable",haxe_ui_components__$TabBar_Closable,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("removeTab",haxe_ui_components__$TabBar_RemoveTab);
		this.behaviours.register("getTab",haxe_ui_components__$TabBar_GetTab);
	}
	,get_selectedIndex: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("selectedIndex"));
	}
	,set_selectedIndex: function(value) {
		this.behaviours.set("selectedIndex",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedIndex");
		return value;
	}
	,get_selectedTab: function() {
		return haxe_ui_util_Variant.toComponent(this.behaviours.get("selectedTab"));
	}
	,set_selectedTab: function(value) {
		this.behaviours.set("selectedTab",haxe_ui_util_Variant.fromComponent(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedTab");
		return value;
	}
	,get_tabPosition: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("tabPosition"));
	}
	,set_tabPosition: function(value) {
		this.behaviours.set("tabPosition",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"tabPosition");
		return value;
	}
	,get_tabCount: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("tabCount"));
	}
	,set_tabCount: function(value) {
		this.behaviours.set("tabCount",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"tabCount");
		return value;
	}
	,get_closable: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("closable"));
	}
	,set_closable: function(value) {
		this.behaviours.set("closable",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"closable");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_TabBar();
	}
	,__class__: haxe_ui_components_TabBar
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_closable:"set_closable",get_closable:"get_closable",set_tabCount:"set_tabCount",get_tabCount:"get_tabCount",set_tabPosition:"set_tabPosition",get_tabPosition:"get_tabPosition",set_selectedTab:"set_selectedTab",get_selectedTab:"get_selectedTab",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
var haxe_ui_components__$TabBar_Layout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._TabBar.Layout"] = haxe_ui_components__$TabBar_Layout;
haxe_ui_components__$TabBar_Layout.__name__ = "haxe.ui.components._TabBar.Layout";
haxe_ui_components__$TabBar_Layout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$TabBar_Layout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.repositionChildren.call(this);
		var left = this._component.findComponent("tabbar-scroll-left",null,false);
		var right = this._component.findComponent("tabbar-scroll-right",null,false);
		if(left != null && this.hidden(left) == false) {
			var x = this._component.get_width() - left.get_width();
			if(right != null) {
				x -= right.get_width();
			}
			left.set_left(x + 1);
			left.set_top(this._component.get_height() / 2 - left.get_height() / 2);
		}
		if(right != null && this.hidden(right) == false) {
			right.set_left(this._component.get_width() - right.get_width());
			right.set_top(this._component.get_height() / 2 - right.get_height() / 2);
		}
	}
	,__class__: haxe_ui_components__$TabBar_Layout
});
var haxe_ui_components__$TabBar_Closable = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TabBar.Closable"] = haxe_ui_components__$TabBar_Closable;
haxe_ui_components__$TabBar_Closable.__name__ = "haxe.ui.components._TabBar.Closable";
haxe_ui_components__$TabBar_Closable.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TabBar_Closable.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components__$TabBar_Builder);
		if(builder._container == null) {
			return;
		}
		var buttons = builder._container.findComponents(null,haxe_ui_components__$TabBar_TabBarButton,1);
		var _g = 0;
		while(_g < buttons.length) {
			var b = buttons[_g];
			++_g;
			b.set_closable(haxe_ui_util_Variant.toBool(this._value));
		}
	}
	,__class__: haxe_ui_components__$TabBar_Closable
});
var haxe_ui_components__$TabBar_SelectedIndex = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TabBar.SelectedIndex"] = haxe_ui_components__$TabBar_SelectedIndex;
haxe_ui_components__$TabBar_SelectedIndex.__name__ = "haxe.ui.components._TabBar.SelectedIndex";
haxe_ui_components__$TabBar_SelectedIndex.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TabBar_SelectedIndex.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components__$TabBar_Builder);
		if(builder._container == null) {
			return;
		}
		if(haxe_ui_util_Variant.lt(this._value,haxe_ui_util_Variant.fromFloat(0))) {
			return;
		}
		var _this = builder._container;
		if(haxe_ui_util_Variant.gt(this._value,haxe_ui_util_Variant.fromFloat((_this._children == null ? [] : _this._children).length - 1))) {
			var _this = builder._container;
			this._value = haxe_ui_util_Variant.fromFloat((_this._children == null ? [] : _this._children).length - 1);
			return;
		}
		var tab = js_Boot.__cast(builder._container.getComponentAt(haxe_ui_util_Variant.toInt(this._value)) , haxe_ui_components_Button);
		if(tab != null) {
			var selectedTab = (js_Boot.__cast(this._component , haxe_ui_components_TabBar)).get_selectedTab();
			if(selectedTab != null) {
				selectedTab.removeClass("tabbar-button-selected");
			}
			tab.addClass("tabbar-button-selected");
			var rangeMin = Math.abs(builder._container.get_left());
			var rangeMax = rangeMin + this._component.get_width();
			var left = this._component.findComponent("tabbar-scroll-left",haxe_ui_components_Button);
			var right = this._component.findComponent("tabbar-scroll-right",haxe_ui_components_Button);
			if(left != null && left.get_hidden() == false) {
				rangeMax -= left.get_width();
				rangeMax -= this._component.get_layout().get_horizontalSpacing();
			}
			if(right != null && right.get_hidden() == false) {
				rangeMax -= right.get_width();
			}
			if(tab.get_left() < rangeMin || tab.get_left() + tab.get_width() > rangeMax) {
				var max = -(builder._container.get_width() - this._component.get_width());
				var x = -tab.get_left() + this._component.get_layout().get_paddingLeft();
				if(left != null && left.get_hidden() == false) {
					max -= left.get_width();
					max -= this._component.get_layout().get_horizontalSpacing();
				}
				if(right != null && right.get_hidden() == false) {
					max -= right.get_width();
				}
				if(x < max) {
					x = max;
				}
				builder._containerPosition = x;
				builder._container.set_left(x);
			}
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
			this._component.dispatch(new haxe_ui_events_UIEvent("change"));
		}
	}
	,__class__: haxe_ui_components__$TabBar_SelectedIndex
});
var haxe_ui_components__$TabBar_SelectedTab = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TabBar.SelectedTab"] = haxe_ui_components__$TabBar_SelectedTab;
haxe_ui_components__$TabBar_SelectedTab.__name__ = "haxe.ui.components._TabBar.SelectedTab";
haxe_ui_components__$TabBar_SelectedTab.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TabBar_SelectedTab.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	get: function() {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components__$TabBar_Builder);
		return haxe_ui_util_Variant.fromComponent(builder._container.findComponent("tabbar-button-selected",null,false,"css"));
	}
	,__class__: haxe_ui_components__$TabBar_SelectedTab
});
var haxe_ui_components__$TabBar_TabPosition = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TabBar.TabPosition"] = haxe_ui_components__$TabBar_TabPosition;
haxe_ui_components__$TabBar_TabPosition.__name__ = "haxe.ui.components._TabBar.TabPosition";
haxe_ui_components__$TabBar_TabPosition.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TabBar_TabPosition.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components__$TabBar_Builder);
		if(haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromString("bottom"))) {
			this._component.addClass(":bottom");
			var _g = 0;
			var _this = builder._container;
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.addClass(":bottom");
			}
		} else {
			this._component.removeClass(":bottom");
			var _g = 0;
			var _this = builder._container;
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.removeClass(":bottom");
			}
		}
	}
	,__class__: haxe_ui_components__$TabBar_TabPosition
});
var haxe_ui_components__$TabBar_TabCount = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TabBar.TabCount"] = haxe_ui_components__$TabBar_TabCount;
haxe_ui_components__$TabBar_TabCount.__name__ = "haxe.ui.components._TabBar.TabCount";
haxe_ui_components__$TabBar_TabCount.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$TabBar_TabCount.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components__$TabBar_Builder);
		var _this = builder._container;
		return haxe_ui_util_Variant.fromFloat((_this._children == null ? [] : _this._children).length);
	}
	,__class__: haxe_ui_components__$TabBar_TabCount
});
var haxe_ui_components__$TabBar_RemoveTab = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TabBar.RemoveTab"] = haxe_ui_components__$TabBar_RemoveTab;
haxe_ui_components__$TabBar_RemoveTab.__name__ = "haxe.ui.components._TabBar.RemoveTab";
haxe_ui_components__$TabBar_RemoveTab.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$TabBar_RemoveTab.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components__$TabBar_Builder);
		var index = param;
		var _this = builder._container;
		if(index < (_this._children == null ? [] : _this._children).length) {
			var selectedIndex = (js_Boot.__cast(this._component , haxe_ui_components_TabBar)).get_selectedIndex();
			var newSelectedIndex = selectedIndex;
			if(index < selectedIndex) {
				--newSelectedIndex;
			} else if(index == selectedIndex) {
				(js_Boot.__cast(this._component , haxe_ui_components_TabBar)).set_selectedIndex(-1);
				newSelectedIndex = selectedIndex;
				var _this = builder._container;
				if(newSelectedIndex > (_this._children == null ? [] : _this._children).length - 2) {
					var _this = builder._container;
					newSelectedIndex = (_this._children == null ? [] : _this._children).length - 2;
				}
			}
			builder._container.removeComponentAt(index);
			this._component.dispatch(new haxe_ui_events_UIEvent("close",null,index));
			(js_Boot.__cast(this._component , haxe_ui_components_TabBar)).set_selectedIndex(newSelectedIndex);
		}
		return null;
	}
	,__class__: haxe_ui_components__$TabBar_RemoveTab
});
var haxe_ui_components__$TabBar_GetTab = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TabBar.GetTab"] = haxe_ui_components__$TabBar_GetTab;
haxe_ui_components__$TabBar_GetTab.__name__ = "haxe.ui.components._TabBar.GetTab";
haxe_ui_components__$TabBar_GetTab.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$TabBar_GetTab.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components__$TabBar_Builder);
		var index = param;
		var tab = null;
		var _this = builder._container;
		if(index < (_this._children == null ? [] : _this._children).length) {
			var _this = builder._container;
			tab = (_this._children == null ? [] : _this._children)[index];
		}
		return haxe_ui_util_Variant.fromComponent(tab);
	}
	,__class__: haxe_ui_components__$TabBar_GetTab
});
var haxe_ui_components__$TabBar_Events = function(tabbar) {
	haxe_ui_events_Events.call(this,tabbar);
	this._tabbar = tabbar;
};
$hxClasses["haxe.ui.components._TabBar.Events"] = haxe_ui_components__$TabBar_Events;
haxe_ui_components__$TabBar_Events.__name__ = "haxe.ui.components._TabBar.Events";
haxe_ui_components__$TabBar_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$TabBar_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_tabbar: null
	,register: function() {
		var builder = js_Boot.__cast(this._tabbar._compositeBuilder , haxe_ui_components__$TabBar_Builder);
		var _g = 0;
		var _this = builder._container;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.hasEvent("mousedown",$bind(this,this.onTabMouseDown)) == false) {
				t.registerEvent("mousedown",$bind(this,this.onTabMouseDown));
			}
		}
		this.registerEvent("mousewheel",$bind(this,this.onMouseWheel));
	}
	,unregister: function() {
		this.unregisterEvent("mousewheel",$bind(this,this.onMouseWheel));
	}
	,onMouseWheel: function(event) {
		var builder = js_Boot.__cast(this._tabbar._compositeBuilder , haxe_ui_components__$TabBar_Builder);
		if(event.delta < 0) {
			builder.scrollLeft();
		} else {
			builder.scrollRight();
		}
	}
	,onTabMouseDown: function(event) {
		var builder = js_Boot.__cast(this._tabbar._compositeBuilder , haxe_ui_components__$TabBar_Builder);
		var button = event.target;
		var close = button.findComponent("tab-close-button",haxe_ui_components_Image,false);
		var select = true;
		if(close != null) {
			select = !close.hitTest(event.screenX,event.screenY);
		}
		if(select == true) {
			this._tabbar.set_selectedIndex(builder._container.getComponentIndex(button));
		}
	}
	,__class__: haxe_ui_components__$TabBar_Events
});
var haxe_ui_components__$TabBar_Builder = function(tabbar) {
	haxe_ui_core_CompositeBuilder.call(this,tabbar);
	this._tabbar = tabbar;
	this.createContainer();
};
$hxClasses["haxe.ui.components._TabBar.Builder"] = haxe_ui_components__$TabBar_Builder;
haxe_ui_components__$TabBar_Builder.__name__ = "haxe.ui.components._TabBar.Builder";
haxe_ui_components__$TabBar_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$TabBar_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_tabbar: null
	,_container: null
	,create: function() {
		this.createContainer();
	}
	,createContainer: function() {
		if(this._container == null) {
			this._container = new haxe_ui_containers_HBox();
			this._container.set_id("tabbar-contents");
			this._container.addClass("tabbar-contents");
			this._tabbar.addComponent(this._container);
		}
	}
	,addTab: function(child) {
		var button = this.createTabBarButton(child);
		var v = this._container.addComponent(button);
		this._tabbar.registerInternalEvents(haxe_ui_components__$TabBar_Events,true);
		if(this._tabbar.get_selectedIndex() < 0) {
			this._tabbar.set_selectedIndex(0);
		}
		return v;
	}
	,addTabAt: function(child,index) {
		var button = this.createTabBarButton(child);
		var v = this._container.addComponentAt(button,index);
		this._tabbar.registerInternalEvents(haxe_ui_components__$TabBar_Events,true);
		if(this._tabbar.get_selectedIndex() < 0) {
			this._tabbar.set_selectedIndex(0);
		}
		return v;
	}
	,createTabBarButton: function(child) {
		var button = new haxe_ui_components__$TabBar_TabBarButton();
		button.addClass("tabbar-button");
		if(this._tabbar.get_tabPosition() == "bottom") {
			button.addClass(":bottom");
		}
		button.set_id(child.get_id());
		button.set_text(child.get_text());
		button.set_icon((js_Boot.__cast(child , haxe_ui_components_Button)).get_icon());
		button.set_closable(this._tabbar.get_closable());
		return button;
	}
	,get_numComponents: function() {
		return this._container.get_numComponents();
	}
	,addComponent: function(child) {
		if(child != this._container && child != this._scrollLeft && child != this._scrollRight) {
			return this.addTab(child);
		}
		return null;
	}
	,addComponentAt: function(child,index) {
		if(child != this._container && child != this._scrollLeft && child != this._scrollRight) {
			return this.addTabAt(child,index);
		}
		return null;
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		if(child != this._container && child != this._scrollLeft && child != this._scrollRight) {
			return this._container.removeComponent(child,dispose,invalidate);
		}
		return null;
	}
	,removeComponentAt: function(index,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return this._container.removeComponentAt(index,dispose,invalidate);
	}
	,getComponentIndex: function(child) {
		if(child != this._container && child != this._scrollLeft && child != this._scrollRight) {
			return this._container.getComponentIndex(child);
		}
		return -1;
	}
	,setComponentIndex: function(child,index) {
		if(child != this._container && child != this._scrollLeft && child != this._scrollRight) {
			return this._container.setComponentIndex(child,index);
		}
		return null;
	}
	,getComponentAt: function(index) {
		return this._container.getComponentAt(index);
	}
	,validateComponentLayout: function() {
		if(this._tabbar.get_native() == true || this._container == null) {
			return false;
		}
		if(this._containerPosition == null) {
			this._containerPosition = this._tabbar.get_layout().get_paddingLeft();
		}
		if(this._container.get_width() > this._tabbar.get_layout().get_usableWidth() && this._tabbar.get_layout().get_usableWidth() > 0) {
			this.showScrollButtons();
			this._container.set_left(this._containerPosition);
		} else {
			this.hideScrollButtons();
			this._containerPosition = null;
		}
		return true;
	}
	,_scrollLeft: null
	,_scrollRight: null
	,showScrollButtons: function() {
		var _gthis = this;
		if(this._scrollLeft == null) {
			this._scrollLeft = new haxe_ui_components_Button();
			this._scrollLeft.set_id("tabbar-scroll-left");
			this._scrollLeft.addClass("tabbar-scroll-left");
			this._scrollLeft.set_includeInLayout(false);
			this._scrollLeft.set_repeater(true);
			this._tabbar.addComponent(this._scrollLeft);
			this._scrollLeft.set_onClick(function(e) {
				_gthis.scrollLeft();
			});
		} else {
			this._scrollLeft.show();
		}
		if(this._scrollRight == null) {
			this._scrollRight = new haxe_ui_components_Button();
			this._scrollRight.set_id("tabbar-scroll-right");
			this._scrollRight.addClass("tabbar-scroll-right");
			this._scrollRight.set_includeInLayout(false);
			this._scrollRight.set_repeater(true);
			this._tabbar.addComponent(this._scrollRight);
			this._scrollRight.set_onClick(function(e) {
				_gthis.scrollRight();
			});
		} else {
			this._scrollRight.show();
		}
	}
	,_containerPosition: null
	,scrollLeft: function() {
		if(this._scrollLeft == null || this._scrollLeft.get_hidden() == true) {
			return;
		}
		var x = this._container.get_left() + 20;
		if(x > this._tabbar.get_layout().get_paddingLeft()) {
			x = this._tabbar.get_layout().get_paddingLeft();
		}
		this._containerPosition = x;
		this._container.set_left(x);
	}
	,scrollRight: function() {
		if(this._scrollLeft == null || this._scrollLeft.get_hidden() == true) {
			return;
		}
		var x = this._container.get_left() - 20;
		var max = -(this._container.get_width() - this._tabbar.get_width());
		var left = this._tabbar.findComponent("tabbar-scroll-left",haxe_ui_components_Button);
		var right = this._tabbar.findComponent("tabbar-scroll-right",haxe_ui_components_Button);
		if(left != null && left.get_hidden() == false) {
			max -= left.get_width();
			max -= this._tabbar.get_layout().get_horizontalSpacing();
		}
		if(right != null && right.get_hidden() == false) {
			max -= right.get_width();
		}
		if(x < max) {
			x = max;
		}
		this._containerPosition = x;
		this._container.set_left(x);
	}
	,hideScrollButtons: function() {
		if(this._scrollLeft != null) {
			this._scrollLeft.hide();
		}
		if(this._scrollRight != null) {
			this._scrollRight.hide();
		}
	}
	,__class__: haxe_ui_components__$TabBar_Builder
});
var haxe_ui_components__$TabBar_TabBarButton = function() {
	this._closable = false;
	haxe_ui_components_Button.call(this);
};
$hxClasses["haxe.ui.components._TabBar.TabBarButton"] = haxe_ui_components__$TabBar_TabBarButton;
haxe_ui_components__$TabBar_TabBarButton.__name__ = "haxe.ui.components._TabBar.TabBarButton";
haxe_ui_components__$TabBar_TabBarButton.__super__ = haxe_ui_components_Button;
haxe_ui_components__$TabBar_TabBarButton.prototype = $extend(haxe_ui_components_Button.prototype,{
	_closable: null
	,get_closable: function() {
		return this._closable;
	}
	,set_closable: function(value) {
		if(this._closable == value) {
			return value;
		}
		this._closable = value;
		var existing = this.findComponent("tab-close-button",haxe_ui_components_Image,false);
		if(this._closable == true && existing == null) {
			this.set_iconPosition("far-left");
			var image = new haxe_ui_components_Image();
			image.set_id("tab-close-button");
			image.addClass("tab-close-button");
			image.set_includeInLayout(false);
			image.scriptAccess = false;
			image.set_onClick($bind(this,this.onCloseClicked));
			this.addComponent(image);
		} else if(existing != null) {
			this.removeComponent(existing);
		}
		return value;
	}
	,onCloseClicked: function(e) {
		var tabbar = this.findAncestor(null,haxe_ui_components_TabBar);
		var builder = js_Boot.__cast(tabbar._compositeBuilder , haxe_ui_components__$TabBar_Builder);
		var index = builder._container.getComponentIndex(this);
		var event = new haxe_ui_events_UIEvent("beforeClose",null,index);
		tabbar.dispatch(event);
		if(event.canceled == false) {
			if(index != -1) {
				tabbar.removeTab(index);
			}
		}
	}
	,registerComposite: function() {
		haxe_ui_components_Button.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_components__$TabBar_TabBarButtonLayout;
	}
	,registerBehaviours: function() {
		haxe_ui_components_Button.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Button.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components__$TabBar_TabBarButton();
	}
	,__class__: haxe_ui_components__$TabBar_TabBarButton
	,__properties__: $extend(haxe_ui_components_Button.prototype.__properties__,{set_closable:"set_closable",get_closable:"get_closable"})
});
var haxe_ui_components__$TabBar_TabBarButtonLayout = function() {
	haxe_ui_components_ButtonLayout.call(this);
};
$hxClasses["haxe.ui.components._TabBar.TabBarButtonLayout"] = haxe_ui_components__$TabBar_TabBarButtonLayout;
haxe_ui_components__$TabBar_TabBarButtonLayout.__name__ = "haxe.ui.components._TabBar.TabBarButtonLayout";
haxe_ui_components__$TabBar_TabBarButtonLayout.__super__ = haxe_ui_components_ButtonLayout;
haxe_ui_components__$TabBar_TabBarButtonLayout.prototype = $extend(haxe_ui_components_ButtonLayout.prototype,{
	repositionChildren: function() {
		haxe_ui_components_ButtonLayout.prototype.repositionChildren.call(this);
		var image = this._component.findComponent("tab-close-button",haxe_ui_components_Image,false);
		if(image != null && this.get_component().get_componentWidth() > 0) {
			image.set_top((this.get_component().get_componentHeight() / 2 - image.get_componentHeight() / 2 | 0) + this.marginTop(image) - this.marginBottom(image));
			image.set_left(this.get_component().get_componentWidth() - image.get_componentWidth() - this.get_paddingRight() + this.marginLeft(image) - this.marginRight(image));
		}
	}
	,calcAutoSize: function(exclusions) {
		var size = haxe_ui_components_ButtonLayout.prototype.calcAutoSize.call(this,exclusions);
		var image = this._component.findComponent("tab-close-button",haxe_ui_components_Image,false);
		if(image != null) {
			size.width += image.get_width() + this.get_horizontalSpacing();
		}
		return size;
	}
	,__class__: haxe_ui_components__$TabBar_TabBarButtonLayout
});
var haxe_ui_components_TextArea = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.TextArea"] = haxe_ui_components_TextArea;
haxe_ui_components_TextArea.__name__ = "haxe.ui.components.TextArea";
haxe_ui_components_TextArea.__interfaces__ = [haxe_ui_focus_IFocusable];
haxe_ui_components_TextArea.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_TextArea.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	scrollToTop: function() {
		return this.behaviours.call("scrollToTop",null);
	}
	,scrollToBottom: function() {
		return this.behaviours.call("scrollToBottom",null);
	}
	,invalidateComponentScroll: function() {
		this.invalidateComponent("scroll");
	}
	,validateComponentInternal: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		var dataInvalid = this.isComponentInvalid("data");
		var scrollInvalid = this.isComponentInvalid("scroll");
		var layoutInvalid = this.isComponentInvalid("layout");
		haxe_ui_core_InteractiveComponent.prototype.validateComponentInternal.call(this,nextFrame);
		if(scrollInvalid || layoutInvalid || dataInvalid) {
			if(this._compositeBuilder != null) {
				(js_Boot.__cast(this._compositeBuilder , haxe_ui_components__$TextArea_TextAreaBuilder)).checkScrolls();
			}
		}
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("text",haxe_ui_components__$TextArea_TextBehaviour);
		this.behaviours.register("placeholder",haxe_ui_components__$TextArea_PlaceholderBehaviour);
		this.behaviours.register("wrap",haxe_ui_components__$TextArea_WrapBehaviour,haxe_ui_util_Variant.fromBool(true));
		this.behaviours.register("dataSource",haxe_ui_components__$TextArea_DataSourceBehaviour);
		this.behaviours.register("autoScrollToBottom",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("scrollToTop",haxe_ui_components__$TextArea_ScrollToTop);
		this.behaviours.register("scrollToBottom",haxe_ui_components__$TextArea_ScrollToBottom);
	}
	,get_placeholder: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("placeholder"));
	}
	,set_placeholder: function(value) {
		this.behaviours.set("placeholder",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"placeholder");
		return value;
	}
	,get_wrap: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("wrap"));
	}
	,set_wrap: function(value) {
		this.behaviours.set("wrap",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"wrap");
		return value;
	}
	,get_dataSource: function() {
		return haxe_ui_util_Variant.toDataSource(this.behaviours.get("dataSource"));
	}
	,set_dataSource: function(value) {
		this.behaviours.set("dataSource",haxe_ui_util_Variant.fromDataSource(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"dataSource");
		return value;
	}
	,get_autoScrollToBottom: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("autoScrollToBottom"));
	}
	,set_autoScrollToBottom: function(value) {
		this.behaviours.set("autoScrollToBottom",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"autoScrollToBottom");
		return value;
	}
	,get_value: function() {
		return this.get_text();
	}
	,set_value: function(value) {
		this.set_text(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"text");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_TextArea();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components__$TextArea_Events;
		this._compositeBuilderClass = haxe_ui_components__$TextArea_TextAreaBuilder;
		this._defaultLayoutClass = haxe_ui_components__$TextArea_TextAreaLayout;
	}
	,__class__: haxe_ui_components_TextArea
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_autoScrollToBottom:"set_autoScrollToBottom",get_autoScrollToBottom:"get_autoScrollToBottom",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource",set_wrap:"set_wrap",get_wrap:"get_wrap",set_placeholder:"set_placeholder",get_placeholder:"get_placeholder"})
});
var haxe_ui_components__$TextArea_TextAreaLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._TextArea.TextAreaLayout"] = haxe_ui_components__$TextArea_TextAreaLayout;
haxe_ui_components__$TextArea_TextAreaLayout.__name__ = "haxe.ui.components._TextArea.TextAreaLayout";
haxe_ui_components__$TextArea_TextAreaLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$TextArea_TextAreaLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		var hscroll = this.get_component().findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this.get_component().findComponent(null,haxe_ui_components_VerticalScroll,false);
		var ucx = this.get_innerWidth();
		var ucy = this.get_innerHeight();
		if(hscroll != null && this.hidden(hscroll) == false) {
			hscroll.set_left(this.get_paddingLeft());
			hscroll.set_top(ucy - hscroll.get_componentHeight() + this.get_paddingBottom());
		}
		if(vscroll != null && this.hidden(vscroll) == false) {
			vscroll.set_left(ucx - vscroll.get_componentWidth() + this.get_paddingRight());
			vscroll.set_top(this.get_paddingTop());
		}
		if(this.get_component().hasTextInput() == true) {
			this.get_component().getTextInput().set_left(this.get_paddingLeft());
			this.get_component().getTextInput().set_top(this.get_paddingTop());
		}
	}
	,resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		var hscroll = this.get_component().findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this.get_component().findComponent(null,haxe_ui_components_VerticalScroll,false);
		var usableSize = this.get_usableSize();
		if(hscroll != null && this.hidden(hscroll) == false) {
			hscroll.set_width(usableSize.width);
		}
		if(vscroll != null && this.hidden(vscroll) == false) {
			vscroll.set_height(usableSize.height);
		}
		if(this.get_component().hasTextInput() == true) {
			var size = usableSize;
			this.get_component().getTextInput().set_width(size.width - 1);
			this.get_component().getTextInput().set_height(size.height - 1);
		}
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		var hscroll = this.get_component().findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this.get_component().findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(hscroll != null && this.hidden(hscroll) == false) {
			size.height -= hscroll.get_componentHeight();
		}
		if(vscroll != null && this.hidden(vscroll) == false) {
			size.width -= vscroll.get_componentWidth();
		}
		return size;
	}
	,__class__: haxe_ui_components__$TextArea_TextAreaLayout
});
var haxe_ui_components__$TextArea_DataSourceBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextArea.DataSourceBehaviour"] = haxe_ui_components__$TextArea_DataSourceBehaviour;
haxe_ui_components__$TextArea_DataSourceBehaviour.__name__ = "haxe.ui.components._TextArea.DataSourceBehaviour";
haxe_ui_components__$TextArea_DataSourceBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextArea_DataSourceBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	set: function(value) {
		this._value = value;
		this._component.getTextInput().set_dataSource(haxe_ui_util_Variant.toDataSource(value));
	}
	,get: function() {
		if(this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) {
			this._value = haxe_ui_util_Variant.fromDataSource(new haxe_ui_data_ArrayDataSource());
			this.set(this._value);
		}
		return this._value;
	}
	,__class__: haxe_ui_components__$TextArea_DataSourceBehaviour
});
var haxe_ui_components__$TextArea_PlaceholderBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextArea.PlaceholderBehaviour"] = haxe_ui_components__$TextArea_PlaceholderBehaviour;
haxe_ui_components__$TextArea_PlaceholderBehaviour.__name__ = "haxe.ui.components._TextArea.PlaceholderBehaviour";
haxe_ui_components__$TextArea_PlaceholderBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextArea_PlaceholderBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textarea = js_Boot.__cast(this._component , haxe_ui_components_TextArea);
		haxe_ui_components__$TextArea_TextAreaHelper.validateText(textarea,textarea.get_text());
	}
	,__class__: haxe_ui_components__$TextArea_PlaceholderBehaviour
});
var haxe_ui_components__$TextArea_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextArea.TextBehaviour"] = haxe_ui_components__$TextArea_TextBehaviour;
haxe_ui_components__$TextArea_TextBehaviour.__name__ = "haxe.ui.components._TextArea.TextBehaviour";
haxe_ui_components__$TextArea_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextArea_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textarea = js_Boot.__cast(this._component , haxe_ui_components_TextArea);
		var text = this._value != null ? haxe_ui_util_Variant.toString(this._value) : "";
		haxe_ui_components__$TextArea_TextAreaHelper.validateText(textarea,text);
		if(textarea.get_autoScrollToBottom() == true) {
			textarea.scrollToBottom();
		}
	}
	,__class__: haxe_ui_components__$TextArea_TextBehaviour
});
var haxe_ui_components__$TextArea_WrapBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextArea.WrapBehaviour"] = haxe_ui_components__$TextArea_WrapBehaviour;
haxe_ui_components__$TextArea_WrapBehaviour.__name__ = "haxe.ui.components._TextArea.WrapBehaviour";
haxe_ui_components__$TextArea_WrapBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextArea_WrapBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textarea = js_Boot.__cast(this._component , haxe_ui_components_TextArea);
		textarea.getTextInput().set_wordWrap(haxe_ui_util_Variant.toBool(this._value));
	}
	,__class__: haxe_ui_components__$TextArea_WrapBehaviour
});
var haxe_ui_components__$TextArea_ScrollToTop = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextArea.ScrollToTop"] = haxe_ui_components__$TextArea_ScrollToTop;
haxe_ui_components__$TextArea_ScrollToTop.__name__ = "haxe.ui.components._TextArea.ScrollToTop";
haxe_ui_components__$TextArea_ScrollToTop.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$TextArea_ScrollToTop.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var vscroll = this._component.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			vscroll.set_pos(0);
		}
		return null;
	}
	,__class__: haxe_ui_components__$TextArea_ScrollToTop
});
var haxe_ui_components__$TextArea_ScrollToBottom = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextArea.ScrollToBottom"] = haxe_ui_components__$TextArea_ScrollToBottom;
haxe_ui_components__$TextArea_ScrollToBottom.__name__ = "haxe.ui.components._TextArea.ScrollToBottom";
haxe_ui_components__$TextArea_ScrollToBottom.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$TextArea_ScrollToBottom.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var vscroll = this._component.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			vscroll.set_pos(vscroll.get_max());
		}
		return null;
	}
	,__class__: haxe_ui_components__$TextArea_ScrollToBottom
});
var haxe_ui_components__$TextArea_TextAreaHelper = function() { };
$hxClasses["haxe.ui.components._TextArea.TextAreaHelper"] = haxe_ui_components__$TextArea_TextAreaHelper;
haxe_ui_components__$TextArea_TextAreaHelper.__name__ = "haxe.ui.components._TextArea.TextAreaHelper";
haxe_ui_components__$TextArea_TextAreaHelper.validateText = function(textarea,text) {
	if(text == null) {
		text = "";
	}
	if(textarea.get_focus() == false && textarea.get_placeholder() != null) {
		if(text == "") {
			text = textarea.get_placeholder();
			textarea.addClass(":empty");
		} else {
			textarea.removeClass(":empty");
		}
	} else {
		var placeholderVisible = text.length == 0;
		if(placeholderVisible == true) {
			text = "";
			textarea.removeClass(":empty");
		}
	}
	textarea.getTextInput().set_text("" + text);
	textarea.getTextInput().invalidateComponent("measure");
	if(!(textarea._layout == null || textarea._layoutLocked == true)) {
		textarea.invalidateComponent("layout");
	}
};
var haxe_ui_components__$TextArea_Events = function(textarea) {
	haxe_ui_events_Events.call(this,textarea);
	this._textarea = textarea;
};
$hxClasses["haxe.ui.components._TextArea.Events"] = haxe_ui_components__$TextArea_Events;
haxe_ui_components__$TextArea_Events.__name__ = "haxe.ui.components._TextArea.Events";
haxe_ui_components__$TextArea_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$TextArea_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_textarea: null
	,register: function() {
		var _gthis = this;
		if(this._textarea.getTextInput().get_data().onChangedCallback == null) {
			this._textarea.getTextInput().set_multiline(true);
			this._textarea.getTextInput().get_data().onChangedCallback = function() {
				if(_gthis._textarea.hasClass(":empty") == false) {
					_gthis._textarea.set_text(_gthis._textarea.getTextInput().get_text());
					(js_Boot.__cast(_gthis._textarea._compositeBuilder , haxe_ui_components__$TextArea_TextAreaBuilder)).checkScrolls();
				}
			};
		}
		if(this._textarea.getTextInput().get_data().onScrollCallback == null) {
			this._textarea.getTextInput().get_data().onScrollCallback = function() {
				var hscroll = _gthis._textarea.findComponent(null,haxe_ui_components_HorizontalScroll,false);
				if(hscroll != null) {
					hscroll.set_pos(_gthis._textarea.getTextInput().get_hscrollPos());
				}
				var vscroll = _gthis._textarea.findComponent(null,haxe_ui_components_VerticalScroll,false);
				if(vscroll != null) {
					vscroll.set_pos(_gthis._textarea.getTextInput().get_vscrollPos());
				}
			};
		}
		var hscroll = this._textarea.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null && hscroll.hasEvent("change",$bind(this,this.onScrollChange)) == false) {
			hscroll.registerEvent("change",$bind(this,this.onScrollChange));
		}
		var vscroll = this._textarea.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null && vscroll.hasEvent("change",$bind(this,this.onScrollChange)) == false) {
			vscroll.registerEvent("change",$bind(this,this.onScrollChange));
		}
		if(this.hasEvent("mousewheel",$bind(this,this.onMouseWheel)) == false) {
			this.registerEvent("mousewheel",$bind(this,this.onMouseWheel));
		}
		if(this.hasEvent("mousedown",$bind(this,this.onMouseDown)) == false) {
			this.registerEvent("mousedown",$bind(this,this.onMouseDown));
		}
		if(this.hasEvent("focusin",$bind(this,this.onFocusChange)) == false) {
			this.registerEvent("focusin",$bind(this,this.onFocusChange));
		}
		if(this.hasEvent("focusout",$bind(this,this.onFocusChange)) == false) {
			this.registerEvent("focusout",$bind(this,this.onFocusChange));
		}
	}
	,unregister: function() {
		this._textarea.getTextInput().get_data().onChangedCallback = null;
		this._textarea.getTextInput().get_data().onScrollCallback = null;
		var hscroll = this._textarea.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null) {
			hscroll.unregisterEvent("change",$bind(this,this.onScrollChange));
		}
		var vscroll = this._textarea.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			vscroll.unregisterEvent("change",$bind(this,this.onScrollChange));
		}
		this.unregisterEvent("mousewheel",$bind(this,this.onMouseWheel));
		this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
		this.unregisterEvent("focusin",$bind(this,this.onFocusChange));
		this.unregisterEvent("focusout",$bind(this,this.onFocusChange));
	}
	,onMouseWheel: function(event) {
		if(this._textarea.getTextInput().get_data().vscrollNativeWheel == true) {
			return;
		}
		var vscroll = this._textarea.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			var step = 20;
			if(this._textarea.getTextInput().get_data().vscrollPageStep != null) {
				step = this._textarea.getTextInput().get_data().vscrollPageStep;
			} else {
				step = Math.ceil((this._textarea.getTextInput().get_textStyle().fontSize + 1) / 10) * 10;
			}
			if(event.delta > 0) {
				var _g = vscroll;
				_g.set_pos(_g.get_pos() - step);
			} else if(event.delta < 0) {
				var _g = vscroll;
				_g.set_pos(_g.get_pos() + step);
			}
		}
	}
	,onScrollChange: function(event) {
		var hscroll = this._textarea.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null) {
			this._textarea.getTextInput().set_hscrollPos(hscroll.get_pos());
		}
		var vscroll = this._textarea.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			this._textarea.getTextInput().set_vscrollPos(vscroll.get_pos());
		}
	}
	,onMouseDown: function(event) {
		this._textarea.set_focus(true);
	}
	,onFocusChange: function(event) {
		if(this._textarea.get_focus() == true) {
			this._textarea.getTextInput().focus();
		} else {
			this._textarea.getTextInput().blur();
		}
		haxe_ui_components__$TextArea_TextAreaHelper.validateText(this._textarea,this._textarea.get_text());
	}
	,__class__: haxe_ui_components__$TextArea_Events
});
var haxe_ui_components__$TextArea_TextAreaBuilder = function(textarea) {
	haxe_ui_core_CompositeBuilder.call(this,textarea);
	this._textarea = textarea;
};
$hxClasses["haxe.ui.components._TextArea.TextAreaBuilder"] = haxe_ui_components__$TextArea_TextAreaBuilder;
haxe_ui_components__$TextArea_TextAreaBuilder.__name__ = "haxe.ui.components._TextArea.TextAreaBuilder";
haxe_ui_components__$TextArea_TextAreaBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$TextArea_TextAreaBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_textarea: null
	,checkScrolls: function() {
		if(this._textarea.get_native() == true) {
			return;
		}
		var textInput = this._textarea.getTextInput();
		var hscroll = this._component.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(textInput.get_textWidth() - textInput.get_width() > 1) {
			if(hscroll == null) {
				hscroll = this.createHScroll();
			}
			hscroll.set_max(textInput.get_hscrollMax());
			hscroll.set_pos(textInput.get_hscrollPos());
			hscroll.set_pageSize(textInput.get_hscrollPageSize());
		} else if(hscroll != null) {
			this._component.removeComponent(hscroll);
		}
		var vscroll = this._component.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(textInput.get_textHeight() - textInput.get_height() > 1) {
			if(vscroll == null) {
				vscroll = this.createVScroll();
			}
			vscroll.set_max(textInput.get_vscrollMax());
			vscroll.set_pos(textInput.get_vscrollPos());
			vscroll.set_pageSize(textInput.get_vscrollPageSize());
			if(this._textarea.get_autoScrollToBottom() == true) {
				this._textarea.scrollToBottom();
			}
		} else if(vscroll != null) {
			this._component.removeComponent(vscroll);
		}
	}
	,createHScroll: function() {
		var hscroll = new haxe_ui_components_HorizontalScroll();
		hscroll.set_percentWidth(100);
		hscroll.set_id("textarea-hscroll");
		this._component.addComponent(hscroll);
		this._component.registerInternalEvents(null,true);
		return hscroll;
	}
	,createVScroll: function() {
		var vscroll = new haxe_ui_components_VerticalScroll();
		if(this._textarea.getTextInput().get_data().vscrollPageStep != null) {
			vscroll.set_increment(this._textarea.getTextInput().get_data().vscrollPageStep);
		}
		vscroll.set_percentHeight(100);
		vscroll.set_id("textarea-vscroll");
		this._component.addComponent(vscroll);
		this._component.registerInternalEvents(null,true);
		return vscroll;
	}
	,applyStyle: function(style) {
		haxe_ui_core_CompositeBuilder.prototype.applyStyle.call(this,style);
		if(this._component.hasTextInput() == true) {
			this._component.getTextInput().set_textStyle(style);
		}
	}
	,__class__: haxe_ui_components__$TextArea_TextAreaBuilder
});
var haxe_ui_components_TextField = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.TextField"] = haxe_ui_components_TextField;
haxe_ui_components_TextField.__name__ = "haxe.ui.components.TextField";
haxe_ui_components_TextField.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_TextField.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("password",haxe_ui_components__$TextField_PasswordBehaviour);
		this.behaviours.register("maxChars",haxe_ui_components__$TextField_MaxCharsBehaviour,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("restrictChars",haxe_ui_components__$TextField_RestrictCharsBehaviour);
		this.behaviours.register("placeholder",haxe_ui_components__$TextField_PlaceholderBehaviour);
		this.behaviours.register("text",haxe_ui_components__$TextField_TextBehaviour);
		this.behaviours.register("icon",haxe_ui_components__$TextField_IconBehaviour);
	}
	,get_password: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("password"));
	}
	,set_password: function(value) {
		this.behaviours.set("password",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"password");
		return value;
	}
	,get_maxChars: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("maxChars"));
	}
	,set_maxChars: function(value) {
		this.behaviours.set("maxChars",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"maxChars");
		return value;
	}
	,get_restrictChars: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("restrictChars"));
	}
	,set_restrictChars: function(value) {
		this.behaviours.set("restrictChars",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"restrictChars");
		return value;
	}
	,get_placeholder: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("placeholder"));
	}
	,set_placeholder: function(value) {
		this.behaviours.set("placeholder",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"placeholder");
		return value;
	}
	,get_icon: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("icon"));
	}
	,set_icon: function(value) {
		this.behaviours.set("icon",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"icon");
		return value;
	}
	,get_value: function() {
		return this.get_text();
	}
	,set_value: function(value) {
		this.set_text(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"text");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		c.set_password(this.get_password());
		c.set_maxChars(this.get_maxChars());
		if(this.get_restrictChars() != null) {
			c.set_restrictChars(this.get_restrictChars());
		}
		if(this.get_placeholder() != null) {
			c.set_placeholder(this.get_placeholder());
		}
		if(this.get_icon() != null) {
			c.set_icon(this.get_icon());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_TextField();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components__$TextField_Events;
		this._compositeBuilderClass = haxe_ui_components__$TextField_Builder;
		this._defaultLayoutClass = haxe_ui_components__$TextField_TextFieldLayout;
	}
	,__class__: haxe_ui_components_TextField
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_icon:"set_icon",get_icon:"get_icon",set_placeholder:"set_placeholder",get_placeholder:"get_placeholder",set_restrictChars:"set_restrictChars",get_restrictChars:"get_restrictChars",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",set_password:"set_password",get_password:"get_password"})
});
var haxe_ui_components__$TextField_TextFieldLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._TextField.TextFieldLayout"] = haxe_ui_components__$TextField_TextFieldLayout;
haxe_ui_components__$TextField_TextFieldLayout.__name__ = "haxe.ui.components._TextField.TextFieldLayout";
haxe_ui_components__$TextField_TextFieldLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$TextField_TextFieldLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	iconPosition: null
	,get_iconPosition: function() {
		if(this.get_component().get_style().iconPosition == null) {
			return "left";
		}
		return this.get_component().get_style().iconPosition;
	}
	,repositionChildren: function() {
		var icon = this.get_component().findComponent(null,haxe_ui_components_Image,false);
		var xpos = this.get_paddingLeft();
		if(icon != null) {
			switch(this.get_iconPosition()) {
			case "left":
				icon.set_left(xpos);
				icon.set_top(this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2);
				xpos += icon.get_componentWidth() + this.get_horizontalSpacing();
				break;
			case "right":
				icon.set_left(this.get_component().get_componentWidth() - icon.get_componentWidth() - this.get_paddingRight());
				icon.set_top(this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2);
				break;
			}
		}
		if(this.get_component().hasTextInput() == true) {
			this.get_component().getTextInput().set_left(xpos);
			this.get_component().getTextInput().set_top(this.get_paddingTop() + this.get_component().get_componentHeight() / 2 - (this.get_component().getTextInput().get_height() + this.get_paddingTop() + this.get_paddingBottom()) / 2);
		}
	}
	,resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		if(this.get_component().hasTextInput() == true) {
			var size = this.get_usableSize();
			this.get_component().getTextInput().set_width(size.width);
			this.get_component().getTextInput().set_height(size.height);
		}
	}
	,calcAutoSize: function(exclusions) {
		var size = haxe_ui_layouts_DefaultLayout.prototype.calcAutoSize.call(this,exclusions);
		if(this.get_component().hasTextInput() == true) {
			if(this.get_component().getTextInput().get_textWidth() + this.get_paddingLeft() + this.get_paddingRight() > size.width) {
				size.width = this.get_component().getTextInput().get_textWidth() + this.get_paddingLeft() + this.get_paddingRight();
			}
			if(this.get_component().getTextInput().get_textHeight() + this.get_paddingTop() + this.get_paddingBottom() > size.height) {
				size.height = this.get_component().getTextInput().get_textHeight() + this.get_paddingTop() + this.get_paddingBottom();
			}
		}
		return size;
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		var icon = this.get_component().findComponent(null,haxe_ui_components_Image,false);
		if(icon != null) {
			size.width -= icon.get_componentWidth() + this.get_horizontalSpacing();
		}
		return size;
	}
	,__class__: haxe_ui_components__$TextField_TextFieldLayout
	,__properties__: $extend(haxe_ui_layouts_DefaultLayout.prototype.__properties__,{get_iconPosition:"get_iconPosition"})
});
var haxe_ui_components__$TextField_PasswordBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.PasswordBehaviour"] = haxe_ui_components__$TextField_PasswordBehaviour;
haxe_ui_components__$TextField_PasswordBehaviour.__name__ = "haxe.ui.components._TextField.PasswordBehaviour";
haxe_ui_components__$TextField_PasswordBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_PasswordBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	originalValue: null
	,validateData: function() {
		if(this.originalValue == null) {
			this.originalValue = this._value;
		}
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		textfield.getTextInput().set_password(haxe_ui_util_Variant.toBool(this._value));
	}
	,__class__: haxe_ui_components__$TextField_PasswordBehaviour
});
var haxe_ui_components__$TextField_MaxCharsBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.MaxCharsBehaviour"] = haxe_ui_components__$TextField_MaxCharsBehaviour;
haxe_ui_components__$TextField_MaxCharsBehaviour.__name__ = "haxe.ui.components._TextField.MaxCharsBehaviour";
haxe_ui_components__$TextField_MaxCharsBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_MaxCharsBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		haxe_ui_components__$TextField_TextFieldHelper.validateText(textfield,textfield.get_text());
	}
	,__class__: haxe_ui_components__$TextField_MaxCharsBehaviour
});
var haxe_ui_components__$TextField_RestrictCharsBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.RestrictCharsBehaviour"] = haxe_ui_components__$TextField_RestrictCharsBehaviour;
haxe_ui_components__$TextField_RestrictCharsBehaviour.__name__ = "haxe.ui.components._TextField.RestrictCharsBehaviour";
haxe_ui_components__$TextField_RestrictCharsBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_RestrictCharsBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	regexp: null
	,validateData: function() {
		var excludeEReg = new EReg("\\^(.-.|.)","gu");
		var excludeChars = "";
		var includeChars = excludeEReg.map(haxe_ui_util_Variant.toString(this._value),function(ereg) {
			excludeChars += ereg.matched(1);
			return "";
		});
		var testRegexpParts = [];
		if(includeChars.length > 0) {
			testRegexpParts.push("[^" + (this._value == null ? "null" : haxe_ui_util_Variant.toString(this._value)) + "]");
		}
		if(excludeChars.length > 0) {
			testRegexpParts.push("[" + excludeChars + "]");
		}
		this.regexp = new EReg("(" + testRegexpParts.join(" | ") + ")","g");
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		haxe_ui_components__$TextField_TextFieldHelper.validateText(textfield,textfield.get_text());
	}
	,__class__: haxe_ui_components__$TextField_RestrictCharsBehaviour
});
var haxe_ui_components__$TextField_PlaceholderBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.PlaceholderBehaviour"] = haxe_ui_components__$TextField_PlaceholderBehaviour;
haxe_ui_components__$TextField_PlaceholderBehaviour.__name__ = "haxe.ui.components._TextField.PlaceholderBehaviour";
haxe_ui_components__$TextField_PlaceholderBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_PlaceholderBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		haxe_ui_components__$TextField_TextFieldHelper.validateText(textfield,textfield.get_text());
	}
	,__class__: haxe_ui_components__$TextField_PlaceholderBehaviour
});
var haxe_ui_components__$TextField_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.TextBehaviour"] = haxe_ui_components__$TextField_TextBehaviour;
haxe_ui_components__$TextField_TextBehaviour.__name__ = "haxe.ui.components._TextField.TextBehaviour";
haxe_ui_components__$TextField_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		haxe_ui_components__$TextField_TextFieldHelper.validateText(textfield,haxe_ui_util_Variant.toString(this._value));
		if(this._value != null && haxe_ui_util_Variant.neq(this._value,haxe_ui_util_Variant.fromString(""))) {
			this._value = haxe_ui_util_Variant.fromString(textfield.getTextInput().get_text());
		}
	}
	,__class__: haxe_ui_components__$TextField_TextBehaviour
});
var haxe_ui_components__$TextField_IconBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.IconBehaviour"] = haxe_ui_components__$TextField_IconBehaviour;
haxe_ui_components__$TextField_IconBehaviour.__name__ = "haxe.ui.components._TextField.IconBehaviour";
haxe_ui_components__$TextField_IconBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_IconBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		var icon = textfield.findComponent(null,haxe_ui_components_Image,false);
		if((this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) && icon != null) {
			textfield.removeComponent(icon);
		} else {
			if(icon == null) {
				icon = new haxe_ui_components_Image();
				icon.set_id("textfield-icon");
				icon.addClass("icon");
				icon.scriptAccess = false;
				textfield.addComponentAt(icon,0);
			}
			icon.set_resource(haxe_ui_util_Variant.fromString(haxe_ui_util_Variant.toString(this._value)));
		}
	}
	,__class__: haxe_ui_components__$TextField_IconBehaviour
});
var haxe_ui_components__$TextField_TextFieldHelper = function() { };
$hxClasses["haxe.ui.components._TextField.TextFieldHelper"] = haxe_ui_components__$TextField_TextFieldHelper;
haxe_ui_components__$TextField_TextFieldHelper.__name__ = "haxe.ui.components._TextField.TextFieldHelper";
haxe_ui_components__$TextField_TextFieldHelper.validateText = function(textfield,text) {
	if(text == null) {
		text = "";
	}
	var placeholderVisible = text.length == 0;
	var password = (js_Boot.__cast(textfield.behaviours.find("password") , haxe_ui_components__$TextField_PasswordBehaviour)).originalValue;
	var regexp = (js_Boot.__cast(textfield.behaviours.find("restrictChars") , haxe_ui_components__$TextField_RestrictCharsBehaviour)).regexp;
	if(textfield.get_maxChars() > 0 && text.length > textfield.get_maxChars() && placeholderVisible == false) {
		text = HxOverrides.substr(text,0,textfield.get_maxChars());
	}
	if(regexp != null) {
		text = text.replace(regexp.r,"");
	}
	if(textfield.get_placeholder() != null) {
		if(textfield.get_focus() == false) {
			if(text.length == 0) {
				text = textfield.get_placeholder();
				textfield.set_password(false);
				textfield.addClass(":empty");
			} else if(text != textfield.get_placeholder()) {
				textfield.set_password(haxe_ui_util_Variant.toBool(password));
				textfield.removeClass(":empty");
			}
		} else {
			textfield.removeClass(":empty");
			if(text == textfield.get_placeholder()) {
				text = "";
			}
			textfield.set_password(haxe_ui_util_Variant.toBool(password));
		}
	} else {
		textfield.set_password(haxe_ui_util_Variant.toBool(password));
		if(placeholderVisible == true) {
			textfield.removeClass(":empty");
		}
	}
	textfield.getTextInput().set_text("" + text);
	if(!(textfield._layout == null || textfield._layoutLocked == true)) {
		textfield.invalidateComponent("layout");
	}
};
var haxe_ui_components__$TextField_Events = function(textfield) {
	haxe_ui_events_Events.call(this,textfield);
	this._textfield = textfield;
};
$hxClasses["haxe.ui.components._TextField.Events"] = haxe_ui_components__$TextField_Events;
haxe_ui_components__$TextField_Events.__name__ = "haxe.ui.components._TextField.Events";
haxe_ui_components__$TextField_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$TextField_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_textfield: null
	,register: function() {
		var _gthis = this;
		if(this._textfield.getTextInput().get_data().onChangedCallback == null) {
			this._textfield.getTextInput().set_multiline(false);
			this._textfield.getTextInput().get_data().onChangedCallback = function() {
				if(_gthis._textfield.hasClass(":empty") == false) {
					_gthis._textfield.set_text(_gthis._textfield.getTextInput().get_text());
				}
			};
		}
		this.registerEvent("mousedown",$bind(this,this.onMouseDown));
		this.registerEvent("focusin",$bind(this,this.onFocusChange));
		this.registerEvent("focusout",$bind(this,this.onFocusChange));
	}
	,unregister: function() {
		this._textfield.getTextInput().get_data().onChangedCallback = null;
		this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
		this.unregisterEvent("focusin",$bind(this,this.onFocusChange));
		this.unregisterEvent("focusout",$bind(this,this.onFocusChange));
	}
	,onMouseDown: function(event) {
		this._textfield.set_focus(true);
	}
	,onFocusChange: function(event) {
		if(this._textfield.get_focus() == true) {
			this._textfield.getTextInput().focus();
		} else {
			this._textfield.getTextInput().blur();
		}
		haxe_ui_components__$TextField_TextFieldHelper.validateText(this._textfield,this._textfield.get_text());
	}
	,__class__: haxe_ui_components__$TextField_Events
});
var haxe_ui_components__$TextField_Builder = function(textfield) {
	haxe_ui_core_CompositeBuilder.call(this,textfield);
	this._textfield = textfield;
};
$hxClasses["haxe.ui.components._TextField.Builder"] = haxe_ui_components__$TextField_Builder;
haxe_ui_components__$TextField_Builder.__name__ = "haxe.ui.components._TextField.Builder";
haxe_ui_components__$TextField_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$TextField_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_textfield: null
	,applyStyle: function(style) {
		if(style.icon != null) {
			this._textfield.set_icon(style.icon);
		}
		if(this._textfield.hasTextInput() == true) {
			this._textfield.getTextInput().set_textStyle(style);
		}
	}
	,__class__: haxe_ui_components__$TextField_Builder
});
var haxe_ui_components_Toggle = function() {
	haxe_ui_components_Button.call(this);
	this.set_toggle(true);
};
$hxClasses["haxe.ui.components.Toggle"] = haxe_ui_components_Toggle;
haxe_ui_components_Toggle.__name__ = "haxe.ui.components.Toggle";
haxe_ui_components_Toggle.__super__ = haxe_ui_components_Button;
haxe_ui_components_Toggle.prototype = $extend(haxe_ui_components_Button.prototype,{
	registerBehaviours: function() {
		haxe_ui_components_Button.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Button.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Toggle();
	}
	,__class__: haxe_ui_components_Toggle
});
var haxe_ui_components_VGrid = function() {
	haxe_ui_core_Component.call(this);
	this.set_columns(1);
};
$hxClasses["haxe.ui.components.VGrid"] = haxe_ui_components_VGrid;
haxe_ui_components_VGrid.__name__ = "haxe.ui.components.VGrid";
haxe_ui_components_VGrid.__super__ = haxe_ui_core_Component;
haxe_ui_components_VGrid.prototype = $extend(haxe_ui_core_Component.prototype,{
	createDefaults: function() {
		haxe_ui_core_Component.prototype.createDefaults.call(this);
		this._defaultLayoutClass = haxe_ui_layouts_VerticalGridLayout;
	}
	,_columns: null
	,get_columns: function() {
		return this._columns;
	}
	,set_columns: function(value) {
		if(this._columns != value) {
			this._columns = value;
			(js_Boot.__cast(this.get_layout() , haxe_ui_layouts_VerticalGridLayout)).set_columns(value);
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		c.set_columns(this.get_columns());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_VGrid();
	}
	,__class__: haxe_ui_components_VGrid
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns"})
});
var haxe_ui_components_VerticalProgress = function() {
	haxe_ui_components_Progress.call(this);
};
$hxClasses["haxe.ui.components.VerticalProgress"] = haxe_ui_components_VerticalProgress;
haxe_ui_components_VerticalProgress.__name__ = "haxe.ui.components.VerticalProgress";
haxe_ui_components_VerticalProgress.__super__ = haxe_ui_components_Progress;
haxe_ui_components_VerticalProgress.prototype = $extend(haxe_ui_components_Progress.prototype,{
	posFromCoord: function(coord) {
		return haxe_ui_util_Variant.toFloat(this.behaviours.call("posFromCoord",coord));
	}
	,registerBehaviours: function() {
		haxe_ui_components_Progress.prototype.registerBehaviours.call(this);
		this.behaviours.register("posFromCoord",haxe_ui_components_VerticalRangePosFromCoord);
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Progress.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_VerticalProgress();
	}
	,registerComposite: function() {
		haxe_ui_components_Progress.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_components_VerticalRangeLayout;
	}
	,__class__: haxe_ui_components_VerticalProgress
});
var haxe_ui_components_VerticalRange = function() {
	haxe_ui_components_Range.call(this);
};
$hxClasses["haxe.ui.components.VerticalRange"] = haxe_ui_components_VerticalRange;
haxe_ui_components_VerticalRange.__name__ = "haxe.ui.components.VerticalRange";
haxe_ui_components_VerticalRange.__super__ = haxe_ui_components_Range;
haxe_ui_components_VerticalRange.prototype = $extend(haxe_ui_components_Range.prototype,{
	posFromCoord: function(coord) {
		return haxe_ui_util_Variant.toFloat(this.behaviours.call("posFromCoord",coord));
	}
	,registerComposite: function() {
		haxe_ui_components_Range.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_components_VerticalRangeLayout;
	}
	,registerBehaviours: function() {
		haxe_ui_components_Range.prototype.registerBehaviours.call(this);
		this.behaviours.register("posFromCoord",haxe_ui_components_VerticalRangePosFromCoord);
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Range.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_VerticalRange();
	}
	,__class__: haxe_ui_components_VerticalRange
});
var haxe_ui_components_VerticalRangePosFromCoord = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components.VerticalRangePosFromCoord"] = haxe_ui_components_VerticalRangePosFromCoord;
haxe_ui_components_VerticalRangePosFromCoord.__name__ = "haxe.ui.components.VerticalRangePosFromCoord";
haxe_ui_components_VerticalRangePosFromCoord.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components_VerticalRangePosFromCoord.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(pos) {
		var range = js_Boot.__cast(this._component , haxe_ui_components_Range);
		var p = js_Boot.__cast(pos , haxe_ui_geom_Point);
		var ypos = p.y - range.get_layout().get_paddingTop();
		var ucy = range.get_layout().get_usableHeight();
		if(ypos >= ucy) {
			ypos = ucy;
		}
		var m = range.get_max() - range.get_min();
		var d = ucy / m;
		var v = ypos;
		var p = v / d;
		return haxe_ui_util_Variant.fromFloat(range.get_max() - p);
	}
	,__class__: haxe_ui_components_VerticalRangePosFromCoord
});
var haxe_ui_components_VerticalRangeLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components.VerticalRangeLayout"] = haxe_ui_components_VerticalRangeLayout;
haxe_ui_components_VerticalRangeLayout.__name__ = "haxe.ui.components.VerticalRangeLayout";
haxe_ui_components_VerticalRangeLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components_VerticalRangeLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		var range = js_Boot.__cast(this.get_component() , haxe_ui_components_Range);
		var value = this.findComponent("" + range.get_cssName() + "-value");
		if(value != null) {
			var ucy = this.get_usableHeight();
			var m = range.get_max() - range.get_min();
			var d = ucy / m;
			var startInPixels = range.get_start() * d - range.get_min() * d;
			var endInPixels = range.get_end() * d - range.get_min() * d;
			var cy = Math.round(endInPixels - startInPixels);
			if(cy < 0) {
				cy = 0;
			} else if(cy > ucy) {
				cy = ucy;
			}
			if(cy == 0) {
				value.set_height(0);
				value.set_hidden(true);
			} else {
				value.set_height(cy);
				value.set_hidden(false);
			}
		}
	}
	,repositionChildren: function() {
		var range = js_Boot.__cast(this.get_component() , haxe_ui_components_Range);
		var value = this.findComponent("" + range.get_cssName() + "-value");
		var ucy = this.get_usableHeight();
		var m = range.get_max() - range.get_min();
		var d = ucy / m;
		var startInPixels = ucy - value.get_height() - (range.get_start() * d - range.get_min() * d);
		value.set_left(this.get_paddingLeft());
		value.set_top(this.get_paddingTop() + startInPixels);
	}
	,__class__: haxe_ui_components_VerticalRangeLayout
});
var haxe_ui_components_VerticalScroll = function() {
	haxe_ui_components_Scroll.call(this);
};
$hxClasses["haxe.ui.components.VerticalScroll"] = haxe_ui_components_VerticalScroll;
haxe_ui_components_VerticalScroll.__name__ = "haxe.ui.components.VerticalScroll";
haxe_ui_components_VerticalScroll.__super__ = haxe_ui_components_Scroll;
haxe_ui_components_VerticalScroll.prototype = $extend(haxe_ui_components_Scroll.prototype,{
	registerBehaviours: function() {
		haxe_ui_components_Scroll.prototype.registerBehaviours.call(this);
		this.behaviours.register("posFromCoord",haxe_ui_components__$VerticalScroll_PosFromCoord);
		this.behaviours.register("applyPageFromCoord",haxe_ui_components__$VerticalScroll_ApplyPageFromCoord);
	}
	,createChildren: function() {
		haxe_ui_components_Scroll.prototype.createChildren.call(this);
		if(this.get_componentHeight() <= 0) {
			this.set_componentHeight(150);
		}
	}
	,createDefaults: function() {
		haxe_ui_components_Scroll.prototype.createDefaults.call(this);
		this._defaultLayoutClass = haxe_ui_components__$VerticalScroll_VerticalScrollLayout;
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Scroll.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_VerticalScroll();
	}
	,__class__: haxe_ui_components_VerticalScroll
});
var haxe_ui_components__$VerticalScroll_PosFromCoord = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._VerticalScroll.PosFromCoord"] = haxe_ui_components__$VerticalScroll_PosFromCoord;
haxe_ui_components__$VerticalScroll_PosFromCoord.__name__ = "haxe.ui.components._VerticalScroll.PosFromCoord";
haxe_ui_components__$VerticalScroll_PosFromCoord.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$VerticalScroll_PosFromCoord.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(pos) {
		var p = js_Boot.__cast(pos , haxe_ui_geom_Point);
		var scroll = js_Boot.__cast(this._component , haxe_ui_components_Scroll);
		var deinc = this._component.findComponent("scroll-deinc-button");
		var thumb = this._component.findComponent("scroll-thumb-button");
		var ypos = p.y;
		var minY = 0;
		if(deinc != null && deinc.get_hidden() == false) {
			minY = deinc.get_height() + scroll.get_layout().get_verticalSpacing();
		}
		var maxY = scroll.get_layout().get_usableHeight() - thumb.get_height();
		if(deinc != null && deinc.get_hidden() == false) {
			maxY += deinc.get_height() + scroll.get_layout().get_verticalSpacing();
		}
		if(ypos < minY) {
			ypos = minY;
		} else if(ypos > maxY) {
			ypos = maxY;
		}
		var ucy = scroll.get_layout().get_usableHeight();
		ucy -= thumb.get_height();
		var m = scroll.get_max() - scroll.get_min() | 0;
		var v = ypos - minY;
		var value = scroll.get_min() + v / ucy * m;
		return haxe_ui_util_Variant.fromFloat(value);
	}
	,__class__: haxe_ui_components__$VerticalScroll_PosFromCoord
});
var haxe_ui_components__$VerticalScroll_ApplyPageFromCoord = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._VerticalScroll.ApplyPageFromCoord"] = haxe_ui_components__$VerticalScroll_ApplyPageFromCoord;
haxe_ui_components__$VerticalScroll_ApplyPageFromCoord.__name__ = "haxe.ui.components._VerticalScroll.ApplyPageFromCoord";
haxe_ui_components__$VerticalScroll_ApplyPageFromCoord.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$VerticalScroll_ApplyPageFromCoord.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(pos) {
		var p = js_Boot.__cast(pos , haxe_ui_geom_Point);
		var scroll = js_Boot.__cast(this._component , haxe_ui_components_Scroll);
		var thumb = this._component.findComponent("scroll-thumb-button");
		if(p.y < thumb.get_screenTop()) {
			var _g = scroll;
			_g.set_pos(_g.get_pos() - scroll.get_pageSize());
		} else if(p.y > thumb.get_screenTop() + thumb.get_height()) {
			var _g = scroll;
			_g.set_pos(_g.get_pos() + scroll.get_pageSize());
		}
		return null;
	}
	,__class__: haxe_ui_components__$VerticalScroll_ApplyPageFromCoord
});
var haxe_ui_components__$VerticalScroll_VerticalScrollLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._VerticalScroll.VerticalScrollLayout"] = haxe_ui_components__$VerticalScroll_VerticalScrollLayout;
haxe_ui_components__$VerticalScroll_VerticalScrollLayout.__name__ = "haxe.ui.components._VerticalScroll.VerticalScrollLayout";
haxe_ui_components__$VerticalScroll_VerticalScrollLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$VerticalScroll_VerticalScrollLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		var scroll = js_Boot.__cast(this.get_component() , haxe_ui_components_Scroll);
		var thumb = this.get_component().findComponent("scroll-thumb-button");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var ucy = this.get_usableHeight();
			var thumbHeight = scroll.get_pageSize() / m * ucy;
			if(thumbHeight < this.get_innerWidth()) {
				thumbHeight = this.get_innerWidth();
			} else if(thumbHeight > ucy) {
				thumbHeight = ucy;
			}
			if(thumbHeight > 0 && isNaN(thumbHeight) == false) {
				thumb.set_height(thumbHeight);
			}
		}
	}
	,repositionChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.repositionChildren.call(this);
		var deinc = this.get_component().findComponent("scroll-deinc-button");
		var inc = this.get_component().findComponent("scroll-inc-button");
		if(inc != null && this.hidden(inc) == false) {
			inc.set_top(this.get_component().get_height() - inc.get_height() - this.get_paddingBottom());
		}
		var scroll = js_Boot.__cast(this.get_component() , haxe_ui_components_Scroll);
		var thumb = this.get_component().findComponent("scroll-thumb-button");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var u = this.get_usableHeight();
			u -= thumb.get_height();
			var y = (scroll.get_pos() - scroll.get_min()) / m * u;
			y += this.get_paddingTop();
			if(deinc != null && this.hidden(deinc) == false) {
				y += deinc.get_height() + this.get_verticalSpacing();
			}
			thumb.set_left(Math.round(thumb.get_left()));
			thumb.set_top(y);
		}
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		var deinc = this.get_component().findComponent("scroll-deinc-button");
		var inc = this.get_component().findComponent("scroll-inc-button");
		if(deinc != null && this.hidden(deinc) == false) {
			ucy -= deinc.get_height() + this.get_verticalSpacing();
		}
		if(inc != null && this.hidden(inc) == false) {
			ucy -= inc.get_height() + this.get_verticalSpacing();
		}
		return ucy;
	}
	,__class__: haxe_ui_components__$VerticalScroll_VerticalScrollLayout
});
var haxe_ui_components_VerticalSlider = function() {
	haxe_ui_components_Slider.call(this);
};
$hxClasses["haxe.ui.components.VerticalSlider"] = haxe_ui_components_VerticalSlider;
haxe_ui_components_VerticalSlider.__name__ = "haxe.ui.components.VerticalSlider";
haxe_ui_components_VerticalSlider.__super__ = haxe_ui_components_Slider;
haxe_ui_components_VerticalSlider.prototype = $extend(haxe_ui_components_Slider.prototype,{
	registerComposite: function() {
		haxe_ui_components_Slider.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_components_VerticalSliderLayout;
		this._compositeBuilderClass = haxe_ui_components__$VerticalSlider_Builder;
	}
	,registerBehaviours: function() {
		haxe_ui_components_Slider.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Slider.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_components_VerticalSlider();
	}
	,__class__: haxe_ui_components_VerticalSlider
});
var haxe_ui_components_VerticalSliderLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components.VerticalSliderLayout"] = haxe_ui_components_VerticalSliderLayout;
haxe_ui_components_VerticalSliderLayout.__name__ = "haxe.ui.components.VerticalSliderLayout";
haxe_ui_components_VerticalSliderLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components_VerticalSliderLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.repositionChildren.call(this);
		var range = this.findComponent(null,haxe_ui_components_Range);
		var rangeValue = range.findComponent("range-value");
		var startThumb = this.findComponent("start-thumb");
		var endThumb = this.findComponent("end-thumb");
		if(startThumb != null) {
			startThumb.set_top(range.get_top() + rangeValue.get_top() + rangeValue.get_height() - startThumb.get_height() / 2);
		}
		endThumb.set_top(range.get_top() + rangeValue.get_top() - endThumb.get_height() / 2);
	}
	,__class__: haxe_ui_components_VerticalSliderLayout
});
var haxe_ui_components__$VerticalSlider_Builder = function(component) {
	haxe_ui_components_SliderBuilder.call(this,component);
};
$hxClasses["haxe.ui.components._VerticalSlider.Builder"] = haxe_ui_components__$VerticalSlider_Builder;
haxe_ui_components__$VerticalSlider_Builder.__name__ = "haxe.ui.components._VerticalSlider.Builder";
haxe_ui_components__$VerticalSlider_Builder.__super__ = haxe_ui_components_SliderBuilder;
haxe_ui_components__$VerticalSlider_Builder.prototype = $extend(haxe_ui_components_SliderBuilder.prototype,{
	createValueComponent: function() {
		return new haxe_ui_components_VerticalRange();
	}
	,__class__: haxe_ui_components__$VerticalSlider_Builder
});
var haxe_ui_containers_Absolute = function() {
	haxe_ui_containers_Box.call(this);
	this.set_layout(new haxe_ui_layouts_AbsoluteLayout());
};
$hxClasses["haxe.ui.containers.Absolute"] = haxe_ui_containers_Absolute;
haxe_ui_containers_Absolute.__name__ = "haxe.ui.containers.Absolute";
haxe_ui_containers_Absolute.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_Absolute.prototype = $extend(haxe_ui_containers_Box.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_Absolute();
	}
	,__class__: haxe_ui_containers_Absolute
});
var haxe_ui_containers_Accordion = function() {
	haxe_ui_containers_VBox.call(this);
};
$hxClasses["haxe.ui.containers.Accordion"] = haxe_ui_containers_Accordion;
haxe_ui_containers_Accordion.__name__ = "haxe.ui.containers.Accordion";
haxe_ui_containers_Accordion.__super__ = haxe_ui_containers_VBox;
haxe_ui_containers_Accordion.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	registerComposite: function() {
		haxe_ui_containers_VBox.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers__$Accordion_Events;
		this._compositeBuilderClass = haxe_ui_containers__$Accordion_Builder;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
		this.behaviours.register("pageIndex",haxe_ui_containers__$Accordion_PageIndex,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("selectedPage",haxe_ui_behaviours_DefaultBehaviour);
	}
	,get_pageIndex: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("pageIndex"));
	}
	,set_pageIndex: function(value) {
		this.behaviours.set("pageIndex",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pageIndex");
		return value;
	}
	,get_selectedPage: function() {
		return haxe_ui_util_Variant.toComponent(this.behaviours.get("selectedPage"));
	}
	,set_selectedPage: function(value) {
		this.behaviours.set("selectedPage",haxe_ui_util_Variant.fromComponent(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedPage");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_Accordion();
	}
	,__class__: haxe_ui_containers_Accordion
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{set_selectedPage:"set_selectedPage",get_selectedPage:"get_selectedPage",set_pageIndex:"set_pageIndex",get_pageIndex:"get_pageIndex"})
});
var haxe_ui_containers__$Accordion_PageIndex = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._Accordion.PageIndex"] = haxe_ui_containers__$Accordion_PageIndex;
haxe_ui_containers__$Accordion_PageIndex.__name__ = "haxe.ui.containers._Accordion.PageIndex";
haxe_ui_containers__$Accordion_PageIndex.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers__$Accordion_PageIndex.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		this._value = value;
		if(haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromFloat(-1))) {
			return;
		}
		var buttons = this._component.findComponents(null,haxe_ui_components_Button,1);
		var selectedIndex = haxe_ui_util_Variant.toInt(value);
		var button = buttons[selectedIndex];
		var panel = this._component.getComponentAt(this._component.getComponentIndex(button) + 1);
		panel.swapClass(":expanded",":collapsed");
		panel.set_hidden(false);
		button.set_selected(true);
		var _g = 0;
		while(_g < buttons.length) {
			var b = buttons[_g];
			++_g;
			if(b != button) {
				var tempIndex = this._component.getComponentIndex(b);
				var tempPanel = this._component.getComponentAt(tempIndex + 1);
				b.set_selected(false);
				tempPanel.swapClass(":collapsed",":expanded");
			}
		}
	}
	,__class__: haxe_ui_containers__$Accordion_PageIndex
});
var haxe_ui_containers__$Accordion_Events = function(accordion) {
	haxe_ui_events_Events.call(this,accordion);
	this._accordion = accordion;
};
$hxClasses["haxe.ui.containers._Accordion.Events"] = haxe_ui_containers__$Accordion_Events;
haxe_ui_containers__$Accordion_Events.__name__ = "haxe.ui.containers._Accordion.Events";
haxe_ui_containers__$Accordion_Events.__super__ = haxe_ui_events_Events;
haxe_ui_containers__$Accordion_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_accordion: null
	,register: function() {
		var buttons = this._target.findComponents(null,haxe_ui_components_Button,1);
		var _g = 0;
		while(_g < buttons.length) {
			var button = buttons[_g];
			++_g;
			if(button.hasEvent("change",$bind(this,this.onButtonChanged)) == false) {
				button.registerEvent("change",$bind(this,this.onButtonChanged));
			}
		}
	}
	,unregister: function() {
		var buttons = this._target.findComponents(null,haxe_ui_components_Button,1);
		var _g = 0;
		while(_g < buttons.length) {
			var button = buttons[_g];
			++_g;
			button.unregisterEvent("change",$bind(this,this.onButtonChanged));
		}
	}
	,onButtonChanged: function(event) {
		var buttons = this._target.findComponents(null,haxe_ui_components_Button,1);
		var button = event.target;
		var index = buttons.indexOf(button);
		if(button.get_selected() == true) {
			if(index == this._accordion.get_pageIndex()) {
				return;
			}
			this._accordion.set_pageIndex(index);
		} else if(index == this._accordion.get_pageIndex()) {
			button.set_selected(true);
		}
	}
	,__class__: haxe_ui_containers__$Accordion_Events
});
var haxe_ui_containers__$Accordion_Builder = function(accordion) {
	haxe_ui_core_CompositeBuilder.call(this,accordion);
	this._accordion = accordion;
};
$hxClasses["haxe.ui.containers._Accordion.Builder"] = haxe_ui_containers__$Accordion_Builder;
haxe_ui_containers__$Accordion_Builder.__name__ = "haxe.ui.containers._Accordion.Builder";
haxe_ui_containers__$Accordion_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers__$Accordion_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_accordion: null
	,onReady: function() {
		haxe_ui_core_CompositeBuilder.prototype.onReady.call(this);
		var _g = 0;
		var _this = this._accordion;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_animatable(true);
		}
	}
	,addComponent: function(child) {
		if(!child.hasClass("accordion-button") && !child.hasClass("accordion-page")) {
			var button = new haxe_ui_components_Button();
			button.set_text(child.get_text());
			button.addClass("accordion-button");
			button.set_toggle(true);
			button.scriptAccess = false;
			this._accordion.addComponent(button);
			child.set_animatable(false);
			child.set_percentWidth(100);
			child.addClass("accordion-page");
			var c = this._accordion.addComponent(child);
			if(this._accordion.get_pageIndex() == -1) {
				child.set_percentHeight(100);
				this._accordion.set_pageIndex(0);
			} else {
				child.set_hidden(true);
			}
			child.set_onAnimationEnd(function(e) {
				if(e.target.hasClass(":collapsed")) {
					e.target.set_hidden(true);
				}
			});
			this._component.registerInternalEvents(null,true);
			var buttonCount = 0;
			var pageCount = 0;
			var _g = 0;
			var _this = this._accordion;
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.hasClass("accordion-button")) {
					if(buttonCount == 0) {
						child.swapClass("first","last",false);
					} else {
						var tmp;
						var _this = this._component;
						if((_this._children == null ? [] : _this._children).length / 2 > 1) {
							var _this1 = this._component;
							tmp = buttonCount == (_this1._children == null ? [] : _this1._children).length / 2 - 1;
						} else {
							tmp = false;
						}
						if(tmp) {
							child.swapClass("last","first",false);
						} else {
							child.removeClasses(["first","last"],false);
						}
					}
					++buttonCount;
				} else if(child.hasClass("accordion-page")) {
					if(pageCount == 0) {
						child.swapClass("first","last",false);
					} else {
						var tmp1;
						var _this2 = this._component;
						if((_this2._children == null ? [] : _this2._children).length / 2 > 1) {
							var _this3 = this._component;
							tmp1 = pageCount == (_this3._children == null ? [] : _this3._children).length / 2 - 1;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							child.swapClass("last","first",false);
						} else {
							child.removeClasses(["first","last"],false);
						}
					}
					++pageCount;
				}
			}
			return c;
		}
		return null;
	}
	,__class__: haxe_ui_containers__$Accordion_Builder
});
var haxe_ui_containers_CalendarView = function() {
	haxe_ui_containers_VBox.call(this);
};
$hxClasses["haxe.ui.containers.CalendarView"] = haxe_ui_containers_CalendarView;
haxe_ui_containers_CalendarView.__name__ = "haxe.ui.containers.CalendarView";
haxe_ui_containers_CalendarView.__super__ = haxe_ui_containers_VBox;
haxe_ui_containers_CalendarView.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	registerComposite: function() {
		haxe_ui_containers_VBox.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers__$CalendarView_Events;
		this._compositeBuilderClass = haxe_ui_containers__$CalendarView_Builder;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
		this.behaviours.register("selectedDate",haxe_ui_containers__$CalendarView_SelectedDateBehaviour);
	}
	,get_selectedDate: function() {
		return haxe_ui_util_Variant.toDate(this.behaviours.get("selectedDate"));
	}
	,set_selectedDate: function(value) {
		this.behaviours.set("selectedDate",haxe_ui_util_Variant.fromDate(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedDate");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_CalendarView();
	}
	,__class__: haxe_ui_containers_CalendarView
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate"})
});
var haxe_ui_containers__$CalendarView_SelectedDateBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._CalendarView.SelectedDateBehaviour"] = haxe_ui_containers__$CalendarView_SelectedDateBehaviour;
haxe_ui_containers__$CalendarView_SelectedDateBehaviour.__name__ = "haxe.ui.containers._CalendarView.SelectedDateBehaviour";
haxe_ui_containers__$CalendarView_SelectedDateBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers__$CalendarView_SelectedDateBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		return haxe_ui_util_Variant.fromDate(this._component.findComponent(null,haxe_ui_components_Calendar).get_selectedDate());
	}
	,set: function(value) {
		this._component.findComponent(null,haxe_ui_components_Calendar).set_selectedDate(haxe_ui_util_Variant.toDate(value));
	}
	,__class__: haxe_ui_containers__$CalendarView_SelectedDateBehaviour
});
var haxe_ui_containers__$CalendarView_Events = function(target) {
	haxe_ui_events_Events.call(this,target);
};
$hxClasses["haxe.ui.containers._CalendarView.Events"] = haxe_ui_containers__$CalendarView_Events;
haxe_ui_containers__$CalendarView_Events.__name__ = "haxe.ui.containers._CalendarView.Events";
haxe_ui_containers__$CalendarView_Events.__super__ = haxe_ui_events_Events;
haxe_ui_containers__$CalendarView_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	register: function() {
		var button = this._target.findComponent("prev-month");
		if(button != null && button.hasEvent("click") == false) {
			button.registerEvent("click",$bind(this,this.onPrevMonth));
		}
		var button = this._target.findComponent("next-month");
		if(button != null && button.hasEvent("click") == false) {
			button.registerEvent("click",$bind(this,this.onNextMonth));
		}
		var stepper = this._target.findComponent("current-year");
		if(stepper != null && stepper.hasEvent("change") == false) {
			stepper.registerEvent("change",$bind(this,this.onYearChange));
		}
		if(this._target.findComponent(null,haxe_ui_components_Calendar).hasEvent("datechange",$bind(this,this.onDateChange)) == false) {
			this._target.findComponent(null,haxe_ui_components_Calendar).registerEvent("datechange",$bind(this,this.onDateChange));
		}
		if(this._target.findComponent(null,haxe_ui_components_Calendar).hasEvent("change",$bind(this,this.onCalendarChange)) == false) {
			this._target.findComponent(null,haxe_ui_components_Calendar).registerEvent("change",$bind(this,this.onCalendarChange));
		}
		this.registerEvent("mousewheel",$bind(this,this.onMouseWheel));
	}
	,onPrevMonth: function(event) {
		this._target.findComponent(null,haxe_ui_components_Calendar).previousMonth();
	}
	,onNextMonth: function(event) {
		this._target.findComponent(null,haxe_ui_components_Calendar).nextMonth();
	}
	,onYearChange: function(event) {
		var calendar = this._target.findComponent(null,haxe_ui_components_Calendar);
		var stepper = this._target.findComponent("current-year");
		if(stepper.get_pos() > calendar.get_date().getFullYear()) {
			calendar.nextYear();
		} else if(stepper.get_pos() < calendar.get_date().getFullYear()) {
			calendar.previousYear();
		}
	}
	,onDateChange: function(event) {
		var calendar = this._target.findComponent(null,haxe_ui_components_Calendar);
		var monthName = haxe_ui_containers_CalendarView.MONTH_NAMES[calendar.get_date().getMonth()];
		this._target.findComponent("current-month",haxe_ui_components_Label).set_text(monthName + "  " + calendar.get_date().getFullYear());
	}
	,onCalendarChange: function(event) {
		var calendar = this._target.findComponent(null,haxe_ui_components_Calendar);
		var stepper = this._target.findComponent("current-year");
		stepper.set_pos(calendar.get_selectedDate().getFullYear());
		this._target.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,onMouseWheel: function(event) {
		if(event.delta >= 1) {
			this._target.findComponent(null,haxe_ui_components_Calendar).nextMonth();
		} else {
			this._target.findComponent(null,haxe_ui_components_Calendar).previousMonth();
		}
	}
	,__class__: haxe_ui_containers__$CalendarView_Events
});
var haxe_ui_containers__$CalendarView_Builder = function(calendarView) {
	haxe_ui_core_CompositeBuilder.call(this,calendarView);
	this._calendarView = calendarView;
};
$hxClasses["haxe.ui.containers._CalendarView.Builder"] = haxe_ui_containers__$CalendarView_Builder;
haxe_ui_containers__$CalendarView_Builder.__name__ = "haxe.ui.containers._CalendarView.Builder";
haxe_ui_containers__$CalendarView_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers__$CalendarView_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_calendarView: null
	,create: function() {
		var box = new haxe_ui_containers_Box();
		box.set_percentWidth(100);
		var button = new haxe_ui_components_Button();
		button.set_id("prev-month");
		box.addComponent(button);
		var hbox = new haxe_ui_containers_HBox();
		hbox.set_horizontalAlign("center");
		hbox.set_verticalAlign("center");
		var label = new haxe_ui_components_Label();
		label.set_id("current-month");
		var now = new Date();
		label.set_text(haxe_ui_containers_CalendarView.MONTH_NAMES[now.getMonth()] + "  " + now.getFullYear());
		hbox.addComponent(label);
		var stepper = new haxe_ui_components_Stepper();
		stepper.set_id("current-year");
		stepper.set_min(0);
		stepper.set_max(now.getFullYear() + 1000);
		stepper.set_pos(now.getFullYear());
		stepper.set_repeater(false);
		hbox.addComponent(stepper);
		box.addComponent(hbox);
		var button = new haxe_ui_components_Button();
		button.set_id("next-month");
		button.set_horizontalAlign("right");
		box.addComponent(button);
		this._calendarView.addComponent(box);
		var calendar = new haxe_ui_components_Calendar();
		this._calendarView.addComponent(calendar);
	}
	,__class__: haxe_ui_containers__$CalendarView_Builder
});
var haxe_ui_containers_ContinuousHBox = function() {
	haxe_ui_containers_Box.call(this);
	this.set_layout(new haxe_ui_layouts_HorizontalContinuousLayout());
};
$hxClasses["haxe.ui.containers.ContinuousHBox"] = haxe_ui_containers_ContinuousHBox;
haxe_ui_containers_ContinuousHBox.__name__ = "haxe.ui.containers.ContinuousHBox";
haxe_ui_containers_ContinuousHBox.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_ContinuousHBox.prototype = $extend(haxe_ui_containers_Box.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_ContinuousHBox();
	}
	,__class__: haxe_ui_containers_ContinuousHBox
});
var haxe_ui_containers_Frame = function() {
	haxe_ui_containers_Box.call(this);
};
$hxClasses["haxe.ui.containers.Frame"] = haxe_ui_containers_Frame;
haxe_ui_containers_Frame.__name__ = "haxe.ui.containers.Frame";
haxe_ui_containers_Frame.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_Frame.prototype = $extend(haxe_ui_containers_Box.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
		this.behaviours.register("text",haxe_ui_containers__$Frame_TextBehaviour);
		this.behaviours.register("icon",haxe_ui_containers__$Frame_IconBehaviour);
	}
	,get_value: function() {
		return this.get_text();
	}
	,set_value: function(value) {
		this.set_text(value);
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"text");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_Frame();
	}
	,registerComposite: function() {
		haxe_ui_containers_Box.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_containers__$Frame_Builder;
		this._defaultLayoutClass = haxe_ui_containers__$Frame_Layout;
	}
	,__class__: haxe_ui_containers_Frame
});
var haxe_ui_containers__$Frame_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._Frame.TextBehaviour"] = haxe_ui_containers__$Frame_TextBehaviour;
haxe_ui_containers__$Frame_TextBehaviour.__name__ = "haxe.ui.containers._Frame.TextBehaviour";
haxe_ui_containers__$Frame_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$Frame_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var label = this._component.findComponent(null,haxe_ui_components_Label,false);
		label.set_text(haxe_ui_util_Variant.toString(this._value));
	}
	,__class__: haxe_ui_containers__$Frame_TextBehaviour
});
var haxe_ui_containers__$Frame_IconBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._Frame.IconBehaviour"] = haxe_ui_containers__$Frame_IconBehaviour;
haxe_ui_containers__$Frame_IconBehaviour.__name__ = "haxe.ui.containers._Frame.IconBehaviour";
haxe_ui_containers__$Frame_IconBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$Frame_IconBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var icon = this._component.findComponent("frame-icon",null,false);
		if(icon == null) {
			icon = new haxe_ui_components_Image();
			icon.addClass("frame-icon");
			icon.set_id("frame-icon");
			icon.scriptAccess = false;
			icon.set_includeInLayout(false);
			this._component.addComponent(icon);
		}
		icon.set_resource(this._value);
	}
	,__class__: haxe_ui_containers__$Frame_IconBehaviour
});
var haxe_ui_containers__$Frame_Builder = function(frame) {
	haxe_ui_core_CompositeBuilder.call(this,frame);
	this._frame = frame;
};
$hxClasses["haxe.ui.containers._Frame.Builder"] = haxe_ui_containers__$Frame_Builder;
haxe_ui_containers__$Frame_Builder.__name__ = "haxe.ui.containers._Frame.Builder";
haxe_ui_containers__$Frame_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers__$Frame_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_frame: null
	,_contents: null
	,_label: null
	,create: function() {
		this._contents = new haxe_ui_containers_Box();
		this._contents.set_id("frame-contents");
		this._contents.addClass("frame-contents");
		this._frame.addComponent(this._contents);
		this._label = new haxe_ui_components_Label();
		this._label.set_text("My Frame");
		this._label.set_id("frame-title");
		this._label.addClass("frame-title");
		this._label.set_includeInLayout(false);
		this._frame.addComponent(this._label);
		var line = new haxe_ui_core_Component();
		line.set_id("frame-left-line");
		line.addClass("frame-left-line");
		line.set_includeInLayout(false);
		this._frame.addComponent(line);
		var line = new haxe_ui_core_Component();
		line.set_id("frame-right-line");
		line.addClass("frame-right-line");
		line.set_includeInLayout(false);
		this._frame.addComponent(line);
	}
	,addComponent: function(child) {
		if(child.get_id() != "frame-contents" && child.get_id() != "frame-title" && child.get_id() != "frame-icon" && child.get_id() != "frame-left-line" && child.get_id() != "frame-right-line") {
			return this._contents.addComponent(child);
		}
		return haxe_ui_core_CompositeBuilder.prototype.addComponent.call(this,child);
	}
	,__class__: haxe_ui_containers__$Frame_Builder
});
var haxe_ui_containers__$Frame_Layout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.containers._Frame.Layout"] = haxe_ui_containers__$Frame_Layout;
haxe_ui_containers__$Frame_Layout.__name__ = "haxe.ui.containers._Frame.Layout";
haxe_ui_containers__$Frame_Layout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_containers__$Frame_Layout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	resizeChildren: function() {
		var contents = this.findComponent("frame-contents",haxe_ui_containers_Box,false);
		var label = this.findComponent("frame-title",haxe_ui_components_Label,false);
		var icon = this.findComponent("frame-icon",haxe_ui_components_Image,false);
		var line1 = this.findComponent("frame-left-line",haxe_ui_core_Component,false);
		var line2 = this.findComponent("frame-right-line",haxe_ui_core_Component,false);
		if(this._component.get_autoWidth() == false) {
			contents.set_width(this._component.get_width());
		}
		if(this._component.get_autoHeight() == false) {
			contents.set_height(this._component.get_height() - label.get_height() / 2);
		}
		var offset = 2;
		line1.set_width(this.get_paddingLeft() - offset);
		var cx = label.get_width();
		if(icon != null) {
			cx += icon.get_width() + this.get_horizontalSpacing();
		}
		line2.set_width(this._component.get_width() - (this.get_paddingLeft() + cx) - offset);
	}
	,repositionChildren: function() {
		var contents = this.findComponent("frame-contents",haxe_ui_containers_Box,false);
		var label = this.findComponent("frame-title",haxe_ui_components_Label,false);
		var icon = this.findComponent("frame-icon",haxe_ui_components_Image,false);
		var line1 = this.findComponent("frame-left-line",haxe_ui_core_Component,false);
		var line2 = this.findComponent("frame-right-line",haxe_ui_core_Component,false);
		contents.set_top(this._component.get_height() - contents.get_height());
		var offset = 2;
		var x = this.get_paddingLeft();
		if(icon != null) {
			icon.set_top(label.get_height() / 2 - icon.get_height() / 2 - 1);
			icon.set_left(this.get_paddingLeft());
			x += icon.get_width() + this.get_horizontalSpacing();
		}
		label.set_left(x);
		line1.set_top(contents.get_top());
		line2.set_left(this._component.get_width() - line2.get_width());
		line2.set_top(contents.get_top());
	}
	,calcAutoSize: function(exclusions) {
		var label = this.findComponent("frame-title",haxe_ui_components_Label,false);
		var size = haxe_ui_layouts_DefaultLayout.prototype.calcAutoSize.call(this,exclusions);
		size.height += label.get_height() / 2;
		size.width -= this.get_paddingLeft();
		return size;
	}
	,__class__: haxe_ui_containers__$Frame_Layout
});
var haxe_ui_containers_Group = function() {
	haxe_ui_containers_Box.call(this);
};
$hxClasses["haxe.ui.containers.Group"] = haxe_ui_containers_Group;
haxe_ui_containers_Group.__name__ = "haxe.ui.containers.Group";
haxe_ui_containers_Group.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_Group.prototype = $extend(haxe_ui_containers_Box.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
		this.behaviours.register("componentGroup",haxe_ui_behaviours_DataBehaviour,haxe_ui_util_Variant.fromString("group" + haxe_ui_util_GUID.uuid()));
	}
	,get_componentGroup: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("componentGroup"));
	}
	,set_componentGroup: function(value) {
		this.behaviours.set("componentGroup",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"componentGroup");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if(this.get_componentGroup() != null) {
			c.set_componentGroup(this.get_componentGroup());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_Group();
	}
	,registerComposite: function() {
		haxe_ui_containers_Box.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_containers__$Group_Builder;
	}
	,__class__: haxe_ui_containers_Group
	,__properties__: $extend(haxe_ui_containers_Box.prototype.__properties__,{set_componentGroup:"set_componentGroup",get_componentGroup:"get_componentGroup"})
});
var haxe_ui_containers__$Group_Builder = function(group) {
	haxe_ui_core_CompositeBuilder.call(this,group);
	this._group = group;
};
$hxClasses["haxe.ui.containers._Group.Builder"] = haxe_ui_containers__$Group_Builder;
haxe_ui_containers__$Group_Builder.__name__ = "haxe.ui.containers._Group.Builder";
haxe_ui_containers__$Group_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers__$Group_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_group: null
	,addComponent: function(child) {
		this.childAdd(child);
		return haxe_ui_core_CompositeBuilder.prototype.addComponent.call(this,child);
	}
	,addComponentAt: function(child,index) {
		this.childAdd(child);
		return haxe_ui_core_CompositeBuilder.prototype.addComponentAt.call(this,child,index);
	}
	,childAdd: function(child) {
		if(((child) instanceof haxe_ui_core_InteractiveComponent)) {
			this.processGroupChild(child);
		} else {
			var interactiveChildren = child.findComponents(null,haxe_ui_core_InteractiveComponent);
			var _g = 0;
			while(_g < interactiveChildren.length) {
				var interactiveChild = interactiveChildren[_g];
				++_g;
				this.processGroupChild(interactiveChild);
			}
		}
	}
	,processGroupChild: function(child) {
		if(((child) instanceof haxe_ui_components_OptionBox)) {
			if(this._group.get_componentGroup() == null) {
				this._group.set_componentGroup("group" + haxe_ui_util_GUID.uuid());
			}
			(js_Boot.__cast(child , haxe_ui_components_OptionBox)).set_componentGroup(this._group.get_componentGroup());
		}
		if(child.hasEvent("change",$bind(this,this.childChangeHandler)) == false) {
			child.registerEvent("change",$bind(this,this.childChangeHandler));
		}
	}
	,childChangeHandler: function(e) {
		var child = e.target;
		this._group.dispatch(e.clone());
	}
	,__class__: haxe_ui_containers__$Group_Builder
});
var haxe_ui_containers_Header = function() {
	haxe_ui_containers_HBox.call(this);
};
$hxClasses["haxe.ui.containers.Header"] = haxe_ui_containers_Header;
haxe_ui_containers_Header.__name__ = "haxe.ui.containers.Header";
haxe_ui_containers_Header.__super__ = haxe_ui_containers_HBox;
haxe_ui_containers_Header.prototype = $extend(haxe_ui_containers_HBox.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_HBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_HBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_Header();
	}
	,__class__: haxe_ui_containers_Header
});
var haxe_ui_containers_Splitter = function() {
	haxe_ui_containers_Box.call(this);
};
$hxClasses["haxe.ui.containers.Splitter"] = haxe_ui_containers_Splitter;
haxe_ui_containers_Splitter.__name__ = "haxe.ui.containers.Splitter";
haxe_ui_containers_Splitter.__interfaces__ = [haxe_ui_core_IDirectionalComponent];
haxe_ui_containers_Splitter.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_Splitter.prototype = $extend(haxe_ui_containers_Box.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_Splitter();
	}
	,registerComposite: function() {
		haxe_ui_containers_Box.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers_SplitterEvents;
		this._compositeBuilderClass = haxe_ui_containers_SplitterBuilder;
	}
	,__class__: haxe_ui_containers_Splitter
});
var haxe_ui_containers_HorizontalSplitter = function() {
	haxe_ui_containers_Splitter.call(this);
	this.set_layoutName("horizontal");
};
$hxClasses["haxe.ui.containers.HorizontalSplitter"] = haxe_ui_containers_HorizontalSplitter;
haxe_ui_containers_HorizontalSplitter.__name__ = "haxe.ui.containers.HorizontalSplitter";
haxe_ui_containers_HorizontalSplitter.__super__ = haxe_ui_containers_Splitter;
haxe_ui_containers_HorizontalSplitter.prototype = $extend(haxe_ui_containers_Splitter.prototype,{
	registerComposite: function() {
		haxe_ui_containers_Splitter.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterEvents;
		this._compositeBuilderClass = haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterBuilder;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Splitter.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Splitter.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_HorizontalSplitter();
	}
	,__class__: haxe_ui_containers_HorizontalSplitter
});
var haxe_ui_containers_SplitterEvents = function(splitter) {
	this._currentOffset = null;
	this._currentGripper = null;
	haxe_ui_events_Events.call(this,splitter);
	this._splitter = splitter;
};
$hxClasses["haxe.ui.containers.SplitterEvents"] = haxe_ui_containers_SplitterEvents;
haxe_ui_containers_SplitterEvents.__name__ = "haxe.ui.containers.SplitterEvents";
haxe_ui_containers_SplitterEvents.__super__ = haxe_ui_events_Events;
haxe_ui_containers_SplitterEvents.prototype = $extend(haxe_ui_events_Events.prototype,{
	_splitter: null
	,register: function() {
		var builder = js_Boot.__cast(this._splitter._compositeBuilder , haxe_ui_containers_SplitterBuilder);
		var grippers = this._splitter.findComponents(builder.getSplitterClass(),haxe_ui_core_Component,1);
		var _g = 0;
		while(_g < grippers.length) {
			var g = grippers[_g];
			++_g;
			g.registerEvent("mousedown",$bind(this,this.onGripperMouseDown));
		}
	}
	,unregister: function() {
		var builder = js_Boot.__cast(this._splitter._compositeBuilder , haxe_ui_containers_SplitterBuilder);
		var grippers = this._splitter.findComponents(builder.getSplitterClass(),haxe_ui_core_Component,1);
		var _g = 0;
		while(_g < grippers.length) {
			var g = grippers[_g];
			++_g;
			g.unregisterEvent("mousedown",$bind(this,this.onGripperMouseDown));
		}
	}
	,_currentGripper: null
	,_currentOffset: null
	,onGripperMouseDown: function(event) {
		this._currentGripper = js_Boot.__cast(event.target , haxe_ui_containers__$Splitter_SizerGripper);
		this._currentOffset = new haxe_ui_geom_Point(event.screenX,event.screenY);
		haxe_ui_core_Screen.get_instance().registerEvent("mousemove",$bind(this,this.onScreenMouseMove));
		haxe_ui_core_Screen.get_instance().registerEvent("mouseup",$bind(this,this.onScreenMouseUp));
	}
	,onScreenMouseMove: function(event) {
		this._currentGripper.addClass(":hover");
		var index = this._splitter.getComponentIndex(this._currentGripper);
		var prev = this._splitter.getComponentAt(index - 1);
		var next = this._splitter.getComponentAt(index + 1);
		this.handleResize(prev,next,event);
		this._currentOffset = new haxe_ui_geom_Point(event.screenX,event.screenY);
	}
	,handleResize: function(prev,next,event) {
	}
	,onScreenMouseUp: function(event) {
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousemove",$bind(this,this.onScreenMouseMove));
		haxe_ui_core_Screen.get_instance().unregisterEvent("mouseup",$bind(this,this.onScreenMouseUp));
		window.document.body.style.cursor = null;
	}
	,__class__: haxe_ui_containers_SplitterEvents
});
var haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterEvents = function(splitter) {
	haxe_ui_containers_SplitterEvents.call(this,splitter);
};
$hxClasses["haxe.ui.containers._HorizontalSplitter.HorizontalSplitterEvents"] = haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterEvents;
haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterEvents.__name__ = "haxe.ui.containers._HorizontalSplitter.HorizontalSplitterEvents";
haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterEvents.__super__ = haxe_ui_containers_SplitterEvents;
haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterEvents.prototype = $extend(haxe_ui_containers_SplitterEvents.prototype,{
	onGripperMouseDown: function(event) {
		haxe_ui_containers_SplitterEvents.prototype.onGripperMouseDown.call(this,event);
		window.document.body.style.cursor = "col-resize";
	}
	,handleResize: function(prev,next,event) {
		var delta = event.screenX - this._currentOffset.x;
		var _g = prev;
		var prevCX = _g.set_width(_g.get_width() + delta);
		var _g = next;
		var nextCX = _g.set_width(_g.get_width() - delta);
		var ucx = this._splitter.get_layout().get_usableWidth();
		if(prev.get_percentWidth() != null) {
			prev.set_percentWidth(prevCX / ucx * 100);
		} else {
			prev.set_width(prevCX);
		}
		if(next.get_percentWidth() != null) {
			next.set_percentWidth(nextCX / ucx * 100);
		} else {
			next.set_width(nextCX);
		}
	}
	,__class__: haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterEvents
});
var haxe_ui_containers_SplitterBuilder = function(splitter) {
	haxe_ui_core_CompositeBuilder.call(this,splitter);
	this._splitter = splitter;
};
$hxClasses["haxe.ui.containers.SplitterBuilder"] = haxe_ui_containers_SplitterBuilder;
haxe_ui_containers_SplitterBuilder.__name__ = "haxe.ui.containers.SplitterBuilder";
haxe_ui_containers_SplitterBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers_SplitterBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_splitter: null
	,addComponent: function(child) {
		var _this = this._splitter;
		if((_this._children == null ? [] : _this._children).length > 0 && child.hasClass(this.getSplitterClass()) == false) {
			var gripper = new haxe_ui_containers__$Splitter_SizerGripper();
			gripper.set_id(this.getSplitterClass());
			gripper.addClass(this.getSplitterClass());
			this._splitter.addComponent(gripper);
			this._splitter.registerInternalEvents(null,true);
		}
		return null;
	}
	,getSplitterClass: function() {
		return "splitter-gripper";
	}
	,__class__: haxe_ui_containers_SplitterBuilder
});
var haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterBuilder = function(splitter) {
	haxe_ui_containers_SplitterBuilder.call(this,splitter);
};
$hxClasses["haxe.ui.containers._HorizontalSplitter.HorizontalSplitterBuilder"] = haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterBuilder;
haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterBuilder.__name__ = "haxe.ui.containers._HorizontalSplitter.HorizontalSplitterBuilder";
haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterBuilder.__super__ = haxe_ui_containers_SplitterBuilder;
haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterBuilder.prototype = $extend(haxe_ui_containers_SplitterBuilder.prototype,{
	getSplitterClass: function() {
		return "horizontal-splitter-gripper";
	}
	,__class__: haxe_ui_containers__$HorizontalSplitter_HorizontalSplitterBuilder
});
var haxe_ui_containers_IVirtualContainer = function() { };
$hxClasses["haxe.ui.containers.IVirtualContainer"] = haxe_ui_containers_IVirtualContainer;
haxe_ui_containers_IVirtualContainer.__name__ = "haxe.ui.containers.IVirtualContainer";
haxe_ui_containers_IVirtualContainer.__isInterface__ = true;
haxe_ui_containers_IVirtualContainer.prototype = {
	get_itemWidth: null
	,set_itemWidth: null
	,get_itemHeight: null
	,set_itemHeight: null
	,get_itemCount: null
	,set_itemCount: null
	,get_variableItemSize: null
	,set_variableItemSize: null
	,get_virtual: null
	,set_virtual: null
	,get_hscrollPos: null
	,set_hscrollPos: null
	,get_hscrollMax: null
	,set_hscrollMax: null
	,get_hscrollPageSize: null
	,set_hscrollPageSize: null
	,get_vscrollPos: null
	,set_vscrollPos: null
	,get_vscrollMax: null
	,set_vscrollMax: null
	,get_vscrollPageSize: null
	,set_vscrollPageSize: null
	,get_itemRenderer: null
	,set_itemRenderer: null
	,get_itemRendererFunction: null
	,set_itemRendererFunction: null
	,get_itemRendererClass: null
	,set_itemRendererClass: null
	,__class__: haxe_ui_containers_IVirtualContainer
	,__properties__: {set_itemRendererClass:"set_itemRendererClass",get_itemRendererClass:"get_itemRendererClass",set_itemRendererFunction:"set_itemRendererFunction",get_itemRendererFunction:"get_itemRendererFunction",set_itemRenderer:"set_itemRenderer",get_itemRenderer:"get_itemRenderer",set_vscrollPageSize:"set_vscrollPageSize",get_vscrollPageSize:"get_vscrollPageSize",set_vscrollMax:"set_vscrollMax",get_vscrollMax:"get_vscrollMax",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",set_hscrollPageSize:"set_hscrollPageSize",get_hscrollPageSize:"get_hscrollPageSize",set_hscrollMax:"set_hscrollMax",get_hscrollMax:"get_hscrollMax",set_hscrollPos:"set_hscrollPos",get_hscrollPos:"get_hscrollPos",set_virtual:"set_virtual",get_virtual:"get_virtual",set_variableItemSize:"set_variableItemSize",get_variableItemSize:"get_variableItemSize",set_itemCount:"set_itemCount",get_itemCount:"get_itemCount",set_itemHeight:"set_itemHeight",get_itemHeight:"get_itemHeight",set_itemWidth:"set_itemWidth",get_itemWidth:"get_itemWidth"}
};
var haxe_ui_containers_ListView = function() {
	haxe_ui_containers_ScrollView.call(this);
};
$hxClasses["haxe.ui.containers.ListView"] = haxe_ui_containers_ListView;
haxe_ui_containers_ListView.__name__ = "haxe.ui.containers.ListView";
haxe_ui_containers_ListView.__interfaces__ = [haxe_ui_containers_IVirtualContainer,haxe_ui_core_IDataComponent];
haxe_ui_containers_ListView.__super__ = haxe_ui_containers_ScrollView;
haxe_ui_containers_ListView.prototype = $extend(haxe_ui_containers_ScrollView.prototype,{
	_itemRendererFunction: null
	,get_itemRendererFunction: function() {
		return this._itemRendererFunction;
	}
	,set_itemRendererFunction: function(value) {
		if(this._itemRendererFunction != value) {
			this._itemRendererFunction = value;
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,_itemRendererClass: null
	,get_itemRendererClass: function() {
		return this._itemRendererClass;
	}
	,set_itemRendererClass: function(value) {
		if(this._itemRendererClass != value) {
			this._itemRendererClass = value;
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,_itemRenderer: null
	,get_itemRenderer: function() {
		return this._itemRenderer;
	}
	,set_itemRenderer: function(value) {
		if(this._itemRenderer != value) {
			this._itemRenderer = value;
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_ScrollView.prototype.registerBehaviours.call(this);
		this.behaviours.register("dataSource",haxe_ui_containers__$ListView_DataSourceBehaviour);
		this.behaviours.register("itemWidth",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("itemHeight",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("itemCount",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("variableItemSize",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("selectedIndex",haxe_ui_containers__$ListView_SelectedIndexBehaviour,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("selectedItem",haxe_ui_containers__$ListView_SelectedItemBehaviour);
		this.behaviours.register("selectedIndices",haxe_ui_containers__$ListView_SelectedIndicesBehaviour);
		this.behaviours.register("selectedItems",haxe_ui_containers__$ListView_SelectedItemsBehaviour);
		this.behaviours.register("selectionMode",haxe_ui_containers__$ListView_SelectionModeBehaviour,haxe_ui_util_Variant.fromString("one-item"));
		this.behaviours.register("longPressSelectionTime",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromFloat(500));
	}
	,get_dataSource: function() {
		return haxe_ui_util_Variant.toDataSource(this.behaviours.get("dataSource"));
	}
	,set_dataSource: function(value) {
		this.behaviours.set("dataSource",haxe_ui_util_Variant.fromDataSource(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"dataSource");
		return value;
	}
	,get_itemWidth: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("itemWidth"));
	}
	,set_itemWidth: function(value) {
		this.behaviours.set("itemWidth",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"itemWidth");
		return value;
	}
	,get_itemHeight: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("itemHeight"));
	}
	,set_itemHeight: function(value) {
		this.behaviours.set("itemHeight",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"itemHeight");
		return value;
	}
	,get_itemCount: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("itemCount"));
	}
	,set_itemCount: function(value) {
		this.behaviours.set("itemCount",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"itemCount");
		return value;
	}
	,get_variableItemSize: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("variableItemSize"));
	}
	,set_variableItemSize: function(value) {
		this.behaviours.set("variableItemSize",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"variableItemSize");
		return value;
	}
	,get_selectedIndex: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("selectedIndex"));
	}
	,set_selectedIndex: function(value) {
		this.behaviours.set("selectedIndex",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedIndex");
		return value;
	}
	,get_selectedItem: function() {
		return this.behaviours.getDynamic("selectedItem");
	}
	,set_selectedItem: function(value) {
		this.behaviours.set("selectedItem",haxe_ui_util_Variant.fromDynamic(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedItem");
		return value;
	}
	,get_selectedIndices: function() {
		return haxe_ui_util_Variant.toArray(this.behaviours.get("selectedIndices"));
	}
	,set_selectedIndices: function(value) {
		this.behaviours.set("selectedIndices",haxe_ui_util_Variant.fromArray(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedIndices");
		return value;
	}
	,get_selectedItems: function() {
		return haxe_ui_util_Variant.toArray(this.behaviours.get("selectedItems"));
	}
	,set_selectedItems: function(value) {
		this.behaviours.set("selectedItems",haxe_ui_util_Variant.fromArray(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedItems");
		return value;
	}
	,get_selectionMode: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("selectionMode"));
	}
	,set_selectionMode: function(value) {
		this.behaviours.set("selectionMode",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectionMode");
		return value;
	}
	,get_longPressSelectionTime: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("longPressSelectionTime"));
	}
	,set_longPressSelectionTime: function(value) {
		this.behaviours.set("longPressSelectionTime",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"longPressSelectionTime");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_ScrollView.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_ListView();
	}
	,registerComposite: function() {
		haxe_ui_containers_ScrollView.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers_ListViewEvents;
		this._compositeBuilderClass = haxe_ui_containers__$ListView_ListViewBuilder;
		this._defaultLayoutClass = haxe_ui_layouts_VerticalVirtualLayout;
	}
	,__onComponentEvent: null
	,onComponentEvent: null
	,set_onComponentEvent: function(value) {
		if(this.__onComponentEvent != null) {
			this.unregisterEvent("itemComponentEvent",this.__onComponentEvent);
			this.__onComponentEvent = null;
		}
		if(value != null) {
			this.__onComponentEvent = value;
			this.registerEvent("itemComponentEvent",value);
		}
		return value;
	}
	,__class__: haxe_ui_containers_ListView
	,__properties__: $extend(haxe_ui_containers_ScrollView.prototype.__properties__,{set_onComponentEvent:"set_onComponentEvent",set_longPressSelectionTime:"set_longPressSelectionTime",get_longPressSelectionTime:"get_longPressSelectionTime",set_selectionMode:"set_selectionMode",get_selectionMode:"get_selectionMode",set_selectedItems:"set_selectedItems",get_selectedItems:"get_selectedItems",set_selectedIndices:"set_selectedIndices",get_selectedIndices:"get_selectedIndices",set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",set_variableItemSize:"set_variableItemSize",get_variableItemSize:"get_variableItemSize",set_itemCount:"set_itemCount",get_itemCount:"get_itemCount",set_itemHeight:"set_itemHeight",get_itemHeight:"get_itemHeight",set_itemWidth:"set_itemWidth",get_itemWidth:"get_itemWidth",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource",set_itemRenderer:"set_itemRenderer",get_itemRenderer:"get_itemRenderer",set_itemRendererClass:"set_itemRendererClass",get_itemRendererClass:"get_itemRendererClass",set_itemRendererFunction:"set_itemRendererFunction",get_itemRendererFunction:"get_itemRendererFunction"})
});
var haxe_ui_containers_ScrollViewEvents = function(scrollview) {
	this._fadeTimer = null;
	this._containerEventsPaused = false;
	this._lastMousePos = null;
	this._movementThreshold = 3;
	this._inertia = null;
	haxe_ui_events_Events.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers.ScrollViewEvents"] = haxe_ui_containers_ScrollViewEvents;
haxe_ui_containers_ScrollViewEvents.__name__ = "haxe.ui.containers.ScrollViewEvents";
haxe_ui_containers_ScrollViewEvents.__super__ = haxe_ui_events_Events;
haxe_ui_containers_ScrollViewEvents.prototype = $extend(haxe_ui_events_Events.prototype,{
	_scrollview: null
	,register: function() {
		var contents = this._scrollview.findComponent("scrollview-contents",null,false,"css");
		if(contents != null && contents.hasEvent("resize",$bind(this,this.onContentsResized)) == false) {
			contents.registerEvent("resize",$bind(this,this.onContentsResized));
		}
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null && hscroll.hasEvent("change",$bind(this,this.onHScroll)) == false) {
			hscroll.registerEvent("change",$bind(this,this.onHScroll));
		}
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null && vscroll.hasEvent("change",$bind(this,this.onVScroll)) == false) {
			vscroll.registerEvent("change",$bind(this,this.onVScroll));
		}
		if(this._scrollview.get_scrollMode() == "drag" || this._scrollview.get_scrollMode() == "inertial") {
			this.registerEvent("mousedown",$bind(this,this.onMouseDown));
		} else if(this.hasEvent("mousedown",$bind(this,this.onMouseDown)) == false) {
			this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
		}
		this.registerEvent("mousewheel",$bind(this,this.onMouseWheel));
	}
	,unregister: function() {
		var contents = this._scrollview.findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.unregisterEvent("resize",$bind(this,this.onContentsResized));
		}
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null) {
			hscroll.unregisterEvent("change",$bind(this,this.onHScroll));
		}
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			vscroll.unregisterEvent("change",$bind(this,this.onVScroll));
		}
		this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
		this.unregisterEvent("mousewheel",$bind(this,this.onMouseWheel));
	}
	,onContentsResized: function(event) {
		this._scrollview.invalidateComponent("scroll");
	}
	,onHScroll: function(event) {
		this._scrollview.invalidateComponent("scroll");
		this._target.dispatch(new haxe_ui_events_ScrollEvent("scrollchange"));
	}
	,onVScroll: function(event) {
		this._scrollview.invalidateComponent("scroll");
		this._target.dispatch(new haxe_ui_events_ScrollEvent("scrollchange"));
	}
	,_offset: null
	,_inertia: null
	,onMouseDown: function(event) {
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(hscroll == null && vscroll == null) {
			return;
		}
		this._scrollview.addClass(":down");
		this._lastMousePos = new haxe_ui_geom_Point(event.screenX,event.screenY);
		var componentOffset = this._scrollview.getComponentOffset();
		if(hscroll != null && hscroll.hitTest(event.screenX - componentOffset.x,event.screenY - componentOffset.y) == true) {
			return;
		}
		if(vscroll != null && vscroll.hitTest(event.screenX - componentOffset.x,event.screenY - componentOffset.y) == true) {
			return;
		}
		event.cancel();
		this._offset = new haxe_ui_geom_Point();
		if(hscroll != null) {
			var tmp = hscroll.get_pos();
			this._offset.x = tmp + event.screenX;
		}
		if(vscroll != null) {
			var tmp = vscroll.get_pos();
			this._offset.y = tmp + event.screenY;
		}
		if(this._scrollview.get_scrollMode() == "inertial") {
			if(this._inertia == null) {
				this._inertia = { screen : new haxe_ui_geom_Point(), target : new haxe_ui_geom_Point(), amplitude : new haxe_ui_geom_Point(), direction : new haxe_ui_geom_Point(), timestamp : 0};
			}
			this._inertia.target.x = this._scrollview.get_hscrollPos();
			this._inertia.target.y = this._scrollview.get_vscrollPos();
			this._inertia.amplitude.x = 0;
			this._inertia.amplitude.y = 0;
			this._inertia.screen.x = event.screenX;
			this._inertia.screen.y = event.screenY;
			this._inertia.timestamp = HxOverrides.now() / 1000;
		}
		haxe_ui_core_Screen.get_instance().registerEvent("mousemove",$bind(this,this.onMouseMove));
		haxe_ui_core_Screen.get_instance().registerEvent("mouseup",$bind(this,this.onMouseUp));
	}
	,_movementThreshold: null
	,_lastMousePos: null
	,onMouseMove: function(event) {
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null) {
			hscroll.set_pos(this._offset.x - event.screenX);
			var distX = Math.abs(event.screenX - this._lastMousePos.x);
			if(distX > haxe_ui_Toolkit.get_scaleX()) {
				this.pauseContainerEvents();
			}
		}
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			vscroll.set_pos(this._offset.y - event.screenY);
			var distY = Math.abs(event.screenY - this._lastMousePos.y);
			if(distY > haxe_ui_Toolkit.get_scaleY()) {
				this.pauseContainerEvents();
			}
		}
		this._lastMousePos = new haxe_ui_geom_Point(event.screenX,event.screenY);
	}
	,_containerEventsPaused: null
	,pauseContainerEvents: function() {
		if(this._containerEventsPaused == true) {
			return;
		}
		this._containerEventsPaused = true;
		this.onContainerEventsStatusChanged();
	}
	,resumeContainerEvents: function() {
		if(this._containerEventsPaused == false) {
			return;
		}
		this._containerEventsPaused = false;
		this.onContainerEventsStatusChanged();
	}
	,onContainerEventsStatusChanged: function() {
		this._scrollview.findComponent("scrollview-contents",haxe_ui_core_Component,true,"css").disableInteractivity(this._containerEventsPaused);
		if(this._containerEventsPaused == true) {
			this._scrollview.findComponent("scrollview-contents",haxe_ui_core_Component,true,"css").removeClass(":hover",true,true);
		}
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(hscroll != null || vscroll != null) {
			var builder = js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder);
			if(builder.autoHideScrolls == true) {
				if(this._containerEventsPaused == true) {
					if(hscroll != null) {
						hscroll.fadeIn();
					}
					if(vscroll != null) {
						vscroll.fadeIn();
					}
				} else {
					if(hscroll != null) {
						hscroll.fadeOut();
					}
					if(vscroll != null) {
						vscroll.fadeOut();
					}
				}
			}
		}
	}
	,onMouseUp: function(event) {
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousemove",$bind(this,this.onMouseMove));
		haxe_ui_core_Screen.get_instance().unregisterEvent("mouseup",$bind(this,this.onMouseUp));
		if(this._scrollview.get_scrollMode() == "inertial") {
			var now = HxOverrides.now() / 1000;
			var elapsed = (now - this._inertia.timestamp) * 1000;
			var deltaX = Math.abs(this._inertia.screen.x - event.screenX);
			var deltaY = Math.abs(this._inertia.screen.y - event.screenY);
			this._inertia.direction.x = this._inertia.screen.x - event.screenX < 0 ? 0 : 1;
			var velocityX = deltaX / elapsed;
			var v = 1000 * deltaX / (1 + elapsed);
			velocityX = 0.8 * v + 0.2 * velocityX;
			this._inertia.direction.y = this._inertia.screen.y - event.screenY < 0 ? 0 : 1;
			var velocityY = deltaY / elapsed;
			var v = 1000 * deltaY / (1 + elapsed);
			velocityY = 0.8 * v + 0.2 * velocityY;
			if(velocityX <= 75 && velocityY <= 75) {
				this.dispatch(new haxe_ui_events_ScrollEvent("scrollstop"));
				haxe_ui_Toolkit.callLater($bind(this,this.resumeContainerEvents));
				return;
			}
			this._inertia.timestamp = HxOverrides.now() / 1000;
			var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
			if(hscroll != null) {
				this._inertia.amplitude.x = 0.8 * velocityX;
			}
			if(this._inertia.direction.x == 0) {
				var tmp = this._scrollview.get_hscrollPos() - this._inertia.amplitude.x;
				this._inertia.target.x = Math.round(tmp);
			} else {
				var tmp = this._scrollview.get_hscrollPos() + this._inertia.amplitude.x;
				this._inertia.target.x = Math.round(tmp);
			}
			var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
			if(vscroll != null) {
				this._inertia.amplitude.y = 0.8 * velocityY;
			}
			if(this._inertia.direction.y == 0) {
				var tmp = this._scrollview.get_vscrollPos() - this._inertia.amplitude.y;
				this._inertia.target.y = Math.round(tmp);
			} else {
				var tmp = this._scrollview.get_vscrollPos() + this._inertia.amplitude.y;
				this._inertia.target.y = Math.round(tmp);
			}
			if(this._scrollview.get_hscrollPos() == this._inertia.target.x && this._scrollview.get_vscrollPos() == this._inertia.target.y) {
				this.dispatch(new haxe_ui_events_ScrollEvent("scrollstop"));
				haxe_ui_Toolkit.callLater($bind(this,this.resumeContainerEvents));
				return;
			}
			if(this._scrollview.get_hscrollPos() == this._inertia.target.x) {
				this._inertia.amplitude.x = 0;
			}
			if(this._scrollview.get_vscrollPos() == this._inertia.target.y) {
				this._inertia.amplitude.y = 0;
			}
			haxe_ui_Toolkit.callLater($bind(this,this.inertialScroll));
		} else {
			this._scrollview.removeClass(":down");
			this.dispatch(new haxe_ui_events_ScrollEvent("scrollstop"));
			haxe_ui_Toolkit.callLater($bind(this,this.resumeContainerEvents));
		}
	}
	,inertialScroll: function() {
		var elapsed = (HxOverrides.now() / 1000 - this._inertia.timestamp) * 1000;
		var finishedX = false;
		if(this._inertia.amplitude.x != 0) {
			var deltaX = -this._inertia.amplitude.x * Math.exp(-elapsed / 325);
			if(deltaX > 0.5 || deltaX < -0.5) {
				var oldPos = this._scrollview.get_hscrollPos();
				var newPos = 0;
				if(this._inertia.direction.x == 0) {
					newPos = this._inertia.target.x - deltaX;
				} else {
					newPos = this._inertia.target.x + deltaX;
				}
				if(newPos < 0) {
					newPos = 0;
				} else if(newPos > this._scrollview.get_hscrollMax()) {
					newPos = this._scrollview.get_hscrollMax();
				}
				this._scrollview.set_hscrollPos(newPos);
				finishedX = newPos == oldPos || newPos == 0 || newPos == this._scrollview.get_hscrollMax();
			} else {
				finishedX = true;
			}
		} else {
			finishedX = true;
		}
		var finishedY = false;
		if(this._inertia.amplitude.y != 0) {
			var deltaY = -this._inertia.amplitude.y * Math.exp(-elapsed / 325);
			if(deltaY > 0.5 || deltaY < -0.5) {
				var oldPos = this._scrollview.get_vscrollPos();
				var newPos = 0;
				if(this._inertia.direction.y == 0) {
					newPos = this._inertia.target.y - deltaY;
				} else {
					newPos = this._inertia.target.y + deltaY;
				}
				if(newPos < 0) {
					newPos = 0;
				} else if(newPos > this._scrollview.get_vscrollMax()) {
					newPos = this._scrollview.get_vscrollMax();
				}
				this._scrollview.set_vscrollPos(newPos);
				finishedY = newPos == oldPos || newPos == 0 || newPos == this._scrollview.get_vscrollMax();
			} else {
				finishedY = true;
			}
		} else {
			finishedY = true;
		}
		if(finishedX == true && finishedY == true) {
			this.dispatch(new haxe_ui_events_ScrollEvent("scrollstop"));
			haxe_ui_Toolkit.callLater($bind(this,this.resumeContainerEvents));
		} else {
			haxe_ui_Toolkit.callLater($bind(this,this.inertialScroll));
		}
	}
	,_fadeTimer: null
	,onMouseWheel: function(event) {
		var _gthis = this;
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			var builder = js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder);
			if(builder.autoHideScrolls == true && this._fadeTimer == null) {
				vscroll.fadeIn();
			}
			event.cancel();
			if(event.delta > 0) {
				var _g = vscroll;
				_g.set_pos(_g.get_pos() - 50);
			} else if(event.delta < 0) {
				var _g = vscroll;
				_g.set_pos(_g.get_pos() + 50);
			}
			if(builder.autoHideScrolls == true) {
				if(this._fadeTimer != null) {
					this._fadeTimer.stop();
					this._fadeTimer = null;
				}
				this._fadeTimer = new haxe_ui_util_Timer(300,function() {
					vscroll.fadeOut();
					_gthis._fadeTimer.stop();
					_gthis._fadeTimer = null;
				});
			}
		}
	}
	,__class__: haxe_ui_containers_ScrollViewEvents
});
var haxe_ui_containers_ListViewEvents = function(listview) {
	haxe_ui_containers_ScrollViewEvents.call(this,listview);
	this._listview = listview;
};
$hxClasses["haxe.ui.containers.ListViewEvents"] = haxe_ui_containers_ListViewEvents;
haxe_ui_containers_ListViewEvents.__name__ = "haxe.ui.containers.ListViewEvents";
haxe_ui_containers_ListViewEvents.__super__ = haxe_ui_containers_ScrollViewEvents;
haxe_ui_containers_ListViewEvents.prototype = $extend(haxe_ui_containers_ScrollViewEvents.prototype,{
	_listview: null
	,register: function() {
		haxe_ui_containers_ScrollViewEvents.prototype.register.call(this);
		this.registerEvent("scrollchange",$bind(this,this.onScrollChange));
		this.registerEvent("rendererCreated",$bind(this,this.onRendererCreated));
		this.registerEvent("rendererDestroyed",$bind(this,this.onRendererDestroyed));
	}
	,unregister: function() {
		haxe_ui_containers_ScrollViewEvents.prototype.unregister.call(this);
		this.unregisterEvent("scrollchange",$bind(this,this.onScrollChange));
		this.unregisterEvent("rendererCreated",$bind(this,this.onRendererCreated));
		this.unregisterEvent("rendererDestroyed",$bind(this,this.onRendererDestroyed));
	}
	,onScrollChange: function(e) {
		if(this._listview.get_virtual() == true) {
			var _this = this._listview;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		}
	}
	,onRendererCreated: function(e) {
		var instance = js_Boot.__cast(e.data , haxe_ui_core_ItemRenderer);
		instance.registerEvent("mousedown",$bind(this,this.onRendererMouseDown));
		instance.registerEvent("click",$bind(this,this.onRendererClick));
		if(this._listview.get_selectedIndices().indexOf(instance.itemIndex) != -1) {
			var builder = js_Boot.__cast(this._listview._compositeBuilder , haxe_ui_containers__$ListView_ListViewBuilder);
			builder.addItemRendererClass(instance,":selected");
		}
	}
	,onRendererDestroyed: function(e) {
		var instance = js_Boot.__cast(e.data , haxe_ui_core_ItemRenderer);
		instance.unregisterEvent("mousedown",$bind(this,this.onRendererMouseDown));
		instance.unregisterEvent("click",$bind(this,this.onRendererClick));
		if(this._listview.get_selectedIndices().indexOf(instance.itemIndex) != -1) {
			var builder = js_Boot.__cast(this._listview._compositeBuilder , haxe_ui_containers__$ListView_ListViewBuilder);
			builder.addItemRendererClass(instance,":selected",false);
		}
	}
	,onRendererMouseDown: function(e) {
		if(this._listview.get_selectionMode() == "multiple-long-press") {
			if(this._listview.get_selectedIndices().length == 0) {
				this.startLongPressSelection(e);
			}
		} else if(this._listview.hasClass(":mobile") == false) {
			e.target.addClass(":hover");
		}
	}
	,startLongPressSelection: function(e) {
		var _gthis = this;
		var timerClick = null;
		var currentMouseX = e.screenX;
		var currentMouseY = e.screenY;
		var renderer = js_Boot.__cast(e.target , haxe_ui_core_ItemRenderer);
		var __onMouseMove = null;
		var __onMouseUp = null;
		var __onMouseClick = null;
		__onMouseMove = function(_e) {
			currentMouseX = _e.screenX;
			currentMouseY = _e.screenY;
		};
		__onMouseUp = function(_e) {
			if(timerClick != null) {
				timerClick.stop();
				timerClick = null;
			}
			renderer.get_screen().unregisterEvent("mousemove",__onMouseMove);
			renderer.get_screen().unregisterEvent("mouseup",__onMouseUp);
		};
		__onMouseClick = function(_e) {
			_e.cancel();
			renderer.unregisterEvent("click",__onMouseClick);
		};
		renderer.get_screen().registerEvent("mousemove",__onMouseMove);
		renderer.get_screen().registerEvent("mouseup",__onMouseUp);
		timerClick = haxe_Timer.delay(function() {
			if(timerClick != null) {
				timerClick = null;
				var timerClick1;
				if(renderer.hitTest(currentMouseX,currentMouseY)) {
					var x1 = e.screenX;
					var y1 = e.screenY;
					timerClick1 = Math.sqrt((x1 - currentMouseX) * (x1 - currentMouseX) + (y1 - currentMouseY) * (y1 - currentMouseY)) < 2 * haxe_ui_Toolkit.pixelsPerRem;
				} else {
					timerClick1 = false;
				}
				if(timerClick1) {
					_gthis.toggleSelection(renderer);
					renderer.registerEvent("click",__onMouseClick,1);
				}
			}
		},this._listview.get_longPressSelectionTime());
	}
	,onContainerEventsStatusChanged: function() {
		haxe_ui_containers_ScrollViewEvents.prototype.onContainerEventsStatusChanged.call(this);
		if(this._containerEventsPaused == true) {
			this._scrollview.findComponent("listview-contents",haxe_ui_core_Component,true,"css").removeClass(":hover",true,true);
		} else {
			var tmp = this._lastMousePos != null;
		}
	}
	,onRendererClick: function(e) {
		if(this._containerEventsPaused == true) {
			return;
		}
		var components = e.target.findComponentsUnderPoint(e.screenX,e.screenY);
		var _g = 0;
		while(_g < components.length) {
			var component = components[_g];
			++_g;
			if(((component) instanceof haxe_ui_core_InteractiveComponent) && (js_Boot.__cast(component , haxe_ui_core_InteractiveComponent)).get_allowInteraction() == true) {
				return;
			}
		}
		var renderer = js_Boot.__cast(e.target , haxe_ui_core_ItemRenderer);
		switch(this._listview.get_selectionMode()) {
		case "disabled":
			break;
		case "multiple-click-modifier-key":case "multiple-modifier-key":
			if(e.ctrlKey == true) {
				this.toggleSelection(renderer);
			} else if(e.shiftKey == true) {
				var selectedIndices = this._listview.get_selectedIndices();
				var fromIndex = selectedIndices.length > 0 ? selectedIndices[selectedIndices.length - 1] : 0;
				var toIndex = renderer.itemIndex;
				if(fromIndex < toIndex) {
					var _g = 0;
					while(_g < selectedIndices.length) {
						var i = selectedIndices[_g];
						++_g;
						if(i < fromIndex) {
							fromIndex = i;
						}
					}
				} else {
					var tmp = fromIndex;
					fromIndex = toIndex;
					toIndex = tmp;
				}
				this.selectRange(fromIndex,toIndex);
			} else if(this._listview.get_selectionMode() == "multiple-click-modifier-key") {
				this._listview.set_selectedIndex(renderer.itemIndex);
			}
			break;
		case "multiple-long-press":
			var selectedIndices = this._listview.get_selectedIndices();
			if(selectedIndices.length > 0) {
				this.toggleSelection(renderer);
			}
			break;
		case "one-item":
			this._listview.set_selectedIndex(renderer.itemIndex);
			break;
		case "one-item-repeated":
			this._listview.set_selectedIndices([renderer.itemIndex]);
			break;
		default:
		}
	}
	,toggleSelection: function(renderer) {
		var itemIndex = renderer.itemIndex;
		var selectedIndices = this._listview.get_selectedIndices().slice();
		var index = selectedIndices.indexOf(itemIndex);
		if(index == -1) {
			selectedIndices.push(itemIndex);
		} else {
			selectedIndices.splice(index,1);
		}
		this._listview.set_selectedIndices(selectedIndices);
	}
	,selectRange: function(fromIndex,toIndex) {
		var tmp = this._listview;
		var _g = [];
		var _g1 = fromIndex;
		var _g2 = toIndex + 1;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(i);
		}
		tmp.set_selectedIndices(_g);
	}
	,__class__: haxe_ui_containers_ListViewEvents
});
var haxe_ui_containers_ScrollViewBuilder = function(scrollview) {
	this.autoHideScrolls = false;
	haxe_ui_core_CompositeBuilder.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers.ScrollViewBuilder"] = haxe_ui_containers_ScrollViewBuilder;
haxe_ui_containers_ScrollViewBuilder.__name__ = "haxe.ui.containers.ScrollViewBuilder";
haxe_ui_containers_ScrollViewBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers_ScrollViewBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_scrollview: null
	,_contents: null
	,_contentsLayoutName: null
	,create: function() {
		var contentLayoutName = this._scrollview.get_contentLayoutName();
		if(contentLayoutName == null) {
			contentLayoutName = "vertical";
		}
		this.createContentContainer(contentLayoutName);
	}
	,destroy: function() {
	}
	,get_numComponents: function() {
		return this._contents.get_numComponents();
	}
	,addComponent: function(child) {
		if(((child) instanceof haxe_ui_components_HorizontalScroll) == false && ((child) instanceof haxe_ui_components_VerticalScroll) == false && child.hasClass("scrollview-contents") == false) {
			return this._contents.addComponent(child);
		}
		return null;
	}
	,addComponentAt: function(child,index) {
		if(((child) instanceof haxe_ui_components_HorizontalScroll) == false && ((child) instanceof haxe_ui_components_VerticalScroll) == false && child.hasClass("scrollview-contents") == false) {
			return this._contents.addComponentAt(child,index);
		}
		return null;
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		if(((child) instanceof haxe_ui_components_HorizontalScroll) == false && ((child) instanceof haxe_ui_components_VerticalScroll) == false && child.hasClass("scrollview-contents") == false) {
			return this._contents.removeComponent(child,dispose,invalidate);
		}
		return null;
	}
	,removeComponentAt: function(index,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return this._contents.removeComponentAt(index,dispose,invalidate);
	}
	,getComponentIndex: function(child) {
		return this._contents.getComponentIndex(child);
	}
	,setComponentIndex: function(child,index) {
		if(((child) instanceof haxe_ui_components_HorizontalScroll) == false && ((child) instanceof haxe_ui_components_VerticalScroll) == false && child.hasClass("scrollview-contents") == false) {
			return this._contents.setComponentIndex(child,index);
		}
		return null;
	}
	,getComponentAt: function(index) {
		return this._contents.getComponentAt(index);
	}
	,createContentContainer: function(layoutName) {
		if(this._contents == null) {
			this._contents = new haxe_ui_containers_Box();
			this._contents.addClass("scrollview-contents");
			this._contents.set_id("scrollview-contents");
			this._contents.set_layout(haxe_ui_layouts_LayoutFactory.createFromName(layoutName));
			this._component.addComponent(this._contents);
			this._contentsLayoutName = layoutName;
		}
	}
	,horizontalConstraintModifier: function() {
		return 0;
	}
	,verticalConstraintModifier: function() {
		return 0;
	}
	,checkScrolls: function() {
		if(this._component.get_isNativeScroller() == true) {
			return;
		}
		var usableSize = this._component.get_layout().get_usableSize();
		if(this.get_virtualHorizontal() == false && usableSize.width > 0) {
			var horizontalConstraint = this._contents;
			var hscroll = this._component.findComponent(null,haxe_ui_components_HorizontalScroll,false);
			var vcw = horizontalConstraint.get_width() + this.horizontalConstraintModifier();
			if(vcw > usableSize.width) {
				if(hscroll == null) {
					hscroll = this.createHScroll();
				}
				hscroll.set_max(vcw - usableSize.width);
				hscroll.set_pageSize(usableSize.width / vcw * hscroll.get_max());
				hscroll.syncComponentValidation();
			} else if(hscroll != null) {
				this.destroyHScroll();
			}
		}
		if(this.get_virtualVertical() == false && usableSize.height > 0) {
			var verticalConstraint = this._contents;
			var vscroll = this._component.findComponent(null,haxe_ui_components_VerticalScroll,false);
			var vch = verticalConstraint.get_height() + this.verticalConstraintModifier();
			if(vch > usableSize.height) {
				if(vscroll == null) {
					vscroll = this.createVScroll();
				}
				vscroll.set_max(vch - usableSize.height);
				vscroll.set_pageSize(usableSize.height / vch * vscroll.get_max());
				vscroll.syncComponentValidation();
			} else if(vscroll != null) {
				this.destroyVScroll();
			}
		}
	}
	,createHScroll: function() {
		if(this._component.get_isNativeScroller() == true) {
			return null;
		}
		var usableSize = this._component.get_layout().get_usableSize();
		var horizontalConstraint = this._contents;
		var hscroll = this._component.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vcw = horizontalConstraint.get_width() + this.horizontalConstraintModifier();
		if(usableSize.width <= 0) {
			return hscroll;
		}
		if(vcw > usableSize.width && hscroll == null) {
			var builder = js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder);
			hscroll = new haxe_ui_components_HorizontalScroll();
			hscroll.set_includeInLayout(!builder.autoHideScrolls);
			hscroll.set_hidden(builder.autoHideScrolls);
			hscroll.set_percentWidth(100);
			hscroll.set_allowFocus(false);
			hscroll.set_id("scrollview-hscroll");
			this._component.addComponent(hscroll);
			this._component.registerInternalEvents(null,true);
		}
		return hscroll;
	}
	,createVScroll: function() {
		if(this._component.get_isNativeScroller() == true) {
			return null;
		}
		var usableSize = this._component.get_layout().get_usableSize();
		var verticalConstraint = this._contents;
		var vscroll = this._component.findComponent(null,haxe_ui_components_VerticalScroll,false);
		var vch = verticalConstraint.get_height() + this.verticalConstraintModifier();
		if(usableSize.height <= 0) {
			return vscroll;
		}
		if(vch > usableSize.height && vscroll == null) {
			var builder = js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder);
			vscroll = new haxe_ui_components_VerticalScroll();
			vscroll.set_includeInLayout(!builder.autoHideScrolls);
			vscroll.set_hidden(builder.autoHideScrolls);
			vscroll.set_percentHeight(100);
			vscroll.set_allowFocus(false);
			vscroll.set_id("scrollview-vscroll");
			this._component.addComponent(vscroll);
			this._component.registerInternalEvents(null,true);
		}
		return vscroll;
	}
	,destroyHScroll: function() {
		var hscroll = this._component.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null) {
			this._component.removeComponent(hscroll);
		}
	}
	,destroyVScroll: function() {
		var vscroll = this._component.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			this._component.removeComponent(vscroll);
		}
	}
	,updateScrollRect: function() {
		if(this._contents == null) {
			return;
		}
		var usableSize = this._component.get_layout().get_usableSize();
		var clipCX = usableSize.width - this.horizontalConstraintModifier();
		if(clipCX > this._contents.get_width()) {
			clipCX = this._contents.get_width() + this.horizontalConstraintModifier();
		}
		var clipCY = usableSize.height - this.verticalConstraintModifier();
		if(clipCY > this._contents.get_height()) {
			clipCY = this._contents.get_height() + this.verticalConstraintModifier();
		}
		var xpos = 0;
		var ypos = 0;
		if(this.get_virtualHorizontal() == false) {
			var hscroll = this._component.findComponent(null,haxe_ui_components_HorizontalScroll,false);
			if(hscroll != null) {
				xpos = hscroll.get_pos();
			}
		} else if(this._contents.get_componentClipRect() != null) {
			clipCX = this._contents.get_componentClipRect().width;
		}
		if(this.get_virtualVertical() == false) {
			var vscroll = this._component.findComponent(null,haxe_ui_components_VerticalScroll,false);
			if(vscroll != null) {
				ypos = vscroll.get_pos();
			}
		} else if(this._contents.get_componentClipRect() != null) {
			clipCY = this._contents.get_componentClipRect().height;
		}
		var rc = new haxe_ui_geom_Rectangle(xpos,ypos,Math.round(clipCX),Math.round(clipCY));
		this._contents.set_componentClipRect(rc);
	}
	,virtualHorizontal: null
	,get_virtualHorizontal: function() {
		return this._scrollview.get_virtual();
	}
	,virtualVertical: null
	,get_virtualVertical: function() {
		return this._scrollview.get_virtual();
	}
	,onVirtualChanged: function() {
	}
	,autoHideScrolls: null
	,applyStyle: function(style) {
		haxe_ui_core_CompositeBuilder.prototype.applyStyle.call(this,style);
		if(style.mode != null && style.mode == "mobile") {
			this.autoHideScrolls = true;
		} else {
			this.autoHideScrolls = false;
		}
	}
	,__class__: haxe_ui_containers_ScrollViewBuilder
	,__properties__: $extend(haxe_ui_core_CompositeBuilder.prototype.__properties__,{get_virtualVertical:"get_virtualVertical",get_virtualHorizontal:"get_virtualHorizontal"})
});
var haxe_ui_containers__$ListView_ListViewBuilder = function(listview) {
	haxe_ui_containers_ScrollViewBuilder.call(this,listview);
	this._listview = listview;
};
$hxClasses["haxe.ui.containers._ListView.ListViewBuilder"] = haxe_ui_containers__$ListView_ListViewBuilder;
haxe_ui_containers__$ListView_ListViewBuilder.__name__ = "haxe.ui.containers._ListView.ListViewBuilder";
haxe_ui_containers__$ListView_ListViewBuilder.__super__ = haxe_ui_containers_ScrollViewBuilder;
haxe_ui_containers__$ListView_ListViewBuilder.prototype = $extend(haxe_ui_containers_ScrollViewBuilder.prototype,{
	_listview: null
	,create: function() {
		this.createContentContainer(this._listview.get_virtual() ? "absolute" : "vertical");
	}
	,createContentContainer: function(layoutName) {
		if(this._contents == null) {
			haxe_ui_containers_ScrollViewBuilder.prototype.createContentContainer.call(this,layoutName);
			this._contents.addClass("listview-contents");
		}
	}
	,addComponent: function(child) {
		var r = null;
		if(((child) instanceof haxe_ui_core_ItemRenderer) && (this._listview.get_itemRenderer() == null && this._listview.get_itemRendererFunction() == null && this._listview.get_itemRendererClass() == null)) {
			this._listview.set_itemRenderer(js_Boot.__cast(child , haxe_ui_core_ItemRenderer));
			this._listview.get_itemRenderer().ready();
			this._listview.get_itemRenderer().handleVisibility(false);
			r = child;
		} else {
			r = haxe_ui_containers_ScrollViewBuilder.prototype.addComponent.call(this,child);
		}
		return r;
	}
	,onVirtualChanged: function() {
		this._contents.set_layoutName(this._listview.get_virtual() ? "absolute" : "vertical");
	}
	,addItemRendererClass: function(child,className,add) {
		if(add == null) {
			add = true;
		}
		var _gthis = this;
		child.walkComponents(function(c) {
			if(((c) instanceof haxe_ui_core_ItemRenderer)) {
				if(add == true) {
					c.addClass(className);
					haxe_ui_Toolkit.callLater(function() {
						_gthis.ensureVisible(js_Boot.__cast(c , haxe_ui_core_ItemRenderer));
					});
				} else {
					c.removeClass(className);
				}
			} else {
				c.invalidateComponent("style");
			}
			return true;
		});
	}
	,ensureVisible: function(itemToEnsure) {
		if(itemToEnsure != null && this._listview.get_virtual() == false) {
			var vscroll = this._listview.findComponent(null,haxe_ui_components_VerticalScroll);
			if(vscroll != null) {
				var vpos = vscroll.get_pos();
				var contents = this._listview.findComponent("listview-contents",null,null,"css");
				if(itemToEnsure.get_top() + itemToEnsure.get_height() > vpos + contents.get_componentClipRect().height) {
					vscroll.set_pos(itemToEnsure.get_top() + itemToEnsure.get_height() - contents.get_componentClipRect().height);
				} else if(itemToEnsure.get_top() < vpos) {
					vscroll.set_pos(itemToEnsure.get_top());
				}
			}
		}
	}
	,__class__: haxe_ui_containers__$ListView_ListViewBuilder
});
var haxe_ui_containers__$ListView_DataSourceBehaviour = function(component) {
	this._firstPass = true;
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.DataSourceBehaviour"] = haxe_ui_containers__$ListView_DataSourceBehaviour;
haxe_ui_containers__$ListView_DataSourceBehaviour.__name__ = "haxe.ui.containers._ListView.DataSourceBehaviour";
haxe_ui_containers__$ListView_DataSourceBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ListView_DataSourceBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_firstPass: null
	,set: function(value) {
		var _gthis = this;
		haxe_ui_behaviours_DataBehaviour.prototype.set.call(this,value);
		var dataSource = haxe_ui_util_Variant.toDataSource(this._value);
		if(dataSource != null) {
			dataSource.onChange = function() {
				var _this = _gthis._component;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout");
				}
				if(_gthis._firstPass == true) {
					_gthis._component.syncComponentValidation();
					_gthis._firstPass = false;
					var _this = _gthis._component;
					if(!(_this._layout == null || _this._layoutLocked == true)) {
						_this.invalidateComponent("layout");
					}
				}
				haxe_ui_binding_BindingManager.get_instance().componentPropChanged(_gthis._component,"dataSource");
			};
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		} else {
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		}
	}
	,get: function() {
		if(this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) {
			this._value = haxe_ui_util_Variant.fromDataSource(new haxe_ui_data_ArrayDataSource());
			this.set(this._value);
		}
		return this._value;
	}
	,__class__: haxe_ui_containers__$ListView_DataSourceBehaviour
});
var haxe_ui_containers__$ListView_SelectedIndexBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.SelectedIndexBehaviour"] = haxe_ui_containers__$ListView_SelectedIndexBehaviour;
haxe_ui_containers__$ListView_SelectedIndexBehaviour.__name__ = "haxe.ui.containers._ListView.SelectedIndexBehaviour";
haxe_ui_containers__$ListView_SelectedIndexBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ListView_SelectedIndexBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedIndices = listView.get_selectedIndices();
		if(selectedIndices != null && selectedIndices.length > 0) {
			return haxe_ui_util_Variant.fromFloat(selectedIndices[selectedIndices.length - 1]);
		} else {
			return haxe_ui_util_Variant.fromFloat(-1);
		}
	}
	,set: function(value) {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		listView.set_selectedIndices(haxe_ui_util_Variant.neq(value,haxe_ui_util_Variant.fromFloat(-1)) ? [haxe_ui_util_Variant.toInt(value)] : null);
	}
	,__class__: haxe_ui_containers__$ListView_SelectedIndexBehaviour
});
var haxe_ui_containers__$ListView_SelectedItemBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.SelectedItemBehaviour"] = haxe_ui_containers__$ListView_SelectedItemBehaviour;
haxe_ui_containers__$ListView_SelectedItemBehaviour.__name__ = "haxe.ui.containers._ListView.SelectedItemBehaviour";
haxe_ui_containers__$ListView_SelectedItemBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ListView_SelectedItemBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	getDynamic: function() {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedIndices = listView.get_selectedIndices();
		if(selectedIndices.length > 0) {
			return listView.get_dataSource().get(selectedIndices[selectedIndices.length - 1]);
		} else {
			return null;
		}
	}
	,set: function(value) {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var index = listView.get_dataSource().indexOf(value);
		if(index != -1 && listView.get_selectedIndices().indexOf(index) == -1) {
			listView.set_selectedIndices([index]);
		}
	}
	,__class__: haxe_ui_containers__$ListView_SelectedItemBehaviour
});
var haxe_ui_containers__$ListView_SelectedIndicesBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.SelectedIndicesBehaviour"] = haxe_ui_containers__$ListView_SelectedIndicesBehaviour;
haxe_ui_containers__$ListView_SelectedIndicesBehaviour.__name__ = "haxe.ui.containers._ListView.SelectedIndicesBehaviour";
haxe_ui_containers__$ListView_SelectedIndicesBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ListView_SelectedIndicesBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	get: function() {
		if(haxe_ui_util_Variant.get_isNull(this._value)) {
			return haxe_ui_util_Variant.fromArray([]);
		} else {
			return this._value;
		}
	}
	,validateData: function() {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedIndices = listView.get_selectedIndices();
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers__$ListView_ListViewBuilder);
		var _g = 0;
		var _g1 = contents._children == null ? [] : contents._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(selectedIndices.indexOf((js_Boot.__cast(child , haxe_ui_core_ItemRenderer)).itemIndex) != -1) {
				builder.addItemRendererClass(child,":selected");
			} else {
				builder.addItemRendererClass(child,":selected",false);
			}
		}
		if(listView.get_selectedIndex() != -1 && listView.get_selectedIndices().length != 0) {
			this._component.dispatch(new haxe_ui_events_UIEvent("change"));
		}
	}
	,__class__: haxe_ui_containers__$ListView_SelectedIndicesBehaviour
});
var haxe_ui_containers__$ListView_SelectedItemsBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.SelectedItemsBehaviour"] = haxe_ui_containers__$ListView_SelectedItemsBehaviour;
haxe_ui_containers__$ListView_SelectedItemsBehaviour.__name__ = "haxe.ui.containers._ListView.SelectedItemsBehaviour";
haxe_ui_containers__$ListView_SelectedItemsBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ListView_SelectedItemsBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedIndices = listView.get_selectedIndices();
		if(selectedIndices != null && selectedIndices.length > 0) {
			var selectedItems = [];
			var _g = 0;
			while(_g < selectedIndices.length) {
				var i = selectedIndices[_g];
				++_g;
				if(i < 0 || i >= listView.get_dataSource().get_size()) {
					continue;
				}
				var data = listView.get_dataSource().get(i);
				selectedItems.push(data);
			}
			return haxe_ui_util_Variant.fromArray(selectedItems);
		} else {
			return haxe_ui_util_Variant.fromArray([]);
		}
	}
	,set: function(value) {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedItems = haxe_ui_util_Variant.toArray(value);
		if(selectedItems != null && selectedItems.length > 0) {
			var selectedIndices = [];
			var index;
			var _g = 0;
			while(_g < selectedItems.length) {
				var item = selectedItems[_g];
				++_g;
				index = listView.get_dataSource().indexOf(item);
				if(index != -1) {
					selectedIndices.push(index);
				}
			}
			listView.set_selectedIndices(selectedIndices);
		} else {
			listView.set_selectedIndices([]);
		}
	}
	,__class__: haxe_ui_containers__$ListView_SelectedItemsBehaviour
});
var haxe_ui_containers__$ListView_SelectionModeBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.SelectionModeBehaviour"] = haxe_ui_containers__$ListView_SelectionModeBehaviour;
haxe_ui_containers__$ListView_SelectionModeBehaviour.__name__ = "haxe.ui.containers._ListView.SelectionModeBehaviour";
haxe_ui_containers__$ListView_SelectionModeBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ListView_SelectionModeBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedIndices = listView.get_selectedIndices();
		if(selectedIndices.length == 0) {
			return;
		}
		var selectionMode = this._value;
		switch(selectionMode) {
		case "disabled":
			listView.set_selectedIndices(null);
			break;
		case "one-item":
			if(selectedIndices.length > 1) {
				listView.set_selectedIndices([selectedIndices[0]]);
			}
			break;
		default:
		}
	}
	,__class__: haxe_ui_containers__$ListView_SelectionModeBehaviour
});
var haxe_ui_containers__$ScrollView_Virtual = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.Virtual"] = haxe_ui_containers__$ScrollView_Virtual;
haxe_ui_containers__$ScrollView_Virtual.__name__ = "haxe.ui.containers._ScrollView.Virtual";
haxe_ui_containers__$ScrollView_Virtual.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers__$ScrollView_Virtual.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	set: function(value) {
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
		if(this._component._compositeBuilder != null) {
			(js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).onVirtualChanged();
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_Virtual
});
var haxe_ui_containers__$ScrollView_ContentLayoutName = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.ContentLayoutName"] = haxe_ui_containers__$ScrollView_ContentLayoutName;
haxe_ui_containers__$ScrollView_ContentLayoutName.__name__ = "haxe.ui.containers._ScrollView.ContentLayoutName";
haxe_ui_containers__$ScrollView_ContentLayoutName.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers__$ScrollView_ContentLayoutName.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	set: function(value) {
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers_ScrollViewBuilder);
		if(builder != null && haxe_ui_util_Variant.fromString(builder._contentsLayoutName) != value) {
			builder._contentsLayoutName = haxe_ui_util_Variant.toString(value);
			builder._contents.set_layout(haxe_ui_layouts_LayoutFactory.createFromName(haxe_ui_util_Variant.toString(value)));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_ContentLayoutName
});
var haxe_ui_containers__$ScrollView_ContentWidth = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.ContentWidth"] = haxe_ui_containers__$ScrollView_ContentWidth;
haxe_ui_containers__$ScrollView_ContentWidth.__name__ = "haxe.ui.containers._ScrollView.ContentWidth";
haxe_ui_containers__$ScrollView_ContentWidth.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ScrollView_ContentWidth.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents == null) {
			return null;
		}
		return haxe_ui_util_Variant.fromFloat(contents.get_width());
	}
	,set: function(value) {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.set_width(haxe_ui_util_Variant.toFloat(value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_ContentWidth
});
var haxe_ui_containers__$ScrollView_PercentContentWidth = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.PercentContentWidth"] = haxe_ui_containers__$ScrollView_PercentContentWidth;
haxe_ui_containers__$ScrollView_PercentContentWidth.__name__ = "haxe.ui.containers._ScrollView.PercentContentWidth";
haxe_ui_containers__$ScrollView_PercentContentWidth.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ScrollView_PercentContentWidth.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents == null) {
			return null;
		}
		return haxe_ui_util_Variant.fromFloat(contents.get_percentWidth());
	}
	,set: function(value) {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.set_percentWidth(haxe_ui_util_Variant.toFloat(value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_PercentContentWidth
});
var haxe_ui_containers__$ScrollView_ContentHeight = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.ContentHeight"] = haxe_ui_containers__$ScrollView_ContentHeight;
haxe_ui_containers__$ScrollView_ContentHeight.__name__ = "haxe.ui.containers._ScrollView.ContentHeight";
haxe_ui_containers__$ScrollView_ContentHeight.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ScrollView_ContentHeight.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents == null) {
			return null;
		}
		return haxe_ui_util_Variant.fromFloat(contents.get_height());
	}
	,set: function(value) {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.set_height(haxe_ui_util_Variant.toFloat(value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_ContentHeight
});
var haxe_ui_containers__$ScrollView_PercentContentHeight = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.PercentContentHeight"] = haxe_ui_containers__$ScrollView_PercentContentHeight;
haxe_ui_containers__$ScrollView_PercentContentHeight.__name__ = "haxe.ui.containers._ScrollView.PercentContentHeight";
haxe_ui_containers__$ScrollView_PercentContentHeight.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ScrollView_PercentContentHeight.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents == null) {
			return null;
		}
		return haxe_ui_util_Variant.fromFloat(contents.get_percentHeight());
	}
	,set: function(value) {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.set_percentHeight(haxe_ui_util_Variant.toFloat(value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_PercentContentHeight
});
var haxe_ui_containers__$ScrollView_HScrollPos = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.HScrollPos"] = haxe_ui_containers__$ScrollView_HScrollPos;
haxe_ui_containers__$ScrollView_HScrollPos.__name__ = "haxe.ui.containers._ScrollView.HScrollPos";
haxe_ui_containers__$ScrollView_HScrollPos.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_HScrollPos.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,get: function() {
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll == null) {
			return haxe_ui_util_Variant.fromFloat(0);
		}
		return haxe_ui_util_Variant.fromFloat(hscroll.get_pos());
	}
	,validateData: function() {
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(this._scrollview.get_virtual() == true) {
			if(hscroll == null) {
				hscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createHScroll();
			}
			if(hscroll != null) {
				hscroll.set_pos(haxe_ui_util_Variant.toFloat(this._value));
			}
		} else if(hscroll != null) {
			hscroll.set_pos(haxe_ui_util_Variant.toFloat(this._value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_HScrollPos
});
var haxe_ui_containers__$ScrollView_VScrollPos = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.VScrollPos"] = haxe_ui_containers__$ScrollView_VScrollPos;
haxe_ui_containers__$ScrollView_VScrollPos.__name__ = "haxe.ui.containers._ScrollView.VScrollPos";
haxe_ui_containers__$ScrollView_VScrollPos.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_VScrollPos.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,get: function() {
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll == null) {
			return haxe_ui_util_Variant.fromFloat(0);
		}
		return haxe_ui_util_Variant.fromFloat(vscroll.get_pos());
	}
	,validateData: function() {
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(this._scrollview.get_virtual() == true) {
			if(vscroll == null) {
				vscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createVScroll();
			}
			if(vscroll != null) {
				vscroll.set_pos(haxe_ui_util_Variant.toFloat(this._value));
			}
		} else if(vscroll != null) {
			vscroll.set_pos(haxe_ui_util_Variant.toFloat(this._value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_VScrollPos
});
var haxe_ui_containers__$ScrollView_HScrollMax = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.HScrollMax"] = haxe_ui_containers__$ScrollView_HScrollMax;
haxe_ui_containers__$ScrollView_HScrollMax.__name__ = "haxe.ui.containers._ScrollView.HScrollMax";
haxe_ui_containers__$ScrollView_HScrollMax.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_HScrollMax.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,get: function() {
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll == null) {
			return haxe_ui_util_Variant.fromFloat(0);
		}
		return haxe_ui_util_Variant.fromFloat(hscroll.get_max());
	}
	,validateData: function() {
		if(this._scrollview.get_virtual() == true) {
			var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
			if(haxe_ui_util_Variant.gt(this._value,haxe_ui_util_Variant.fromFloat(0))) {
				if(hscroll == null) {
					hscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createHScroll();
				}
			} else if(hscroll != null) {
				(js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).destroyHScroll();
			}
			if(hscroll != null) {
				hscroll.set_max(haxe_ui_util_Variant.toFloat(this._value));
			}
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_HScrollMax
});
var haxe_ui_containers__$ScrollView_VScrollMax = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.VScrollMax"] = haxe_ui_containers__$ScrollView_VScrollMax;
haxe_ui_containers__$ScrollView_VScrollMax.__name__ = "haxe.ui.containers._ScrollView.VScrollMax";
haxe_ui_containers__$ScrollView_VScrollMax.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_VScrollMax.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,get: function() {
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll == null) {
			return haxe_ui_util_Variant.fromFloat(0);
		}
		return haxe_ui_util_Variant.fromFloat(vscroll.get_max());
	}
	,validateData: function() {
		if(this._scrollview.get_virtual() == true) {
			var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
			if(haxe_ui_util_Variant.gt(this._value,haxe_ui_util_Variant.fromFloat(0))) {
				if(vscroll == null) {
					vscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createVScroll();
				}
			} else if(vscroll != null) {
				(js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).destroyVScroll();
			}
			if(vscroll != null) {
				vscroll.set_max(haxe_ui_util_Variant.toFloat(this._value));
			}
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_VScrollMax
});
var haxe_ui_containers__$ScrollView_HScrollPageSize = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.HScrollPageSize"] = haxe_ui_containers__$ScrollView_HScrollPageSize;
haxe_ui_containers__$ScrollView_HScrollPageSize.__name__ = "haxe.ui.containers._ScrollView.HScrollPageSize";
haxe_ui_containers__$ScrollView_HScrollPageSize.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_HScrollPageSize.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,validateData: function() {
		if(this._scrollview.get_virtual() == true) {
			var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
			if(hscroll == null) {
				hscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createHScroll();
			}
			if(hscroll != null) {
				hscroll.set_pageSize(haxe_ui_util_Variant.toFloat(this._value));
			}
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_HScrollPageSize
});
var haxe_ui_containers__$ScrollView_VScrollPageSize = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.VScrollPageSize"] = haxe_ui_containers__$ScrollView_VScrollPageSize;
haxe_ui_containers__$ScrollView_VScrollPageSize.__name__ = "haxe.ui.containers._ScrollView.VScrollPageSize";
haxe_ui_containers__$ScrollView_VScrollPageSize.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_VScrollPageSize.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,validateData: function() {
		if(this._scrollview.get_virtual() == true) {
			var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
			if(vscroll == null) {
				vscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createVScroll();
			}
			if(vscroll != null) {
				vscroll.set_pageSize(haxe_ui_util_Variant.toFloat(this._value));
			}
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_VScrollPageSize
});
var haxe_ui_containers__$ScrollView_ScrollModeBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.ScrollModeBehaviour"] = haxe_ui_containers__$ScrollView_ScrollModeBehaviour;
haxe_ui_containers__$ScrollView_ScrollModeBehaviour.__name__ = "haxe.ui.containers._ScrollView.ScrollModeBehaviour";
haxe_ui_containers__$ScrollView_ScrollModeBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_ScrollModeBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		this._component.registerInternalEvents(null,true);
	}
	,__class__: haxe_ui_containers__$ScrollView_ScrollModeBehaviour
});
var haxe_ui_containers__$Splitter_SizerGripper = function() {
	haxe_ui_core_InteractiveComponent.call(this);
	this.registerEvent("mouseover",$bind(this,this.onMouseOver));
	this.registerEvent("mouseout",$bind(this,this.onMouseOut));
	var image = new haxe_ui_components_Image();
	this.addComponent(image);
};
$hxClasses["haxe.ui.containers._Splitter.SizerGripper"] = haxe_ui_containers__$Splitter_SizerGripper;
haxe_ui_containers__$Splitter_SizerGripper.__name__ = "haxe.ui.containers._Splitter.SizerGripper";
haxe_ui_containers__$Splitter_SizerGripper.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_containers__$Splitter_SizerGripper.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	onMouseOver: function(event) {
		this.addClass(":hover");
	}
	,onMouseOut: function(event) {
		this.removeClass(":hover");
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers__$Splitter_SizerGripper();
	}
	,__class__: haxe_ui_containers__$Splitter_SizerGripper
});
var haxe_ui_containers_Stack = function() {
	haxe_ui_containers_Box.call(this);
};
$hxClasses["haxe.ui.containers.Stack"] = haxe_ui_containers_Stack;
haxe_ui_containers_Stack.__name__ = "haxe.ui.containers.Stack";
haxe_ui_containers_Stack.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_Stack.prototype = $extend(haxe_ui_containers_Box.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_Stack();
	}
	,__class__: haxe_ui_containers_Stack
});
var haxe_ui_containers_TabView = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.containers.TabView"] = haxe_ui_containers_TabView;
haxe_ui_containers_TabView.__name__ = "haxe.ui.containers.TabView";
haxe_ui_containers_TabView.__super__ = haxe_ui_core_Component;
haxe_ui_containers_TabView.prototype = $extend(haxe_ui_core_Component.prototype,{
	removePage: function(index) {
		this.behaviours.call("removePage",index);
	}
	,getPage: function(index) {
		return haxe_ui_util_Variant.toComponent(this.behaviours.call("getPage",index));
	}
	,removeAllPages: function() {
		this.behaviours.call("removeAllPages",null);
	}
	,registerComposite: function() {
		haxe_ui_core_Component.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_containers__$TabView_Builder;
		this._internalEventsClass = haxe_ui_containers__$TabView_Events;
		this._defaultLayoutClass = haxe_ui_containers__$TabView_Layout;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("pageIndex",haxe_ui_containers__$TabView_PageIndex,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("selectedPage",haxe_ui_containers__$TabView_SelectedPage,null);
		this.behaviours.register("tabPosition",haxe_ui_containers__$TabView_TabPosition);
		this.behaviours.register("pageCount",haxe_ui_containers__$TabView_PageCount);
		this.behaviours.register("closable",haxe_ui_containers__$TabView_Closable,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("removePage",haxe_ui_containers__$TabView_RemovePage);
		this.behaviours.register("getPage",haxe_ui_containers__$TabView_GetPage);
		this.behaviours.register("removeAllPages",haxe_ui_containers__$TabView_RemoveAllPages);
	}
	,get_pageIndex: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("pageIndex"));
	}
	,set_pageIndex: function(value) {
		this.behaviours.set("pageIndex",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pageIndex");
		return value;
	}
	,get_selectedPage: function() {
		return haxe_ui_util_Variant.toComponent(this.behaviours.get("selectedPage"));
	}
	,set_selectedPage: function(value) {
		this.behaviours.set("selectedPage",haxe_ui_util_Variant.fromComponent(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedPage");
		return value;
	}
	,get_tabPosition: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("tabPosition"));
	}
	,set_tabPosition: function(value) {
		this.behaviours.set("tabPosition",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"tabPosition");
		return value;
	}
	,get_pageCount: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("pageCount"));
	}
	,set_pageCount: function(value) {
		this.behaviours.set("pageCount",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"pageCount");
		return value;
	}
	,get_closable: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("closable"));
	}
	,set_closable: function(value) {
		this.behaviours.set("closable",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"closable");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_TabView();
	}
	,__class__: haxe_ui_containers_TabView
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_closable:"set_closable",get_closable:"get_closable",set_pageCount:"set_pageCount",get_pageCount:"get_pageCount",set_tabPosition:"set_tabPosition",get_tabPosition:"get_tabPosition",set_selectedPage:"set_selectedPage",get_selectedPage:"get_selectedPage",set_pageIndex:"set_pageIndex",get_pageIndex:"get_pageIndex"})
});
var haxe_ui_containers__$TabView_Layout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.containers._TabView.Layout"] = haxe_ui_containers__$TabView_Layout;
haxe_ui_containers__$TabView_Layout.__name__ = "haxe.ui.containers._TabView.Layout";
haxe_ui_containers__$TabView_Layout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_containers__$TabView_Layout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		var tabs = this.get_component().findComponent(null,haxe_ui_components_TabBar,false);
		var content = this.get_component().findComponent(null,haxe_ui_containers_Box,false);
		if(tabs == null || content == null) {
			return;
		}
		if(this.get_component().hasClass(":bottom")) {
			content.set_left(this.get_paddingLeft());
			content.set_top(this.get_paddingTop());
			tabs.set_left(this.get_paddingLeft());
			if(tabs.get_height() != 0) {
				tabs.set_top(this.get_component().get_height() - tabs.get_height() - this.get_paddingBottom() + this.marginTop(tabs));
			}
		} else {
			tabs.set_left(this.get_paddingLeft());
			tabs.set_top(this.get_paddingTop() + this.marginTop(tabs));
			content.set_left(this.get_paddingLeft());
			if(tabs.get_height() != 0) {
				content.set_top(tabs.get_top() + tabs.get_height() - this.marginTop(tabs));
			}
		}
	}
	,resizeChildren: function() {
		var tabs = this.get_component().findComponent(null,haxe_ui_components_TabBar,false);
		var content = this.get_component().findComponent(null,haxe_ui_containers_Box,false);
		if(tabs == null || content == null) {
			return;
		}
		var usableSize = this.get_usableSize();
		tabs.set_width(usableSize.width);
		if(this.get_component().get_autoHeight() == false) {
			content.set_height(usableSize.height + 1);
		}
		if(this.get_component().get_autoWidth() == false) {
			content.set_width(this.get_component().get_width());
		}
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		var tabs = this.get_component().findComponent(null,haxe_ui_components_TabBar,false);
		if(tabs != null && tabs.get_componentHeight() != null) {
			size.height -= tabs.get_componentHeight();
		}
		return size;
	}
	,__class__: haxe_ui_containers__$TabView_Layout
});
var haxe_ui_containers__$TabView_Closable = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TabView.Closable"] = haxe_ui_containers__$TabView_Closable;
haxe_ui_containers__$TabView_Closable.__name__ = "haxe.ui.containers._TabView.Closable";
haxe_ui_containers__$TabView_Closable.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$TabView_Closable.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		if(this._component.get_native() == true) {
			return;
		}
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers__$TabView_Builder);
		builder._tabs.set_closable(haxe_ui_util_Variant.toBool(this._value));
	}
	,__class__: haxe_ui_containers__$TabView_Closable
});
var haxe_ui_containers__$TabView_PageIndex = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TabView.PageIndex"] = haxe_ui_containers__$TabView_PageIndex;
haxe_ui_containers__$TabView_PageIndex.__name__ = "haxe.ui.containers._TabView.PageIndex";
haxe_ui_containers__$TabView_PageIndex.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$TabView_PageIndex.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		if(this._component.get_native() == true) {
			return;
		}
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers__$TabView_Builder);
		if(haxe_ui_util_Variant.lt(this._value,haxe_ui_util_Variant.fromFloat(0))) {
			return;
		}
		if(haxe_ui_util_Variant.gt(this._value,haxe_ui_util_Variant.fromFloat(builder._views.length - 1))) {
			this._value = haxe_ui_util_Variant.fromFloat(builder._views.length - 1);
			return;
		}
		builder._tabs.set_selectedIndex(haxe_ui_util_Variant.toInt(this._value));
		var view = builder._views[haxe_ui_util_Variant.toInt(this._value)];
		if(view != null) {
			if(builder._currentView != null) {
				builder._currentView.hide();
			}
			if(builder._content.getComponentIndex(view) == -1) {
				builder._content.addComponent(view);
			} else {
				view.show();
			}
			builder._currentView = view;
		}
		this._component.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,__class__: haxe_ui_containers__$TabView_PageIndex
});
var haxe_ui_containers__$TabView_SelectedPage = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TabView.SelectedPage"] = haxe_ui_containers__$TabView_SelectedPage;
haxe_ui_containers__$TabView_SelectedPage.__name__ = "haxe.ui.containers._TabView.SelectedPage";
haxe_ui_containers__$TabView_SelectedPage.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers__$TabView_SelectedPage.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		var tabview = js_Boot.__cast(this._component , haxe_ui_containers_TabView);
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers__$TabView_Builder);
		var view = builder._views[tabview.get_pageIndex()];
		return haxe_ui_util_Variant.fromComponent(view);
	}
	,set: function(value) {
		var tabview = js_Boot.__cast(this._component , haxe_ui_containers_TabView);
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers__$TabView_Builder);
		var view = haxe_ui_util_Variant.toComponent(value);
		var viewIndex = builder._views.indexOf(view);
		if(viewIndex != -1) {
			tabview.set_pageIndex(viewIndex);
		}
	}
	,__class__: haxe_ui_containers__$TabView_SelectedPage
});
var haxe_ui_containers__$TabView_TabPosition = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TabView.TabPosition"] = haxe_ui_containers__$TabView_TabPosition;
haxe_ui_containers__$TabView_TabPosition.__name__ = "haxe.ui.containers._TabView.TabPosition";
haxe_ui_containers__$TabView_TabPosition.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$TabView_TabPosition.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		if(haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromString("bottom"))) {
			this._component.addClass(":bottom");
		} else {
			this._component.removeClass(":bottom");
		}
		this._component.findComponent(null,haxe_ui_components_TabBar,false).set_tabPosition(haxe_ui_util_Variant.toString(this._value));
	}
	,__class__: haxe_ui_containers__$TabView_TabPosition
});
var haxe_ui_containers__$TabView_PageCount = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TabView.PageCount"] = haxe_ui_containers__$TabView_PageCount;
haxe_ui_containers__$TabView_PageCount.__name__ = "haxe.ui.containers._TabView.PageCount";
haxe_ui_containers__$TabView_PageCount.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$TabView_PageCount.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers__$TabView_Builder);
		return haxe_ui_util_Variant.fromFloat(builder._tabs.get_tabCount());
	}
	,__class__: haxe_ui_containers__$TabView_PageCount
});
var haxe_ui_containers__$TabView_RemovePage = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TabView.RemovePage"] = haxe_ui_containers__$TabView_RemovePage;
haxe_ui_containers__$TabView_RemovePage.__name__ = "haxe.ui.containers._TabView.RemovePage";
haxe_ui_containers__$TabView_RemovePage.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$TabView_RemovePage.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers__$TabView_Builder);
		var index = param;
		if(index < builder._views.length) {
			builder._tabs.removeTab(index);
		}
		return null;
	}
	,__class__: haxe_ui_containers__$TabView_RemovePage
});
var haxe_ui_containers__$TabView_GetPage = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TabView.GetPage"] = haxe_ui_containers__$TabView_GetPage;
haxe_ui_containers__$TabView_GetPage.__name__ = "haxe.ui.containers._TabView.GetPage";
haxe_ui_containers__$TabView_GetPage.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$TabView_GetPage.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers__$TabView_Builder);
		var index = param;
		var page = null;
		if(index < builder._views.length) {
			page = builder._views[index];
		}
		return haxe_ui_util_Variant.fromComponent(page);
	}
	,__class__: haxe_ui_containers__$TabView_GetPage
});
var haxe_ui_containers__$TabView_RemoveAllPages = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TabView.RemoveAllPages"] = haxe_ui_containers__$TabView_RemoveAllPages;
haxe_ui_containers__$TabView_RemoveAllPages.__name__ = "haxe.ui.containers._TabView.RemoveAllPages";
haxe_ui_containers__$TabView_RemoveAllPages.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$TabView_RemoveAllPages.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers__$TabView_Builder);
		while(builder._views.length > 0) builder._tabs.removeTab(0);
		(js_Boot.__cast(this._component , haxe_ui_containers_TabView)).set_pageIndex(-1);
		builder._tabs.set_selectedIndex(-1);
		return null;
	}
	,__class__: haxe_ui_containers__$TabView_RemoveAllPages
});
var haxe_ui_containers__$TabView_Events = function(tabview) {
	haxe_ui_events_Events.call(this,tabview);
	this._tabview = tabview;
};
$hxClasses["haxe.ui.containers._TabView.Events"] = haxe_ui_containers__$TabView_Events;
haxe_ui_containers__$TabView_Events.__name__ = "haxe.ui.containers._TabView.Events";
haxe_ui_containers__$TabView_Events.__super__ = haxe_ui_events_Events;
haxe_ui_containers__$TabView_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_tabview: null
	,register: function() {
		var tabs = this._tabview.findComponent(null,haxe_ui_components_TabBar,false);
		if(tabs.hasEvent("change",$bind(this,this.onTabChanged)) == false) {
			tabs.registerEvent("change",$bind(this,this.onTabChanged));
		}
		if(tabs.hasEvent("beforeClose",$bind(this,this.onBeforeTabClosed)) == false) {
			tabs.registerEvent("beforeClose",$bind(this,this.onBeforeTabClosed));
		}
		if(tabs.hasEvent("close",$bind(this,this.onTabClosed)) == false) {
			tabs.registerEvent("close",$bind(this,this.onTabClosed));
		}
	}
	,unregister: function() {
		var tabs = this._tabview.findComponent(null,haxe_ui_components_TabBar,false);
		tabs.unregisterEvent("change",$bind(this,this.onTabChanged));
		tabs.unregisterEvent("beforeClose",$bind(this,this.onBeforeTabClosed));
	}
	,onBeforeTabClosed: function(event) {
		this._tabview.dispatch(event);
	}
	,onTabClosed: function(event) {
		var builder = js_Boot.__cast(this._tabview._compositeBuilder , haxe_ui_containers__$TabView_Builder);
		var view = builder._views[event.data];
		HxOverrides.remove(builder._views,view);
		builder._content.removeComponent(view);
		this._tabview.dispatch(new haxe_ui_events_UIEvent("close",event.data));
	}
	,onTabChanged: function(event) {
		var tabs = this._tabview.findComponent(null,haxe_ui_components_TabBar,false);
		this._tabview.set_pageIndex(-1);
		this._tabview.set_pageIndex(tabs.get_selectedIndex());
	}
	,__class__: haxe_ui_containers__$TabView_Events
});
var haxe_ui_containers__$TabView_Builder = function(tabview) {
	this._views = [];
	this._currentView = null;
	haxe_ui_core_CompositeBuilder.call(this,tabview);
	this._tabview = tabview;
};
$hxClasses["haxe.ui.containers._TabView.Builder"] = haxe_ui_containers__$TabView_Builder;
haxe_ui_containers__$TabView_Builder.__name__ = "haxe.ui.containers._TabView.Builder";
haxe_ui_containers__$TabView_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers__$TabView_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_tabview: null
	,_tabs: null
	,_content: null
	,_currentView: null
	,_views: null
	,create: function() {
		if(this._content == null) {
			this._content = new haxe_ui_containers_Box();
			this._content.set_id("tabview-content");
			this._content.addClass("tabview-content");
			this._content.set_layout(haxe_ui_layouts_LayoutFactory.createFromName("vertical"));
			this._tabview.addComponent(this._content);
		}
		if(this._tabs == null) {
			this._tabs = new haxe_ui_components_TabBar();
			this._tabs.set_id("tabview-tabs");
			this._tabs.addClass("tabview-tabs");
			this._tabview.addComponent(this._tabs);
		}
	}
	,get_numComponents: function() {
		return this._views.length;
	}
	,addComponent: function(child) {
		if(child != this._content && child != this._tabs) {
			var text = child.get_text();
			var icon = null;
			if(((child) instanceof haxe_ui_containers_Box)) {
				icon = (js_Boot.__cast(child , haxe_ui_containers_Box)).get_icon();
			}
			child.registerEvent("propertyChange",$bind(this,this.onPagePropertyChanged));
			this._views.push(child);
			var button = new haxe_ui_components_Button();
			button.set_text(text);
			button.set_icon(haxe_ui_util_Variant.fromString(icon));
			this._tabs.addComponent(button);
			return child;
		}
		return null;
	}
	,addComponentAt: function(child,index) {
		if(child != this._content && child != this._tabs) {
			var text = child.get_text();
			var icon = null;
			if(((child) instanceof haxe_ui_containers_Box)) {
				icon = (js_Boot.__cast(child , haxe_ui_containers_Box)).get_icon();
			}
			child.registerEvent("propertyChange",$bind(this,this.onPagePropertyChanged));
			this._views.splice(index,0,child);
			var button = new haxe_ui_components_Button();
			button.set_text(text);
			button.set_icon(haxe_ui_util_Variant.fromString(icon));
			this._tabs.addComponentAt(button,index);
			return child;
		}
		return null;
	}
	,onPagePropertyChanged: function(event) {
		if(event.data == "text") {
			var index = this._views.indexOf(event.target);
			var button = this._tabs.getTab(index);
			if(button != null && button.get_text() != event.target.get_text()) {
				button.set_text(event.target.get_text());
			}
		}
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		if(child != this._content && child != this._tabs) {
			var _g = this._views.indexOf(child);
			if(_g != -1) {
				var i = _g;
				this._views.splice(i,1);
				this._tabs.removeComponentAt(i,dispose,invalidate);
				return child;
			}
		}
		return null;
	}
	,removeComponentAt: function(index,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		this._views.splice(index,1);
		return this._tabs.removeComponentAt(index,dispose,invalidate);
	}
	,getComponentIndex: function(child) {
		return this._views.indexOf(child);
	}
	,setComponentIndex: function(child,index) {
		if(child != this._content && child != this._tabs) {
			var _g = this._views.indexOf(child);
			if(_g != -1) {
				var i = _g;
				this._views.splice(i,1);
				this._views.splice(index,0,child);
				this._tabs.setComponentIndex(this._tabs.getComponentAt(i),index);
				return child;
			}
		}
		return null;
	}
	,getComponentAt: function(index) {
		return this._views[index];
	}
	,findComponent: function(criteria,type,recursive,searchType) {
		var match = haxe_ui_core_CompositeBuilder.prototype.findComponent.call(this,criteria,type,recursive,searchType);
		if(match == null) {
			var _g = 0;
			var _g1 = this._views;
			while(_g < _g1.length) {
				var view = _g1[_g];
				++_g;
				match = view.findComponent(criteria,type,recursive,searchType);
				if(view.matchesSearch(criteria,type,searchType)) {
					return view;
				} else {
					match = view.findComponent(criteria,type,recursive,searchType);
				}
				if(match != null) {
					break;
				}
			}
		}
		return match;
	}
	,__class__: haxe_ui_containers__$TabView_Builder
});
var haxe_ui_containers_TableView = function() {
	haxe_ui_containers_ScrollView.call(this);
};
$hxClasses["haxe.ui.containers.TableView"] = haxe_ui_containers_TableView;
haxe_ui_containers_TableView.__name__ = "haxe.ui.containers.TableView";
haxe_ui_containers_TableView.__interfaces__ = [haxe_ui_containers_IVirtualContainer,haxe_ui_core_IDataComponent];
haxe_ui_containers_TableView.__super__ = haxe_ui_containers_ScrollView;
haxe_ui_containers_TableView.prototype = $extend(haxe_ui_containers_ScrollView.prototype,{
	_itemRendererFunction: null
	,get_itemRendererFunction: function() {
		return this._itemRendererFunction;
	}
	,set_itemRendererFunction: function(value) {
		if(this._itemRendererFunction != value) {
			this._itemRendererFunction = value;
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,_itemRendererClass: null
	,get_itemRendererClass: function() {
		return this._itemRendererClass;
	}
	,set_itemRendererClass: function(value) {
		if(this._itemRendererClass != value) {
			this._itemRendererClass = value;
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,_itemRenderer: null
	,get_itemRenderer: function() {
		return this._itemRenderer;
	}
	,set_itemRenderer: function(value) {
		if(this._itemRenderer != value) {
			this._itemRenderer = value;
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_ScrollView.prototype.registerBehaviours.call(this);
		this.behaviours.register("dataSource",haxe_ui_containers__$TableView_DataSourceBehaviour);
		this.behaviours.register("itemWidth",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("itemHeight",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("itemCount",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("variableItemSize",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("selectedIndex",haxe_ui_containers__$TableView_SelectedIndexBehaviour,haxe_ui_util_Variant.fromFloat(-1));
		this.behaviours.register("selectedItem",haxe_ui_containers__$TableView_SelectedItemBehaviour);
		this.behaviours.register("selectedIndices",haxe_ui_containers__$TableView_SelectedIndicesBehaviour);
		this.behaviours.register("selectedItems",haxe_ui_containers__$TableView_SelectedItemsBehaviour);
		this.behaviours.register("selectionMode",haxe_ui_containers__$TableView_SelectionModeBehaviour,haxe_ui_util_Variant.fromString("one-item"));
		this.behaviours.register("longPressSelectionTime",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromFloat(500));
	}
	,get_dataSource: function() {
		return haxe_ui_util_Variant.toDataSource(this.behaviours.get("dataSource"));
	}
	,set_dataSource: function(value) {
		this.behaviours.set("dataSource",haxe_ui_util_Variant.fromDataSource(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"dataSource");
		return value;
	}
	,get_itemWidth: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("itemWidth"));
	}
	,set_itemWidth: function(value) {
		this.behaviours.set("itemWidth",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"itemWidth");
		return value;
	}
	,get_itemHeight: function() {
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("itemHeight"));
	}
	,set_itemHeight: function(value) {
		this.behaviours.set("itemHeight",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"itemHeight");
		return value;
	}
	,get_itemCount: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("itemCount"));
	}
	,set_itemCount: function(value) {
		this.behaviours.set("itemCount",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"itemCount");
		return value;
	}
	,get_variableItemSize: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("variableItemSize"));
	}
	,set_variableItemSize: function(value) {
		this.behaviours.set("variableItemSize",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"variableItemSize");
		return value;
	}
	,get_selectedIndex: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("selectedIndex"));
	}
	,set_selectedIndex: function(value) {
		this.behaviours.set("selectedIndex",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedIndex");
		return value;
	}
	,get_selectedItem: function() {
		return this.behaviours.getDynamic("selectedItem");
	}
	,set_selectedItem: function(value) {
		this.behaviours.set("selectedItem",haxe_ui_util_Variant.fromDynamic(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedItem");
		return value;
	}
	,get_selectedIndices: function() {
		return haxe_ui_util_Variant.toArray(this.behaviours.get("selectedIndices"));
	}
	,set_selectedIndices: function(value) {
		this.behaviours.set("selectedIndices",haxe_ui_util_Variant.fromArray(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedIndices");
		return value;
	}
	,get_selectedItems: function() {
		return haxe_ui_util_Variant.toArray(this.behaviours.get("selectedItems"));
	}
	,set_selectedItems: function(value) {
		this.behaviours.set("selectedItems",haxe_ui_util_Variant.fromArray(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectedItems");
		return value;
	}
	,get_selectionMode: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("selectionMode"));
	}
	,set_selectionMode: function(value) {
		this.behaviours.set("selectionMode",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selectionMode");
		return value;
	}
	,get_longPressSelectionTime: function() {
		return haxe_ui_util_Variant.toInt(this.behaviours.get("longPressSelectionTime"));
	}
	,set_longPressSelectionTime: function(value) {
		this.behaviours.set("longPressSelectionTime",haxe_ui_util_Variant.fromFloat(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"longPressSelectionTime");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_ScrollView.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_TableView();
	}
	,registerComposite: function() {
		haxe_ui_containers_ScrollView.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers__$TableView_Events;
		this._compositeBuilderClass = haxe_ui_containers__$TableView_Builder;
		this._defaultLayoutClass = haxe_ui_containers__$TableView_Layout;
	}
	,__onComponentEvent: null
	,onComponentEvent: null
	,set_onComponentEvent: function(value) {
		if(this.__onComponentEvent != null) {
			this.unregisterEvent("itemComponentEvent",this.__onComponentEvent);
			this.__onComponentEvent = null;
		}
		if(value != null) {
			this.__onComponentEvent = value;
			this.registerEvent("itemComponentEvent",value);
		}
		return value;
	}
	,__class__: haxe_ui_containers_TableView
	,__properties__: $extend(haxe_ui_containers_ScrollView.prototype.__properties__,{set_onComponentEvent:"set_onComponentEvent",set_longPressSelectionTime:"set_longPressSelectionTime",get_longPressSelectionTime:"get_longPressSelectionTime",set_selectionMode:"set_selectionMode",get_selectionMode:"get_selectionMode",set_selectedItems:"set_selectedItems",get_selectedItems:"get_selectedItems",set_selectedIndices:"set_selectedIndices",get_selectedIndices:"get_selectedIndices",set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",set_variableItemSize:"set_variableItemSize",get_variableItemSize:"get_variableItemSize",set_itemCount:"set_itemCount",get_itemCount:"get_itemCount",set_itemHeight:"set_itemHeight",get_itemHeight:"get_itemHeight",set_itemWidth:"set_itemWidth",get_itemWidth:"get_itemWidth",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource",set_itemRenderer:"set_itemRenderer",get_itemRenderer:"get_itemRenderer",set_itemRendererClass:"set_itemRendererClass",get_itemRendererClass:"get_itemRendererClass",set_itemRendererFunction:"set_itemRendererFunction",get_itemRendererFunction:"get_itemRendererFunction"})
});
var haxe_ui_core_ItemRenderer = function() {
	this._fieldList = null;
	this.itemIndex = -1;
	this._allowHover = true;
	haxe_ui_containers_Box.call(this);
	this.registerEvent("mouseover",$bind(this,this._onItemMouseOver));
	this.registerEvent("mouseout",$bind(this,this._onItemMouseOut));
	this.registerEvent("mousedown",$bind(this,this._onItemMouseDown));
	this.registerEvent("mouseup",$bind(this,this._onItemMouseUp));
};
$hxClasses["haxe.ui.core.ItemRenderer"] = haxe_ui_core_ItemRenderer;
haxe_ui_core_ItemRenderer.__name__ = "haxe.ui.core.ItemRenderer";
haxe_ui_core_ItemRenderer.__super__ = haxe_ui_containers_Box;
haxe_ui_core_ItemRenderer.prototype = $extend(haxe_ui_containers_Box.prototype,{
	_onItemMouseOver: function(event) {
		this.addClass(":hover");
	}
	,_onItemMouseOut: function(event) {
		this.removeClass(":hover");
	}
	,_onItemMouseDown: function(event) {
		this.addClass(":down");
	}
	,_onItemMouseUp: function(event) {
		this.removeClass(":down");
	}
	,_allowHover: null
	,get_allowHover: function() {
		return this._allowHover;
	}
	,set_allowHover: function(value) {
		if(this._allowHover == value) {
			return value;
		}
		this._allowHover = value;
		if(this._allowHover == true) {
			this.registerEvent("mouseover",$bind(this,this._onItemMouseOver));
			this.registerEvent("mouseout",$bind(this,this._onItemMouseOut));
		} else {
			this.unregisterEvent("mouseover",$bind(this,this._onItemMouseOver));
			this.unregisterEvent("mouseout",$bind(this,this._onItemMouseOut));
		}
		return value;
	}
	,_data: null
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		if(value == this._data) {
			return value;
		}
		this._data = value;
		this.invalidateComponent("data");
		return value;
	}
	,itemIndex: null
	,_fieldList: null
	,validateComponentData: function() {
		if(this._data != null && (this._fieldList == null || this._fieldList.length == 0)) {
			var _g = Type.typeof(this._data);
			switch(_g._hx_index) {
			case 4:
				if(typeof(this._data) == "string" == false) {
					var fieldList = Reflect.fields(this._data);
					if(js_Boot.getClass(this._data) != null) {
						var instanceFields = Type.getInstanceFields(js_Boot.getClass(this._data));
						var _g1 = 0;
						while(_g1 < instanceFields.length) {
							var i = instanceFields[_g1];
							++_g1;
							if(Reflect.isFunction(Reflect.getProperty(this._data,i)) == false && fieldList.indexOf(i) == -1) {
								fieldList.push(i);
							}
						}
						this._fieldList = fieldList;
					}
				} else {
					this._fieldList = ["text"];
				}
				break;
			case 6:
				var _g1 = _g.c;
				if(typeof(this._data) == "string" == false) {
					var fieldList = Reflect.fields(this._data);
					if(js_Boot.getClass(this._data) != null) {
						var instanceFields = Type.getInstanceFields(js_Boot.getClass(this._data));
						var _g = 0;
						while(_g < instanceFields.length) {
							var i = instanceFields[_g];
							++_g;
							if(Reflect.isFunction(Reflect.getProperty(this._data,i)) == false && fieldList.indexOf(i) == -1) {
								fieldList.push(i);
							}
						}
						this._fieldList = fieldList;
					}
				} else {
					this._fieldList = ["text"];
				}
				break;
			default:
				this._fieldList = ["text"];
			}
		}
		this.updateValues(this._data,this._fieldList);
		var components = this.findComponents(null,haxe_ui_core_InteractiveComponent);
		var _g = 0;
		while(_g < components.length) {
			var c = components[_g];
			++_g;
			if(((c) instanceof haxe_ui_components_Button)) {
				if(c.hasEvent("click",$bind(this,this.onItemClick)) == false) {
					c.registerEvent("click",$bind(this,this.onItemClick));
				}
			} else if(c.hasEvent("change",$bind(this,this.onItemChange)) == false) {
				c.registerEvent("change",$bind(this,this.onItemChange));
			}
		}
	}
	,onItemChange: function(event) {
		var v = event.target.get_value();
		if(this._data != null) {
			Reflect.setProperty(this._data,event.target.get_id(),v);
		}
		var e = new haxe_ui_events_ItemEvent("itemComponentEvent");
		e.bubble = true;
		e.source = event.target;
		e.sourceEvent = event;
		e.itemIndex = this.itemIndex;
		e.data = this._data;
		this.dispatch(e);
	}
	,onItemClick: function(event) {
		var e = new haxe_ui_events_ItemEvent("itemComponentEvent");
		e.bubble = true;
		e.source = event.target;
		e.sourceEvent = event;
		e.itemIndex = this.itemIndex;
		e.data = this._data;
		this.dispatch(e);
	}
	,updateValues: function(value,fieldList) {
		if(fieldList == null) {
			fieldList = Reflect.fields(value);
		}
		var valueObject = null;
		var _g = Type.typeof(value);
		switch(_g._hx_index) {
		case 4:
			if(typeof(value) == "string" == false) {
				valueObject = value;
			} else {
				valueObject = { text : value};
			}
			break;
		case 6:
			var _g1 = _g.c;
			if(typeof(value) == "string" == false) {
				valueObject = value;
			} else {
				valueObject = { text : value};
			}
			break;
		default:
			valueObject = { text : value};
		}
		var _g = 0;
		while(_g < fieldList.length) {
			var f = fieldList[_g];
			++_g;
			var v = Reflect.getProperty(valueObject,f);
			if(Type.typeof(v) == ValueType.TObject) {
				this.updateValues(v);
			} else {
				var c = this.findComponent(f,null,true);
				if(c != null && v != null) {
					var propValue = haxe_ui_util_TypeConverter.convert(v);
					c.set_value(propValue);
					if(c.hasEvent("change",$bind(this,this.onItemChange)) == false) {
						c.registerEvent("change",$bind(this,this.onItemChange));
					}
					if(c.hasEvent("click",$bind(this,this.onItemClick)) == false) {
						c.registerEvent("click",$bind(this,this.onItemClick));
					}
					c.show();
				} else if(c != null) {
					c.hide();
				}
			}
		}
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		c.set_allowHover(this.get_allowHover());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ItemRenderer();
	}
	,__class__: haxe_ui_core_ItemRenderer
	,__properties__: $extend(haxe_ui_containers_Box.prototype.__properties__,{set_data:"set_data",get_data:"get_data",set_allowHover:"set_allowHover",get_allowHover:"get_allowHover"})
});
var haxe_ui_containers__$TableView_CompoundItemRenderer = function() {
	haxe_ui_core_ItemRenderer.call(this);
	this.set_layout(haxe_ui_layouts_LayoutFactory.createFromName("horizontal"));
	this.set_styleString("spacing: 2px;");
	this.removeClass("itemrenderer");
};
$hxClasses["haxe.ui.containers._TableView.CompoundItemRenderer"] = haxe_ui_containers__$TableView_CompoundItemRenderer;
haxe_ui_containers__$TableView_CompoundItemRenderer.__name__ = "haxe.ui.containers._TableView.CompoundItemRenderer";
haxe_ui_containers__$TableView_CompoundItemRenderer.__super__ = haxe_ui_core_ItemRenderer;
haxe_ui_containers__$TableView_CompoundItemRenderer.prototype = $extend(haxe_ui_core_ItemRenderer.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_ItemRenderer.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ItemRenderer.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers__$TableView_CompoundItemRenderer();
	}
	,__class__: haxe_ui_containers__$TableView_CompoundItemRenderer
});
var haxe_ui_containers__$TableView_Events = function(tableview) {
	haxe_ui_containers_ScrollViewEvents.call(this,tableview);
	this._tableview = tableview;
};
$hxClasses["haxe.ui.containers._TableView.Events"] = haxe_ui_containers__$TableView_Events;
haxe_ui_containers__$TableView_Events.__name__ = "haxe.ui.containers._TableView.Events";
haxe_ui_containers__$TableView_Events.__super__ = haxe_ui_containers_ScrollViewEvents;
haxe_ui_containers__$TableView_Events.prototype = $extend(haxe_ui_containers_ScrollViewEvents.prototype,{
	_tableview: null
	,register: function() {
		haxe_ui_containers_ScrollViewEvents.prototype.register.call(this);
		this.registerEvent("scrollchange",$bind(this,this.onScrollChange));
		this.registerEvent("rendererCreated",$bind(this,this.onRendererCreated));
		this.registerEvent("rendererDestroyed",$bind(this,this.onRendererDestroyed));
	}
	,unregister: function() {
		haxe_ui_containers_ScrollViewEvents.prototype.unregister.call(this);
		this.unregisterEvent("scrollchange",$bind(this,this.onScrollChange));
		this.unregisterEvent("rendererCreated",$bind(this,this.onRendererCreated));
		this.unregisterEvent("rendererDestroyed",$bind(this,this.onRendererDestroyed));
	}
	,onScrollChange: function(e) {
		var _this = this._tableview;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
	}
	,onRendererCreated: function(e) {
		var instance = js_Boot.__cast(e.data , haxe_ui_core_ItemRenderer);
		instance.registerEvent("mousedown",$bind(this,this.onRendererMouseDown));
		instance.registerEvent("click",$bind(this,this.onRendererClick));
		if(this._tableview.get_selectedIndices().indexOf(instance.itemIndex) != -1) {
			var builder = js_Boot.__cast(this._tableview._compositeBuilder , haxe_ui_containers__$TableView_Builder);
			builder.addItemRendererClass(instance,":selected");
		}
	}
	,onRendererDestroyed: function(e) {
		var instance = js_Boot.__cast(e.data , haxe_ui_core_ItemRenderer);
		instance.unregisterEvent("mousedown",$bind(this,this.onRendererMouseDown));
		instance.unregisterEvent("click",$bind(this,this.onRendererClick));
		if(this._tableview.get_selectedIndices().indexOf(instance.itemIndex) != -1) {
			var builder = js_Boot.__cast(this._tableview._compositeBuilder , haxe_ui_containers__$TableView_Builder);
			builder.addItemRendererClass(instance,":selected",false);
		}
	}
	,onRendererMouseDown: function(e) {
		if(this._tableview.get_selectionMode() == "multiple-long-press") {
			if(this._tableview.get_selectedIndices().length == 0) {
				this.startLongPressSelection(e);
			}
		}
	}
	,startLongPressSelection: function(e) {
		var _gthis = this;
		var timerClick = null;
		var currentMouseX = e.screenX;
		var currentMouseY = e.screenY;
		var renderer = js_Boot.__cast(e.target , haxe_ui_core_ItemRenderer);
		var __onMouseMove = null;
		var __onMouseUp = null;
		var __onMouseClick = null;
		__onMouseMove = function(_e) {
			currentMouseX = _e.screenX;
			currentMouseY = _e.screenY;
		};
		__onMouseUp = function(_e) {
			if(timerClick != null) {
				timerClick.stop();
				timerClick = null;
			}
			renderer.get_screen().unregisterEvent("mousemove",__onMouseMove);
			renderer.get_screen().unregisterEvent("mouseup",__onMouseUp);
		};
		__onMouseClick = function(_e) {
			_e.cancel();
			renderer.unregisterEvent("click",__onMouseClick);
		};
		renderer.get_screen().registerEvent("mousemove",__onMouseMove);
		renderer.get_screen().registerEvent("mouseup",__onMouseUp);
		timerClick = haxe_Timer.delay(function() {
			if(timerClick != null) {
				timerClick = null;
				var timerClick1;
				if(renderer.hitTest(currentMouseX,currentMouseY)) {
					var x1 = e.screenX;
					var y1 = e.screenY;
					timerClick1 = Math.sqrt((x1 - currentMouseX) * (x1 - currentMouseX) + (y1 - currentMouseY) * (y1 - currentMouseY)) < 2 * haxe_ui_Toolkit.pixelsPerRem;
				} else {
					timerClick1 = false;
				}
				if(timerClick1) {
					_gthis.toggleSelection(renderer);
					renderer.registerEvent("click",__onMouseClick,1);
				}
			}
		},this._tableview.get_longPressSelectionTime());
	}
	,onContainerEventsStatusChanged: function() {
		haxe_ui_containers_ScrollViewEvents.prototype.onContainerEventsStatusChanged.call(this);
		if(this._containerEventsPaused == true) {
			this._tableview.findComponent("tableview-contents",haxe_ui_core_Component,true,"css").removeClass(":hover",true,true);
		} else {
			var tmp = this._lastMousePos != null;
		}
	}
	,onRendererClick: function(e) {
		if(this._containerEventsPaused == true) {
			return;
		}
		var components = e.target.findComponentsUnderPoint(e.screenX,e.screenY);
		var _g = 0;
		while(_g < components.length) {
			var component = components[_g];
			++_g;
			if(((component) instanceof haxe_ui_core_InteractiveComponent) && (js_Boot.__cast(component , haxe_ui_core_InteractiveComponent)).get_allowInteraction() == true) {
				return;
			}
		}
		var renderer = js_Boot.__cast(e.target , haxe_ui_core_ItemRenderer);
		switch(this._tableview.get_selectionMode()) {
		case "disabled":
			break;
		case "multiple-click-modifier-key":case "multiple-modifier-key":
			if(e.ctrlKey == true) {
				this.toggleSelection(renderer);
			} else if(e.shiftKey == true) {
				var selectedIndices = this._tableview.get_selectedIndices();
				var fromIndex = selectedIndices.length > 0 ? selectedIndices[selectedIndices.length - 1] : 0;
				var toIndex = renderer.itemIndex;
				if(fromIndex < toIndex) {
					var _g = 0;
					while(_g < selectedIndices.length) {
						var i = selectedIndices[_g];
						++_g;
						if(i < fromIndex) {
							fromIndex = i;
						}
					}
				} else {
					var tmp = fromIndex;
					fromIndex = toIndex;
					toIndex = tmp;
				}
				this.selectRange(fromIndex,toIndex);
			} else if(this._tableview.get_selectionMode() == "multiple-click-modifier-key") {
				this._tableview.set_selectedIndex(renderer.itemIndex);
			}
			break;
		case "multiple-long-press":
			var selectedIndices = this._tableview.get_selectedIndices();
			if(selectedIndices.length > 0) {
				this.toggleSelection(renderer);
			}
			break;
		case "one-item":
			this._tableview.set_selectedIndex(renderer.itemIndex);
			break;
		case "one-item-repeated":
			this._tableview.set_selectedIndices([renderer.itemIndex]);
			break;
		default:
		}
	}
	,toggleSelection: function(renderer) {
		var itemIndex = renderer.itemIndex;
		var selectedIndices = this._tableview.get_selectedIndices().slice();
		var index = selectedIndices.indexOf(itemIndex);
		if(index == -1) {
			selectedIndices.push(itemIndex);
		} else {
			selectedIndices.splice(index,1);
		}
		this._tableview.set_selectedIndices(selectedIndices);
	}
	,selectRange: function(fromIndex,toIndex) {
		var tmp = this._tableview;
		var _g = [];
		var _g1 = fromIndex;
		var _g2 = toIndex + 1;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(i);
		}
		tmp.set_selectedIndices(_g);
	}
	,__class__: haxe_ui_containers__$TableView_Events
});
var haxe_ui_containers__$TableView_Builder = function(tableview) {
	haxe_ui_containers_ScrollViewBuilder.call(this,tableview);
	this._tableview = tableview;
};
$hxClasses["haxe.ui.containers._TableView.Builder"] = haxe_ui_containers__$TableView_Builder;
haxe_ui_containers__$TableView_Builder.__name__ = "haxe.ui.containers._TableView.Builder";
haxe_ui_containers__$TableView_Builder.__super__ = haxe_ui_containers_ScrollViewBuilder;
haxe_ui_containers__$TableView_Builder.prototype = $extend(haxe_ui_containers_ScrollViewBuilder.prototype,{
	_tableview: null
	,_header: null
	,create: function() {
		this.createContentContainer(this._tableview.get_virtual() ? "absolute" : "vertical");
	}
	,onInitialize: function() {
		if(this._header == null) {
			return;
		}
		if(this._tableview.get_itemRenderer() == null) {
			this.buildDefaultRenderer();
		} else {
			this.fillExistingRenderer();
		}
	}
	,onReady: function() {
		if(this._header == null) {
			return;
		}
		if(this._tableview.get_itemRenderer() == null) {
			this.buildDefaultRenderer();
		} else {
			this.fillExistingRenderer();
		}
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout");
		}
	}
	,createContentContainer: function(layoutName) {
		if(this._contents == null) {
			haxe_ui_containers_ScrollViewBuilder.prototype.createContentContainer.call(this,layoutName);
			this._contents.addClass("tableview-contents");
		}
	}
	,addComponent: function(child) {
		var r = null;
		if(((child) instanceof haxe_ui_core_ItemRenderer)) {
			var itemRenderer = this._tableview.get_itemRenderer();
			if(itemRenderer == null) {
				itemRenderer = new haxe_ui_containers__$TableView_CompoundItemRenderer();
				this._tableview.set_itemRenderer(itemRenderer);
			}
			itemRenderer.addComponent(child);
			return child;
		} else if(((child) instanceof haxe_ui_containers_Header)) {
			this._header = js_Boot.__cast(child , haxe_ui_containers_Header);
			r = null;
		} else {
			r = haxe_ui_containers_ScrollViewBuilder.prototype.addComponent.call(this,child);
		}
		return r;
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		if(((child) instanceof haxe_ui_containers_Header) == true) {
			this._header = null;
			return null;
		}
		return haxe_ui_containers_ScrollViewBuilder.prototype.removeComponent.call(this,child,dispose,invalidate);
	}
	,buildDefaultRenderer: function() {
		var r = new haxe_ui_containers__$TableView_CompoundItemRenderer();
		if(this._header != null) {
			var _g = 0;
			var _this = this._header;
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var column = _g1[_g];
				++_g;
				var itemRenderer = new haxe_ui_core_ItemRenderer();
				var label = new haxe_ui_components_Label();
				label.set_id(column.get_id());
				label.set_percentWidth(100);
				label.set_verticalAlign("center");
				itemRenderer.addComponent(label);
				r.addComponent(itemRenderer);
			}
		}
		this._tableview.set_itemRenderer(r);
	}
	,fillExistingRenderer: function() {
		var _g = 0;
		var _this = this._header;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var column = _g1[_g];
			++_g;
			var existing = this._tableview.get_itemRenderer().findComponent(column.get_id(),haxe_ui_core_ItemRenderer,true);
			if(existing == null) {
				var itemRenderer = new haxe_ui_core_ItemRenderer();
				var label = new haxe_ui_components_Label();
				label.set_id(column.get_id());
				label.set_percentWidth(100);
				label.set_verticalAlign("center");
				itemRenderer.addComponent(label);
				this._tableview.get_itemRenderer().addComponent(itemRenderer);
			}
		}
	}
	,verticalConstraintModifier: function() {
		if(this._header == null) {
			return 0;
		}
		return this._header.get_height();
	}
	,onVirtualChanged: function() {
		this._contents.set_layoutName(this._tableview.get_virtual() ? "absolute" : "vertical");
	}
	,get_virtualHorizontal: function() {
		return false;
	}
	,addItemRendererClass: function(child,className,add) {
		if(add == null) {
			add = true;
		}
		child.walkComponents(function(c) {
			if(((c) instanceof haxe_ui_core_ItemRenderer)) {
				if(add == true) {
					c.addClass(className);
				} else {
					c.removeClass(className);
				}
			} else {
				c.invalidateComponent("style");
			}
			return true;
		});
	}
	,__class__: haxe_ui_containers__$TableView_Builder
});
var haxe_ui_layouts_ScrollViewLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.layouts.ScrollViewLayout"] = haxe_ui_layouts_ScrollViewLayout;
haxe_ui_layouts_ScrollViewLayout.__name__ = "haxe.ui.layouts.ScrollViewLayout";
haxe_ui_layouts_ScrollViewLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_ScrollViewLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		var contents = this.get_component().findComponent("scrollview-contents",null,false,"css");
		if(contents == null) {
			return;
		}
		var hscroll = this.get_component().findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this.get_component().findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(hscroll != null && this.hidden(hscroll) == false) {
			hscroll.moveComponent(this.get_paddingLeft(),Math.round(this.get_component().get_componentHeight() - hscroll.get_componentHeight() - this.get_paddingBottom()));
		}
		if(vscroll != null && this.hidden(vscroll) == false) {
			vscroll.moveComponent(Math.round(this.get_component().get_componentWidth() - vscroll.get_componentWidth() - this.get_paddingRight()),this.get_paddingTop());
		}
		var contents = this.get_component().findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.moveComponent(this.get_paddingLeft(),this.get_paddingTop());
		}
	}
	,resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		var hscroll = this.get_component().findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this.get_component().findComponent(null,haxe_ui_components_VerticalScroll,false);
		var usableSize = this.get_usableSize();
		var percentWidth = 100;
		var percentHeight = 100;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child != hscroll && child != vscroll) {
				continue;
			}
			var cx = null;
			var cy = null;
			if(child.get_percentWidth() != null) {
				cx = usableSize.width * child.get_percentWidth() / percentWidth - this.marginLeft(child) - this.marginRight(child);
			}
			if(child.get_percentHeight() != null) {
				cy = usableSize.height * child.get_percentHeight() / percentHeight - this.marginTop(child) - this.marginBottom(child);
			}
			if(this.fixedMinWidth(child) && child.get_percentWidth() != null) {
				percentWidth -= child.get_percentWidth();
			}
			if(this.fixedMinHeight(child) && child.get_percentHeight() != null) {
				percentHeight -= child.get_percentHeight();
			}
			child.resizeComponent(cx,cy);
		}
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		var hscroll = this.get_component().findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this.get_component().findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(hscroll != null && hscroll.get_includeInLayout() == true && this.hidden(hscroll) == false) {
			size.height -= hscroll.get_componentHeight();
		}
		if(vscroll != null && vscroll.get_includeInLayout() == true && this.hidden(vscroll) == false) {
			size.width -= vscroll.get_componentWidth();
		}
		if((js_Boot.__cast(this.get_component() , haxe_ui_containers_ScrollView)).get_native() == true || this._component.get_isNativeScroller() == true) {
			var contents = this.get_component().findComponent("scrollview-contents",null,false,"css");
			if(contents != null) {
				if(contents.get_componentWidth() > size.width) {
					size.height -= haxe_ui_core_Platform.get_hscrollHeight();
				}
				if(contents.get_componentHeight() > size.height) {
					size.width -= haxe_ui_core_Platform.get_vscrollWidth();
				}
			}
		}
		return size;
	}
	,calcAutoSize: function(exclusions) {
		var hscroll = this.get_component().findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this.get_component().findComponent(null,haxe_ui_components_VerticalScroll,false);
		var size = haxe_ui_layouts_DefaultLayout.prototype.calcAutoSize.call(this,[hscroll,vscroll]);
		if(hscroll != null && hscroll.get_hidden() == false) {
			size.height += hscroll.get_componentHeight();
		}
		if(vscroll != null && vscroll.get_hidden() == false) {
			size.width += vscroll.get_componentWidth();
		}
		if((js_Boot.__cast(this.get_component() , haxe_ui_containers_ScrollView)).get_native() == true || this._component.get_isNativeScroller() == true) {
			var contents = this.get_component().findComponent("scrollview-contents",null,false,"css");
			if(contents != null) {
				if(contents.get_width() > this.get_component().get_width()) {
					size.height += haxe_ui_core_Platform.get_hscrollHeight();
				}
				if(contents.get_height() > this.get_component().get_height()) {
					size.width += haxe_ui_core_Platform.get_vscrollWidth();
				}
			}
		}
		return size;
	}
	,__class__: haxe_ui_layouts_ScrollViewLayout
});
var haxe_ui_layouts_VirtualLayout = function() {
	this._lastItemRenderer = null;
	this._sizeCache = [];
	this._rendererPool = [];
	this._lastIndex = -1;
	this._firstIndex = -1;
	haxe_ui_layouts_ScrollViewLayout.call(this);
};
$hxClasses["haxe.ui.layouts.VirtualLayout"] = haxe_ui_layouts_VirtualLayout;
haxe_ui_layouts_VirtualLayout.__name__ = "haxe.ui.layouts.VirtualLayout";
haxe_ui_layouts_VirtualLayout.__super__ = haxe_ui_layouts_ScrollViewLayout;
haxe_ui_layouts_VirtualLayout.prototype = $extend(haxe_ui_layouts_ScrollViewLayout.prototype,{
	_firstIndex: null
	,_lastIndex: null
	,_rendererPool: null
	,_sizeCache: null
	,contents: null
	,get_contents: function() {
		if(this.contents == null) {
			this.contents = this.findComponent("scrollview-contents",null,false,"css");
		}
		return this.contents;
	}
	,get_dataSource: function() {
		return (js_Boot.__cast(this._component , haxe_ui_core_IDataComponent)).get_dataSource();
	}
	,itemWidth: null
	,get_itemWidth: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemWidth() > 0) {
			return comp.get_itemWidth();
		}
		var _this = this.get_contents();
		var childComponents = _this._children == null ? [] : _this._children;
		var result = 0;
		if(childComponents.length > 0) {
			result = childComponents[0].get_width();
			if(result <= 0) {
				childComponents[0].syncComponentValidation();
				result = childComponents[0].get_width();
			}
		}
		if(result > 0) {
			comp.set_itemWidth(result);
		} else {
			result = 1;
		}
		return result;
	}
	,itemHeight: null
	,get_itemHeight: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemHeight() > 0) {
			return comp.get_itemHeight();
		}
		var _this = this.get_contents();
		var childComponents = _this._children == null ? [] : _this._children;
		var result = 0;
		if(childComponents.length > 0) {
			result = childComponents[0].get_height();
			if(result <= 0) {
				childComponents[0].syncComponentValidation();
				result = childComponents[0].get_height();
			}
		}
		if(result <= 0) {
			result = 25;
		}
		return result;
	}
	,itemCount: null
	,get_itemCount: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemCount() >= 0) {
			return comp.get_itemCount();
		} else {
			return 0;
		}
	}
	,refresh: function() {
		this.refreshData();
		haxe_ui_layouts_ScrollViewLayout.prototype.refresh.call(this);
	}
	,refreshData: function() {
		if(this.get_dataSource() == null) {
			return;
		}
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_virtual() == false) {
			this.refreshNonVirtualData();
		} else {
			this.refreshVirtualData();
		}
	}
	,_lastItemRenderer: null
	,refreshNonVirtualData: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemRenderer() != this._lastItemRenderer) {
			this._lastItemRenderer = comp.get_itemRenderer();
			this.get_contents().removeAllComponents();
		}
		var dataSource = this.get_dataSource();
		var contents = this.get_contents();
		var _g = 0;
		var _g1 = dataSource.get_size();
		while(_g < _g1) {
			var n = _g++;
			var data = dataSource.get(n);
			var item = null;
			if(n < (contents._children == null ? [] : contents._children).length) {
				item = js_Boot.__cast((contents._children == null ? [] : contents._children)[n] , haxe_ui_core_ItemRenderer);
				if(item.get_data() == data) {
					item.invalidateComponent("data");
					continue;
				}
				var cls = this.itemClass(n,data);
				if(!js_Boot.__instanceof(item,cls)) {
					this.removeRenderer(item);
					item = this.getRenderer(cls,n);
					contents.addComponentAt(item,n);
				}
			} else {
				var cls1 = this.itemClass(n,data);
				item = this.getRenderer(cls1,n);
				contents.addComponent(item);
			}
			var className = n % 2 == 0 ? "even" : "odd";
			if(!item.hasClass(className)) {
				var inverseClassName = n % 2 == 0 ? "odd" : "even";
				item.removeClass(inverseClassName);
				item.addClass(className);
			}
			item.itemIndex = n;
			item.set_data(data);
		}
		while(dataSource.get_size() < (contents._children == null ? [] : contents._children).length) {
			var item = js_Boot.__cast((contents._children == null ? [] : contents._children)[(contents._children == null ? [] : contents._children).length - 1] , haxe_ui_core_ItemRenderer);
			this.removeRenderer(item);
		}
	}
	,refreshVirtualData: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemRenderer() != this._lastItemRenderer) {
			this._lastItemRenderer = comp.get_itemRenderer();
			this.get_contents().removeAllComponents();
			this._rendererPool = [];
		}
		this.removeInvisibleRenderers();
		this.calculateRangeVisible();
		this.updateScroll();
		var dataSource = this.get_dataSource();
		var i = 0;
		var _g = this._firstIndex;
		var _g1 = this._lastIndex;
		while(_g < _g1) {
			var n = _g++;
			var data = dataSource.get(n);
			var item = null;
			var cls = this.itemClass(n,data);
			var _this = this.get_contents();
			if((_this._children == null ? [] : _this._children).length <= i) {
				item = this.getRenderer(cls,n);
				this.get_contents().addComponent(item);
			} else {
				var _this1 = this.get_contents();
				item = js_Boot.__cast((_this1._children == null ? [] : _this1._children)[i] , haxe_ui_core_ItemRenderer);
				if(!js_Boot.__instanceof(item,cls)) {
					item = this.getRenderer(cls,n);
					this.get_contents().addComponentAt(item,i);
				} else if(item.itemIndex != n) {
					if(this._component.hasEvent("rendererDestroyed")) {
						this._component.dispatch(new haxe_ui_events_UIEvent("rendererDestroyed",null,item));
					}
					this._component.setComponentIndex(item,i);
					item.itemIndex = n;
					if(this._component.hasEvent("rendererCreated")) {
						this._component.dispatch(new haxe_ui_events_UIEvent("rendererCreated",null,item));
					}
				}
			}
			var className = n % 2 == 0 ? "even" : "odd";
			if(!item.hasClass(className)) {
				var inverseClassName = n % 2 == 0 ? "odd" : "even";
				item.removeClass(inverseClassName);
				item.addClass(className);
			}
			item.set_data(data);
			++i;
		}
		while(true) {
			var _this = this.get_contents();
			if(!((_this._children == null ? [] : _this._children).length > i)) {
				break;
			}
			var _this1 = this.get_contents();
			var tmp = _this1._children == null ? [] : _this1._children;
			var _this2 = this.get_contents();
			this.removeRenderer(js_Boot.__cast(tmp[(_this2._children == null ? [] : _this2._children).length - 1] , haxe_ui_core_ItemRenderer),false);
		}
	}
	,calculateRangeVisible: function() {
	}
	,updateScroll: function() {
	}
	,itemClass: function(index,data) {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemRendererFunction() != null) {
			return (comp.get_itemRendererFunction())(data,index);
		} else if(comp.get_itemRendererClass() != null) {
			return comp.get_itemRendererClass();
		} else if(comp.get_itemRenderer() != null) {
			return js_Boot.getClass(comp.get_itemRenderer());
		} else {
			return haxe_ui_core_BasicItemRenderer;
		}
	}
	,getRenderer: function(cls,index) {
		var instance = null;
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_virtual() == true) {
			var _g = 0;
			var _g1 = this._rendererPool.length;
			while(_g < _g1) {
				var i = _g++;
				var renderer = this._rendererPool[i];
				if(js_Boot.__instanceof(renderer,cls)) {
					this._rendererPool.splice(i,1);
					instance = renderer;
					break;
				}
			}
		}
		if(instance == null) {
			if(comp.get_itemRenderer() != null && js_Boot.getClass(comp.get_itemRenderer()) == cls) {
				instance = comp.get_itemRenderer().cloneComponent();
			} else {
				instance = Type.createInstance(cls,[]);
			}
		}
		instance.itemIndex = index;
		if(this._component.hasEvent("rendererCreated")) {
			this._component.dispatch(new haxe_ui_events_UIEvent("rendererCreated",null,instance));
		}
		if(this._component.get_hidden() == false) {
			instance.handleVisibility(true);
		}
		return js_Boot.__cast(instance , haxe_ui_core_ItemRenderer);
	}
	,removeRenderer: function(renderer,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		this._component.removeComponent(renderer,dispose);
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_virtual() == true) {
			this._rendererPool.push(js_Boot.__cast(renderer , haxe_ui_core_ItemRenderer));
		}
		if(this._component.hasEvent("rendererDestroyed")) {
			this._component.dispatch(new haxe_ui_events_UIEvent("rendererDestroyed",null,renderer));
		}
		renderer.itemIndex = -1;
	}
	,removeInvisibleRenderers: function() {
		var contents = this.get_contents();
		if(this._firstIndex >= 0) {
			while((contents._children == null ? [] : contents._children).length > 0 && !this.isRendererVisible((contents._children == null ? [] : contents._children)[0])) {
				this.removeRenderer(js_Boot.__cast((contents._children == null ? [] : contents._children)[0] , haxe_ui_core_ItemRenderer),false);
				++this._firstIndex;
			}
		}
		if(this._lastIndex >= 0) {
			while((contents._children == null ? [] : contents._children).length > 0 && !this.isRendererVisible((contents._children == null ? [] : contents._children)[(contents._children == null ? [] : contents._children).length - 1])) {
				this.removeRenderer(js_Boot.__cast((contents._children == null ? [] : contents._children)[(contents._children == null ? [] : contents._children).length - 1] , haxe_ui_core_ItemRenderer),false);
				--this._lastIndex;
			}
		}
	}
	,isRendererVisible: function(renderer) {
		if(renderer == null) {
			return false;
		}
		if(renderer.get_top() < this._component.get_componentHeight() && renderer.get_top() + renderer.get_componentHeight() >= 0 && renderer.get_left() < this._component.get_componentWidth()) {
			return renderer.get_left() + renderer.get_componentWidth() >= 0;
		} else {
			return false;
		}
	}
	,isIndexVisible: function(index) {
		if(index >= this._firstIndex) {
			return index <= this._lastIndex;
		} else {
			return false;
		}
	}
	,__class__: haxe_ui_layouts_VirtualLayout
	,__properties__: $extend(haxe_ui_layouts_ScrollViewLayout.prototype.__properties__,{get_itemCount:"get_itemCount",get_itemHeight:"get_itemHeight",get_itemWidth:"get_itemWidth",get_dataSource:"get_dataSource",get_contents:"get_contents"})
});
var haxe_ui_layouts_VerticalVirtualLayout = function() {
	haxe_ui_layouts_VirtualLayout.call(this);
};
$hxClasses["haxe.ui.layouts.VerticalVirtualLayout"] = haxe_ui_layouts_VerticalVirtualLayout;
haxe_ui_layouts_VerticalVirtualLayout.__name__ = "haxe.ui.layouts.VerticalVirtualLayout";
haxe_ui_layouts_VerticalVirtualLayout.__super__ = haxe_ui_layouts_VirtualLayout;
haxe_ui_layouts_VerticalVirtualLayout.prototype = $extend(haxe_ui_layouts_VirtualLayout.prototype,{
	repositionChildren: function() {
		haxe_ui_layouts_VirtualLayout.prototype.repositionChildren.call(this);
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		var itemHeight = this.get_itemHeight();
		var contents = this.get_contents();
		var verticalSpacing = contents.get_layout().get_verticalSpacing();
		if(comp.get_virtual() == true) {
			var n = this._firstIndex;
			if(comp.get_variableItemSize() == true) {
				var pos = -comp.get_vscrollPos();
				var _g = 0;
				var _g1 = this._lastIndex;
				while(_g < _g1) {
					var i = _g++;
					if(i >= this._firstIndex) {
						var c = contents.getComponentAt(i - this._firstIndex);
						c.set_top(pos);
					}
					var size = this._sizeCache[i];
					pos += (size != null && size != 0 ? size : itemHeight) + verticalSpacing;
				}
			} else {
				var _g = 0;
				var _g1 = contents._children == null ? [] : contents._children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.set_top(n * (itemHeight + verticalSpacing) - comp.get_vscrollPos());
					++n;
				}
			}
		}
	}
	,verticalConstraintModifier: function() {
		return 0;
	}
	,calculateRangeVisible: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		var verticalSpacing = this.get_contents().get_layout().get_verticalSpacing();
		var itemHeight = this.get_itemHeight();
		var visibleItemsCount = 0;
		var contentsHeight = 0;
		if(this.get_contents().get_autoHeight() == true) {
			var itemCount = this.get_itemCount();
			if(itemCount > 0 || this._component.get_autoHeight() == true) {
				contentsHeight = itemCount * itemHeight - this.verticalConstraintModifier();
			} else {
				contentsHeight = this._component.get_height() - this.verticalConstraintModifier();
			}
		} else {
			contentsHeight = this.get_contents().get_height() - this.verticalConstraintModifier();
		}
		if(contentsHeight > this._component.get_height() - this.verticalConstraintModifier()) {
			contentsHeight = this._component.get_height() - this.verticalConstraintModifier();
		}
		if(comp.get_variableItemSize() == true) {
			var totalSize = 0;
			var requireInvalidation = false;
			var newFirstIndex = -1;
			var _g = 0;
			var _g1 = this.get_dataSource().get_size();
			while(_g < _g1) {
				var i = _g++;
				var size = this._sizeCache[i];
				if(size == null || size == 0) {
					if(i >= this._firstIndex && i <= this._lastIndex) {
						var c = this.get_contents().getComponentAt(i - this._firstIndex);
						if(c != null && c.get_componentHeight() > 0) {
							this._sizeCache[i] = c.get_componentHeight();
							size = c.get_componentHeight();
						} else {
							requireInvalidation = true;
							size = itemHeight;
						}
					} else {
						requireInvalidation = true;
						size = itemHeight;
					}
				}
				size += verticalSpacing;
				if(newFirstIndex == -1) {
					if(totalSize + size > comp.get_vscrollPos()) {
						newFirstIndex = i;
						totalSize += size - comp.get_vscrollPos();
						++visibleItemsCount;
					} else {
						totalSize += size;
					}
				} else if(totalSize + size > contentsHeight) {
					break;
				} else {
					++visibleItemsCount;
					totalSize += size;
				}
			}
			if(requireInvalidation == true) {
				var _this = this._component;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout");
				}
			}
			this._firstIndex = newFirstIndex;
		} else {
			visibleItemsCount = Math.ceil(contentsHeight / (itemHeight + verticalSpacing));
			this._firstIndex = comp.get_vscrollPos() / (itemHeight + verticalSpacing) | 0;
		}
		if(this._firstIndex < 0) {
			this._firstIndex = 0;
		}
		var rc = new haxe_ui_geom_Rectangle(0,0,this.get_contents().get_width(),contentsHeight - (this.get_paddingTop() + this.get_paddingBottom()));
		this.get_contents().set_componentClipRect(rc);
		this._lastIndex = this._firstIndex + visibleItemsCount + 1;
		if(this._lastIndex > this.get_dataSource().get_size()) {
			this._lastIndex = this.get_dataSource().get_size();
		}
	}
	,updateScroll: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		var usableSize = this.get_usableSize();
		var dataSize = this.get_dataSource().get_size();
		var verticalSpacing = this.get_contents().get_layout().get_verticalSpacing();
		var scrollMax = 0;
		var itemHeight = this.get_itemHeight();
		if(comp.get_variableItemSize() == true) {
			scrollMax = -usableSize.height;
			var _g = 0;
			var _g1 = this.get_dataSource().get_size();
			while(_g < _g1) {
				var i = _g++;
				var size = this._sizeCache[i];
				if(size == null || size == 0) {
					size = itemHeight;
				}
				scrollMax += size + verticalSpacing + this.verticalConstraintModifier();
			}
		} else {
			scrollMax = dataSize * itemHeight + (dataSize - 1) * verticalSpacing - usableSize.height + this.verticalConstraintModifier();
		}
		if(scrollMax < 0) {
			scrollMax = 0;
		}
		comp.set_vscrollMax(scrollMax);
		comp.set_vscrollPageSize(usableSize.height / (scrollMax + usableSize.height) * scrollMax);
	}
	,calcAutoSize: function(exclusions) {
		var size = haxe_ui_layouts_VirtualLayout.prototype.calcAutoSize.call(this,exclusions);
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemCount() > 0 && this._component.get_autoHeight() == true) {
			var contents = this._component.findComponent("scrollview-contents",null,false);
			var contentsPadding = 0;
			if(contents != null) {
				var layout = contents.get_layout();
				if(layout != null) {
					contentsPadding = layout.get_paddingTop() + layout.get_paddingBottom();
				}
			}
			size.height = this.get_itemHeight() * comp.get_itemCount() + this.get_paddingTop() + this.get_paddingBottom() + contentsPadding;
		}
		return size;
	}
	,__class__: haxe_ui_layouts_VerticalVirtualLayout
});
var haxe_ui_containers__$TableView_Layout = function() {
	haxe_ui_layouts_VerticalVirtualLayout.call(this);
};
$hxClasses["haxe.ui.containers._TableView.Layout"] = haxe_ui_containers__$TableView_Layout;
haxe_ui_containers__$TableView_Layout.__name__ = "haxe.ui.containers._TableView.Layout";
haxe_ui_containers__$TableView_Layout.__super__ = haxe_ui_layouts_VerticalVirtualLayout;
haxe_ui_containers__$TableView_Layout.prototype = $extend(haxe_ui_layouts_VerticalVirtualLayout.prototype,{
	itemClass: function(index,data) {
		return haxe_ui_containers__$TableView_CompoundItemRenderer;
	}
	,repositionChildren: function() {
		var header = this.findComponent(null,haxe_ui_containers_Header,true);
		if(header == null) {
			return;
		}
		haxe_ui_layouts_VerticalVirtualLayout.prototype.repositionChildren.call(this);
		header.set_left(this.get_paddingLeft());
		header.set_top(this.get_paddingTop());
		var rc = new haxe_ui_geom_Rectangle((js_Boot.__cast(this._component , haxe_ui_containers_ScrollView)).get_hscrollPos() + 1,1,this.get_usableWidth(),header.get_height());
		header.set_componentClipRect(rc);
		var data = this.findComponent("tableview-contents",haxe_ui_containers_Box,true,"css");
		if(data != null) {
			data.lockLayout(true);
			var _g = 0;
			var _g1 = data._children == null ? [] : data._children;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				var headerChildComponents = header._children == null ? [] : header._children;
				var _g2 = 0;
				while(_g2 < headerChildComponents.length) {
					var column = headerChildComponents[_g2];
					++_g2;
					var isLast = headerChildComponents.indexOf(column) == headerChildComponents.length - 1;
					var itemRenderer = item.findComponent(column.get_id(),haxe_ui_core_Component);
					if(itemRenderer != null && ((itemRenderer) instanceof haxe_ui_core_ItemRenderer) == false) {
						itemRenderer = itemRenderer.findAncestor(null,haxe_ui_core_ItemRenderer);
					}
					if(itemRenderer != null) {
						itemRenderer.set_percentWidth(null);
						if(isLast == false) {
							itemRenderer.set_width(column.get_width() - item.get_layout().get_horizontalSpacing());
						} else {
							itemRenderer.set_width(column.get_width());
						}
					}
				}
			}
			data.set_left(this.get_paddingLeft());
			data.set_top(header.get_top() + header.get_height() - 1);
			data.set_componentWidth(header.get_width());
			data.unlockLayout(true);
		}
	}
	,resizeChildren: function() {
		var header = this.findComponent(null,haxe_ui_containers_Header,true);
		if(header == null) {
			return;
		}
		haxe_ui_layouts_VerticalVirtualLayout.prototype.resizeChildren.call(this);
	}
	,verticalConstraintModifier: function() {
		var header = this.findComponent(null,haxe_ui_containers_Header,true);
		if(header == null) {
			return 0;
		}
		return header.get_height();
	}
	,__class__: haxe_ui_containers__$TableView_Layout
});
var haxe_ui_containers__$TableView_DataSourceBehaviour = function(component) {
	this._firstPass = true;
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TableView.DataSourceBehaviour"] = haxe_ui_containers__$TableView_DataSourceBehaviour;
haxe_ui_containers__$TableView_DataSourceBehaviour.__name__ = "haxe.ui.containers._TableView.DataSourceBehaviour";
haxe_ui_containers__$TableView_DataSourceBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$TableView_DataSourceBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_firstPass: null
	,set: function(value) {
		var _gthis = this;
		haxe_ui_behaviours_DataBehaviour.prototype.set.call(this,value);
		var dataSource = haxe_ui_util_Variant.toDataSource(this._value);
		if(dataSource != null) {
			dataSource.transformer = new haxe_ui_data_transformation_NativeTypeTransformer();
			dataSource.onChange = function() {
				var _this = _gthis._component;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout");
				}
				if(_gthis._firstPass == true) {
					_gthis._component.syncComponentValidation();
					_gthis._firstPass = false;
					var _this = _gthis._component;
					if(!(_this._layout == null || _this._layoutLocked == true)) {
						_this.invalidateComponent("layout");
					}
				}
				haxe_ui_binding_BindingManager.get_instance().componentPropChanged(_gthis._component,"dataSource");
			};
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		} else {
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		}
	}
	,get: function() {
		if(this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) {
			this._value = haxe_ui_util_Variant.fromDataSource(new haxe_ui_data_ArrayDataSource());
			this.set(this._value);
		}
		return this._value;
	}
	,__class__: haxe_ui_containers__$TableView_DataSourceBehaviour
});
var haxe_ui_containers__$TableView_SelectedIndexBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TableView.SelectedIndexBehaviour"] = haxe_ui_containers__$TableView_SelectedIndexBehaviour;
haxe_ui_containers__$TableView_SelectedIndexBehaviour.__name__ = "haxe.ui.containers._TableView.SelectedIndexBehaviour";
haxe_ui_containers__$TableView_SelectedIndexBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$TableView_SelectedIndexBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var tableView = js_Boot.__cast(this._component , haxe_ui_containers_TableView);
		var selectedIndices = tableView.get_selectedIndices();
		if(selectedIndices != null && selectedIndices.length > 0) {
			return haxe_ui_util_Variant.fromFloat(selectedIndices[selectedIndices.length - 1]);
		} else {
			return haxe_ui_util_Variant.fromFloat(-1);
		}
	}
	,set: function(value) {
		var tableView = js_Boot.__cast(this._component , haxe_ui_containers_TableView);
		tableView.set_selectedIndices(haxe_ui_util_Variant.neq(value,haxe_ui_util_Variant.fromFloat(-1)) ? [haxe_ui_util_Variant.toInt(value)] : null);
	}
	,__class__: haxe_ui_containers__$TableView_SelectedIndexBehaviour
});
var haxe_ui_containers__$TableView_SelectedItemBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TableView.SelectedItemBehaviour"] = haxe_ui_containers__$TableView_SelectedItemBehaviour;
haxe_ui_containers__$TableView_SelectedItemBehaviour.__name__ = "haxe.ui.containers._TableView.SelectedItemBehaviour";
haxe_ui_containers__$TableView_SelectedItemBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$TableView_SelectedItemBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	getDynamic: function() {
		var tableView = js_Boot.__cast(this._component , haxe_ui_containers_TableView);
		var selectedIndices = tableView.get_selectedIndices();
		if(selectedIndices.length > 0) {
			return tableView.get_dataSource().get(selectedIndices[selectedIndices.length - 1]);
		} else {
			return null;
		}
	}
	,set: function(value) {
		var tableView = js_Boot.__cast(this._component , haxe_ui_containers_TableView);
		var index = tableView.get_dataSource().indexOf(value);
		if(index != -1 && tableView.get_selectedIndices().indexOf(index) == -1) {
			tableView.set_selectedIndices([index]);
		}
	}
	,__class__: haxe_ui_containers__$TableView_SelectedItemBehaviour
});
var haxe_ui_containers__$TableView_SelectedIndicesBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TableView.SelectedIndicesBehaviour"] = haxe_ui_containers__$TableView_SelectedIndicesBehaviour;
haxe_ui_containers__$TableView_SelectedIndicesBehaviour.__name__ = "haxe.ui.containers._TableView.SelectedIndicesBehaviour";
haxe_ui_containers__$TableView_SelectedIndicesBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$TableView_SelectedIndicesBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	get: function() {
		if(haxe_ui_util_Variant.get_isNull(this._value)) {
			return haxe_ui_util_Variant.fromArray([]);
		} else {
			return this._value;
		}
	}
	,validateData: function() {
		var tableView = js_Boot.__cast(this._component , haxe_ui_containers_TableView);
		var selectedIndices = tableView.get_selectedIndices();
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		var itemToEnsure = null;
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers__$TableView_Builder);
		var _g = 0;
		var _g1 = contents._children == null ? [] : contents._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(selectedIndices.indexOf((js_Boot.__cast(child , haxe_ui_core_ItemRenderer)).itemIndex) != -1) {
				itemToEnsure = js_Boot.__cast(child , haxe_ui_core_ItemRenderer);
				builder.addItemRendererClass(child,":selected");
			} else {
				builder.addItemRendererClass(child,":selected",false);
			}
		}
		if(itemToEnsure != null && tableView.get_virtual() == false) {
			var vscroll = tableView.findComponent(null,haxe_ui_components_VerticalScroll);
			if(vscroll != null) {
				var vpos = vscroll.get_pos();
				var contents = tableView.findComponent("tableview-contents",null,null,"css");
				if(itemToEnsure.get_top() + itemToEnsure.get_height() > vpos + contents.get_componentClipRect().height) {
					vscroll.set_pos(itemToEnsure.get_top() + itemToEnsure.get_height() - contents.get_componentClipRect().height);
				} else if(itemToEnsure.get_top() < vpos) {
					vscroll.set_pos(itemToEnsure.get_top());
				}
			}
		}
		if(tableView.get_selectedIndex() != -1 && tableView.get_selectedIndices().length != 0) {
			this._component.dispatch(new haxe_ui_events_UIEvent("change"));
		}
	}
	,__class__: haxe_ui_containers__$TableView_SelectedIndicesBehaviour
});
var haxe_ui_containers__$TableView_SelectedItemsBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TableView.SelectedItemsBehaviour"] = haxe_ui_containers__$TableView_SelectedItemsBehaviour;
haxe_ui_containers__$TableView_SelectedItemsBehaviour.__name__ = "haxe.ui.containers._TableView.SelectedItemsBehaviour";
haxe_ui_containers__$TableView_SelectedItemsBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$TableView_SelectedItemsBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var tableView = js_Boot.__cast(this._component , haxe_ui_containers_TableView);
		var selectedIndices = tableView.get_selectedIndices();
		if(selectedIndices != null && selectedIndices.length > 0) {
			var selectedItems = [];
			var _g = 0;
			while(_g < selectedIndices.length) {
				var i = selectedIndices[_g];
				++_g;
				if(i < 0 || i >= tableView.get_dataSource().get_size()) {
					continue;
				}
				var data = tableView.get_dataSource().get(i);
				selectedItems.push(data);
			}
			return haxe_ui_util_Variant.fromArray(selectedItems);
		} else {
			return haxe_ui_util_Variant.fromArray([]);
		}
	}
	,set: function(value) {
		var tableView = js_Boot.__cast(this._component , haxe_ui_containers_TableView);
		var selectedItems = haxe_ui_util_Variant.toArray(value);
		if(selectedItems != null && selectedItems.length > 0) {
			var selectedIndices = [];
			var index;
			var _g = 0;
			while(_g < selectedItems.length) {
				var item = selectedItems[_g];
				++_g;
				index = tableView.get_dataSource().indexOf(item);
				if(index != -1) {
					selectedIndices.push(index);
				}
			}
			tableView.set_selectedIndices(selectedIndices);
		} else {
			tableView.set_selectedIndices([]);
		}
	}
	,__class__: haxe_ui_containers__$TableView_SelectedItemsBehaviour
});
var haxe_ui_containers__$TableView_SelectionModeBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._TableView.SelectionModeBehaviour"] = haxe_ui_containers__$TableView_SelectionModeBehaviour;
haxe_ui_containers__$TableView_SelectionModeBehaviour.__name__ = "haxe.ui.containers._TableView.SelectionModeBehaviour";
haxe_ui_containers__$TableView_SelectionModeBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$TableView_SelectionModeBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var tableView = js_Boot.__cast(this._component , haxe_ui_containers_TableView);
		var selectedIndices = tableView.get_selectedIndices();
		if(selectedIndices.length == 0) {
			return;
		}
		var selectionMode = this._value;
		switch(selectionMode) {
		case "disabled":
			tableView.set_selectedIndices(null);
			break;
		case "one-item":
			if(selectedIndices.length > 1) {
				tableView.set_selectedIndices([selectedIndices[0]]);
			}
			break;
		default:
		}
	}
	,__class__: haxe_ui_containers__$TableView_SelectionModeBehaviour
});
var haxe_ui_containers_VerticalSplitter = function() {
	haxe_ui_containers_Splitter.call(this);
	this.set_layoutName("vertical");
};
$hxClasses["haxe.ui.containers.VerticalSplitter"] = haxe_ui_containers_VerticalSplitter;
haxe_ui_containers_VerticalSplitter.__name__ = "haxe.ui.containers.VerticalSplitter";
haxe_ui_containers_VerticalSplitter.__super__ = haxe_ui_containers_Splitter;
haxe_ui_containers_VerticalSplitter.prototype = $extend(haxe_ui_containers_Splitter.prototype,{
	registerComposite: function() {
		haxe_ui_containers_Splitter.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers__$VerticalSplitter_VerticalSplitterEvents;
		this._compositeBuilderClass = haxe_ui_containers__$VerticalSplitter_VerticalSplitterBuilder;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Splitter.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Splitter.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_VerticalSplitter();
	}
	,__class__: haxe_ui_containers_VerticalSplitter
});
var haxe_ui_containers__$VerticalSplitter_VerticalSplitterEvents = function(splitter) {
	haxe_ui_containers_SplitterEvents.call(this,splitter);
};
$hxClasses["haxe.ui.containers._VerticalSplitter.VerticalSplitterEvents"] = haxe_ui_containers__$VerticalSplitter_VerticalSplitterEvents;
haxe_ui_containers__$VerticalSplitter_VerticalSplitterEvents.__name__ = "haxe.ui.containers._VerticalSplitter.VerticalSplitterEvents";
haxe_ui_containers__$VerticalSplitter_VerticalSplitterEvents.__super__ = haxe_ui_containers_SplitterEvents;
haxe_ui_containers__$VerticalSplitter_VerticalSplitterEvents.prototype = $extend(haxe_ui_containers_SplitterEvents.prototype,{
	onGripperMouseDown: function(event) {
		haxe_ui_containers_SplitterEvents.prototype.onGripperMouseDown.call(this,event);
		window.document.body.style.cursor = "row-resize";
	}
	,handleResize: function(prev,next,event) {
		var delta = event.screenY - this._currentOffset.y;
		var _g = prev;
		var prevCY = _g.set_height(_g.get_height() + delta);
		var _g = next;
		var nextCY = _g.set_height(_g.get_height() - delta);
		var ucy = this._splitter.get_layout().get_usableHeight();
		if(prev.get_percentHeight() != null) {
			prev.set_percentHeight(prevCY / ucy * 100);
		} else {
			prev.set_height(prevCY);
		}
		if(next.get_percentHeight() != null) {
			next.set_percentHeight(nextCY / ucy * 100);
		} else {
			next.set_height(nextCY);
		}
	}
	,__class__: haxe_ui_containers__$VerticalSplitter_VerticalSplitterEvents
});
var haxe_ui_containers__$VerticalSplitter_VerticalSplitterBuilder = function(splitter) {
	haxe_ui_containers_SplitterBuilder.call(this,splitter);
};
$hxClasses["haxe.ui.containers._VerticalSplitter.VerticalSplitterBuilder"] = haxe_ui_containers__$VerticalSplitter_VerticalSplitterBuilder;
haxe_ui_containers__$VerticalSplitter_VerticalSplitterBuilder.__name__ = "haxe.ui.containers._VerticalSplitter.VerticalSplitterBuilder";
haxe_ui_containers__$VerticalSplitter_VerticalSplitterBuilder.__super__ = haxe_ui_containers_SplitterBuilder;
haxe_ui_containers__$VerticalSplitter_VerticalSplitterBuilder.prototype = $extend(haxe_ui_containers_SplitterBuilder.prototype,{
	getSplitterClass: function() {
		return "vertical-splitter-gripper";
	}
	,__class__: haxe_ui_containers__$VerticalSplitter_VerticalSplitterBuilder
});
var haxe_ui_containers_dialogs_DialogButton = {};
haxe_ui_containers_dialogs_DialogButton.bitOr = function(lhs,rhs) {
	var larr = haxe_ui_containers_dialogs_DialogButton.toString(lhs).split("|");
	var rarr = haxe_ui_containers_dialogs_DialogButton.toString(rhs).split("|");
	var _g = 0;
	while(_g < rarr.length) {
		var r = rarr[_g];
		++_g;
		if(larr.indexOf(r) == -1) {
			larr.push(r);
		}
	}
	return larr.join("|");
};
haxe_ui_containers_dialogs_DialogButton.eq = function(lhs,rhs) {
	var larr = haxe_ui_containers_dialogs_DialogButton.toString(lhs).split("|");
	return larr.indexOf(haxe_ui_containers_dialogs_DialogButton.toString(rhs)) != -1;
};
haxe_ui_containers_dialogs_DialogButton.toArray = function(this1) {
	var a = [];
	var _g = 0;
	var _g1 = (this1 == null ? "null" : "" + this1).split("|");
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		i = StringTools.trim(i);
		if(i.length == 0 || i == "null") {
			continue;
		}
		a.push(i);
	}
	return a;
};
haxe_ui_containers_dialogs_DialogButton.toString = function(this1) {
	if(this1 == null) {
		return "null";
	} else {
		return "" + this1;
	}
};
var haxe_ui_containers_dialogs_DialogEvent = function(type,bubble,data) {
	haxe_ui_events_UIEvent.call(this,type,bubble,data);
};
$hxClasses["haxe.ui.containers.dialogs.DialogEvent"] = haxe_ui_containers_dialogs_DialogEvent;
haxe_ui_containers_dialogs_DialogEvent.__name__ = "haxe.ui.containers.dialogs.DialogEvent";
haxe_ui_containers_dialogs_DialogEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_containers_dialogs_DialogEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	button: null
	,clone: function() {
		var c = new haxe_ui_containers_dialogs_DialogEvent(this.type);
		c.type = this.type;
		c.bubble = this.bubble;
		c.target = this.target;
		c.data = this.data;
		c.canceled = this.canceled;
		c.button = this.button;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_containers_dialogs_DialogEvent
});
var haxe_ui_containers_dialogs_MessageBoxType = {};
haxe_ui_containers_dialogs_MessageBoxType.toString = function(this1) {
	if(this1 == null) {
		return "null";
	} else {
		return "" + this1;
	}
};
var haxe_ui_containers_dialogs_MessageBox = function() {
	haxe_ui_backend_MessageBoxBase.call(this);
	this.set_title("Message");
};
$hxClasses["haxe.ui.containers.dialogs.MessageBox"] = haxe_ui_containers_dialogs_MessageBox;
haxe_ui_containers_dialogs_MessageBox.__name__ = "haxe.ui.containers.dialogs.MessageBox";
haxe_ui_containers_dialogs_MessageBox.__super__ = haxe_ui_backend_MessageBoxBase;
haxe_ui_containers_dialogs_MessageBox.prototype = $extend(haxe_ui_backend_MessageBoxBase.prototype,{
	onInitialize: function() {
		haxe_ui_backend_MessageBoxBase.prototype.onInitialize.call(this);
		if(haxe_ui_containers_dialogs_DialogButton.toArray(this.buttons).length == 0) {
			switch(this.get_type()) {
			case "error":
				this.buttons = "Close";
				break;
			case "info":
				this.buttons = "OK";
				break;
			case "question":
				var larr = "Yes".split("|");
				var rarr = "No".split("|");
				var _g = 0;
				while(_g < rarr.length) {
					var r = rarr[_g];
					++_g;
					if(larr.indexOf(r) == -1) {
						larr.push(r);
					}
				}
				var larr1 = haxe_ui_containers_dialogs_DialogButton.toString(larr.join("|")).split("|");
				var rarr = haxe_ui_containers_dialogs_DialogButton.toString("Cancel").split("|");
				var _g = 0;
				while(_g < rarr.length) {
					var r = rarr[_g];
					++_g;
					if(larr1.indexOf(r) == -1) {
						larr1.push(r);
					}
				}
				this.buttons = larr1.join("|");
				break;
			case "warning":
				this.buttons = "Close";
				break;
			}
			this.createButtons();
		}
		if(this.get_title() == "Message") {
			switch(this.get_type()) {
			case "error":
				this.set_title("Error");
				break;
			case "info":
				this.set_title("Info");
				break;
			case "question":
				this.set_title("Question");
				break;
			case "warning":
				this.set_title("Warning");
				break;
			}
		}
	}
	,registerBehaviours: function() {
		haxe_ui_backend_MessageBoxBase.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_backend_MessageBoxBase.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_dialogs_MessageBox();
	}
	,__class__: haxe_ui_containers_dialogs_MessageBox
});
var haxe_ui_containers_menus_MenuEvent = function(type,bubble,data) {
	if(bubble == null) {
		bubble = false;
	}
	this.menuItem = null;
	this.menu = null;
	haxe_ui_events_UIEvent.call(this,type,true,data);
};
$hxClasses["haxe.ui.containers.menus.MenuEvent"] = haxe_ui_containers_menus_MenuEvent;
haxe_ui_containers_menus_MenuEvent.__name__ = "haxe.ui.containers.menus.MenuEvent";
haxe_ui_containers_menus_MenuEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_containers_menus_MenuEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	menu: null
	,menuItem: null
	,clone: function() {
		var c = new haxe_ui_containers_menus_MenuEvent(this.type);
		c.menu = this.menu;
		c.menuItem = this.menuItem;
		c.type = this.type;
		c.bubble = this.bubble;
		c.target = this.target;
		c.data = this.data;
		c.canceled = this.canceled;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_containers_menus_MenuEvent
});
var haxe_ui_containers_menus_Menu = function() {
	haxe_ui_containers_VBox.call(this);
};
$hxClasses["haxe.ui.containers.menus.Menu"] = haxe_ui_containers_menus_Menu;
haxe_ui_containers_menus_Menu.__name__ = "haxe.ui.containers.menus.Menu";
haxe_ui_containers_menus_Menu.__super__ = haxe_ui_containers_VBox;
haxe_ui_containers_menus_Menu.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	registerComposite: function() {
		haxe_ui_containers_VBox.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers_menus_MenuEvents;
		this._compositeBuilderClass = haxe_ui_containers_menus__$Menu_Builder;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
		this.behaviours.register("menuStyleNames",haxe_ui_behaviours_DefaultBehaviour);
	}
	,get_menuStyleNames: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("menuStyleNames"));
	}
	,set_menuStyleNames: function(value) {
		this.behaviours.set("menuStyleNames",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"menuStyleNames");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_menus_Menu();
	}
	,__class__: haxe_ui_containers_menus_Menu
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{set_menuStyleNames:"set_menuStyleNames",get_menuStyleNames:"get_menuStyleNames"})
});
var haxe_ui_containers_menus_MenuEvents = function(menu) {
	this._over = false;
	this.parentMenu = null;
	this.currentSubMenu = null;
	haxe_ui_events_Events.call(this,menu);
	this._menu = menu;
};
$hxClasses["haxe.ui.containers.menus.MenuEvents"] = haxe_ui_containers_menus_MenuEvents;
haxe_ui_containers_menus_MenuEvents.__name__ = "haxe.ui.containers.menus.MenuEvents";
haxe_ui_containers_menus_MenuEvents.__super__ = haxe_ui_events_Events;
haxe_ui_containers_menus_MenuEvents.prototype = $extend(haxe_ui_events_Events.prototype,{
	_menu: null
	,currentSubMenu: null
	,parentMenu: null
	,register: function() {
		if(!this.hasEvent("mouseover",$bind(this,this.onMouseOver))) {
			this.registerEvent("mouseover",$bind(this,this.onMouseOver));
		}
		if(!this.hasEvent("mouseout",$bind(this,this.onMouseOut))) {
			this.registerEvent("mouseout",$bind(this,this.onMouseOut));
		}
		var _g = 0;
		var _this = this._menu;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(((child) instanceof haxe_ui_containers_menus_MenuItem)) {
				var item = js_Boot.__cast(child , haxe_ui_containers_menus_MenuItem);
				if(!item.hasEvent("click",$bind(this,this.onItemClick))) {
					item.registerEvent("click",$bind(this,this.onItemClick));
				}
				if(!item.hasEvent("mouseover",$bind(this,this.onItemMouseOver))) {
					item.registerEvent("mouseover",$bind(this,this.onItemMouseOver));
				}
				if(!item.hasEvent("mouseout",$bind(this,this.onItemMouseOut))) {
					item.registerEvent("mouseout",$bind(this,this.onItemMouseOut));
				}
			}
		}
		if(!this.hasEvent("hidden",$bind(this,this.onHidden))) {
			this.registerEvent("hidden",$bind(this,this.onHidden));
		}
	}
	,unregister: function() {
		this.unregisterEvent("mouseover",$bind(this,this.onMouseOver));
		this.unregisterEvent("mouseout",$bind(this,this.onMouseOut));
		var _g = 0;
		var _this = this._menu;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.unregisterEvent("click",$bind(this,this.onItemClick));
			child.unregisterEvent("mouseover",$bind(this,this.onItemMouseOver));
			child.unregisterEvent("mouseout",$bind(this,this.onItemMouseOut));
		}
		this.unregisterEvent("hidden",$bind(this,this.onHidden));
	}
	,_over: null
	,onMouseOver: function(event) {
		this._over = true;
	}
	,onMouseOut: function(event) {
		this._over = false;
	}
	,onItemClick: function(event) {
		var item = js_Boot.__cast(event.target , haxe_ui_containers_menus_MenuItem);
		if(!item.get_expandable()) {
			var event = new haxe_ui_containers_menus_MenuEvent("menuselected");
			event.menu = this._menu;
			event.menuItem = item;
			this.findRootMenu().dispatch(event);
			this.hideCurrentSubMenu();
			this.findRootMenu().hide();
		}
	}
	,onItemMouseOver: function(event) {
		var builder = js_Boot.__cast(this._menu._compositeBuilder , haxe_ui_containers_menus__$Menu_Builder);
		var subMenus = builder._subMenus;
		var item = js_Boot.__cast(event.target , haxe_ui_containers_menus_MenuItem);
		var _g = 0;
		var _this = this._menu;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child != item) {
				child.removeClass(":hover",true,true);
			}
		}
		if(subMenus.h[item.__id__] != null) {
			this.showSubMenu(js_Boot.__cast(subMenus.h[item.__id__] , haxe_ui_containers_menus_Menu),item);
		} else {
			this.hideCurrentSubMenu();
		}
	}
	,onItemMouseOut: function(event) {
		if(this.currentSubMenu != null) {
			event.target.addClass(":hover",true,true);
			return;
		}
	}
	,showSubMenu: function(subMenu,source) {
		this.hideCurrentSubMenu();
		subMenu.set_menuStyleNames(this._menu.get_menuStyleNames());
		subMenu.addClass(this._menu.get_menuStyleNames());
		var componentOffset = source.getComponentOffset();
		var left = source.get_screenLeft() + source.get_actualComponentWidth() + componentOffset.x;
		var top = source.get_screenTop();
		haxe_ui_core_Screen.get_instance().addComponent(subMenu);
		subMenu.syncComponentValidation();
		if(left + subMenu.get_actualComponentWidth() > haxe_ui_core_Screen.get_instance().get_width()) {
			left = source.get_screenLeft() - subMenu.get_actualComponentWidth();
		}
		subMenu.set_left(left);
		subMenu.set_top(top);
		this.currentSubMenu = subMenu;
	}
	,hideCurrentSubMenu: function() {
		if(this.currentSubMenu == null) {
			return;
		}
		var _g = 0;
		var _this = this.currentSubMenu;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.removeClass(":hover",true,true);
		}
		var subMenuEvents = js_Boot.__cast(this.currentSubMenu._internalEvents , haxe_ui_containers_menus_MenuEvents);
		subMenuEvents.hideCurrentSubMenu();
		haxe_ui_core_Screen.get_instance().removeComponent(this.currentSubMenu);
		this.currentSubMenu = null;
	}
	,onHidden: function(event) {
		var _g = 0;
		var _this = this._menu;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.removeClass(":hover",true,true);
		}
		this.hideCurrentSubMenu();
	}
	,findRootMenu: function() {
		var root = null;
		var ref = this._menu;
		while(ref != null) {
			var events = js_Boot.__cast(ref._internalEvents , haxe_ui_containers_menus_MenuEvents);
			if(events.parentMenu == null) {
				root = events._menu;
				break;
			}
			ref = events.parentMenu;
		}
		return root;
	}
	,__class__: haxe_ui_containers_menus_MenuEvents
});
var haxe_ui_containers_menus__$Menu_Builder = function(menu) {
	this._subMenus = new haxe_ds_ObjectMap();
	haxe_ui_core_CompositeBuilder.call(this,menu);
	this._menu = menu;
};
$hxClasses["haxe.ui.containers.menus._Menu.Builder"] = haxe_ui_containers_menus__$Menu_Builder;
haxe_ui_containers_menus__$Menu_Builder.__name__ = "haxe.ui.containers.menus._Menu.Builder";
haxe_ui_containers_menus__$Menu_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers_menus__$Menu_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_menu: null
	,_subMenus: null
	,addComponent: function(child) {
		if(((child) instanceof haxe_ui_containers_menus_Menu)) {
			var menu = js_Boot.__cast(child , haxe_ui_containers_menus_Menu);
			var item = new haxe_ui_containers_menus_MenuItem();
			item.set_text(child.get_text());
			item.set_icon(menu.get_icon());
			item.set_expandable(true);
			this._menu.addComponent(item);
			(js_Boot.__cast(menu._internalEvents , haxe_ui_containers_menus_MenuEvents)).parentMenu = this._menu;
			this._subMenus.set(item,menu);
			return child;
		}
		return null;
	}
	,onComponentAdded: function(child) {
		if(((child) instanceof haxe_ui_containers_menus_Menu) || ((child) instanceof haxe_ui_containers_menus_MenuItem)) {
			this._menu.registerInternalEvents(null,true);
		}
	}
	,findComponent: function(criteria,type,recursive,searchType) {
		var match = haxe_ui_core_CompositeBuilder.prototype.findComponent.call(this,criteria,type,recursive,searchType);
		if(match == null) {
			var menu = this._subMenus.iterator();
			while(menu.hasNext()) {
				var menu1 = menu.next();
				match = menu1.findComponent(criteria,type,recursive,searchType);
				if(menu1.matchesSearch(criteria,type,searchType)) {
					return menu1;
				} else {
					match = menu1.findComponent(criteria,type,recursive,searchType);
				}
				if(match != null) {
					break;
				}
			}
		}
		return match;
	}
	,__class__: haxe_ui_containers_menus__$Menu_Builder
});
var haxe_ui_containers_menus_MenuBar = function() {
	haxe_ui_containers_HBox.call(this);
};
$hxClasses["haxe.ui.containers.menus.MenuBar"] = haxe_ui_containers_menus_MenuBar;
haxe_ui_containers_menus_MenuBar.__name__ = "haxe.ui.containers.menus.MenuBar";
haxe_ui_containers_menus_MenuBar.__super__ = haxe_ui_containers_HBox;
haxe_ui_containers_menus_MenuBar.prototype = $extend(haxe_ui_containers_HBox.prototype,{
	registerComposite: function() {
		haxe_ui_containers_HBox.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers_menus__$MenuBar_Events;
		this._compositeBuilderClass = haxe_ui_containers_menus__$MenuBar_Builder;
	}
	,__onMenuSelected: null
	,onMenuSelected: null
	,set_onMenuSelected: function(value) {
		if(this.__onMenuSelected != null) {
			this.unregisterEvent("menuselected",this.__onMenuSelected);
			this.__onMenuSelected = null;
		}
		if(value != null) {
			this.__onMenuSelected = value;
			this.registerEvent("menuselected",value);
		}
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_HBox.prototype.registerBehaviours.call(this);
		this.behaviours.register("menuStyleNames",haxe_ui_behaviours_DefaultBehaviour);
	}
	,get_menuStyleNames: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("menuStyleNames"));
	}
	,set_menuStyleNames: function(value) {
		this.behaviours.set("menuStyleNames",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"menuStyleNames");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_HBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_menus_MenuBar();
	}
	,__class__: haxe_ui_containers_menus_MenuBar
	,__properties__: $extend(haxe_ui_containers_HBox.prototype.__properties__,{set_menuStyleNames:"set_menuStyleNames",get_menuStyleNames:"get_menuStyleNames",set_onMenuSelected:"set_onMenuSelected"})
});
var haxe_ui_containers_menus__$MenuBar_Events = function(menubar) {
	haxe_ui_events_Events.call(this,menubar);
	this._menubar = menubar;
};
$hxClasses["haxe.ui.containers.menus._MenuBar.Events"] = haxe_ui_containers_menus__$MenuBar_Events;
haxe_ui_containers_menus__$MenuBar_Events.__name__ = "haxe.ui.containers.menus._MenuBar.Events";
haxe_ui_containers_menus__$MenuBar_Events.__super__ = haxe_ui_events_Events;
haxe_ui_containers_menus__$MenuBar_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_menubar: null
	,_currentMenu: null
	,_currentButton: null
	,register: function() {
		var builder = js_Boot.__cast(this._menubar._compositeBuilder , haxe_ui_containers_menus__$MenuBar_Builder);
		var _g = 0;
		var _g1 = builder._buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(!button.hasEvent("click",$bind(this,this.onButtonClick))) {
				button.registerEvent("click",$bind(this,this.onButtonClick));
			}
			if(!button.hasEvent("mouseover",$bind(this,this.onButtonOver))) {
				button.registerEvent("mouseover",$bind(this,this.onButtonOver));
			}
		}
	}
	,unregister: function() {
		var builder = js_Boot.__cast(this._menubar._compositeBuilder , haxe_ui_containers_menus__$MenuBar_Builder);
		var _g = 0;
		var _g1 = builder._buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			button.unregisterEvent("click",$bind(this,this.onButtonClick));
			button.unregisterEvent("mouseover",$bind(this,this.onButtonOver));
		}
	}
	,onButtonClick: function(event) {
		var builder = js_Boot.__cast(this._menubar._compositeBuilder , haxe_ui_containers_menus__$MenuBar_Builder);
		var target = js_Boot.__cast(event.target , haxe_ui_components_Button);
		var index = builder._buttons.indexOf(target);
		if(target.get_selected() == true) {
			this.showMenu(index);
		} else {
			(js_Boot.__cast(this._currentButton._internalEvents , haxe_ui_components_ButtonEvents)).lastMouseEvent = event;
			this.hideCurrentMenu();
		}
	}
	,onButtonOver: function(event) {
		if(this._currentMenu == null) {
			return;
		}
		var builder = js_Boot.__cast(this._menubar._compositeBuilder , haxe_ui_containers_menus__$MenuBar_Builder);
		var target = js_Boot.__cast(event.target , haxe_ui_components_Button);
		var index = builder._buttons.indexOf(target);
		var menu = builder._menus[index];
		if(menu != this._currentMenu) {
			this.showMenu(index);
		}
	}
	,showMenu: function(index) {
		var builder = js_Boot.__cast(this._menubar._compositeBuilder , haxe_ui_containers_menus__$MenuBar_Builder);
		var target = builder._buttons[index];
		var menu = builder._menus[index];
		if(this._currentMenu == menu) {
			return;
		}
		var _g = 0;
		var _g1 = builder._buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != target) {
				button.set_selected(false);
			}
		}
		target.set_selected(true);
		this.hideCurrentMenu();
		var componentOffset = target.getComponentOffset();
		var left = target.get_screenLeft() + componentOffset.x;
		var top = target.get_screenTop() + (target.get_actualComponentHeight() - haxe_ui_Toolkit.get_scaleY()) + componentOffset.y;
		menu.set_menuStyleNames(this._menubar.get_menuStyleNames());
		menu.addClasses([this._menubar.get_menuStyleNames(),"expanded"]);
		if(menu.findComponent("menu-filler",null,false) == null) {
			var filler = new haxe_ui_core_Component();
			filler.set_horizontalAlign("right");
			filler.set_includeInLayout(false);
			filler.addClass("menu-filler");
			filler.set_id("menu-filler");
			menu.addComponent(filler);
		}
		menu.show();
		haxe_ui_core_Screen.get_instance().addComponent(menu);
		menu.syncComponentValidation();
		if(left + menu.get_actualComponentWidth() > haxe_ui_core_Screen.get_instance().get_width()) {
			left = target.get_screenLeft() - menu.get_actualComponentWidth() + target.get_actualComponentWidth();
		}
		menu.set_left(left);
		menu.set_top(top - haxe_ui_Toolkit.get_scaleY());
		this._currentButton = target;
		this._currentMenu = menu;
		var cx = menu.get_width() - this._currentButton.get_width();
		var filler = menu.findComponent("menu-filler",null,false);
		if(cx > 0 && filler != null) {
			cx += 2;
			filler.set_width(cx);
			filler.set_left(menu.get_width() - cx);
			filler.set_hidden(false);
		} else if(filler != null) {
			filler.set_hidden(true);
		}
		haxe_ui_core_Screen.get_instance().registerEvent("mousedown",$bind(this,this.onScreenMouseDown));
		if(!this._currentMenu.hasEvent("menuselected",$bind(this,this.onMenuSelected))) {
			this._currentMenu.registerEvent("menuselected",$bind(this,this.onMenuSelected));
		}
	}
	,hideCurrentMenu: function() {
		if(this._currentMenu != null) {
			this._currentMenu.unregisterEvent("menuselected",$bind(this,this.onMenuSelected));
			this._currentMenu.hide();
			this._currentButton.set_selected(false);
			haxe_ui_core_Screen.get_instance().unregisterEvent("mousedown",$bind(this,this.onScreenMouseDown));
			haxe_ui_core_Screen.get_instance().removeComponent(this._currentMenu);
			this._currentButton = null;
			this._currentMenu = null;
		}
	}
	,onScreenMouseDown: function(event) {
		var close = true;
		if(this._currentMenu.hitTest(event.screenX,event.screenY)) {
			close = false;
		} else if(this._currentButton.hitTest(event.screenX,event.screenY)) {
			close = false;
		} else {
			var ref = this._currentMenu;
			var refEvents = js_Boot.__cast(ref._internalEvents , haxe_ui_containers_menus_MenuEvents);
			var refSubMenu = refEvents.currentSubMenu;
			while(refSubMenu != null) {
				if(refSubMenu.hitTest(event.screenX,event.screenY)) {
					close = false;
					break;
				}
				ref = refSubMenu;
				refEvents = js_Boot.__cast(ref._internalEvents , haxe_ui_containers_menus_MenuEvents);
				refSubMenu = refEvents.currentSubMenu;
			}
		}
		if(close) {
			this.hideCurrentMenu();
		}
	}
	,onMenuSelected: function(event) {
		var newEvent = new haxe_ui_containers_menus_MenuEvent("menuselected");
		newEvent.menu = event.menu;
		newEvent.menuItem = event.menuItem;
		this._menubar.dispatch(newEvent);
		this.hideCurrentMenu();
	}
	,__class__: haxe_ui_containers_menus__$MenuBar_Events
});
var haxe_ui_containers_menus__$MenuBar_Builder = function(menubar) {
	this._menus = [];
	this._buttons = [];
	haxe_ui_core_CompositeBuilder.call(this,menubar);
	this._menubar = menubar;
};
$hxClasses["haxe.ui.containers.menus._MenuBar.Builder"] = haxe_ui_containers_menus__$MenuBar_Builder;
haxe_ui_containers_menus__$MenuBar_Builder.__name__ = "haxe.ui.containers.menus._MenuBar.Builder";
haxe_ui_containers_menus__$MenuBar_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers_menus__$MenuBar_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_menubar: null
	,_buttons: null
	,_menus: null
	,create: function() {
	}
	,destroy: function() {
	}
	,addComponent: function(child) {
		if(((child) instanceof haxe_ui_containers_menus_Menu)) {
			var menu = js_Boot.__cast(child , haxe_ui_containers_menus_Menu);
			var button = new haxe_ui_components_Button();
			button.set_styleNames("menubar-button");
			button.set_text(menu.get_text());
			button.set_icon(haxe_ui_util_Variant.fromString(menu.get_icon()));
			button.set_toggle(true);
			this._buttons.push(button);
			this._menubar.addComponent(button);
			this._menubar.registerInternalEvents(null,true);
			this._menus.push(js_Boot.__cast(child , haxe_ui_containers_menus_Menu));
			return child;
		}
		return null;
	}
	,addComponentAt: function(child,index) {
		return null;
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return null;
	}
	,getComponentIndex: function(child) {
		return -1;
	}
	,setComponentIndex: function(child,index) {
		return null;
	}
	,getComponentAt: function(index) {
		return null;
	}
	,findComponent: function(criteria,type,recursive,searchType) {
		var match = haxe_ui_core_CompositeBuilder.prototype.findComponent.call(this,criteria,type,recursive,searchType);
		if(match == null) {
			var _g = 0;
			var _g1 = this._menus;
			while(_g < _g1.length) {
				var menu = _g1[_g];
				++_g;
				match = menu.findComponent(criteria,type,recursive,searchType);
				if(menu.matchesSearch(criteria,type,searchType)) {
					return menu;
				} else {
					match = menu.findComponent(criteria,type,recursive,searchType);
				}
				if(match != null) {
					break;
				}
			}
		}
		return match;
	}
	,__class__: haxe_ui_containers_menus__$MenuBar_Builder
});
var haxe_ui_containers_menus_MenuItem = function() {
	haxe_ui_containers_HBox.call(this);
};
$hxClasses["haxe.ui.containers.menus.MenuItem"] = haxe_ui_containers_menus_MenuItem;
haxe_ui_containers_menus_MenuItem.__name__ = "haxe.ui.containers.menus.MenuItem";
haxe_ui_containers_menus_MenuItem.__super__ = haxe_ui_containers_HBox;
haxe_ui_containers_menus_MenuItem.prototype = $extend(haxe_ui_containers_HBox.prototype,{
	registerComposite: function() {
		haxe_ui_containers_HBox.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers_menus__$MenuItem_Events;
		this._compositeBuilderClass = haxe_ui_containers_menus__$MenuItem_Builder;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_HBox.prototype.registerBehaviours.call(this);
		this.behaviours.register("text",haxe_ui_containers_menus__$MenuItem_TextBehaviour);
		this.behaviours.register("shortcutText",haxe_ui_containers_menus__$MenuItem_ShortcutTextBehaviour);
		this.behaviours.register("icon",haxe_ui_containers_menus__$MenuItem_IconBehaviour);
		this.behaviours.register("expandable",haxe_ui_containers_menus__$MenuItem_ExpandableBehaviour);
	}
	,get_shortcutText: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("shortcutText"));
	}
	,set_shortcutText: function(value) {
		this.behaviours.set("shortcutText",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"shortcutText");
		return value;
	}
	,get_expandable: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("expandable"));
	}
	,set_expandable: function(value) {
		this.behaviours.set("expandable",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"expandable");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_HBox.prototype.cloneComponent.call(this);
		if(this.get_shortcutText() != null) {
			c.set_shortcutText(this.get_shortcutText());
		}
		c.set_expandable(this.get_expandable());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_menus_MenuItem();
	}
	,__class__: haxe_ui_containers_menus_MenuItem
	,__properties__: $extend(haxe_ui_containers_HBox.prototype.__properties__,{set_expandable:"set_expandable",get_expandable:"get_expandable",set_shortcutText:"set_shortcutText",get_shortcutText:"get_shortcutText"})
});
var haxe_ui_containers_menus_MenuCheckBox = function() {
	haxe_ui_containers_menus_MenuItem.call(this);
};
$hxClasses["haxe.ui.containers.menus.MenuCheckBox"] = haxe_ui_containers_menus_MenuCheckBox;
haxe_ui_containers_menus_MenuCheckBox.__name__ = "haxe.ui.containers.menus.MenuCheckBox";
haxe_ui_containers_menus_MenuCheckBox.__super__ = haxe_ui_containers_menus_MenuItem;
haxe_ui_containers_menus_MenuCheckBox.prototype = $extend(haxe_ui_containers_menus_MenuItem.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_menus_MenuItem.prototype.registerBehaviours.call(this);
		this.behaviours.register("text",haxe_ui_containers_menus__$MenuCheckBox_TextBehaviour);
		this.behaviours.register("shortcutText",haxe_ui_containers_menus__$MenuCheckBox_ShortcutTextBehaviour);
		this.behaviours.register("selected",haxe_ui_containers_menus__$MenuCheckBox_SelectedBehaviour);
	}
	,get_selected: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("selected"));
	}
	,set_selected: function(value) {
		this.behaviours.set("selected",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selected");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_menus_MenuItem.prototype.cloneComponent.call(this);
		c.set_selected(this.get_selected());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_menus_MenuCheckBox();
	}
	,registerComposite: function() {
		haxe_ui_containers_menus_MenuItem.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_containers_menus__$MenuCheckBox_Builder;
	}
	,__class__: haxe_ui_containers_menus_MenuCheckBox
	,__properties__: $extend(haxe_ui_containers_menus_MenuItem.prototype.__properties__,{set_selected:"set_selected",get_selected:"get_selected"})
});
var haxe_ui_containers_menus__$MenuCheckBox_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuCheckBox.TextBehaviour"] = haxe_ui_containers_menus__$MenuCheckBox_TextBehaviour;
haxe_ui_containers_menus__$MenuCheckBox_TextBehaviour.__name__ = "haxe.ui.containers.menus._MenuCheckBox.TextBehaviour";
haxe_ui_containers_menus__$MenuCheckBox_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_menus__$MenuCheckBox_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var checkbox = this._component.findComponent(null,haxe_ui_components_CheckBox,false);
		if(checkbox == null) {
			checkbox = new haxe_ui_components_CheckBox();
			checkbox.set_styleNames("menuitem-checkbox");
			checkbox.scriptAccess = false;
			this._component.addComponent(checkbox);
		}
		checkbox.set_text(haxe_ui_util_Variant.toString(this._value));
	}
	,__class__: haxe_ui_containers_menus__$MenuCheckBox_TextBehaviour
});
var haxe_ui_containers_menus__$MenuCheckBox_ShortcutTextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuCheckBox.ShortcutTextBehaviour"] = haxe_ui_containers_menus__$MenuCheckBox_ShortcutTextBehaviour;
haxe_ui_containers_menus__$MenuCheckBox_ShortcutTextBehaviour.__name__ = "haxe.ui.containers.menus._MenuCheckBox.ShortcutTextBehaviour";
haxe_ui_containers_menus__$MenuCheckBox_ShortcutTextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_menus__$MenuCheckBox_ShortcutTextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var label = this._component.findComponent("menuitem-shortcut-label",null,false);
		if(label != null) {
			label.set_text(haxe_ui_util_Variant.toString(this._value));
		}
	}
	,__class__: haxe_ui_containers_menus__$MenuCheckBox_ShortcutTextBehaviour
});
var haxe_ui_containers_menus__$MenuCheckBox_SelectedBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuCheckBox.SelectedBehaviour"] = haxe_ui_containers_menus__$MenuCheckBox_SelectedBehaviour;
haxe_ui_containers_menus__$MenuCheckBox_SelectedBehaviour.__name__ = "haxe.ui.containers.menus._MenuCheckBox.SelectedBehaviour";
haxe_ui_containers_menus__$MenuCheckBox_SelectedBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_menus__$MenuCheckBox_SelectedBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var checkbox = this._component.findComponent(null,haxe_ui_components_CheckBox,false);
		if(checkbox == null) {
			checkbox = new haxe_ui_components_CheckBox();
			checkbox.set_styleNames("menuitem-checkbox");
			checkbox.scriptAccess = false;
			this._component.addComponent(checkbox);
		}
		checkbox.set_selected(haxe_ui_util_Variant.toBool(this._value));
	}
	,__class__: haxe_ui_containers_menus__$MenuCheckBox_SelectedBehaviour
});
var haxe_ui_containers_menus__$MenuCheckBox_Builder = function(component) {
	haxe_ui_core_CompositeBuilder.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuCheckBox.Builder"] = haxe_ui_containers_menus__$MenuCheckBox_Builder;
haxe_ui_containers_menus__$MenuCheckBox_Builder.__name__ = "haxe.ui.containers.menus._MenuCheckBox.Builder";
haxe_ui_containers_menus__$MenuCheckBox_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers_menus__$MenuCheckBox_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_checkbox: null
	,create: function() {
		this._checkbox = new haxe_ui_components_CheckBox();
		this._checkbox.set_styleNames("menuitem-checkbox");
		this._checkbox.scriptAccess = false;
		this._component.addComponent(this._checkbox);
		var label = new haxe_ui_components_Label();
		label.set_id("menuitem-shortcut-label");
		label.set_styleNames("menuitem-shortcut-label");
		label.scriptAccess = false;
		this._component.addComponent(label);
	}
	,__class__: haxe_ui_containers_menus__$MenuCheckBox_Builder
});
var haxe_ui_containers_menus__$MenuItem_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuItem.TextBehaviour"] = haxe_ui_containers_menus__$MenuItem_TextBehaviour;
haxe_ui_containers_menus__$MenuItem_TextBehaviour.__name__ = "haxe.ui.containers.menus._MenuItem.TextBehaviour";
haxe_ui_containers_menus__$MenuItem_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_menus__$MenuItem_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var label = this._component.findComponent("menuitem-label",null,true);
		label.set_text(haxe_ui_util_Variant.toString(this._value));
	}
	,__class__: haxe_ui_containers_menus__$MenuItem_TextBehaviour
});
var haxe_ui_containers_menus__$MenuItem_ShortcutTextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuItem.ShortcutTextBehaviour"] = haxe_ui_containers_menus__$MenuItem_ShortcutTextBehaviour;
haxe_ui_containers_menus__$MenuItem_ShortcutTextBehaviour.__name__ = "haxe.ui.containers.menus._MenuItem.ShortcutTextBehaviour";
haxe_ui_containers_menus__$MenuItem_ShortcutTextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_menus__$MenuItem_ShortcutTextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var label = this._component.findComponent("menuitem-shortcut-label",null,true);
		if(label != null) {
			label.set_text(haxe_ui_util_Variant.toString(this._value));
		}
	}
	,__class__: haxe_ui_containers_menus__$MenuItem_ShortcutTextBehaviour
});
var haxe_ui_containers_menus__$MenuItem_IconBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuItem.IconBehaviour"] = haxe_ui_containers_menus__$MenuItem_IconBehaviour;
haxe_ui_containers_menus__$MenuItem_IconBehaviour.__name__ = "haxe.ui.containers.menus._MenuItem.IconBehaviour";
haxe_ui_containers_menus__$MenuItem_IconBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_menus__$MenuItem_IconBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		if(this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) {
			return;
		}
		var icon = this._component.findComponent("menuitem-icon",null,true);
		if(icon == null) {
			icon = new haxe_ui_components_Image();
			icon.scriptAccess = false;
			icon.set_id("menuitem-icon");
			icon.addClass("menuitem-icon");
			this._component.addComponentAt(icon,0);
		}
		icon.set_resource(this._value);
	}
	,__class__: haxe_ui_containers_menus__$MenuItem_IconBehaviour
});
var haxe_ui_containers_menus__$MenuItem_ExpandableBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuItem.ExpandableBehaviour"] = haxe_ui_containers_menus__$MenuItem_ExpandableBehaviour;
haxe_ui_containers_menus__$MenuItem_ExpandableBehaviour.__name__ = "haxe.ui.containers.menus._MenuItem.ExpandableBehaviour";
haxe_ui_containers_menus__$MenuItem_ExpandableBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_menus__$MenuItem_ExpandableBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var image = this._component.findComponent("menuitem-expandable");
		if(image == null && haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromBool(true))) {
			image = new haxe_ui_components_Image();
			image.set_id("menuitem-expandable");
			image.set_styleNames("menuitem-expandable");
			image.scriptAccess = false;
			this._component.addComponent(image);
			var _this = this._component;
			var force = true;
			if(force == null) {
				force = false;
			}
			_this.invalidateComponent("style");
			if(force == true) {
				_this._style = null;
			}
		} else if(haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromBool(false))) {
			this._component.removeComponent(image);
		}
	}
	,__class__: haxe_ui_containers_menus__$MenuItem_ExpandableBehaviour
});
var haxe_ui_containers_menus__$MenuItem_Events = function(target) {
	haxe_ui_events_Events.call(this,target);
};
$hxClasses["haxe.ui.containers.menus._MenuItem.Events"] = haxe_ui_containers_menus__$MenuItem_Events;
haxe_ui_containers_menus__$MenuItem_Events.__name__ = "haxe.ui.containers.menus._MenuItem.Events";
haxe_ui_containers_menus__$MenuItem_Events.__super__ = haxe_ui_events_Events;
haxe_ui_containers_menus__$MenuItem_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	register: function() {
		if(!this.hasEvent("mouseover",$bind(this,this.onMouseOver))) {
			this.registerEvent("mouseover",$bind(this,this.onMouseOver));
		}
		if(!this.hasEvent("mouseout",$bind(this,this.onMouseOut))) {
			this.registerEvent("mouseout",$bind(this,this.onMouseOut));
		}
	}
	,unregister: function() {
		this.unregisterEvent("mouseover",$bind(this,this.onMouseOver));
		this.unregisterEvent("mouseout",$bind(this,this.onMouseOut));
	}
	,onMouseOver: function(event) {
		this._target.addClass(":hover",true,true);
	}
	,onMouseOut: function(event) {
		this._target.removeClass(":hover",true,true);
	}
	,__class__: haxe_ui_containers_menus__$MenuItem_Events
});
var haxe_ui_containers_menus__$MenuItem_Builder = function(component) {
	haxe_ui_core_CompositeBuilder.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuItem.Builder"] = haxe_ui_containers_menus__$MenuItem_Builder;
haxe_ui_containers_menus__$MenuItem_Builder.__name__ = "haxe.ui.containers.menus._MenuItem.Builder";
haxe_ui_containers_menus__$MenuItem_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers_menus__$MenuItem_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	create: function() {
		haxe_ui_core_CompositeBuilder.prototype.create.call(this);
		var box = new haxe_ui_containers_Box();
		box.set_percentWidth(100);
		box.set_verticalAlign("center");
		var label = new haxe_ui_components_Label();
		label.set_id("menuitem-label");
		label.set_styleNames("menuitem-label");
		label.scriptAccess = false;
		box.addComponent(label);
		var label = new haxe_ui_components_Label();
		label.set_id("menuitem-shortcut-label");
		label.set_styleNames("menuitem-shortcut-label");
		label.scriptAccess = false;
		box.addComponent(label);
		this._component.addComponent(box);
	}
	,__class__: haxe_ui_containers_menus__$MenuItem_Builder
});
var haxe_ui_containers_menus_MenuOptionBox = function() {
	haxe_ui_containers_menus_MenuItem.call(this);
};
$hxClasses["haxe.ui.containers.menus.MenuOptionBox"] = haxe_ui_containers_menus_MenuOptionBox;
haxe_ui_containers_menus_MenuOptionBox.__name__ = "haxe.ui.containers.menus.MenuOptionBox";
haxe_ui_containers_menus_MenuOptionBox.__super__ = haxe_ui_containers_menus_MenuItem;
haxe_ui_containers_menus_MenuOptionBox.prototype = $extend(haxe_ui_containers_menus_MenuItem.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_menus_MenuItem.prototype.registerBehaviours.call(this);
		this.behaviours.register("componentGroup",haxe_ui_containers_menus__$MenuOptionBox_GroupBehaviour);
		this.behaviours.register("text",haxe_ui_containers_menus__$MenuOptionBox_TextBehaviour);
		this.behaviours.register("shortcutText",haxe_ui_containers_menus__$MenuOptionBox_ShortcutTextBehaviour);
		this.behaviours.register("selected",haxe_ui_containers_menus__$MenuOptionBox_SelectedBehaviour);
	}
	,get_componentGroup: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("componentGroup"));
	}
	,set_componentGroup: function(value) {
		this.behaviours.set("componentGroup",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"componentGroup");
		return value;
	}
	,get_selected: function() {
		return haxe_ui_util_Variant.toBool(this.behaviours.get("selected"));
	}
	,set_selected: function(value) {
		this.behaviours.set("selected",haxe_ui_util_Variant.fromBool(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"selected");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_menus_MenuItem.prototype.cloneComponent.call(this);
		if(this.get_componentGroup() != null) {
			c.set_componentGroup(this.get_componentGroup());
		}
		c.set_selected(this.get_selected());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_menus_MenuOptionBox();
	}
	,registerComposite: function() {
		haxe_ui_containers_menus_MenuItem.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_containers_menus__$MenuOptionBox_Builder;
	}
	,__class__: haxe_ui_containers_menus_MenuOptionBox
	,__properties__: $extend(haxe_ui_containers_menus_MenuItem.prototype.__properties__,{set_selected:"set_selected",get_selected:"get_selected",set_componentGroup:"set_componentGroup",get_componentGroup:"get_componentGroup"})
});
var haxe_ui_containers_menus__$MenuOptionBox_GroupBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuOptionBox.GroupBehaviour"] = haxe_ui_containers_menus__$MenuOptionBox_GroupBehaviour;
haxe_ui_containers_menus__$MenuOptionBox_GroupBehaviour.__name__ = "haxe.ui.containers.menus._MenuOptionBox.GroupBehaviour";
haxe_ui_containers_menus__$MenuOptionBox_GroupBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_menus__$MenuOptionBox_GroupBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var optionbox = this._component.findComponent(null,haxe_ui_components_OptionBox,false);
		if(optionbox == null) {
			optionbox = new haxe_ui_components_OptionBox();
			optionbox.set_styleNames("menuitem-optionbox");
			optionbox.scriptAccess = false;
			this._component.addComponent(optionbox);
		}
		optionbox.set_componentGroup(haxe_ui_util_Variant.toString(this._value));
	}
	,__class__: haxe_ui_containers_menus__$MenuOptionBox_GroupBehaviour
});
var haxe_ui_containers_menus__$MenuOptionBox_ShortcutTextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuOptionBox.ShortcutTextBehaviour"] = haxe_ui_containers_menus__$MenuOptionBox_ShortcutTextBehaviour;
haxe_ui_containers_menus__$MenuOptionBox_ShortcutTextBehaviour.__name__ = "haxe.ui.containers.menus._MenuOptionBox.ShortcutTextBehaviour";
haxe_ui_containers_menus__$MenuOptionBox_ShortcutTextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_menus__$MenuOptionBox_ShortcutTextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var label = this._component.findComponent("menuitem-shortcut-label",null,false);
		if(label != null) {
			label.set_text(haxe_ui_util_Variant.toString(this._value));
		}
	}
	,__class__: haxe_ui_containers_menus__$MenuOptionBox_ShortcutTextBehaviour
});
var haxe_ui_containers_menus__$MenuOptionBox_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuOptionBox.TextBehaviour"] = haxe_ui_containers_menus__$MenuOptionBox_TextBehaviour;
haxe_ui_containers_menus__$MenuOptionBox_TextBehaviour.__name__ = "haxe.ui.containers.menus._MenuOptionBox.TextBehaviour";
haxe_ui_containers_menus__$MenuOptionBox_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_menus__$MenuOptionBox_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var optionbox = this._component.findComponent(null,haxe_ui_components_OptionBox,false);
		if(optionbox == null) {
			optionbox = new haxe_ui_components_OptionBox();
			optionbox.set_styleNames("menuitem-optionbox");
			optionbox.scriptAccess = false;
			this._component.addComponent(optionbox);
		}
		optionbox.set_text(haxe_ui_util_Variant.toString(this._value));
	}
	,__class__: haxe_ui_containers_menus__$MenuOptionBox_TextBehaviour
});
var haxe_ui_containers_menus__$MenuOptionBox_SelectedBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuOptionBox.SelectedBehaviour"] = haxe_ui_containers_menus__$MenuOptionBox_SelectedBehaviour;
haxe_ui_containers_menus__$MenuOptionBox_SelectedBehaviour.__name__ = "haxe.ui.containers.menus._MenuOptionBox.SelectedBehaviour";
haxe_ui_containers_menus__$MenuOptionBox_SelectedBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_menus__$MenuOptionBox_SelectedBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var optionbox = this._component.findComponent(null,haxe_ui_components_OptionBox,false);
		if(optionbox == null) {
			optionbox = new haxe_ui_components_OptionBox();
			optionbox.set_styleNames("menuitem-optionbox");
			optionbox.scriptAccess = false;
			this._component.addComponent(optionbox);
		}
		optionbox.set_selected(haxe_ui_util_Variant.toBool(this._value));
	}
	,__class__: haxe_ui_containers_menus__$MenuOptionBox_SelectedBehaviour
});
var haxe_ui_containers_menus__$MenuOptionBox_Builder = function(component) {
	haxe_ui_core_CompositeBuilder.call(this,component);
};
$hxClasses["haxe.ui.containers.menus._MenuOptionBox.Builder"] = haxe_ui_containers_menus__$MenuOptionBox_Builder;
haxe_ui_containers_menus__$MenuOptionBox_Builder.__name__ = "haxe.ui.containers.menus._MenuOptionBox.Builder";
haxe_ui_containers_menus__$MenuOptionBox_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers_menus__$MenuOptionBox_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_optionbox: null
	,create: function() {
		this._optionbox = new haxe_ui_components_OptionBox();
		this._optionbox.set_styleNames("menuitem-optionbox");
		this._optionbox.scriptAccess = false;
		this._component.addComponent(this._optionbox);
		var label = new haxe_ui_components_Label();
		label.set_id("menuitem-shortcut-label");
		label.set_styleNames("menuitem-shortcut-label");
		label.scriptAccess = false;
		this._component.addComponent(label);
	}
	,__class__: haxe_ui_containers_menus__$MenuOptionBox_Builder
});
var haxe_ui_containers_menus_MenuSeparator = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.containers.menus.MenuSeparator"] = haxe_ui_containers_menus_MenuSeparator;
haxe_ui_containers_menus_MenuSeparator.__name__ = "haxe.ui.containers.menus.MenuSeparator";
haxe_ui_containers_menus_MenuSeparator.__super__ = haxe_ui_core_Component;
haxe_ui_containers_menus_MenuSeparator.prototype = $extend(haxe_ui_core_Component.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_menus_MenuSeparator();
	}
	,__class__: haxe_ui_containers_menus_MenuSeparator
});
var haxe_ui_containers_properties_Property = function() {
	haxe_ui_containers_HBox.call(this);
};
$hxClasses["haxe.ui.containers.properties.Property"] = haxe_ui_containers_properties_Property;
haxe_ui_containers_properties_Property.__name__ = "haxe.ui.containers.properties.Property";
haxe_ui_containers_properties_Property.__interfaces__ = [haxe_ui_core_IDataComponent];
haxe_ui_containers_properties_Property.__super__ = haxe_ui_containers_HBox;
haxe_ui_containers_properties_Property.prototype = $extend(haxe_ui_containers_HBox.prototype,{
	registerComposite: function() {
		haxe_ui_containers_HBox.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_containers_properties_PropertyBuilder;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_HBox.prototype.registerBehaviours.call(this);
		this.behaviours.register("label",haxe_ui_containers_properties__$Property_LabelBehaviour);
		this.behaviours.register("type",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromString("text"));
		this.behaviours.register("dataSource",haxe_ui_containers_properties__$Property_DataSourceBehaviour);
		this.behaviours.register("value",haxe_ui_containers_properties__$Property_PropertyValueBehaviour);
	}
	,get_label: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("label"));
	}
	,set_label: function(value) {
		this.behaviours.set("label",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"label");
		return value;
	}
	,get_type: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("type"));
	}
	,set_type: function(value) {
		this.behaviours.set("type",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"type");
		return value;
	}
	,get_dataSource: function() {
		return haxe_ui_util_Variant.toDataSource(this.behaviours.get("dataSource"));
	}
	,set_dataSource: function(value) {
		this.behaviours.set("dataSource",haxe_ui_util_Variant.fromDataSource(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"dataSource");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_HBox.prototype.cloneComponent.call(this);
		if(this.get_label() != null) {
			c.set_label(this.get_label());
		}
		if(this.get_type() != null) {
			c.set_type(this.get_type());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_properties_Property();
	}
	,__class__: haxe_ui_containers_properties_Property
	,__properties__: $extend(haxe_ui_containers_HBox.prototype.__properties__,{set_dataSource:"set_dataSource",get_dataSource:"get_dataSource",set_type:"set_type",get_type:"get_type",set_label:"set_label",get_label:"get_label"})
});
var haxe_ui_containers_properties__$Property_LabelBehaviour = function(property) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,property);
	this._property = property;
};
$hxClasses["haxe.ui.containers.properties._Property.LabelBehaviour"] = haxe_ui_containers_properties__$Property_LabelBehaviour;
haxe_ui_containers_properties__$Property_LabelBehaviour.__name__ = "haxe.ui.containers.properties._Property.LabelBehaviour";
haxe_ui_containers_properties__$Property_LabelBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers_properties__$Property_LabelBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	_property: null
	,set: function(value) {
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
		var builder = js_Boot.__cast(this._property._compositeBuilder , haxe_ui_containers_properties_PropertyBuilder);
		if(builder.label != null) {
			builder.label.set_text(haxe_ui_util_Variant.toString(value));
		}
	}
	,__class__: haxe_ui_containers_properties__$Property_LabelBehaviour
});
var haxe_ui_containers_properties__$Property_DataSourceBehaviour = function(property) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,property);
	this._property = property;
};
$hxClasses["haxe.ui.containers.properties._Property.DataSourceBehaviour"] = haxe_ui_containers_properties__$Property_DataSourceBehaviour;
haxe_ui_containers_properties__$Property_DataSourceBehaviour.__name__ = "haxe.ui.containers.properties._Property.DataSourceBehaviour";
haxe_ui_containers_properties__$Property_DataSourceBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers_properties__$Property_DataSourceBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	_property: null
	,get: function() {
		if(this._value == null) {
			this._value = haxe_ui_util_Variant.fromDataSource(new haxe_ui_data_ArrayDataSource());
		}
		return this._value;
	}
	,set: function(value) {
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
		var builder = js_Boot.__cast(this._property._compositeBuilder , haxe_ui_containers_properties_PropertyBuilder);
		if(builder.editor != null && ((builder.editor) instanceof haxe_ui_components_DropDown)) {
			(js_Boot.__cast(builder.editor , haxe_ui_components_DropDown)).set_dataSource(haxe_ui_util_Variant.toDataSource(value));
		}
	}
	,__class__: haxe_ui_containers_properties__$Property_DataSourceBehaviour
});
var haxe_ui_core_ComponentValueBehaviour = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.core.ComponentValueBehaviour"] = haxe_ui_core_ComponentValueBehaviour;
haxe_ui_core_ComponentValueBehaviour.__name__ = "haxe.ui.core.ComponentValueBehaviour";
haxe_ui_core_ComponentValueBehaviour.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_core_ComponentValueBehaviour.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		this._value = value;
		this._component.set_text(haxe_ui_util_Variant.toString(value));
	}
	,get: function() {
		return this._value;
	}
	,getDynamic: function() {
		return haxe_ui_util_Variant.toDynamic(this._value);
	}
	,__class__: haxe_ui_core_ComponentValueBehaviour
});
var haxe_ui_containers_properties__$Property_PropertyValueBehaviour = function(property) {
	haxe_ui_core_ComponentValueBehaviour.call(this,property);
	this._property = property;
};
$hxClasses["haxe.ui.containers.properties._Property.PropertyValueBehaviour"] = haxe_ui_containers_properties__$Property_PropertyValueBehaviour;
haxe_ui_containers_properties__$Property_PropertyValueBehaviour.__name__ = "haxe.ui.containers.properties._Property.PropertyValueBehaviour";
haxe_ui_containers_properties__$Property_PropertyValueBehaviour.__super__ = haxe_ui_core_ComponentValueBehaviour;
haxe_ui_containers_properties__$Property_PropertyValueBehaviour.prototype = $extend(haxe_ui_core_ComponentValueBehaviour.prototype,{
	_property: null
	,set: function(value) {
		haxe_ui_core_ComponentValueBehaviour.prototype.set.call(this,value);
		var builder = js_Boot.__cast(this._property._compositeBuilder , haxe_ui_containers_properties_PropertyBuilder);
		if(builder.editor != null) {
			builder.editor.set_value(haxe_ui_util_Variant.toDynamic(value));
		}
	}
	,__class__: haxe_ui_containers_properties__$Property_PropertyValueBehaviour
});
var haxe_ui_containers_properties_PropertyBuilder = function(component) {
	this.label = null;
	this.editor = null;
	haxe_ui_core_CompositeBuilder.call(this,component);
};
$hxClasses["haxe.ui.containers.properties.PropertyBuilder"] = haxe_ui_containers_properties_PropertyBuilder;
haxe_ui_containers_properties_PropertyBuilder.__name__ = "haxe.ui.containers.properties.PropertyBuilder";
haxe_ui_containers_properties_PropertyBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers_properties_PropertyBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	editor: null
	,label: null
	,__class__: haxe_ui_containers_properties_PropertyBuilder
});
var haxe_ui_containers_properties_PropertyGrid = function() {
	haxe_ui_containers_ScrollView.call(this);
};
$hxClasses["haxe.ui.containers.properties.PropertyGrid"] = haxe_ui_containers_properties_PropertyGrid;
haxe_ui_containers_properties_PropertyGrid.__name__ = "haxe.ui.containers.properties.PropertyGrid";
haxe_ui_containers_properties_PropertyGrid.__super__ = haxe_ui_containers_ScrollView;
haxe_ui_containers_properties_PropertyGrid.prototype = $extend(haxe_ui_containers_ScrollView.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_ScrollView.prototype.registerBehaviours.call(this);
		this.behaviours.register("popupStyleNames",haxe_ui_behaviours_DefaultBehaviour);
	}
	,get_popupStyleNames: function() {
		return haxe_ui_util_Variant.toString(this.behaviours.get("popupStyleNames"));
	}
	,set_popupStyleNames: function(value) {
		this.behaviours.set("popupStyleNames",haxe_ui_util_Variant.fromString(value));
		haxe_ui_binding_BindingManager.get_instance().componentPropChanged(this,"popupStyleNames");
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_ScrollView.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_properties_PropertyGrid();
	}
	,registerComposite: function() {
		haxe_ui_containers_ScrollView.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers_properties__$PropertyGrid_Events;
		this._compositeBuilderClass = haxe_ui_containers_properties__$PropertyGrid_Builder;
	}
	,__class__: haxe_ui_containers_properties_PropertyGrid
	,__properties__: $extend(haxe_ui_containers_ScrollView.prototype.__properties__,{set_popupStyleNames:"set_popupStyleNames",get_popupStyleNames:"get_popupStyleNames"})
});
var haxe_ui_containers_properties__$PropertyGrid_Events = function(scrollview) {
	haxe_ui_containers_ScrollViewEvents.call(this,scrollview);
};
$hxClasses["haxe.ui.containers.properties._PropertyGrid.Events"] = haxe_ui_containers_properties__$PropertyGrid_Events;
haxe_ui_containers_properties__$PropertyGrid_Events.__name__ = "haxe.ui.containers.properties._PropertyGrid.Events";
haxe_ui_containers_properties__$PropertyGrid_Events.__super__ = haxe_ui_containers_ScrollViewEvents;
haxe_ui_containers_properties__$PropertyGrid_Events.prototype = $extend(haxe_ui_containers_ScrollViewEvents.prototype,{
	__class__: haxe_ui_containers_properties__$PropertyGrid_Events
});
var haxe_ui_containers_properties__$PropertyGrid_Builder = function(scrollview) {
	haxe_ui_containers_ScrollViewBuilder.call(this,scrollview);
};
$hxClasses["haxe.ui.containers.properties._PropertyGrid.Builder"] = haxe_ui_containers_properties__$PropertyGrid_Builder;
haxe_ui_containers_properties__$PropertyGrid_Builder.__name__ = "haxe.ui.containers.properties._PropertyGrid.Builder";
haxe_ui_containers_properties__$PropertyGrid_Builder.__super__ = haxe_ui_containers_ScrollViewBuilder;
haxe_ui_containers_properties__$PropertyGrid_Builder.prototype = $extend(haxe_ui_containers_ScrollViewBuilder.prototype,{
	__class__: haxe_ui_containers_properties__$PropertyGrid_Builder
});
var haxe_ui_containers_properties_PropertyGroup = function() {
	haxe_ui_containers_VBox.call(this);
};
$hxClasses["haxe.ui.containers.properties.PropertyGroup"] = haxe_ui_containers_properties_PropertyGroup;
haxe_ui_containers_properties_PropertyGroup.__name__ = "haxe.ui.containers.properties.PropertyGroup";
haxe_ui_containers_properties_PropertyGroup.__super__ = haxe_ui_containers_VBox;
haxe_ui_containers_properties_PropertyGroup.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	registerComposite: function() {
		haxe_ui_containers_VBox.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers_properties__$PropertyGroup_Events;
		this._compositeBuilderClass = haxe_ui_containers_properties__$PropertyGroup_Builder;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
		this.behaviours.register("text",haxe_ui_containers_properties__$PropertyGroup_TextBehaviour);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_properties_PropertyGroup();
	}
	,__class__: haxe_ui_containers_properties_PropertyGroup
});
var haxe_ui_containers_properties__$PropertyGroup_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers.properties._PropertyGroup.TextBehaviour"] = haxe_ui_containers_properties__$PropertyGroup_TextBehaviour;
haxe_ui_containers_properties__$PropertyGroup_TextBehaviour.__name__ = "haxe.ui.containers.properties._PropertyGroup.TextBehaviour";
haxe_ui_containers_properties__$PropertyGroup_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers_properties__$PropertyGroup_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var label = this._component.findComponent("property-group-header-label");
		label.set_text(haxe_ui_util_Variant.toString(this._value));
	}
	,__class__: haxe_ui_containers_properties__$PropertyGroup_TextBehaviour
});
var haxe_ui_containers_properties__$PropertyGroup_Events = function(target) {
	haxe_ui_events_Events.call(this,target);
};
$hxClasses["haxe.ui.containers.properties._PropertyGroup.Events"] = haxe_ui_containers_properties__$PropertyGroup_Events;
haxe_ui_containers_properties__$PropertyGroup_Events.__name__ = "haxe.ui.containers.properties._PropertyGroup.Events";
haxe_ui_containers_properties__$PropertyGroup_Events.__super__ = haxe_ui_events_Events;
haxe_ui_containers_properties__$PropertyGroup_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	register: function() {
		var header = this._target.findComponent("property-group-header",haxe_ui_core_Component);
		if(header.hasEvent("click") == false) {
			header.registerEvent("click",$bind(this,this.onHeaderClicked));
		}
	}
	,unregister: function() {
		var header = this._target.findComponent("property-group-header",haxe_ui_core_Component);
		header.unregisterEvent("click",$bind(this,this.onHeaderClicked));
	}
	,onHeaderClicked: function(event) {
		var header = this._target.findComponent("property-group-header",haxe_ui_core_Component);
		var contents = this._target.findComponent("property-group-contents",haxe_ui_core_Component);
		if(header.hasClass(":expanded")) {
			header.swapClass(":collapsed",":expanded",true,true);
			contents.set_hidden(true);
		} else {
			header.swapClass(":expanded",":collapsed",true,true);
			contents.set_hidden(false);
		}
	}
	,__class__: haxe_ui_containers_properties__$PropertyGroup_Events
});
var haxe_ui_containers_properties__$PropertyGroup_Builder = function(propertyGroup) {
	haxe_ui_core_CompositeBuilder.call(this,propertyGroup);
	this._propertyGroup = propertyGroup;
};
$hxClasses["haxe.ui.containers.properties._PropertyGroup.Builder"] = haxe_ui_containers_properties__$PropertyGroup_Builder;
haxe_ui_containers_properties__$PropertyGroup_Builder.__name__ = "haxe.ui.containers.properties._PropertyGroup.Builder";
haxe_ui_containers_properties__$PropertyGroup_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers_properties__$PropertyGroup_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_propertyGroup: null
	,_propertyGroupHeader: null
	,_propertyGroupContents: null
	,onReady: function() {
		var propGrid = this._component.findAncestor(null,haxe_ui_containers_properties_PropertyGrid);
		var _g = 0;
		var _g1 = this._propertyGroupContents.findComponents(null,haxe_ui_components_DropDown);
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_handlerStyleNames(propGrid.get_popupStyleNames());
		}
	}
	,create: function() {
		this._propertyGroupHeader = new haxe_ui_containers_HBox();
		this._propertyGroupHeader.scriptAccess = false;
		this._propertyGroupHeader.addClass("property-group-header");
		this._propertyGroupHeader.addClass(":expanded");
		this._propertyGroupHeader.set_id("property-group-header");
		var image = new haxe_ui_components_Image();
		image.addClass("property-group-header-icon");
		image.scriptAccess = false;
		this._propertyGroupHeader.addComponent(image);
		var label = new haxe_ui_components_Label();
		label.addClass("property-group-header-label");
		label.set_id("property-group-header-label");
		label.scriptAccess = false;
		this._propertyGroupHeader.addComponent(label);
		this._propertyGroup.addComponent(this._propertyGroupHeader);
		this._propertyGroupContents = new haxe_ui_containers_Grid();
		this._propertyGroupContents.scriptAccess = false;
		this._propertyGroupContents.addClass("property-group-contents");
		this._propertyGroupContents.set_id("property-group-contents");
		this._propertyGroup.addComponent(this._propertyGroupContents);
	}
	,addComponent: function(child) {
		if(((child) instanceof haxe_ui_containers_properties_Property)) {
			var prop = js_Boot.__cast(child , haxe_ui_containers_properties_Property);
			var labelContainer = new haxe_ui_containers_Box();
			labelContainer.scriptAccess = false;
			labelContainer.addClass("property-group-item-label-container");
			this._propertyGroupContents.addComponent(labelContainer);
			var label = new haxe_ui_components_Label();
			label.scriptAccess = false;
			label.set_text(prop.get_label());
			label.addClass("property-group-item-label");
			labelContainer.addComponent(label);
			(js_Boot.__cast(prop._compositeBuilder , haxe_ui_containers_properties_PropertyBuilder)).label = label;
			var editorContainer = new haxe_ui_containers_Box();
			editorContainer.scriptAccess = false;
			editorContainer.addClass("property-group-item-editor-container");
			this._propertyGroupContents.addComponent(editorContainer);
			var editor = this.buildEditor(prop);
			editor.scriptAccess = false;
			editor.set_id(child.get_id());
			editor.addClass("property-group-item-editor");
			editorContainer.addComponent(editor);
			editor.registerEvent("change",$bind(this,this.onPropertyEditorChange));
			(js_Boot.__cast(prop._compositeBuilder , haxe_ui_containers_properties_PropertyBuilder)).editor = editor;
			this._propertyGroup.registerInternalEvents(haxe_ui_containers_properties__$PropertyGroup_Events,true);
			return editor;
		}
		return null;
	}
	,onPropertyEditorChange: function(event) {
		var newEvent = new haxe_ui_events_UIEvent("change");
		newEvent.target = event.target;
		this._component.findAncestor(null,haxe_ui_containers_properties_PropertyGrid).dispatch(newEvent);
	}
	,buildEditor: function(property) {
		var type = property.get_type();
		var c = null;
		switch(type) {
		case "boolean":
			c = new haxe_ui_components_CheckBox();
			c.set_value(property.get_value());
			break;
		case "date":
			c = new haxe_ui_components_DropDown();
			(js_Boot.__cast(c , haxe_ui_components_DropDown)).set_type("date");
			break;
		case "int":
			c = new haxe_ui_components_NumberStepper();
			c.set_value(property.get_value());
			break;
		case "list":
			c = new haxe_ui_components_DropDown();
			(js_Boot.__cast(c , haxe_ui_components_DropDown)).set_dataSource(property.get_dataSource());
			var indexToSelect = 0;
			var _g = 0;
			var _g1 = property.get_dataSource().get_size();
			while(_g < _g1) {
				var i = _g++;
				if(property.get_dataSource().get(i).value == property.get_value()) {
					indexToSelect = i;
					break;
				}
			}
			(js_Boot.__cast(c , haxe_ui_components_DropDown)).set_selectedIndex(indexToSelect);
			break;
		case "text":
			c = new haxe_ui_components_TextField();
			c.set_value(property.get_value());
			break;
		default:
			c = new haxe_ui_components_TextField();
			c.set_value(property.get_value());
		}
		return c;
	}
	,__class__: haxe_ui_containers_properties__$PropertyGroup_Builder
});
var haxe_ui_core_BasicItemRenderer = function() {
	haxe_ui_core_ItemRenderer.call(this);
	this.set_percentWidth(100);
	var hbox = new haxe_ui_containers_HBox();
	hbox.set_percentWidth(100);
	var icon = new haxe_ui_components_Image();
	icon.set_id("icon");
	icon.set_verticalAlign("center");
	icon.hide();
	hbox.addComponent(icon);
	var label = new haxe_ui_components_Label();
	label.set_id("text");
	label.set_percentWidth(100);
	label.set_verticalAlign("center");
	label.hide();
	hbox.addComponent(label);
	this.addComponent(hbox);
};
$hxClasses["haxe.ui.core.BasicItemRenderer"] = haxe_ui_core_BasicItemRenderer;
haxe_ui_core_BasicItemRenderer.__name__ = "haxe.ui.core.BasicItemRenderer";
haxe_ui_core_BasicItemRenderer.__super__ = haxe_ui_core_ItemRenderer;
haxe_ui_core_BasicItemRenderer.prototype = $extend(haxe_ui_core_ItemRenderer.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_ItemRenderer.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ItemRenderer.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_core_BasicItemRenderer();
	}
	,__class__: haxe_ui_core_BasicItemRenderer
});
var haxe_ui_core_ComponentClassMap = function() {
	this._map = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.core.ComponentClassMap"] = haxe_ui_core_ComponentClassMap;
haxe_ui_core_ComponentClassMap.__name__ = "haxe.ui.core.ComponentClassMap";
haxe_ui_core_ComponentClassMap.__properties__ = {get_instance:"get_instance"};
haxe_ui_core_ComponentClassMap.get_instance = function() {
	if(haxe_ui_core_ComponentClassMap._instance == null) {
		haxe_ui_core_ComponentClassMap._instance = new haxe_ui_core_ComponentClassMap();
	}
	return haxe_ui_core_ComponentClassMap._instance;
};
haxe_ui_core_ComponentClassMap.get = function(alias) {
	alias = StringTools.replace(alias,"-","").toLowerCase();
	return haxe_ui_core_ComponentClassMap.get_instance().getClassName(alias);
};
haxe_ui_core_ComponentClassMap.register = function(alias,className) {
	haxe_ui_core_ComponentClassMap.get_instance().registerClassName(alias.toLowerCase(),className);
};
haxe_ui_core_ComponentClassMap.list = function() {
	return haxe_ds_StringMap.keysIterator(haxe_ui_core_ComponentClassMap.get_instance()._map.h);
};
haxe_ui_core_ComponentClassMap.clear = function() {
	haxe_ui_core_ComponentClassMap.get_instance()._map = new haxe_ds_StringMap();
};
haxe_ui_core_ComponentClassMap.hasClass = function(className) {
	return haxe_ui_core_ComponentClassMap.get_instance().hasClassName(className);
};
haxe_ui_core_ComponentClassMap.prototype = {
	_map: null
	,getClassName: function(alias) {
		return this._map.h[alias];
	}
	,registerClassName: function(alias,className) {
		this._map.h[alias] = className;
	}
	,hasClassName: function(className) {
		var k = haxe_ds_StringMap.keysIterator(this._map.h);
		while(k.hasNext()) {
			var k1 = k.next();
			if(this._map.h[k1] == className) {
				return true;
			}
		}
		return false;
	}
	,__class__: haxe_ui_core_ComponentClassMap
};
var haxe_ui_core_ComponentTextBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.core.ComponentTextBehaviour"] = haxe_ui_core_ComponentTextBehaviour;
haxe_ui_core_ComponentTextBehaviour.__name__ = "haxe.ui.core.ComponentTextBehaviour";
haxe_ui_core_ComponentTextBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_core_ComponentTextBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		this._value = value;
		this._component.dispatch(new haxe_ui_events_UIEvent("propertyChange",null,"text"));
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
	}
	,__class__: haxe_ui_core_ComponentTextBehaviour
});
var haxe_ui_core_ComponentDisabledBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.core.ComponentDisabledBehaviour"] = haxe_ui_core_ComponentDisabledBehaviour;
haxe_ui_core_ComponentDisabledBehaviour.__name__ = "haxe.ui.core.ComponentDisabledBehaviour";
haxe_ui_core_ComponentDisabledBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_core_ComponentDisabledBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	get: function() {
		return haxe_ui_util_Variant.fromBool(this._component.hasClass(":disabled"));
	}
	,validateData: function() {
		this._component.disableInteractivity(haxe_ui_util_Variant.toBool(this._value),true,true);
	}
	,__class__: haxe_ui_core_ComponentDisabledBehaviour
});
var haxe_ui_core_ComponentFieldMap = function() { };
$hxClasses["haxe.ui.core.ComponentFieldMap"] = haxe_ui_core_ComponentFieldMap;
haxe_ui_core_ComponentFieldMap.__name__ = "haxe.ui.core.ComponentFieldMap";
haxe_ui_core_ComponentFieldMap.mapField = function(name) {
	if(Object.prototype.hasOwnProperty.call(haxe_ui_core_ComponentFieldMap.MAP.h,name)) {
		return haxe_ui_core_ComponentFieldMap.MAP.h[name];
	}
	return name;
};
var haxe_ui_core_ImageDisplay = function() {
	this._isValidating = false;
	this._isAllInvalid = false;
	this._invalidationFlags = new haxe_ds_StringMap();
	haxe_ui_backend_ImageDisplayImpl.call(this);
};
$hxClasses["haxe.ui.core.ImageDisplay"] = haxe_ui_core_ImageDisplay;
haxe_ui_core_ImageDisplay.__name__ = "haxe.ui.core.ImageDisplay";
haxe_ui_core_ImageDisplay.__super__ = haxe_ui_backend_ImageDisplayImpl;
haxe_ui_core_ImageDisplay.prototype = $extend(haxe_ui_backend_ImageDisplayImpl.prototype,{
	_invalidationFlags: null
	,_isAllInvalid: null
	,_isValidating: null
	,get_left: function() {
		return this._left;
	}
	,set_left: function(value) {
		if(value == this._left) {
			return value;
		}
		this._left = value;
		this.invalidateComponent("position");
		return value;
	}
	,get_top: function() {
		return this._top;
	}
	,set_top: function(value) {
		if(value == this._top) {
			return value;
		}
		this._top = value;
		this.invalidateComponent("position");
		return value;
	}
	,set_imageWidth: function(value) {
		if(this._imageWidth == value || value <= 0) {
			return value;
		}
		this._imageWidth = value;
		this.invalidateComponent("display");
		return value;
	}
	,get_imageWidth: function() {
		return this._imageWidth;
	}
	,set_imageHeight: function(value) {
		if(this._imageHeight == value || value <= 0) {
			return value;
		}
		this._imageHeight = value;
		this.invalidateComponent("display");
		return value;
	}
	,get_imageHeight: function() {
		return this._imageHeight;
	}
	,get_imageInfo: function() {
		return this._imageInfo;
	}
	,set_imageInfo: function(value) {
		if(value == this._imageInfo) {
			return value;
		}
		this._imageInfo = value;
		this._imageWidth = this._imageInfo.width;
		this._imageHeight = this._imageInfo.height;
		this.invalidateComponent("data");
		this.invalidateComponent("display");
		return value;
	}
	,get_imageClipRect: function() {
		return this._imageClipRect;
	}
	,set_imageClipRect: function(value) {
		this._imageClipRect = value;
		this.invalidateComponent("display");
		return value;
	}
	,isComponentInvalid: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(this._isAllInvalid == true) {
			return true;
		}
		if(flag == "all") {
			var value = haxe_ds_StringMap.valueIterator(this._invalidationFlags.h);
			while(value.hasNext()) {
				var value1 = value.next();
				return true;
			}
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag);
	}
	,invalidateComponent: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(flag == "all") {
			this._isAllInvalid = true;
			this.parentComponent.invalidateComponent("imageDisplay");
		} else if(!Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag)) {
			this._invalidationFlags.h[flag] = true;
			this.parentComponent.invalidateComponent("imageDisplay");
		}
	}
	,validateComponent: function() {
		if(this._isValidating == true || this.isComponentInvalid() == false) {
			return;
		}
		this._isValidating = true;
		this.handleValidate();
		var flag = haxe_ds_StringMap.keysIterator(this._invalidationFlags.h);
		while(flag.hasNext()) {
			var flag1 = flag.next();
			var _this = this._invalidationFlags;
			if(Object.prototype.hasOwnProperty.call(_this.h,flag1)) {
				delete(_this.h[flag1]);
			}
		}
		this._isAllInvalid = false;
		this._isValidating = false;
	}
	,handleValidate: function() {
		var dataInvalid = this.isComponentInvalid("data");
		var positionInvalid = this.isComponentInvalid("position");
		var displayInvalid = this.isComponentInvalid("display");
		if(dataInvalid) {
			this.validateData();
		}
		if(positionInvalid) {
			this.validatePosition();
		}
		if(displayInvalid) {
			this.validateDisplay();
		}
	}
	,__class__: haxe_ui_core_ImageDisplay
	,__properties__: {set_imageClipRect:"set_imageClipRect",get_imageClipRect:"get_imageClipRect",set_imageInfo:"set_imageInfo",get_imageInfo:"get_imageInfo",set_imageHeight:"set_imageHeight",get_imageHeight:"get_imageHeight",set_imageWidth:"set_imageWidth",get_imageWidth:"get_imageWidth",set_top:"set_top",get_top:"get_top",set_left:"set_left",get_left:"get_left"}
});
var haxe_ui_core_LayoutClassMap = function() {
	this._map = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.core.LayoutClassMap"] = haxe_ui_core_LayoutClassMap;
haxe_ui_core_LayoutClassMap.__name__ = "haxe.ui.core.LayoutClassMap";
haxe_ui_core_LayoutClassMap.__properties__ = {get_instance:"get_instance"};
haxe_ui_core_LayoutClassMap.get_instance = function() {
	if(haxe_ui_core_LayoutClassMap._instance == null) {
		haxe_ui_core_LayoutClassMap._instance = new haxe_ui_core_LayoutClassMap();
	}
	return haxe_ui_core_LayoutClassMap._instance;
};
haxe_ui_core_LayoutClassMap.get = function(alias) {
	return haxe_ui_core_LayoutClassMap.get_instance().getClassName(alias);
};
haxe_ui_core_LayoutClassMap.register = function(alias,className) {
	haxe_ui_core_LayoutClassMap.get_instance().registerClassName(StringTools.replace(alias,"layout",""),className);
	haxe_ui_core_LayoutClassMap.get_instance().registerClassName(alias,className);
};
haxe_ui_core_LayoutClassMap.list = function() {
	return haxe_ds_StringMap.keysIterator(haxe_ui_core_LayoutClassMap.get_instance()._map.h);
};
haxe_ui_core_LayoutClassMap.prototype = {
	_map: null
	,getClassName: function(alias) {
		return this._map.h[alias];
	}
	,registerClassName: function(alias,className) {
		this._map.h[alias] = className;
	}
	,__class__: haxe_ui_core_LayoutClassMap
};
var haxe_ui_core_Platform = function() {
	haxe_ui_backend_PlatformImpl.call(this);
};
$hxClasses["haxe.ui.core.Platform"] = haxe_ui_core_Platform;
haxe_ui_core_Platform.__name__ = "haxe.ui.core.Platform";
haxe_ui_core_Platform.__properties__ = {get_instance:"get_instance",get_hscrollHeight:"get_hscrollHeight",get_vscrollWidth:"get_vscrollWidth"};
haxe_ui_core_Platform.get_vscrollWidth = function() {
	return haxe_ui_core_Platform.get_instance().getMetric("patform.metrics.vscroll.width");
};
haxe_ui_core_Platform.get_hscrollHeight = function() {
	return haxe_ui_core_Platform.get_instance().getMetric("patform.metrics.hscroll.height");
};
haxe_ui_core_Platform.get_instance = function() {
	if(haxe_ui_core_Platform._instance == null) {
		haxe_ui_core_Platform._instance = new haxe_ui_core_Platform();
	}
	return haxe_ui_core_Platform._instance;
};
haxe_ui_core_Platform.__super__ = haxe_ui_backend_PlatformImpl;
haxe_ui_core_Platform.prototype = $extend(haxe_ui_backend_PlatformImpl.prototype,{
	getMetric: function(id) {
		return haxe_ui_backend_PlatformImpl.prototype.getMetric.call(this,id);
	}
	,__class__: haxe_ui_core_Platform
});
var haxe_ui_core_Screen = function() {
	haxe_ui_backend_ScreenImpl.call(this);
	this.rootComponents = [];
	this._eventMap = new haxe_ui_util_EventMap();
};
$hxClasses["haxe.ui.core.Screen"] = haxe_ui_core_Screen;
haxe_ui_core_Screen.__name__ = "haxe.ui.core.Screen";
haxe_ui_core_Screen.__properties__ = {get_instance:"get_instance"};
haxe_ui_core_Screen.get_instance = function() {
	if(haxe_ui_core_Screen._instance == null) {
		haxe_ui_core_Screen._instance = new haxe_ui_core_Screen();
	}
	return haxe_ui_core_Screen._instance;
};
haxe_ui_core_Screen.__super__ = haxe_ui_backend_ScreenImpl;
haxe_ui_core_Screen.prototype = $extend(haxe_ui_backend_ScreenImpl.prototype,{
	rootComponents: null
	,_eventMap: null
	,addComponent: function(component) {
		component._hasScreen = true;
		haxe_ui_backend_ScreenImpl.prototype.addComponent.call(this,component);
		component.ready();
		if(this.rootComponents.indexOf(component) == -1) {
			this.rootComponents.push(component);
			haxe_ui_focus_FocusManager.get_instance().pushView(component);
			component.registerEvent("resize",$bind(this,this._onRootComponentResize));
		}
		return component;
	}
	,removeComponent: function(component) {
		component._hasScreen = false;
		haxe_ui_backend_ScreenImpl.prototype.removeComponent.call(this,component);
		component.set_depth(-1);
		HxOverrides.remove(this.rootComponents,component);
		component.unregisterEvent("resize",$bind(this,this._onRootComponentResize));
		return component;
	}
	,setComponentIndex: function(child,index) {
		if(index >= 0 && index <= this.rootComponents.length) {
			this.handleSetComponentIndex(child,index);
			HxOverrides.remove(this.rootComponents,child);
			this.rootComponents.splice(index,0,child);
		}
		return child;
	}
	,refreshStyleRootComponents: function() {
		var _g = 0;
		var _g1 = this.rootComponents;
		while(_g < _g1.length) {
			var component = _g1[_g];
			++_g;
			this._refreshStyleComponent(component);
		}
	}
	,_refreshStyleComponent: function(component) {
		var _g = 0;
		var _g1 = component._children == null ? [] : component._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.invalidateComponent("style");
			child.invalidateComponent("display");
			this._refreshStyleComponent(child);
		}
	}
	,_onRootComponentResize: function(e) {
		this._refreshStyleComponent(e.target);
	}
	,messageBox: function(message,title,type,modal,callback) {
		if(modal == null) {
			modal = true;
		}
		return haxe_ui_Toolkit.messageBox(message,title,type,modal,callback);
	}
	,dialog: function(contents,title,buttons,modal,callback) {
		if(modal == null) {
			modal = true;
		}
		return haxe_ui_Toolkit.dialog(contents,title,buttons,modal,callback);
	}
	,invalidateAll: function() {
		var _g = 0;
		var _g1 = this.rootComponents;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			this.invalidateChildren(c);
		}
	}
	,invalidateChildren: function(c) {
		var _g = 0;
		var _g1 = c._children == null ? [] : c._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.invalidateChildren(child);
		}
		c.invalidateComponent();
	}
	,onThemeChanged: function() {
		var _g = 0;
		var _g1 = this.rootComponents;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			this.onThemeChangedChildren(c);
		}
	}
	,onThemeChangedChildren: function(c) {
		var _g = 0;
		var _g1 = c._children == null ? [] : c._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.onThemeChangedChildren(child);
		}
		c.onThemeChanged();
	}
	,registerEvent: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(this.supportsEvent(type) == true) {
			if(this._eventMap.add(type,listener,priority) == true) {
				this.mapEvent(type,$bind(this,this._onMappedEvent));
			}
		}
	}
	,unregisterEvent: function(type,listener) {
		if(this._eventMap.remove(type,listener) == true) {
			this.unmapEvent(type,$bind(this,this._onMappedEvent));
		}
	}
	,_onMappedEvent: function(event) {
		this._eventMap.invoke(event.type,event);
	}
	,__class__: haxe_ui_core_Screen
});
var haxe_ui_core_TextDisplayData = function() {
	this.wordWrap = false;
	this.multiline = false;
};
$hxClasses["haxe.ui.core.TextDisplayData"] = haxe_ui_core_TextDisplayData;
haxe_ui_core_TextDisplayData.__name__ = "haxe.ui.core.TextDisplayData";
haxe_ui_core_TextDisplayData.prototype = {
	multiline: null
	,wordWrap: null
	,__class__: haxe_ui_core_TextDisplayData
};
var haxe_ui_core_TextDisplay = function() {
	this._depth = -1;
	this._isValidating = false;
	this._isAllInvalid = false;
	this._invalidationFlags = new haxe_ds_StringMap();
	haxe_ui_backend_TextDisplayImpl.call(this);
};
$hxClasses["haxe.ui.core.TextDisplay"] = haxe_ui_core_TextDisplay;
haxe_ui_core_TextDisplay.__name__ = "haxe.ui.core.TextDisplay";
haxe_ui_core_TextDisplay.__interfaces__ = [haxe_ui_validation_IValidating];
haxe_ui_core_TextDisplay.__super__ = haxe_ui_backend_TextDisplayImpl;
haxe_ui_core_TextDisplay.prototype = $extend(haxe_ui_backend_TextDisplayImpl.prototype,{
	_invalidationFlags: null
	,_isAllInvalid: null
	,_isValidating: null
	,get_textStyle: function() {
		return this._textStyle;
	}
	,set_textStyle: function(value) {
		var _gthis = this;
		if(value == null) {
			return value;
		}
		if(value.fontName != null && this._textStyle == null || this._textStyle != null && value.fontName != this._textStyle.fontName) {
			haxe_ui_ToolkitAssets.get_instance().getFont(value.fontName,function(fontInfo) {
				_gthis._fontInfo = fontInfo;
				_gthis.invalidateComponent("style");
				_gthis.parentComponent.invalidateComponent("style");
			});
		} else {
			this.invalidateComponent("style");
		}
		this._textStyle = value;
		return value;
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(value) {
		if(value == this._text) {
			return value;
		}
		this._text = value;
		this._htmlText = null;
		this.invalidateComponent("data");
		return value;
	}
	,get_htmlText: function() {
		return this._htmlText;
	}
	,set_htmlText: function(value) {
		if(value == this._htmlText) {
			return value;
		}
		this._htmlText = value;
		this._text = null;
		this.invalidateComponent("data");
		return value;
	}
	,get_left: function() {
		return this._left;
	}
	,set_left: function(value) {
		if(value == this._left) {
			return value;
		}
		this.invalidateComponent("position");
		this._left = value;
		return value;
	}
	,get_top: function() {
		return this._top;
	}
	,set_top: function(value) {
		if(value == this._top) {
			return value;
		}
		this.invalidateComponent("position");
		this._top = value;
		return value;
	}
	,set_width: function(value) {
		if(this._width == value) {
			return value;
		}
		this.invalidateComponent("display");
		this._width = value;
		return value;
	}
	,get_width: function() {
		return this._width;
	}
	,set_height: function(value) {
		if(this._height == value) {
			return value;
		}
		this.invalidateComponent("display");
		this._height = value;
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,textWidth: null
	,get_textWidth: function() {
		if(this._text == null || this._text.length == 0) {
			return 0;
		}
		if(this.isComponentInvalid() == true) {
			this.validateComponent();
		}
		return this._textWidth;
	}
	,textHeight: null
	,get_textHeight: function() {
		if(this.isComponentInvalid() == true) {
			this.validateComponent();
		}
		return this._textHeight;
	}
	,get_multiline: function() {
		return this._displayData.multiline;
	}
	,set_multiline: function(value) {
		if(value == this._displayData.multiline) {
			return value;
		}
		this.invalidateComponent("style");
		this._displayData.multiline = value;
		return value;
	}
	,get_wordWrap: function() {
		return this._displayData.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value == this._displayData.wordWrap) {
			return value;
		}
		this.invalidateComponent("style");
		this._displayData.wordWrap = value;
		return value;
	}
	,isComponentInvalid: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(this._isAllInvalid == true) {
			return true;
		}
		if(flag == "all") {
			var value = haxe_ds_StringMap.valueIterator(this._invalidationFlags.h);
			while(value.hasNext()) {
				var value1 = value.next();
				return true;
			}
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag);
	}
	,invalidateComponent: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(flag == "all") {
			this._isAllInvalid = true;
			this.parentComponent.invalidateComponent("textDisplay");
		} else if(!Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag)) {
			this._invalidationFlags.h[flag] = true;
			this.parentComponent.invalidateComponent("textDisplay");
		}
	}
	,_depth: null
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		if(this._depth == value) {
			return value;
		}
		this._depth = value;
		return value;
	}
	,updateComponentDisplay: function() {
	}
	,validateComponent: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		if(this._isValidating == true || this.isComponentInvalid() == false) {
			return;
		}
		this._isValidating = true;
		this.validateComponentInternal();
		var flag = haxe_ds_StringMap.keysIterator(this._invalidationFlags.h);
		while(flag.hasNext()) {
			var flag1 = flag.next();
			var _this = this._invalidationFlags;
			if(Object.prototype.hasOwnProperty.call(_this.h,flag1)) {
				delete(_this.h[flag1]);
			}
		}
		this._isAllInvalid = false;
		this._isValidating = false;
	}
	,validateComponentInternal: function() {
		var dataInvalid = this.isComponentInvalid("data");
		var styleInvalid = this.isComponentInvalid("style");
		var positionInvalid = this.isComponentInvalid("position");
		var displayInvalid = this.isComponentInvalid("display");
		var measureInvalid = this.isComponentInvalid("measure");
		if(dataInvalid) {
			this.validateData();
		}
		if(styleInvalid) {
			if(this.validateStyle()) {
				measureInvalid = true;
			}
		}
		if(positionInvalid || styleInvalid) {
			this.validatePosition();
		}
		if(displayInvalid) {
			this.validateDisplay();
		}
		if(dataInvalid || displayInvalid || measureInvalid) {
			var oldTextWidth = this.get_textWidth();
			var oldTextHeight = this.get_textHeight();
			this.measureText();
			if(this.get_textWidth() != oldTextWidth || this.get_textHeight() != oldTextHeight) {
				this.parentComponent.invalidateComponent("layout");
			}
		}
	}
	,__class__: haxe_ui_core_TextDisplay
	,__properties__: $extend(haxe_ui_backend_TextDisplayImpl.prototype.__properties__,{set_depth:"set_depth",get_depth:"get_depth",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_multiline:"set_multiline",get_multiline:"get_multiline",get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_top:"set_top",get_top:"get_top",set_left:"set_left",get_left:"get_left",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_text:"set_text",get_text:"get_text",set_textStyle:"set_textStyle",get_textStyle:"get_textStyle"})
});
var haxe_ui_core_TextInputData = function() {
	this.onChangedCallback = null;
	this.onScrollCallback = null;
	this.vscrollNativeWheel = false;
	this.vscrollPageStep = null;
	this.vscrollPageSize = 0;
	this.vscrollMax = 0;
	this.vscrollPos = 0;
	this.hscrollPageSize = 0;
	this.hscrollMax = 0;
	this.hscrollPos = 0;
	this.password = false;
};
$hxClasses["haxe.ui.core.TextInputData"] = haxe_ui_core_TextInputData;
haxe_ui_core_TextInputData.__name__ = "haxe.ui.core.TextInputData";
haxe_ui_core_TextInputData.prototype = {
	password: null
	,hscrollPos: null
	,hscrollMax: null
	,hscrollPageSize: null
	,vscrollPos: null
	,vscrollMax: null
	,vscrollPageSize: null
	,vscrollPageStep: null
	,vscrollNativeWheel: null
	,onScrollCallback: null
	,onChangedCallback: null
	,__class__: haxe_ui_core_TextInputData
};
var haxe_ui_core_TextInput = function() {
	this._depth = -1;
	this._isValidating = false;
	this._isAllInvalid = false;
	this._invalidationFlags = new haxe_ds_StringMap();
	haxe_ui_backend_TextInputImpl.call(this);
	this._isAllInvalid = true;
};
$hxClasses["haxe.ui.core.TextInput"] = haxe_ui_core_TextInput;
haxe_ui_core_TextInput.__name__ = "haxe.ui.core.TextInput";
haxe_ui_core_TextInput.__interfaces__ = [haxe_ui_validation_IValidating];
haxe_ui_core_TextInput.__super__ = haxe_ui_backend_TextInputImpl;
haxe_ui_core_TextInput.prototype = $extend(haxe_ui_backend_TextInputImpl.prototype,{
	_invalidationFlags: null
	,_isAllInvalid: null
	,_isValidating: null
	,focus: function() {
		haxe_ui_backend_TextInputImpl.prototype.focus.call(this);
	}
	,blur: function() {
		haxe_ui_backend_TextInputImpl.prototype.blur.call(this);
	}
	,get_textStyle: function() {
		return this._textStyle;
	}
	,set_textStyle: function(value) {
		var _gthis = this;
		if(value == null) {
			return value;
		}
		if(value.fontName != null && this._textStyle == null || this._textStyle != null && value.fontName != this._textStyle.fontName) {
			haxe_ui_ToolkitAssets.get_instance().getFont(value.fontName,function(fontInfo) {
				_gthis._fontInfo = fontInfo;
				_gthis.invalidateComponent("style");
			});
		} else {
			this.invalidateComponent("style");
		}
		this._textStyle = value;
		return value;
	}
	,data: null
	,get_data: function() {
		return this._inputData;
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(value) {
		if(value == this._text) {
			return value;
		}
		this._text = value;
		this.invalidateComponent("data");
		return value;
	}
	,get_password: function() {
		return this._inputData.password;
	}
	,set_password: function(value) {
		if(value == this._inputData.password) {
			return value;
		}
		this._inputData.password = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_left: function() {
		return this._left;
	}
	,set_left: function(value) {
		if(value == this._left) {
			return value;
		}
		this._left = value;
		this.invalidateComponent("position");
		return value;
	}
	,get_top: function() {
		return this._top;
	}
	,set_top: function(value) {
		if(value == this._top) {
			return value;
		}
		this._top = value;
		this.invalidateComponent("position");
		return value;
	}
	,set_width: function(value) {
		if(this._width == value) {
			return value;
		}
		this._width = value;
		this.invalidateComponent("display");
		return value;
	}
	,get_width: function() {
		return this._width;
	}
	,set_height: function(value) {
		if(this._height == value) {
			return value;
		}
		this._height = value;
		this.invalidateComponent("display");
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,textWidth: null
	,get_textWidth: function() {
		if(this._text == null || this._text.length == 0) {
			return 0;
		}
		if(this.isComponentInvalid() == true) {
			this.validateComponent();
		}
		return this._textWidth;
	}
	,textHeight: null
	,get_textHeight: function() {
		var tmp = this._text == null || this._text.length == 0;
		if(this.isComponentInvalid() == true) {
			this.validateComponent();
		}
		return this._textHeight;
	}
	,get_multiline: function() {
		return this._displayData.multiline;
	}
	,set_multiline: function(value) {
		if(value == this._displayData.multiline) {
			return value;
		}
		this._displayData.multiline = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_wordWrap: function() {
		return this._displayData.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value == this._displayData.wordWrap) {
			return value;
		}
		this._displayData.wordWrap = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_hscrollPos: function() {
		return this._inputData.hscrollPos;
	}
	,set_hscrollPos: function(value) {
		if(value == this._inputData.hscrollPos) {
			return value;
		}
		this._inputData.hscrollPos = value;
		this.invalidateComponent("data");
		return value;
	}
	,hscrollMax: null
	,get_hscrollMax: function() {
		return this._inputData.hscrollMax;
	}
	,hscrollPageSize: null
	,get_hscrollPageSize: function() {
		return this._inputData.hscrollPageSize;
	}
	,get_vscrollPos: function() {
		return this._inputData.vscrollPos;
	}
	,set_vscrollPos: function(value) {
		if(value == this._inputData.vscrollPos) {
			return value;
		}
		this._inputData.vscrollPos = value;
		this.invalidateComponent("data");
		return value;
	}
	,vscrollMax: null
	,get_vscrollMax: function() {
		return this._inputData.vscrollMax;
	}
	,vscrollPageSize: null
	,get_vscrollPageSize: function() {
		return this._inputData.vscrollPageSize;
	}
	,isComponentInvalid: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(this._isAllInvalid == true) {
			return true;
		}
		if(flag == "all") {
			var value = haxe_ds_StringMap.valueIterator(this._invalidationFlags.h);
			while(value.hasNext()) {
				var value1 = value.next();
				return true;
			}
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag);
	}
	,invalidateComponent: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(flag == "all") {
			this._isAllInvalid = true;
			this.parentComponent.invalidateComponent("textInput");
		} else if(!Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag)) {
			this._invalidationFlags.h[flag] = true;
			this.parentComponent.invalidateComponent("textInput");
		}
	}
	,_depth: null
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		if(this._depth == value) {
			return value;
		}
		this._depth = value;
		return value;
	}
	,updateComponentDisplay: function() {
	}
	,validateComponent: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		if(this._isValidating == true || this.isComponentInvalid() == false) {
			return;
		}
		this._isValidating = true;
		this.validateComponentInternal();
		var flag = haxe_ds_StringMap.keysIterator(this._invalidationFlags.h);
		while(flag.hasNext()) {
			var flag1 = flag.next();
			var _this = this._invalidationFlags;
			if(Object.prototype.hasOwnProperty.call(_this.h,flag1)) {
				delete(_this.h[flag1]);
			}
		}
		this._isAllInvalid = false;
		this._isValidating = false;
	}
	,validateComponentInternal: function() {
		var dataInvalid = this.isComponentInvalid("data");
		var styleInvalid = this.isComponentInvalid("style");
		var positionInvalid = this.isComponentInvalid("position");
		var displayInvalid = this.isComponentInvalid("display");
		var measureInvalid = this.isComponentInvalid("measure");
		if(dataInvalid) {
			this.validateData();
		}
		if(styleInvalid) {
			if(this.validateStyle()) {
				measureInvalid = true;
			}
		}
		if(positionInvalid) {
			this.validatePosition();
		}
		if(displayInvalid) {
			this.validateDisplay();
		}
		if(dataInvalid || displayInvalid || measureInvalid) {
			this.measureText();
		}
	}
	,__class__: haxe_ui_core_TextInput
	,__properties__: $extend(haxe_ui_backend_TextInputImpl.prototype.__properties__,{set_depth:"set_depth",get_depth:"get_depth",get_vscrollPageSize:"get_vscrollPageSize",get_vscrollMax:"get_vscrollMax",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",get_hscrollPageSize:"get_hscrollPageSize",get_hscrollMax:"get_hscrollMax",set_hscrollPos:"set_hscrollPos",get_hscrollPos:"get_hscrollPos",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_multiline:"set_multiline",get_multiline:"get_multiline",get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_top:"set_top",get_top:"get_top",set_left:"set_left",get_left:"get_left",set_password:"set_password",get_password:"get_password",set_text:"set_text",get_text:"get_text",get_data:"get_data",set_textStyle:"set_textStyle",get_textStyle:"get_textStyle"})
});
var haxe_ui_data_DataSource = function(transformer) {
	this.onClear = null;
	this.onRemove = null;
	this.onUpdate = null;
	this.onInsert = null;
	this.onAdd = null;
	this.transformer = transformer;
	this._allowCallbacks = true;
	this._changed = false;
};
$hxClasses["haxe.ui.data.DataSource"] = haxe_ui_data_DataSource;
haxe_ui_data_DataSource.__name__ = "haxe.ui.data.DataSource";
haxe_ui_data_DataSource.fromString = function(data,type) {
	return null;
};
haxe_ui_data_DataSource.prototype = {
	onChange: null
	,transformer: null
	,_changed: null
	,onAdd: null
	,onInsert: null
	,onUpdate: null
	,onRemove: null
	,onClear: null
	,_allowCallbacks: null
	,get_allowCallbacks: function() {
		return this._allowCallbacks;
	}
	,set_allowCallbacks: function(value) {
		this._allowCallbacks = value;
		if(this._allowCallbacks == true && this._changed == true) {
			this._changed = false;
			if(this.onChange != null) {
				this.onChange();
			}
		}
		return value;
	}
	,size: null
	,get_size: function() {
		return this.handleGetSize();
	}
	,get: function(index) {
		var r = this.handleGetItem(index);
		if(js_Boot.__implements(r,haxe_ui_data_IDataItem)) {
			(js_Boot.__cast(r , haxe_ui_data_IDataItem)).onDataSourceChanged = this.onChange;
		}
		if(this.transformer != null) {
			r = this.transformer.transformFrom(r);
		}
		return r;
	}
	,indexOf: function(item) {
		if(this.transformer != null) {
			item = this.transformer.transformFrom(item);
		}
		return this.handleIndexOf(item);
	}
	,add: function(item) {
		var r = this.handleAddItem(item);
		this.handleChanged();
		if(this._allowCallbacks == true && this.onAdd != null) {
			this.onAdd(r);
		}
		return r;
	}
	,insert: function(index,item) {
		var r = this.handleInsert(index,item);
		this.handleChanged();
		if(this._allowCallbacks == true && this.onInsert != null) {
			this.onInsert(index,r);
		}
		return r;
	}
	,remove: function(item) {
		var r = this.handleRemoveItem(item);
		this.handleChanged();
		if(this._allowCallbacks == true && this.onRemove != null) {
			this.onRemove(r);
		}
		return r;
	}
	,update: function(index,item) {
		var r = this.handleUpdateItem(index,item);
		this.handleChanged();
		if(this._allowCallbacks == true && this.onUpdate != null) {
			this.onUpdate(index,r);
		}
		return r;
	}
	,clear: function() {
		var o = this._allowCallbacks;
		this._allowCallbacks = false;
		this.handleClear();
		this._allowCallbacks = o;
		this.handleChanged();
		if(this._allowCallbacks == true && this.onClear != null) {
			this.onClear();
		}
	}
	,handleChanged: function() {
		this._changed = true;
		if(this._allowCallbacks == true && this.onChange != null) {
			this._changed = false;
			this.onChange();
		}
	}
	,handleGetSize: function() {
		return 0;
	}
	,handleGetItem: function(index) {
		return null;
	}
	,handleIndexOf: function(item) {
		return 0;
	}
	,handleAddItem: function(item) {
		return null;
	}
	,handleInsert: function(index,item) {
		return null;
	}
	,handleRemoveItem: function(item) {
		return null;
	}
	,handleClear: function() {
		var cachedTransformer = this.transformer;
		this.transformer = null;
		while(this.get_size() > 0) this.remove(this.get(0));
		this.transformer = cachedTransformer;
	}
	,handleUpdateItem: function(index,item) {
		return null;
	}
	,clone: function() {
		var c = new haxe_ui_data_DataSource();
		return c;
	}
	,__class__: haxe_ui_data_DataSource
	,__properties__: {get_size:"get_size",set_allowCallbacks:"set_allowCallbacks",get_allowCallbacks:"get_allowCallbacks"}
};
var haxe_ui_data_ArrayDataSource = function(transformer) {
	haxe_ui_data_DataSource.call(this,transformer);
	this._array = [];
};
$hxClasses["haxe.ui.data.ArrayDataSource"] = haxe_ui_data_ArrayDataSource;
haxe_ui_data_ArrayDataSource.__name__ = "haxe.ui.data.ArrayDataSource";
haxe_ui_data_ArrayDataSource.fromArray = function(source,transformer) {
	var ds = new haxe_ui_data_ArrayDataSource(transformer);
	ds._array = source;
	return ds;
};
haxe_ui_data_ArrayDataSource.__super__ = haxe_ui_data_DataSource;
haxe_ui_data_ArrayDataSource.prototype = $extend(haxe_ui_data_DataSource.prototype,{
	_array: null
	,handleGetSize: function() {
		return this._array.length;
	}
	,handleGetItem: function(index) {
		return this._array[index];
	}
	,handleIndexOf: function(item) {
		return this._array.indexOf(item);
	}
	,handleAddItem: function(item) {
		this._array.push(item);
		return item;
	}
	,handleInsert: function(index,item) {
		this._array.splice(index,0,item);
		return item;
	}
	,handleRemoveItem: function(item) {
		HxOverrides.remove(this._array,item);
		return item;
	}
	,handleClear: function() {
		while(this._array.length > 0) this._array.pop();
	}
	,handleUpdateItem: function(index,item) {
		return this._array[index] = item;
	}
	,clone: function() {
		var c = new haxe_ui_data_ArrayDataSource();
		c._array = this._array.slice();
		return c;
	}
	,__class__: haxe_ui_data_ArrayDataSource
});
var haxe_ui_data_DataSourceFactory = function() {
};
$hxClasses["haxe.ui.data.DataSourceFactory"] = haxe_ui_data_DataSourceFactory;
haxe_ui_data_DataSourceFactory.__name__ = "haxe.ui.data.DataSourceFactory";
haxe_ui_data_DataSourceFactory.prototype = {
	create: function(type) {
		var ds = Type.createInstance(type,[]);
		return ds;
	}
	,fromString: function(data,type) {
		var ds = this.create(type);
		if(StringTools.startsWith(data,"<")) {
			var xml = Xml.parse(data).firstElement();
			var el = xml.elements();
			while(el.hasNext()) {
				var el1 = el.next();
				var o = this.xml2Object(el1);
				ds.add(o);
			}
		} else if(StringTools.startsWith(data,"[")) {
			var json = JSON.parse(StringTools.replace(data,"'","\""));
			var _g = 0;
			while(_g < json.length) {
				var o = json[_g];
				++_g;
				ds.add(o);
			}
		}
		return ds;
	}
	,xml2Object: function(el,addId) {
		if(addId == null) {
			addId = true;
		}
		var o = { };
		if(addId == true) {
			if(el.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (el.nodeType == null ? "null" : XmlType.toString(el.nodeType)));
			}
			o["id"] = el.nodeName;
		}
		var attr = el.attributes();
		while(attr.hasNext()) {
			var attr1 = attr.next();
			o[attr1] = el.get(attr1);
		}
		var childEl = el.elements();
		while(childEl.hasNext()) {
			var childEl1 = childEl.next();
			var childObject = this.xml2Object(childEl1,false);
			if(childEl1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (childEl1.nodeType == null ? "null" : XmlType.toString(childEl1.nodeType)));
			}
			o[childEl1.nodeName] = childObject;
		}
		return o;
	}
	,__class__: haxe_ui_data_DataSourceFactory
};
var haxe_ui_data_IDataItem = function() { };
$hxClasses["haxe.ui.data.IDataItem"] = haxe_ui_data_IDataItem;
haxe_ui_data_IDataItem.__name__ = "haxe.ui.data.IDataItem";
haxe_ui_data_IDataItem.__isInterface__ = true;
haxe_ui_data_IDataItem.prototype = {
	onDataSourceChanged: null
	,__class__: haxe_ui_data_IDataItem
};
var haxe_ui_data_ListDataSource = function(transformer) {
	haxe_ui_data_DataSource.call(this,transformer);
	this._array = new haxe_ds_List();
};
$hxClasses["haxe.ui.data.ListDataSource"] = haxe_ui_data_ListDataSource;
haxe_ui_data_ListDataSource.__name__ = "haxe.ui.data.ListDataSource";
haxe_ui_data_ListDataSource.fromArray = function(source,transformer) {
	var ds = new haxe_ui_data_ListDataSource(transformer);
	var _g = 0;
	while(_g < source.length) {
		var i = source[_g];
		++_g;
		ds._array.add(i);
	}
	return ds;
};
haxe_ui_data_ListDataSource.__super__ = haxe_ui_data_DataSource;
haxe_ui_data_ListDataSource.prototype = $extend(haxe_ui_data_DataSource.prototype,{
	_array: null
	,handleGetSize: function() {
		return this._array.length;
	}
	,handleGetItem: function(index) {
		var i = 0;
		var r = null;
		var _g_head = this._array.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var x = val;
			if(i == index) {
				r = x;
				break;
			}
			++i;
		}
		return r;
	}
	,handleIndexOf: function(item) {
		var i = 0;
		var r = null;
		var index = -1;
		var _g_head = this._array.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var x = val;
			if(x == item) {
				index = i;
				break;
			}
			++i;
		}
		return index;
	}
	,handleAddItem: function(item) {
		this._array.add(item);
		return item;
	}
	,handleInsert: function(index,item) {
		var i = 0;
		var r = null;
		var _g_head = this._array.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var x = val;
			if(i == index) {
				r = x;
				this._array.push(item);
				break;
			}
			++i;
		}
		return r;
	}
	,handleRemoveItem: function(item) {
		this._array.remove(item);
		return item;
	}
	,handleClear: function() {
		this._array.clear();
	}
	,handleUpdateItem: function(index,item) {
		var i = 0;
		var r = null;
		var _g_head = this._array.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var x = val;
			if(i == index) {
				x = item;
				break;
			}
			++i;
		}
		return item;
	}
	,clone: function() {
		var c = new haxe_ui_data_ListDataSource();
		c._array = Lambda.list(this._array);
		return c;
	}
	,__class__: haxe_ui_data_ListDataSource
});
var haxe_ui_data_transformation_IItemTransformer = function() { };
$hxClasses["haxe.ui.data.transformation.IItemTransformer"] = haxe_ui_data_transformation_IItemTransformer;
haxe_ui_data_transformation_IItemTransformer.__name__ = "haxe.ui.data.transformation.IItemTransformer";
haxe_ui_data_transformation_IItemTransformer.__isInterface__ = true;
haxe_ui_data_transformation_IItemTransformer.prototype = {
	transformFrom: null
	,__class__: haxe_ui_data_transformation_IItemTransformer
};
var haxe_ui_data_transformation_NativeTypeTransformer = function() {
};
$hxClasses["haxe.ui.data.transformation.NativeTypeTransformer"] = haxe_ui_data_transformation_NativeTypeTransformer;
haxe_ui_data_transformation_NativeTypeTransformer.__name__ = "haxe.ui.data.transformation.NativeTypeTransformer";
haxe_ui_data_transformation_NativeTypeTransformer.__interfaces__ = [haxe_ui_data_transformation_IItemTransformer];
haxe_ui_data_transformation_NativeTypeTransformer.prototype = {
	transformFrom: function(i) {
		var o = null;
		if(typeof(i) == "string") {
			o = { text : i, value : i};
		} else if(typeof(i) == "number" && ((i | 0) === i) || typeof(i) == "number" || typeof(i) == "boolean") {
			o = { value : i};
		} else {
			o = i;
		}
		return o;
	}
	,__class__: haxe_ui_data_transformation_NativeTypeTransformer
};
var haxe_ui_debug_CallStackHelper = function() { };
$hxClasses["haxe.ui.debug.CallStackHelper"] = haxe_ui_debug_CallStackHelper;
haxe_ui_debug_CallStackHelper.__name__ = "haxe.ui.debug.CallStackHelper";
haxe_ui_debug_CallStackHelper.traceCallStack = function() {
	var arr = haxe_CallStack.callStack();
	if(arr == null) {
		haxe_Log.trace("Callstack is null!",{ fileName : "haxe/ui/debug/CallStackHelper.hx", lineNumber : 9, className : "haxe.ui.debug.CallStackHelper", methodName : "traceCallStack"});
		return;
	}
	haxe_Log.trace(haxe_CallStack.toString(arr),{ fileName : "haxe/ui/debug/CallStackHelper.hx", lineNumber : 12, className : "haxe.ui.debug.CallStackHelper", methodName : "traceCallStack"});
	haxe_Log.trace(">>>>>>>>>>>>>>>>>>>>>>>>>>>> END >>>>>>>>>>>>>>>>>>>>>>>>>>>>",{ fileName : "haxe/ui/debug/CallStackHelper.hx", lineNumber : 13, className : "haxe.ui.debug.CallStackHelper", methodName : "traceCallStack"});
};
haxe_ui_debug_CallStackHelper.traceExceptionStack = function() {
	var arr = haxe_CallStack.exceptionStack();
	if(arr == null) {
		haxe_Log.trace("Callstack is null!",{ fileName : "haxe/ui/debug/CallStackHelper.hx", lineNumber : 19, className : "haxe.ui.debug.CallStackHelper", methodName : "traceExceptionStack"});
		return;
	}
	haxe_Log.trace(haxe_CallStack.toString(arr),{ fileName : "haxe/ui/debug/CallStackHelper.hx", lineNumber : 22, className : "haxe.ui.debug.CallStackHelper", methodName : "traceExceptionStack"});
	haxe_Log.trace(">>>>>>>>>>>>>>>>>>>>>>>>>>>> END >>>>>>>>>>>>>>>>>>>>>>>>>>>>",{ fileName : "haxe/ui/debug/CallStackHelper.hx", lineNumber : 23, className : "haxe.ui.debug.CallStackHelper", methodName : "traceExceptionStack"});
};
haxe_ui_debug_CallStackHelper.getCallStackString = function() {
	var arr = haxe_CallStack.callStack();
	if(arr == null) {
		throw haxe_Exception.thrown("Callstack is null!");
	}
	return haxe_CallStack.toString(arr);
};
var haxe_ui_editors_code_Position = function(line,column) {
	if(column == null) {
		column = 0;
	}
	if(line == null) {
		line = 0;
	}
	this.line = line;
	this.column = column;
};
$hxClasses["haxe.ui.editors.code.Position"] = haxe_ui_editors_code_Position;
haxe_ui_editors_code_Position.__name__ = "haxe.ui.editors.code.Position";
haxe_ui_editors_code_Position.prototype = {
	line: null
	,column: null
	,__class__: haxe_ui_editors_code_Position
};
var haxe_ui_editors_code_monaco_LanguageParser = function() {
};
$hxClasses["haxe.ui.editors.code.monaco.LanguageParser"] = haxe_ui_editors_code_monaco_LanguageParser;
haxe_ui_editors_code_monaco_LanguageParser.__name__ = "haxe.ui.editors.code.monaco.LanguageParser";
haxe_ui_editors_code_monaco_LanguageParser.get = function(id) {
	var lang = { symbols : new RegExp("[=><!~?:&|+\\-*\\/\\^%]+"), escapes : new RegExp("\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})"), tokenizer : { }};
	var data = haxe_Resource.getString("haxeui-code-editor/languages/" + id + "/language.json");
	if(data == null) {
		return null;
	}
	var json = JSON.parse(data);
	lang.keywords = json.keywords;
	lang.typeKeywords = json.typeKeywords;
	lang.operators = json.operators;
	var tmp = [new RegExp("[a-z_$][\\w$]*"),{ cases : { "@typeKeywords" : "keyword", "@keywords" : "keyword", "@default" : "identifier"}}];
	var tmp1 = [new RegExp("[A-Z][\\w\\$]*"),"type.identifier"];
	var tmp2 = [new RegExp("[{}()\\[\\]]"),"@brackets"];
	var tmp3 = [new RegExp("[<>](?!@symbols)"),"@brackets"];
	var tmp4 = [new RegExp("@symbols"),{ cases : { "@operators" : "operator", "@default" : ""}}];
	var tmp5 = [new RegExp("@\\s*[a-zA-Z_\\$][\\w\\$]*"),{ token : "annotation", log : "annotation token: $0"}];
	var tmp6 = [new RegExp("\\d*\\.\\d+([eE][\\-+]?\\d+)?"),"number.float"];
	var tmp7 = [new RegExp("0[xX][0-9a-fA-F]+"),"number.hex"];
	var tmp8 = [new RegExp("\\d+"),"number"];
	var tmp9 = [new RegExp("[;,.]"),"delimiter"];
	var tmp10 = [new RegExp("\"([^\"\\\\]|\\\\.)*$"),"string.invalid"];
	var tmp11 = [new RegExp("'([^'\\\\]|\\\\.)*$"),"string.invalid"];
	var tmp12 = [new RegExp("\""),"string","@string.\""];
	var tmp13 = [new RegExp("'"),"string","@string.'"];
	var tmp14 = [new RegExp("[^\\\\']'"),"string"];
	var tmp15 = [new RegExp("(')(@escapes)(')"),["string","string.escape","string"]];
	lang.tokenizer.root = [tmp,tmp1,{ include : "@whitespace"},tmp2,tmp3,tmp4,tmp5,tmp6,tmp7,tmp8,tmp9,tmp10,tmp11,tmp12,tmp13,tmp14,tmp15,[new RegExp("'"),"string.invalid"]];
	var tmp = [new RegExp("[^\\/*]+"),"comment"];
	var tmp1 = [new RegExp("\\/\\*"),"comment.invalid"];
	lang.tokenizer.comment = [tmp,tmp1,["\\*/","comment","@pop"],[new RegExp("[\\/*]"),"comment"]];
	var tmp = [new RegExp("[^\\\\\"']+"),"string"];
	var tmp1 = [new RegExp("@escapes"),"string.escape"];
	var tmp2 = [new RegExp("\\\\."),"string.escape.invalid"];
	lang.tokenizer.string = [tmp,tmp1,tmp2,[new RegExp("[\"']"),{ cases : { "$#==$S2" : { token : "string", next : "@pop"}, "@default" : "string"}}]];
	var tmp = [new RegExp("[ \\t\\r\\n]+"),"white"];
	var tmp1 = [new RegExp("\\/\\*"),"comment","@comment"];
	lang.tokenizer.whitespace = [tmp,tmp1,[new RegExp("\\/\\/.*$"),"comment"]];
	return lang;
};
haxe_ui_editors_code_monaco_LanguageParser.prototype = {
	__class__: haxe_ui_editors_code_monaco_LanguageParser
};
var haxe_ui_editors_code_monaco_MonacoLoader = function(version) {
	if(version == null) {
		version = "0.17.0";
	}
	this._version = null;
	this._version = version;
};
$hxClasses["haxe.ui.editors.code.monaco.MonacoLoader"] = haxe_ui_editors_code_monaco_MonacoLoader;
haxe_ui_editors_code_monaco_MonacoLoader.__name__ = "haxe.ui.editors.code.monaco.MonacoLoader";
haxe_ui_editors_code_monaco_MonacoLoader.prototype = {
	_version: null
	,register: function(fn) {
		var _gthis = this;
		if(haxe_ui_editors_code_monaco_MonacoLoader._loaded == false) {
			haxe_ui_editors_code_monaco_MonacoLoader._callbacks.push(fn);
			if(haxe_ui_editors_code_monaco_MonacoLoader._loading == false) {
				haxe_ui_editors_code_monaco_MonacoLoader._loading = true;
				var scriptElement = window.document.createElement("script");
				scriptElement.onload = function(e) {
					require.config({ paths : { "vs" : "monaco-editor-" + _gthis._version + "/min/vs"}});
					require(["vs/editor/editor.main"], function() {
						haxe_ui_editors_code_monaco_MonacoLoader._loaded = true;
						var _g = 0;
						var _g1 = haxe_ui_editors_code_monaco_MonacoLoader._callbacks;
						while(true) {
							if(!(_g < _g1.length)) {
								break;
							}
							var f = _g1[_g];
							_g = _g + 1;
							if(f != null) {
								f();
							}
						}
					});
				};
				scriptElement.src = "monaco-editor-" + this._version + "/min/vs/loader.js";
				window.document.body.appendChild(scriptElement);
			}
		} else {
			fn();
		}
	}
	,__class__: haxe_ui_editors_code_monaco_MonacoLoader
};
var haxe_ui_editors_code_monaco_MonacoCodeEditor = function() {
	this._theme = null;
	this._readOnly = false;
	this._lineNumbers = true;
	haxe_ui_core_InteractiveComponent.call(this);
	this.addClass("code-editor");
};
$hxClasses["haxe.ui.editors.code.monaco.MonacoCodeEditor"] = haxe_ui_editors_code_monaco_MonacoCodeEditor;
haxe_ui_editors_code_monaco_MonacoCodeEditor.__name__ = "haxe.ui.editors.code.monaco.MonacoCodeEditor";
haxe_ui_editors_code_monaco_MonacoCodeEditor.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_editors_code_monaco_MonacoCodeEditor.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	_editor: null
	,_text: null
	,get_text: function() {
		if(this._editor != null) {
			return this._editor.getValue();
		}
		return this._text;
	}
	,set_text: function(value) {
		this._text = value;
		this._text = StringTools.replace(this._text,"\\t","    ");
		if(this._editor != null) {
			this._editor.setValue(this._text);
		}
		return value;
	}
	,onReady: function() {
		haxe_ui_core_InteractiveComponent.prototype.onReady.call(this);
		haxe_ui_editors_code_monaco_MonacoCodeEditor.loader.register($bind(this,this.onMonacoReady));
	}
	,onMonacoReady: function() {
		var _gthis = this;
		this.addLanguage(this._language);
		var options = { renderLineHighlight : "none", language : this._language, fontSize : 12, contextmenu : false, theme : this._theme, readOnly : this._readOnly, scrollbar : { useShadows : false, vertical : "visible", horizontal : "visible", verticalScrollbarSize : 10, horizontalScrollbarSize : 10}};
		if(this._lineNumbers == false) {
			options.lineNumbers = "off";
			options.glyphMargin = false;
			options.folding = false;
			options.lineDecorationsWidth = 0;
			options.lineNumbersMinChars = 0;
		}
		this._editor = monaco.editor.create(this.element,options);
		this._editor.setValue(this._text);
		if(this._focus == true) {
			this._editor.focus();
		}
		this._editor.getModel().onDidChangeContent(function(e) {
			_gthis.dispatch(new haxe_ui_events_UIEvent("change"));
		});
		this._editor.onDidChangeCursorPosition(function(e) {
			_gthis.dispatch(new haxe_ui_events_UIEvent("change"));
		});
		this.invalidateComponent();
	}
	,lineCount: null
	,get_lineCount: function() {
		return this._editor.getModel().getLineCount();
	}
	,_language: null
	,get_language: function() {
		return this._language;
	}
	,set_language: function(value) {
		this._language = value;
		if(this._editor != null) {
			this.addLanguage(value);
			monaco.editor.setModelLanguage(this._editor.getModel(),this._language);
		}
		return value;
	}
	,addLanguage: function(id) {
		if(this.hasLanguage(id) == false) {
			var lang = haxe_ui_editors_code_monaco_LanguageParser.get(id);
			if(lang != null) {
				monaco.languages.register({ id : id});
				monaco.languages.setMonarchTokensProvider(id,lang);
			}
		}
	}
	,hasLanguage: function(id) {
		var _g = 0;
		var _g1 = monaco.languages.getLanguages();
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.id == id) {
				return true;
			}
		}
		return false;
	}
	,validateComponentLayout: function() {
		var b = haxe_ui_core_InteractiveComponent.prototype.validateComponentLayout.call(this);
		if(this.get_width() > 0 && this.get_height() > 0 && this._editor != null) {
			var usableSize = this.get_layout().get_usableSize();
			this._editor.layout({ width : usableSize.width, height : usableSize.height});
		}
		return b;
	}
	,set_focus: function(value) {
		var _gthis = this;
		this._focus = value;
		if(this._editor != null && this._focus == true) {
			haxe_ui_Toolkit.callLater(function() {
				_gthis._editor.focus();
			});
		}
		return value;
	}
	,get_caretPosition: function() {
		var modelPos = this._editor.getPosition();
		return new haxe_ui_editors_code_Position(modelPos.lineNumber,modelPos.column);
	}
	,set_caretPosition: function(value) {
		this._editor.setPosition({ readonly : false, lineNumber : value.line, column : value.column});
		return value;
	}
	,_lineNumbers: null
	,get_lineNumbers: function() {
		return this._lineNumbers;
	}
	,set_lineNumbers: function(value) {
		this._lineNumbers = value;
		return value;
	}
	,_readOnly: null
	,get_readOnly: function() {
		return this._readOnly;
	}
	,set_readOnly: function(value) {
		this._readOnly = value;
		if(this._editor != null) {
			this._editor.updateOptions({ readOnly : this._readOnly});
		}
		return value;
	}
	,_theme: null
	,get_theme: function() {
		return this._theme;
	}
	,set_theme: function(value) {
		this._theme = value;
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_editors_code_monaco_MonacoCodeEditor();
	}
	,__class__: haxe_ui_editors_code_monaco_MonacoCodeEditor
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_theme:"set_theme",get_theme:"get_theme",set_readOnly:"set_readOnly",get_readOnly:"get_readOnly",set_lineNumbers:"set_lineNumbers",get_lineNumbers:"get_lineNumbers",set_caretPosition:"set_caretPosition",get_caretPosition:"get_caretPosition",set_language:"set_language",get_language:"get_language",get_lineCount:"get_lineCount"})
});
var haxe_ui_events_AnimationEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.AnimationEvent"] = haxe_ui_events_AnimationEvent;
haxe_ui_events_AnimationEvent.__name__ = "haxe.ui.events.AnimationEvent";
haxe_ui_events_AnimationEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_AnimationEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	clone: function() {
		var c = new haxe_ui_events_AnimationEvent(this.type);
		return c;
	}
	,__class__: haxe_ui_events_AnimationEvent
});
var haxe_ui_events_FocusEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.FocusEvent"] = haxe_ui_events_FocusEvent;
haxe_ui_events_FocusEvent.__name__ = "haxe.ui.events.FocusEvent";
haxe_ui_events_FocusEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_FocusEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	clone: function() {
		var c = new haxe_ui_events_FocusEvent(this.type);
		c.type = this.type;
		c.target = this.target;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_events_FocusEvent
});
var haxe_ui_events_ItemEvent = function(type,bubble,data) {
	this.itemIndex = -1;
	this.sourceEvent = null;
	this.source = null;
	haxe_ui_events_UIEvent.call(this,type,bubble,data);
};
$hxClasses["haxe.ui.events.ItemEvent"] = haxe_ui_events_ItemEvent;
haxe_ui_events_ItemEvent.__name__ = "haxe.ui.events.ItemEvent";
haxe_ui_events_ItemEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_ItemEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	source: null
	,sourceEvent: null
	,itemIndex: null
	,clone: function() {
		var c = new haxe_ui_events_ItemEvent(this.type);
		c.source = this.source;
		c.sourceEvent = this.sourceEvent;
		c.itemIndex = this.itemIndex;
		c.type = this.type;
		c.bubble = this.bubble;
		c.target = this.target;
		c.data = this.data;
		c.canceled = this.canceled;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_events_ItemEvent
});
var haxe_ui_events_KeyboardEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.KeyboardEvent"] = haxe_ui_events_KeyboardEvent;
haxe_ui_events_KeyboardEvent.__name__ = "haxe.ui.events.KeyboardEvent";
haxe_ui_events_KeyboardEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_KeyboardEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	keyCode: null
	,altKey: null
	,ctrlKey: null
	,shiftKey: null
	,clone: function() {
		var c = new haxe_ui_events_KeyboardEvent(this.type);
		c.type = this.type;
		c.target = this.target;
		c.keyCode = this.keyCode;
		c.altKey = this.altKey;
		c.ctrlKey = this.ctrlKey;
		c.shiftKey = this.shiftKey;
		return c;
	}
	,__class__: haxe_ui_events_KeyboardEvent
});
var haxe_ui_events_MouseEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.MouseEvent"] = haxe_ui_events_MouseEvent;
haxe_ui_events_MouseEvent.__name__ = "haxe.ui.events.MouseEvent";
haxe_ui_events_MouseEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_MouseEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	screenX: null
	,screenY: null
	,buttonDown: null
	,delta: null
	,touchEvent: null
	,ctrlKey: null
	,shiftKey: null
	,localX: null
	,get_localX: function() {
		if(this.target == null) {
			return null;
		}
		return (this.screenX * haxe_ui_Toolkit.get_scaleX() - this.target.get_screenLeft()) / haxe_ui_Toolkit.get_scaleX();
	}
	,localY: null
	,get_localY: function() {
		if(this.target == null) {
			return null;
		}
		return (this.screenY * haxe_ui_Toolkit.get_scaleY() - this.target.get_screenTop()) / haxe_ui_Toolkit.get_scaleY();
	}
	,clone: function() {
		var c = new haxe_ui_events_MouseEvent(this.type);
		c.type = this.type;
		c.target = this.target;
		c.screenX = this.screenX;
		c.screenY = this.screenY;
		c.buttonDown = this.buttonDown;
		c.delta = this.delta;
		c.touchEvent = this.touchEvent;
		c.ctrlKey = this.ctrlKey;
		c.shiftKey = this.shiftKey;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_events_MouseEvent
	,__properties__: {get_localY:"get_localY",get_localX:"get_localX"}
});
var haxe_ui_events_ScrollEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.ScrollEvent"] = haxe_ui_events_ScrollEvent;
haxe_ui_events_ScrollEvent.__name__ = "haxe.ui.events.ScrollEvent";
haxe_ui_events_ScrollEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_ScrollEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	clone: function() {
		var c = new haxe_ui_events_ScrollEvent(this.type);
		c.type = this.type;
		c.target = this.target;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_events_ScrollEvent
});
var haxe_ui_events_ValidationEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.ValidationEvent"] = haxe_ui_events_ValidationEvent;
haxe_ui_events_ValidationEvent.__name__ = "haxe.ui.events.ValidationEvent";
haxe_ui_events_ValidationEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_ValidationEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	clone: function() {
		var c = new haxe_ui_events_ValidationEvent(this.type);
		c.type = this.type;
		c.target = this.target;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_events_ValidationEvent
});
var haxe_ui_filters_Filter = function() {
};
$hxClasses["haxe.ui.filters.Filter"] = haxe_ui_filters_Filter;
haxe_ui_filters_Filter.__name__ = "haxe.ui.filters.Filter";
haxe_ui_filters_Filter.prototype = {
	__class__: haxe_ui_filters_Filter
};
var haxe_ui_filters_Blur = function() {
	haxe_ui_filters_Filter.call(this);
};
$hxClasses["haxe.ui.filters.Blur"] = haxe_ui_filters_Blur;
haxe_ui_filters_Blur.__name__ = "haxe.ui.filters.Blur";
haxe_ui_filters_Blur.__super__ = haxe_ui_filters_Filter;
haxe_ui_filters_Blur.prototype = $extend(haxe_ui_filters_Filter.prototype,{
	amount: null
	,__class__: haxe_ui_filters_Blur
});
var haxe_ui_filters_DropShadow = function() {
	haxe_ui_filters_Filter.call(this);
};
$hxClasses["haxe.ui.filters.DropShadow"] = haxe_ui_filters_DropShadow;
haxe_ui_filters_DropShadow.__name__ = "haxe.ui.filters.DropShadow";
haxe_ui_filters_DropShadow.__super__ = haxe_ui_filters_Filter;
haxe_ui_filters_DropShadow.prototype = $extend(haxe_ui_filters_Filter.prototype,{
	distance: null
	,angle: null
	,color: null
	,alpha: null
	,blurX: null
	,blurY: null
	,strength: null
	,quality: null
	,inner: null
	,__class__: haxe_ui_filters_DropShadow
});
var haxe_ui_filters_FilterParser = function() { };
$hxClasses["haxe.ui.filters.FilterParser"] = haxe_ui_filters_FilterParser;
haxe_ui_filters_FilterParser.__name__ = "haxe.ui.filters.FilterParser";
haxe_ui_filters_FilterParser.parseFilter = function(filterDetails) {
	var filter = null;
	if(filterDetails[0] == "drop-shadow") {
		filter = haxe_ui_filters_FilterParser.parseDropShadow(filterDetails);
	} else if(filterDetails[0] == "blur") {
		filter = haxe_ui_filters_FilterParser.parseBlur(filterDetails);
	}
	return filter;
};
haxe_ui_filters_FilterParser.parseDropShadow = function(filterDetails) {
	if(filterDetails == null || filterDetails.length == 0) {
		return null;
	}
	var copy = filterDetails.slice();
	haxe_ui_filters_FilterParser.buildDefaults();
	var filterName = copy[0];
	HxOverrides.remove(copy,filterName);
	copy = haxe_ui_filters_FilterParser.copyFilterDefaults(filterName,copy);
	var dropShadow = new haxe_ui_filters_DropShadow();
	dropShadow.distance = copy[0];
	dropShadow.angle = copy[1];
	dropShadow.color = copy[2];
	dropShadow.alpha = copy[3];
	dropShadow.blurX = copy[4];
	dropShadow.blurY = copy[5];
	dropShadow.strength = copy[6];
	dropShadow.quality = copy[7];
	dropShadow.inner = copy[8];
	return dropShadow;
};
haxe_ui_filters_FilterParser.parseBlur = function(filterDetails) {
	if(filterDetails == null || filterDetails.length == 0) {
		return null;
	}
	var copy = filterDetails.slice();
	haxe_ui_filters_FilterParser.buildDefaults();
	var filterName = copy[0];
	HxOverrides.remove(copy,filterName);
	copy = haxe_ui_filters_FilterParser.copyFilterDefaults(filterName,copy);
	var blur = new haxe_ui_filters_Blur();
	blur.amount = copy[0];
	return blur;
};
haxe_ui_filters_FilterParser.copyFilterDefaults = function(filterName,params) {
	var copy = [];
	var defaultParams = haxe_ui_filters_FilterParser.filterParamDefaults.h[filterName];
	if(defaultParams != null) {
		var _g = 0;
		while(_g < defaultParams.length) {
			var p = defaultParams[_g];
			++_g;
			copy.push(p);
		}
	}
	if(params != null) {
		var n = 0;
		var _g = 0;
		while(_g < params.length) {
			var p = params[_g];
			++_g;
			copy[n] = p;
			++n;
		}
	}
	return copy;
};
haxe_ui_filters_FilterParser.buildDefaults = function() {
	if(haxe_ui_filters_FilterParser.filterParamDefaults != null) {
		return;
	}
	haxe_ui_filters_FilterParser.filterParamDefaults = new haxe_ds_StringMap();
	var v = [];
	haxe_ui_filters_FilterParser.filterParamDefaults.h["drop-shadow"] = v;
	var this1 = haxe_ui_filters_FilterParser.filterParamDefaults;
	var v = haxe_ui_filters_FilterParser.filterParamDefaults.h["drop-shadow"].concat([4,45,0,1,4,4,1,1,false,false,false]);
	this1.h["drop-shadow"] = v;
	var v = [];
	haxe_ui_filters_FilterParser.filterParamDefaults.h["blur"] = v;
	var this1 = haxe_ui_filters_FilterParser.filterParamDefaults;
	var v = haxe_ui_filters_FilterParser.filterParamDefaults.h["blur"].concat([1]);
	this1.h["blur"] = v;
};
var haxe_ui_focus_FocusInfo = function() {
};
$hxClasses["haxe.ui.focus.FocusInfo"] = haxe_ui_focus_FocusInfo;
haxe_ui_focus_FocusInfo.__name__ = "haxe.ui.focus.FocusInfo";
haxe_ui_focus_FocusInfo.prototype = {
	view: null
	,currentFocus: null
	,__class__: haxe_ui_focus_FocusInfo
};
var haxe_ui_focus_FocusManager = function() {
	this._views = [];
	this._focusInfo = new haxe_ds_ObjectMap();
};
$hxClasses["haxe.ui.focus.FocusManager"] = haxe_ui_focus_FocusManager;
haxe_ui_focus_FocusManager.__name__ = "haxe.ui.focus.FocusManager";
haxe_ui_focus_FocusManager.__properties__ = {get_instance:"get_instance"};
haxe_ui_focus_FocusManager.get_instance = function() {
	if(haxe_ui_focus_FocusManager._instance == null) {
		haxe_ui_focus_FocusManager._instance = new haxe_ui_focus_FocusManager();
	}
	return haxe_ui_focus_FocusManager._instance;
};
haxe_ui_focus_FocusManager.prototype = {
	_views: null
	,_focusInfo: null
	,pushView: function(component) {
		this._views.push(component);
	}
	,popView: function() {
		var c = this._views.pop();
		this._focusInfo.remove(c);
	}
	,focusInfo: null
	,get_focusInfo: function() {
		if(this._views.length == 0) {
			return null;
		}
		var c = this._views[this._views.length - 1];
		var info = this._focusInfo.h[c.__id__];
		if(info == null) {
			info = new haxe_ui_focus_FocusInfo();
			info.view = c;
			this._focusInfo.set(c,info);
		}
		return info;
	}
	,get_focus: function() {
		if(this.get_focusInfo() == null) {
			return null;
		}
		return this.get_focusInfo().currentFocus;
	}
	,set_focus: function(value) {
		if(value != null && js_Boot.__implements(value,haxe_ui_focus_IFocusable) == false) {
			throw haxe_Exception.thrown("Component does not implement IFocusable");
		}
		if(this.get_focusInfo() == null) {
			return value;
		}
		if(this.get_focusInfo().currentFocus != null && this.get_focusInfo().currentFocus != value) {
			this.get_focusInfo().currentFocus.set_focus(false);
			this.get_focusInfo().currentFocus = null;
		}
		if(value != null) {
			this.get_focusInfo().currentFocus = value;
			this.get_focusInfo().currentFocus.set_focus(true);
		}
		haxe_ui_Toolkit.get_screen().set_focus(value);
		return this.get_focusInfo().currentFocus;
	}
	,focusNext: function() {
		if(this._views.length == 0) {
			return null;
		}
		var list = [];
		var info = this.get_focusInfo();
		var currentFocus = this.buildFocusableList(info.view,list);
		var index = -1;
		if(currentFocus != null) {
			index = list.indexOf(currentFocus);
		}
		var nextIndex = index + 1;
		if(nextIndex > list.length - 1) {
			nextIndex = 0;
		}
		var nextFocus = list[nextIndex];
		this.set_focus(nextFocus);
		return nextFocus;
	}
	,focusPrev: function() {
		if(this._views.length == 0) {
			return null;
		}
		var list = [];
		var info = this.get_focusInfo();
		var currentFocus = this.buildFocusableList(info.view,list);
		var index = -1;
		if(currentFocus != null) {
			index = list.indexOf(currentFocus);
		}
		var prevIndex = index - 1;
		if(prevIndex < 0) {
			prevIndex = list.length - 1;
		}
		var prevFocus = list[prevIndex];
		this.set_focus(prevFocus);
		return prevFocus;
	}
	,buildFocusableList: function(c,list) {
		var currentFocus = null;
		if(js_Boot.__implements(c,haxe_ui_focus_IFocusable)) {
			var f = c;
			if(f.get_allowFocus() == true) {
				if(f.get_focus() == true) {
					currentFocus = f;
				}
				list.push(f);
			}
		}
		var _g = 0;
		var _g1 = c._children == null ? [] : c._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var f = this.buildFocusableList(child,list);
			if(f != null) {
				currentFocus = f;
			}
		}
		return currentFocus;
	}
	,__class__: haxe_ui_focus_FocusManager
	,__properties__: {set_focus:"set_focus",get_focus:"get_focus",get_focusInfo:"get_focusInfo"}
};
var haxe_ui_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["haxe.ui.geom.Point"] = haxe_ui_geom_Point;
haxe_ui_geom_Point.__name__ = "haxe.ui.geom.Point";
haxe_ui_geom_Point.prototype = {
	x: null
	,y: null
	,__class__: haxe_ui_geom_Point
};
var haxe_ui_geom_Rectangle = function(left,top,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(top == null) {
		top = 0;
	}
	if(left == null) {
		left = 0;
	}
	this._intersectionCache = null;
	this.left = left;
	this.top = top;
	this.width = width;
	this.height = height;
};
$hxClasses["haxe.ui.geom.Rectangle"] = haxe_ui_geom_Rectangle;
haxe_ui_geom_Rectangle.__name__ = "haxe.ui.geom.Rectangle";
haxe_ui_geom_Rectangle.prototype = {
	left: null
	,top: null
	,width: null
	,height: null
	,set: function(left,top,width,height) {
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(top == null) {
			top = 0;
		}
		if(left == null) {
			left = 0;
		}
		this.left = left;
		this.top = top;
		this.width = width;
		this.height = height;
	}
	,get_right: function() {
		return this.left + this.width;
	}
	,set_right: function(value) {
		this.width = value - this.left;
		return value;
	}
	,get_bottom: function() {
		return this.top + this.height;
	}
	,set_bottom: function(value) {
		this.height = value - this.top;
		return value;
	}
	,inflate: function(dx,dy) {
		this.left -= dx;
		this.width += dx * 2;
		this.top -= dy;
		this.height += dy * 2;
	}
	,containsPoint: function(x,y) {
		if(x >= this.left && x < this.left + this.width && y >= this.top && y < this.top + this.height) {
			return true;
		}
		return false;
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.left > this.left && rect.top > this.top && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.left >= this.left && rect.top >= this.top && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,intersects: function(rect) {
		var x0 = this.left < rect.left ? rect.left : this.left;
		var x1 = this.get_right() > rect.get_right() ? rect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.top < rect.top ? rect.top : this.top;
		var y1 = this.get_bottom() > rect.get_bottom() ? rect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,_intersectionCache: null
	,intersection: function(rect,noAlloc) {
		if(noAlloc == null) {
			noAlloc = true;
		}
		if(noAlloc == true && this._intersectionCache == null) {
			this._intersectionCache = new haxe_ui_geom_Rectangle();
		}
		var x0 = this.left < rect.left ? rect.left : this.left;
		var x1 = this.get_right() > rect.get_right() ? rect.get_right() : this.get_right();
		if(x1 <= x0) {
			if(noAlloc == true) {
				this._intersectionCache.set();
				return this._intersectionCache;
			} else {
				return new haxe_ui_geom_Rectangle();
			}
		}
		var y0 = this.top < rect.top ? rect.top : this.top;
		var y1 = this.get_bottom() > rect.get_bottom() ? rect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			if(noAlloc == true) {
				this._intersectionCache.set();
				return this._intersectionCache;
			} else {
				return new haxe_ui_geom_Rectangle();
			}
		}
		var r = null;
		if(noAlloc == true) {
			r = this._intersectionCache;
		} else {
			r = new haxe_ui_geom_Rectangle();
		}
		r.set(x0,y0,x1 - x0,y1 - y0);
		return r;
	}
	,toString: function() {
		return "{left: " + this.left + ", top: " + this.top + ", bottom: " + this.get_bottom() + ", right: " + this.get_right() + ", width: " + this.width + ", height: " + this.height + "}";
	}
	,__class__: haxe_ui_geom_Rectangle
	,__properties__: {set_bottom:"set_bottom",get_bottom:"get_bottom",set_right:"set_right",get_right:"get_right"}
};
var haxe_ui_geom_Size = function(width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.width = width;
	this.height = height;
};
$hxClasses["haxe.ui.geom.Size"] = haxe_ui_geom_Size;
haxe_ui_geom_Size.__name__ = "haxe.ui.geom.Size";
haxe_ui_geom_Size.prototype = {
	width: null
	,height: null
	,round: function() {
		this.width = Math.round(this.width);
		this.height = Math.round(this.height);
	}
	,toString: function() {
		return "[" + this.width + "x" + this.height + "]";
	}
	,__class__: haxe_ui_geom_Size
};
var haxe_ui_geom_Slice9 = function() { };
$hxClasses["haxe.ui.geom.Slice9"] = haxe_ui_geom_Slice9;
haxe_ui_geom_Slice9.__name__ = "haxe.ui.geom.Slice9";
haxe_ui_geom_Slice9.buildRects = function(w,h,bitmapWidth,bitmapHeight,slice) {
	var srcRects = haxe_ui_geom_Slice9.buildSrcRects(bitmapWidth,bitmapHeight,slice);
	var dstRects = haxe_ui_geom_Slice9.buildDstRects(w,h,srcRects);
	return { src : srcRects, dst : dstRects};
};
haxe_ui_geom_Slice9.buildSrcRects = function(bitmapWidth,bitmapHeight,slice) {
	var x1 = slice.left;
	var y1 = slice.top;
	var x2 = slice.get_right();
	var y2 = slice.get_bottom();
	var srcRects = [];
	srcRects.push(new haxe_ui_geom_Rectangle(0,0,x1,y1));
	srcRects.push(new haxe_ui_geom_Rectangle(x1,0,x2 - x1,y1));
	srcRects.push(new haxe_ui_geom_Rectangle(x2,0,bitmapWidth - x2,y1));
	srcRects.push(new haxe_ui_geom_Rectangle(0,y1,x1,y2 - y1));
	srcRects.push(new haxe_ui_geom_Rectangle(x1,y1,x2 - x1,y2 - y1));
	srcRects.push(new haxe_ui_geom_Rectangle(x2,y1,bitmapWidth - x2,y2 - y1));
	srcRects.push(new haxe_ui_geom_Rectangle(0,y2,x1,bitmapHeight - y2));
	srcRects.push(new haxe_ui_geom_Rectangle(x1,y2,x2 - x1,bitmapHeight - y2));
	srcRects.push(new haxe_ui_geom_Rectangle(x2,y2,bitmapWidth - x2,bitmapHeight - y2));
	return srcRects;
};
haxe_ui_geom_Slice9.buildDstRects = function(w,h,srcRects) {
	var dstRects = [];
	dstRects.push(new haxe_ui_geom_Rectangle(0,0,srcRects[0].width,srcRects[0].height));
	dstRects.push(new haxe_ui_geom_Rectangle(srcRects[0].width,0,w - srcRects[0].width - srcRects[2].width,srcRects[1].height));
	dstRects.push(new haxe_ui_geom_Rectangle(w - srcRects[2].width,0,srcRects[2].width,srcRects[2].height));
	dstRects.push(new haxe_ui_geom_Rectangle(0,srcRects[0].height,srcRects[3].width,h - srcRects[0].height - srcRects[6].height));
	dstRects.push(new haxe_ui_geom_Rectangle(srcRects[3].width,srcRects[0].height,w - srcRects[3].width - srcRects[5].width,h - srcRects[1].height - srcRects[7].height));
	dstRects.push(new haxe_ui_geom_Rectangle(w - srcRects[5].width,srcRects[2].height,srcRects[5].width,h - srcRects[2].height - srcRects[8].height));
	dstRects.push(new haxe_ui_geom_Rectangle(0,h - srcRects[6].height,srcRects[6].width,srcRects[6].height));
	dstRects.push(new haxe_ui_geom_Rectangle(srcRects[6].width,h - srcRects[7].height,w - srcRects[6].width - srcRects[8].width,srcRects[7].height));
	dstRects.push(new haxe_ui_geom_Rectangle(w - srcRects[8].width,h - srcRects[8].height,srcRects[8].width,srcRects[8].height));
	return dstRects;
};
var haxe_ui_layouts_AbsoluteLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.layouts.AbsoluteLayout"] = haxe_ui_layouts_AbsoluteLayout;
haxe_ui_layouts_AbsoluteLayout.__name__ = "haxe.ui.layouts.AbsoluteLayout";
haxe_ui_layouts_AbsoluteLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_AbsoluteLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
	}
	,__class__: haxe_ui_layouts_AbsoluteLayout
});
var haxe_ui_layouts_DelegateLayout = function(size) {
	haxe_ui_layouts_DefaultLayout.call(this);
	this._size = size;
};
$hxClasses["haxe.ui.layouts.DelegateLayout"] = haxe_ui_layouts_DelegateLayout;
haxe_ui_layouts_DelegateLayout.__name__ = "haxe.ui.layouts.DelegateLayout";
haxe_ui_layouts_DelegateLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_DelegateLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	_size: null
	,calcAutoSize: function(exclusions) {
		this._size.component = this.get_component();
		var cx = this._size.get_width();
		var cy = this._size.get_height();
		if(this._size.getBool("includePadding",false) == true) {
			cx += this.get_paddingLeft() + this.get_paddingRight();
			cy += this.get_paddingTop() + this.get_paddingBottom();
		}
		var size = new haxe_ui_geom_Size(cx,cy);
		return size;
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		this._size.component = this.get_component();
		size.width -= this._size.get_usableWidthModifier();
		size.height -= this._size.get_usableHeightModifier();
		return size;
	}
	,__class__: haxe_ui_layouts_DelegateLayout
});
var haxe_ui_layouts_HorizontalContinuousLayout = function() {
	haxe_ui_layouts_HorizontalLayout.call(this);
};
$hxClasses["haxe.ui.layouts.HorizontalContinuousLayout"] = haxe_ui_layouts_HorizontalContinuousLayout;
haxe_ui_layouts_HorizontalContinuousLayout.__name__ = "haxe.ui.layouts.HorizontalContinuousLayout";
haxe_ui_layouts_HorizontalContinuousLayout.__super__ = haxe_ui_layouts_HorizontalLayout;
haxe_ui_layouts_HorizontalContinuousLayout.prototype = $extend(haxe_ui_layouts_HorizontalLayout.prototype,{
	resizeChildren: function() {
	}
	,repositionChildren: function() {
		if(this.get_component().get_autoWidth() == true) {
			haxe_ui_layouts_HorizontalLayout.prototype.repositionChildren.call(this);
			return;
		}
		var ucx = this.get_usableWidth();
		if(ucx <= 0) {
			return;
		}
		var ucx = this.get_component().get_componentWidth() - (this.get_paddingLeft() + this.get_paddingRight());
		var ucy = this.get_component().get_componentHeight() - (this.get_paddingTop() + this.get_paddingBottom());
		var dimensions = [];
		var heights = [];
		var row = 0;
		var usedCX = 0;
		var xpos = this.get_paddingLeft();
		var ypos = this.get_paddingTop();
		var rowCY = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var rc = new haxe_ui_layouts_ComponentRectangle(child.get_left(),child.get_top(),child.get_componentWidth(),child.get_componentHeight());
			if(child.get_percentWidth() != null) {
				rc.width = ucx * child.get_percentWidth() / 100;
			} else {
				usedCX += this.get_horizontalSpacing();
			}
			if(child.get_percentHeight() != null) {
				rc.height = ucy * child.get_percentHeight() / 100;
			}
			rc.component = child;
			usedCX += rc.width;
			if(usedCX > ucx) {
				heights.push(rowCY);
				ypos += rowCY + this.get_verticalSpacing();
				xpos = this.get_paddingLeft();
				usedCX = rc.width;
				rowCY = 0;
				++row;
			}
			if(dimensions.length <= row) {
				dimensions.push([]);
			}
			if(dimensions[row] == null) {
				ypos -= this.get_verticalSpacing();
				--row;
				dimensions[row].pop();
			}
			rc.left = xpos;
			rc.top = ypos;
			dimensions[row].push(rc);
			xpos += rc.width;
			if(rc.height > rowCY) {
				rowCY = rc.height;
			}
		}
		if(rowCY > 0) {
			heights.push(rowCY);
		}
		var x = 0;
		var _g = 0;
		while(_g < dimensions.length) {
			var r = dimensions[_g];
			++_g;
			var height = heights[x];
			var spaceX = (r.length - 1) / r.length * this.get_horizontalSpacing();
			var n = 0;
			var _g1 = 0;
			while(_g1 < r.length) {
				var c = r[_g1];
				++_g1;
				switch(this.verticalAlign(c.component)) {
				case "bottom":
					c.top += height - c.height;
					break;
				case "center":
					c.top += height / 2 - c.height / 2;
					break;
				default:
				}
				if(c.component.get_percentWidth() != null) {
					c.left += n * (this.get_horizontalSpacing() - spaceX);
					c.width -= spaceX;
				} else {
					c.left += n * this.get_horizontalSpacing();
				}
				c.apply();
				++n;
			}
			++x;
		}
	}
	,get_usableSize: function() {
		if(this.get_component().get_autoWidth() == true) {
			return haxe_ui_layouts_HorizontalLayout.prototype.get_usableSize.call(this);
		}
		var ucx = 0;
		if(this._component.get_componentWidth() != null) {
			ucx = this._component.get_componentWidth();
			ucx -= this.get_paddingLeft() + this.get_paddingRight();
		}
		var ucy = 0;
		if(this._component.get_componentHeight() != null) {
			ucy = this._component.get_componentHeight();
			ucy -= this.get_paddingTop() + this.get_paddingBottom();
		}
		return new haxe_ui_geom_Size(ucx,ucy);
	}
	,__class__: haxe_ui_layouts_HorizontalContinuousLayout
});
var haxe_ui_layouts_ComponentRectangle = function(left,top,width,height) {
	haxe_ui_geom_Rectangle.call(this,left,top,width,height);
};
$hxClasses["haxe.ui.layouts.ComponentRectangle"] = haxe_ui_layouts_ComponentRectangle;
haxe_ui_layouts_ComponentRectangle.__name__ = "haxe.ui.layouts.ComponentRectangle";
haxe_ui_layouts_ComponentRectangle.__super__ = haxe_ui_geom_Rectangle;
haxe_ui_layouts_ComponentRectangle.prototype = $extend(haxe_ui_geom_Rectangle.prototype,{
	component: null
	,apply: function() {
		this.component.moveComponent(this.left,this.top);
		this.component.resizeComponent(this.width,this.height);
	}
	,__class__: haxe_ui_layouts_ComponentRectangle
});
var haxe_ui_layouts_HorizontalGridLayout = function() {
	this._rows = 1;
	haxe_ui_layouts_Layout.call(this);
};
$hxClasses["haxe.ui.layouts.HorizontalGridLayout"] = haxe_ui_layouts_HorizontalGridLayout;
haxe_ui_layouts_HorizontalGridLayout.__name__ = "haxe.ui.layouts.HorizontalGridLayout";
haxe_ui_layouts_HorizontalGridLayout.__super__ = haxe_ui_layouts_Layout;
haxe_ui_layouts_HorizontalGridLayout.prototype = $extend(haxe_ui_layouts_Layout.prototype,{
	_rows: null
	,get_rows: function() {
		return this._rows;
	}
	,set_rows: function(value) {
		if(this._rows == value) {
			return value;
		}
		this._rows = value;
		if(this._component != null) {
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout");
			}
		}
		return value;
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_Layout.prototype.get_usableSize.call(this);
		var columnWidths = this.calcColumnWidths(size,false);
		var rowHeights = this.calcRowHeights(size,false);
		var _g = 0;
		while(_g < columnWidths.length) {
			var columnWidth = columnWidths[_g];
			++_g;
			size.width -= columnWidth;
		}
		var _g = 0;
		while(_g < rowHeights.length) {
			var rowHeight = rowHeights[_g];
			++_g;
			size.height -= rowHeight;
		}
		var _this = this.get_component();
		if((_this._children == null ? [] : _this._children).length > 1) {
			var _this = this.get_component();
			var columns = Math.ceil((_this._children == null ? [] : _this._children).length / this._rows);
			size.width -= this.get_horizontalSpacing() * (columns - 1);
			size.height -= this.get_verticalSpacing() * (this.get_rows() - 1);
		}
		if(size.width < 0) {
			size.width = 0;
		}
		if(size.height < 0) {
			size.height = 0;
		}
		return size;
	}
	,resizeChildren: function() {
		var size = this.get_usableSize();
		var columnWidths = this.calcColumnWidths(size,true);
		var rowHeights = this.calcRowHeights(size,true);
		var explicitWidths = this.calcExplicitWidths();
		var explicitHeights = this.calcExplicitHeights();
		var totalWidth = 0;
		var totalHeight = 0;
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var cx = null;
			var cy = null;
			if(child.get_percentWidth() != null) {
				var ucx = columnWidths[columnIndex];
				if(explicitWidths[columnIndex] == false) {
					cx = ucx;
				} else {
					cx = ucx * child.get_percentWidth() / 100;
				}
			}
			if(child.get_percentHeight() != null) {
				var ucy = rowHeights[rowIndex];
				if(explicitHeights[rowIndex] == false) {
					cy = ucy;
				} else {
					cy = ucy * child.get_percentHeight() / 100;
				}
			}
			child.resizeComponent(cx,cy);
			++rowIndex;
			if(rowIndex >= this._rows) {
				rowIndex = 0;
				++columnIndex;
			}
		}
	}
	,repositionChildren: function() {
		var size = this.get_usableSize();
		var columnWidths = this.calcColumnWidths(size,true);
		var rowHeights = this.calcRowHeights(size,true);
		var rowIndex = 0;
		var columnIndex = 0;
		var xpos = this.get_paddingLeft();
		var ypos = this.get_paddingTop();
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var halign = this.horizontalAlign(child);
			var valign = this.verticalAlign(child);
			var xposChild = 0;
			var yposChild = 0;
			switch(halign) {
			case "center":
				xposChild = xpos + (columnWidths[columnIndex] - child.get_componentWidth()) * 0.5 + this.marginLeft(child) - this.marginRight(child);
				break;
			case "right":
				xposChild = xpos + (columnWidths[columnIndex] - child.get_componentWidth()) + this.marginLeft(child) - this.marginRight(child);
				break;
			default:
				xposChild = xpos + this.marginLeft(child) - this.marginRight(child);
			}
			switch(valign) {
			case "bottom":
				yposChild = ypos + (rowHeights[rowIndex] - child.get_componentHeight()) + this.marginTop(child) - this.marginBottom(child);
				break;
			case "center":
				yposChild = ypos + (rowHeights[rowIndex] - child.get_componentHeight()) * 0.5 + this.marginTop(child) - this.marginBottom(child);
				break;
			default:
				yposChild = ypos + this.marginTop(child) - this.marginBottom(child);
			}
			child.moveComponent(xposChild,yposChild);
			ypos += rowHeights[rowIndex] + this.get_verticalSpacing();
			++rowIndex;
			if(rowIndex >= this._rows) {
				ypos = this.get_paddingTop();
				xpos += columnWidths[columnIndex] + this.get_horizontalSpacing();
				rowIndex = 0;
				++columnIndex;
			}
		}
	}
	,calcColumnWidths: function(usableSize,includePercentage) {
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
			}
		}
		var columnCount = visibleChildren / this._rows | 0;
		if(visibleChildren % this._rows != 0) {
			++columnCount;
		}
		var columnWidths = [];
		var _g = 0;
		var _g1 = columnCount;
		while(_g < _g1) {
			var n = _g++;
			columnWidths.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentWidth() == null) {
				if(child.get_componentWidth() > columnWidths[columnIndex]) {
					columnWidths[columnIndex] = child.get_componentWidth();
				}
			}
			++rowIndex;
			if(rowIndex >= this._rows) {
				rowIndex = 0;
				++columnIndex;
			}
		}
		if(includePercentage) {
			var copy = columnWidths.slice();
			rowIndex = 0;
			columnIndex = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentWidth() != null) {
					var cx = usableSize.width * child.get_percentWidth() / 100;
					if(cx > columnWidths[rowIndex] && this._rows == 1) {
						columnWidths[columnIndex] = cx;
					} else if(usableSize.width > columnWidths[columnIndex]) {
						columnWidths[columnIndex] = usableSize.width;
					}
				}
				++rowIndex;
				if(rowIndex >= this._rows) {
					rowIndex = 0;
					++columnIndex;
				}
			}
		}
		return columnWidths;
	}
	,calcRowHeights: function(usableSize,includePercentage) {
		var rowHeights = [];
		var _g = 0;
		var _g1 = this._rows;
		while(_g < _g1) {
			var n = _g++;
			rowHeights.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentHeight() == null) {
				if(child.get_componentHeight() > rowHeights[rowIndex]) {
					rowHeights[rowIndex] = child.get_componentHeight();
				}
			}
			++rowIndex;
			if(rowIndex >= this._rows) {
				rowIndex = 0;
				++columnIndex;
			}
		}
		if(includePercentage) {
			var copy = rowHeights.slice();
			rowIndex = 0;
			columnIndex = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentHeight() != null) {
					var cy = usableSize.height * child.get_percentHeight() / 100;
					if(cy > rowHeights[rowIndex]) {
						rowHeights[rowIndex] = cy;
					}
				}
				++rowIndex;
				if(rowIndex >= this._rows) {
					rowIndex = 0;
					++columnIndex;
				}
			}
		}
		return rowHeights;
	}
	,calcExplicitWidths: function() {
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
			}
		}
		var columnCount = visibleChildren / this._rows | 0;
		if(visibleChildren % this._rows != 0) {
			++columnCount;
		}
		var explicitWidths = [];
		var _g = 0;
		var _g1 = columnCount;
		while(_g < _g1) {
			var n = _g++;
			explicitWidths.push(false);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentWidth() == null && child.get_componentWidth() > 0) {
				explicitWidths[rowIndex % this._rows] = true;
			}
			++rowIndex;
			if(rowIndex >= this._rows) {
				rowIndex = 0;
				++columnIndex;
			}
		}
		return explicitWidths;
	}
	,calcExplicitHeights: function() {
		var explicitHeights = [];
		var _g = 0;
		var _g1 = this._rows;
		while(_g < _g1) {
			var n = _g++;
			explicitHeights.push(false);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentHeight() == null && child.get_componentHeight() > 0) {
				explicitHeights[rowIndex] = true;
			}
			++rowIndex;
			if(rowIndex >= this._rows) {
				rowIndex = 0;
				++columnIndex;
			}
		}
		return explicitHeights;
	}
	,__class__: haxe_ui_layouts_HorizontalGridLayout
	,__properties__: $extend(haxe_ui_layouts_Layout.prototype.__properties__,{set_rows:"set_rows",get_rows:"get_rows"})
});
var haxe_ui_layouts_LayoutFactory = function() { };
$hxClasses["haxe.ui.layouts.LayoutFactory"] = haxe_ui_layouts_LayoutFactory;
haxe_ui_layouts_LayoutFactory.__name__ = "haxe.ui.layouts.LayoutFactory";
haxe_ui_layouts_LayoutFactory.createFromName = function(name) {
	switch(name) {
	case "absolute":
		return new haxe_ui_layouts_AbsoluteLayout();
	case "continuous horizontal":case "continuousHorizontal":
		return new haxe_ui_layouts_HorizontalContinuousLayout();
	case "horizontal":
		return new haxe_ui_layouts_HorizontalLayout();
	case "horizontal grid":case "horizontalgrid":
		return new haxe_ui_layouts_HorizontalGridLayout();
	case "vertical":
		return new haxe_ui_layouts_VerticalLayout();
	case "vertical grid":case "verticalgrid":
		return new haxe_ui_layouts_VerticalGridLayout();
	}
	return new haxe_ui_layouts_DefaultLayout();
};
var haxe_ui_layouts_VerticalLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
	this._calcFullHeights = true;
};
$hxClasses["haxe.ui.layouts.VerticalLayout"] = haxe_ui_layouts_VerticalLayout;
haxe_ui_layouts_VerticalLayout.__name__ = "haxe.ui.layouts.VerticalLayout";
haxe_ui_layouts_VerticalLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_VerticalLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		var ypos = this.get_paddingTop();
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var xpos = 0;
			switch(this.horizontalAlign(child)) {
			case "center":
				xpos = (this.get_component().get_componentWidth() - child.get_componentWidth()) / 2 + this.marginLeft(child) - this.marginRight(child);
				break;
			case "right":
				if(child.get_componentWidth() < this.get_component().get_componentWidth()) {
					xpos = this.get_component().get_componentWidth() - (child.get_componentWidth() + this.get_paddingRight() + this.marginLeft(child));
				}
				break;
			default:
				xpos = this.get_paddingLeft() + this.marginLeft(child);
			}
			child.moveComponent(xpos,ypos + this.marginTop(child));
			ypos += child.get_componentHeight() + this.get_verticalSpacing();
		}
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
				continue;
			}
			if(child.get_componentHeight() > 0 && (child.get_percentHeight() == null || this.fixedMinHeight(child) == true)) {
				size.height -= child.get_componentHeight() + this.marginTop(child) + this.marginBottom(child);
			}
		}
		if(visibleChildren > 1) {
			size.height -= this.get_verticalSpacing() * (visibleChildren - 1);
		}
		if(size.height < 0) {
			size.height = 0;
		}
		return size;
	}
	,__class__: haxe_ui_layouts_VerticalLayout
});
var haxe_ui_macros_BackendMacros = function() { };
$hxClasses["haxe.ui.macros.BackendMacros"] = haxe_ui_macros_BackendMacros;
haxe_ui_macros_BackendMacros.__name__ = "haxe.ui.macros.BackendMacros";
var haxe_ui_macros_ModuleMacros = function() { };
$hxClasses["haxe.ui.macros.ModuleMacros"] = haxe_ui_macros_ModuleMacros;
haxe_ui_macros_ModuleMacros.__name__ = "haxe.ui.macros.ModuleMacros";
var haxe_ui_macros_NativeMacros = function() { };
$hxClasses["haxe.ui.macros.NativeMacros"] = haxe_ui_macros_NativeMacros;
haxe_ui_macros_NativeMacros.__name__ = "haxe.ui.macros.NativeMacros";
var haxe_ui_parsers_ui_ComponentInfo = function() {
	this.properties = new haxe_ds_StringMap();
	this.children = [];
	this.scriptlets = [];
	this.styles = [];
};
$hxClasses["haxe.ui.parsers.ui.ComponentInfo"] = haxe_ui_parsers_ui_ComponentInfo;
haxe_ui_parsers_ui_ComponentInfo.__name__ = "haxe.ui.parsers.ui.ComponentInfo";
haxe_ui_parsers_ui_ComponentInfo.prototype = {
	type: null
	,id: null
	,left: null
	,top: null
	,width: null
	,height: null
	,percentWidth: null
	,percentHeight: null
	,contentWidth: null
	,contentHeight: null
	,percentContentWidth: null
	,percentContentHeight: null
	,text: null
	,style: null
	,styleNames: null
	,composite: null
	,layoutName: null
	,direction: null
	,properties: null
	,parent: null
	,children: null
	,layout: null
	,scriptlets: null
	,styles: null
	,data: null
	,condition: null
	,get_styleString: function() {
		if(this.style == null) {
			return null;
		}
		return StringTools.replace(this.style,"\"","'");
	}
	,get_dataString: function() {
		if(this.data == null) {
			return null;
		}
		return StringTools.replace(this.data,"\"","'");
	}
	,findRootComponent: function() {
		var r = this;
		while(r.parent != null) r = r.parent;
		return r;
	}
	,validate: function() {
		var propsToRemove = [];
		if(this.layoutName != null && this.layout == null) {
			this.layout = new haxe_ui_parsers_ui_LayoutInfo();
			this.layout.type = this.layoutName;
			var propName = haxe_ds_StringMap.keysIterator(this.properties.h);
			while(propName.hasNext()) {
				var propName1 = propName.next();
				if(StringTools.startsWith(propName1,"layout")) {
					var propValue = this.properties.h[propName1];
					propsToRemove.push(propName1);
					propName1 = StringTools.replace(propName1,"layout","");
					propName1 = haxe_ui_util_StringUtil.uncapitalizeFirstLetter(propName1);
					this.layout.properties.h[propName1] = propValue;
				}
			}
		}
		var _g = 0;
		while(_g < propsToRemove.length) {
			var propName = propsToRemove[_g];
			++_g;
			var _this = this.properties;
			if(Object.prototype.hasOwnProperty.call(_this.h,propName)) {
				delete(_this.h[propName]);
			}
		}
	}
	,__class__: haxe_ui_parsers_ui_ComponentInfo
	,__properties__: {get_dataString:"get_dataString",get_styleString:"get_styleString"}
};
var haxe_ui_parsers_ui_ComponentParser = function() {
};
$hxClasses["haxe.ui.parsers.ui.ComponentParser"] = haxe_ui_parsers_ui_ComponentParser;
haxe_ui_parsers_ui_ComponentParser.__name__ = "haxe.ui.parsers.ui.ComponentParser";
haxe_ui_parsers_ui_ComponentParser.get = function(extension) {
	haxe_ui_parsers_ui_ComponentParser.defaultParsers();
	var cls = haxe_ui_parsers_ui_ComponentParser._parsers.h[extension];
	if(cls == null) {
		throw haxe_Exception.thrown("No component parser found for \"" + extension + "\"");
	}
	var instance = Type.createInstance(cls,[]);
	if(instance == null) {
		throw haxe_Exception.thrown("Could not create component parser instance \"" + Std.string(cls) + "\"");
	}
	return instance;
};
haxe_ui_parsers_ui_ComponentParser.defaultParsers = function() {
	if(haxe_ui_parsers_ui_ComponentParser._parsers == null) {
		haxe_ui_parsers_ui_ComponentParser.register("xml",haxe_ui_parsers_ui_XMLParser);
	}
};
haxe_ui_parsers_ui_ComponentParser.register = function(extension,cls) {
	if(haxe_ui_parsers_ui_ComponentParser._parsers == null) {
		haxe_ui_parsers_ui_ComponentParser._parsers = new haxe_ds_StringMap();
	}
	haxe_ui_parsers_ui_ComponentParser._parsers.h[extension] = cls;
};
haxe_ui_parsers_ui_ComponentParser.nextId = function(prefix) {
	if(prefix == null) {
		prefix = "component";
	}
	var s = prefix + haxe_ui_parsers_ui_ComponentParser._nextId;
	haxe_ui_parsers_ui_ComponentParser._nextId++;
	return s;
};
haxe_ui_parsers_ui_ComponentParser.float = function(value) {
	return parseFloat(value);
};
haxe_ui_parsers_ui_ComponentParser.isPercentage = function(value) {
	if(value.indexOf("%") == value.length - 1) {
		return true;
	}
	return false;
};
haxe_ui_parsers_ui_ComponentParser.prototype = {
	_resourceResolver: null
	,parse: function(data,resourceResolver) {
		throw haxe_Exception.thrown("Component parser not implemented!");
	}
	,__class__: haxe_ui_parsers_ui_ComponentParser
};
var haxe_ui_parsers_ui_ComponentStyleInfo = function(style,scope) {
	if(scope == null) {
		scope = "global";
	}
	this.style = null;
	this.scope = "global";
	this.style = style;
	this.scope = scope;
};
$hxClasses["haxe.ui.parsers.ui.ComponentStyleInfo"] = haxe_ui_parsers_ui_ComponentStyleInfo;
haxe_ui_parsers_ui_ComponentStyleInfo.__name__ = "haxe.ui.parsers.ui.ComponentStyleInfo";
haxe_ui_parsers_ui_ComponentStyleInfo.prototype = {
	scope: null
	,style: null
	,__class__: haxe_ui_parsers_ui_ComponentStyleInfo
};
var haxe_ui_parsers_ui_LayoutInfo = function() {
	this.properties = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.parsers.ui.LayoutInfo"] = haxe_ui_parsers_ui_LayoutInfo;
haxe_ui_parsers_ui_LayoutInfo.__name__ = "haxe.ui.parsers.ui.LayoutInfo";
haxe_ui_parsers_ui_LayoutInfo.prototype = {
	type: null
	,properties: null
	,__class__: haxe_ui_parsers_ui_LayoutInfo
};
var haxe_ui_parsers_ui_XMLParser = function() {
	haxe_ui_parsers_ui_ComponentParser.call(this);
};
$hxClasses["haxe.ui.parsers.ui.XMLParser"] = haxe_ui_parsers_ui_XMLParser;
haxe_ui_parsers_ui_XMLParser.__name__ = "haxe.ui.parsers.ui.XMLParser";
haxe_ui_parsers_ui_XMLParser.parseComponent = function(component,xml,resourceResolver) {
	var isComponent = false;
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	var nodeName = xml.nodeName;
	if(nodeName == "import") {
		haxe_ui_parsers_ui_XMLParser.parseImportNode(component.parent,xml,resourceResolver);
	} else if(nodeName == "script") {
		haxe_ui_parsers_ui_XMLParser.parseScriptNode(component,xml,resourceResolver);
	} else if(nodeName == "style") {
		haxe_ui_parsers_ui_XMLParser.parseStyleNode(component,xml,resourceResolver);
	} else if(nodeName == "data") {
		if(xml.firstElement() != null) {
			var tmp = haxe_xml_Printer.print(xml);
			component.parent.data = StringTools.trim(tmp);
		} else {
			if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
			}
			var _this = xml.children[0];
			if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
			}
			if(StringTools.startsWith(StringTools.trim(_this.nodeValue),"[")) {
				if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
				}
				var _this = xml.children[0];
				if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
				}
				component.parent.data = StringTools.trim(_this.nodeValue);
			}
		}
	} else if(nodeName == "layout") {
		haxe_ui_parsers_ui_XMLParser.parseLayoutNode(component.parent,xml);
	} else {
		haxe_ui_parsers_ui_XMLParser.parseDetails(component,xml);
		haxe_ui_parsers_ui_XMLParser.parseAttributes(component,xml);
		var childXml = xml.elements();
		while(childXml.hasNext()) {
			var childXml1 = childXml.next();
			var child = new haxe_ui_parsers_ui_ComponentInfo();
			child.parent = component;
			if(haxe_ui_parsers_ui_XMLParser.parseComponent(child,childXml1,resourceResolver) == true) {
				component.children.push(child);
			}
		}
		if(component.type == "itemrenderer" && component.parent != null) {
			component.parent.properties.h["native"] = "false";
		}
		component.validate();
		isComponent = true;
	}
	return isComponent;
};
haxe_ui_parsers_ui_XMLParser.parseImportNode = function(component,xml,resourceResolver) {
	if(xml.get("source") != null || xml.get("resource") != null) {
		var source = xml.get("source");
		if(source == null) {
			source = xml.get("resource");
		}
		var sourceData = resourceResolver.getResourceData(source);
		if(sourceData != null) {
			var extension = resourceResolver.extension(source);
			var c = haxe_ui_parsers_ui_ComponentParser.get(extension).parse(sourceData,resourceResolver);
			component.findRootComponent().styles = component.findRootComponent().styles.concat(c.styles);
			c.styles = [];
			component.findRootComponent().scriptlets = component.findRootComponent().scriptlets.concat(c.scriptlets);
			c.scriptlets = [];
			c.parent = component;
			component.children.push(c);
		}
	}
};
haxe_ui_parsers_ui_XMLParser.parseScriptNode = function(component,xml,resourceResolver) {
	var scriptText = null;
	if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	if(xml.children[0] != null) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var _this = xml.children[0];
		if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
		}
		scriptText = _this.nodeValue;
	}
	if(xml.get("source") != null) {
		var source = xml.get("source");
		var sourceData = resourceResolver.getResourceData(source);
		if(sourceData != null) {
			if(scriptText == null) {
				scriptText = "";
			}
			scriptText += "\n" + sourceData;
		}
	}
	if(scriptText != null) {
		var scope = "global";
		if(scope == "global") {
			component.findRootComponent().scriptlets.push(scriptText);
		}
	}
};
haxe_ui_parsers_ui_XMLParser.parseStyleNode = function(component,xml,resourceResolver) {
	var styleText = null;
	if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	if(xml.children[0] != null) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var _this = xml.children[0];
		if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
		}
		styleText = _this.nodeValue;
	}
	if(xml.get("source") != null) {
		var source = xml.get("source");
		var sourceData = resourceResolver.getResourceData(source);
		if(sourceData != null) {
			if(styleText == null) {
				styleText = "";
			}
			styleText += "\n" + sourceData;
		}
	}
	if(styleText != null) {
		var scope = xml.get("scope");
		if(scope == null) {
			scope = "global";
		}
		if(scope == "global") {
			component.findRootComponent().styles.push(new haxe_ui_parsers_ui_ComponentStyleInfo(styleText,scope));
		} else if(scope == "local" && component.parent != null) {
			component.parent.styles.push(new haxe_ui_parsers_ui_ComponentStyleInfo(styleText,scope));
		}
	}
};
haxe_ui_parsers_ui_XMLParser.parseLayoutNode = function(component,xml) {
	var layoutXml = xml.firstElement();
	var layout = new haxe_ui_parsers_ui_LayoutInfo();
	component.layout = layout;
	if(layoutXml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (layoutXml.nodeType == null ? "null" : XmlType.toString(layoutXml.nodeType)));
	}
	layout.type = layoutXml.nodeName;
	var attrName = layoutXml.attributes();
	while(attrName.hasNext()) {
		var attrName1 = attrName.next();
		var attrValue = layoutXml.get(attrName1);
		layout.properties.h[attrName1] = attrValue;
	}
};
haxe_ui_parsers_ui_XMLParser.parseDetails = function(component,xml) {
	var tmp;
	if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	if(xml.children[0] != null) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var tmp1 = xml.children[0].nodeType;
		tmp = "" + (tmp1 == null ? "null" : XmlType.toString(tmp1)) == "1";
	} else {
		tmp = false;
	}
	if(tmp) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var _this = xml.children[0];
		if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
		}
		var value = StringTools.trim(_this.nodeValue);
		if(value != null && value.length > 0) {
			component.text = value;
		}
	}
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	component.type = StringTools.replace(xml.nodeName.toLowerCase(),"-","");
};
haxe_ui_parsers_ui_XMLParser.parseAttributes = function(component,xml) {
	var attrName = xml.attributes();
	while(attrName.hasNext()) {
		var attrName1 = attrName.next();
		var attrValue = xml.get(attrName1);
		switch(attrName1) {
		case "composite":
			component.composite = attrValue == "true";
			break;
		case "condition":
			component.condition = attrValue;
			break;
		case "contentHeight":
			if(haxe_ui_parsers_ui_ComponentParser.isPercentage(attrValue) == true) {
				component.percentContentHeight = haxe_ui_parsers_ui_ComponentParser.float(attrValue);
			} else {
				component.contentHeight = haxe_ui_parsers_ui_ComponentParser.float(attrValue);
			}
			break;
		case "contentWidth":
			if(haxe_ui_parsers_ui_ComponentParser.isPercentage(attrValue) == true) {
				component.percentContentWidth = haxe_ui_parsers_ui_ComponentParser.float(attrValue);
			} else {
				component.contentWidth = haxe_ui_parsers_ui_ComponentParser.float(attrValue);
			}
			break;
		case "direction":
			component.direction = attrValue;
			break;
		case "height":
			if(haxe_ui_parsers_ui_ComponentParser.isPercentage(attrValue) == true) {
				component.percentHeight = haxe_ui_parsers_ui_ComponentParser.float(attrValue);
			} else {
				component.height = haxe_ui_parsers_ui_ComponentParser.float(attrValue);
			}
			break;
		case "id":
			component.id = attrValue;
			break;
		case "if":
			var condition = [];
			var _g = 0;
			var _g1 = attrValue.split(",");
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				condition.push("backend == \"" + StringTools.trim(t) + "\"");
			}
			component.condition = condition.join(" || ");
			break;
		case "layout":
			component.layoutName = attrValue;
			break;
		case "left":
			component.left = haxe_ui_parsers_ui_ComponentParser.float(attrValue);
			break;
		case "style":
			component.style = attrValue;
			break;
		case "styleName":case "styleNames":
			component.styleNames = attrValue;
			break;
		case "text":
			component.text = attrValue;
			break;
		case "top":
			component.top = haxe_ui_parsers_ui_ComponentParser.float(attrValue);
			break;
		case "unless":
			var condition1 = [];
			var _g2 = 0;
			var _g3 = attrValue.split(",");
			while(_g2 < _g3.length) {
				var t1 = _g3[_g2];
				++_g2;
				condition1.push("backend != \"" + StringTools.trim(t1) + "\"");
			}
			component.condition = condition1.join(" && ");
			break;
		case "width":
			if(haxe_ui_parsers_ui_ComponentParser.isPercentage(attrValue) == true) {
				component.percentWidth = haxe_ui_parsers_ui_ComponentParser.float(attrValue);
			} else {
				component.width = haxe_ui_parsers_ui_ComponentParser.float(attrValue);
			}
			break;
		default:
			component.properties.h[attrName1] = attrValue;
		}
	}
};
haxe_ui_parsers_ui_XMLParser.__super__ = haxe_ui_parsers_ui_ComponentParser;
haxe_ui_parsers_ui_XMLParser.prototype = $extend(haxe_ui_parsers_ui_ComponentParser.prototype,{
	parse: function(data,resourceResolver) {
		this._resourceResolver = resourceResolver;
		var component = new haxe_ui_parsers_ui_ComponentInfo();
		var xml = Xml.parse(data).firstElement();
		haxe_ui_parsers_ui_XMLParser.parseComponent(component,xml,resourceResolver);
		return component;
	}
	,__class__: haxe_ui_parsers_ui_XMLParser
});
var haxe_ui_parsers_ui_resolvers_ResourceResolver = function(params) {
	this._params = params;
};
$hxClasses["haxe.ui.parsers.ui.resolvers.ResourceResolver"] = haxe_ui_parsers_ui_resolvers_ResourceResolver;
haxe_ui_parsers_ui_resolvers_ResourceResolver.__name__ = "haxe.ui.parsers.ui.resolvers.ResourceResolver";
haxe_ui_parsers_ui_resolvers_ResourceResolver.prototype = {
	_params: null
	,getResourceData: function(r) {
		return null;
	}
	,extension: function(path) {
		if(path.indexOf(".") == -1) {
			return null;
		}
		var arr = path.split(".");
		var extension = arr[arr.length - 1];
		return extension;
	}
	,__class__: haxe_ui_parsers_ui_resolvers_ResourceResolver
};
var haxe_ui_parsers_ui_resolvers_AssetResourceResolver = function(rootFile,params) {
	haxe_ui_parsers_ui_resolvers_ResourceResolver.call(this,params);
	this._rootFile = rootFile;
	var arr = this._rootFile.split("/");
	arr.pop();
	this._rootDir = arr.join("/");
	if(arr.length > 1) {
		this._rootDir += "/";
	}
};
$hxClasses["haxe.ui.parsers.ui.resolvers.AssetResourceResolver"] = haxe_ui_parsers_ui_resolvers_AssetResourceResolver;
haxe_ui_parsers_ui_resolvers_AssetResourceResolver.__name__ = "haxe.ui.parsers.ui.resolvers.AssetResourceResolver";
haxe_ui_parsers_ui_resolvers_AssetResourceResolver.__super__ = haxe_ui_parsers_ui_resolvers_ResourceResolver;
haxe_ui_parsers_ui_resolvers_AssetResourceResolver.prototype = $extend(haxe_ui_parsers_ui_resolvers_ResourceResolver.prototype,{
	_rootFile: null
	,_rootDir: null
	,getResourceData: function(r) {
		var f = haxe_io_Path.normalize(this._rootDir + r);
		return haxe_ui_ToolkitAssets.get_instance().getText(f);
	}
	,__class__: haxe_ui_parsers_ui_resolvers_AssetResourceResolver
});
var haxe_ui_scripting_ConditionEvaluator = function() {
};
$hxClasses["haxe.ui.scripting.ConditionEvaluator"] = haxe_ui_scripting_ConditionEvaluator;
haxe_ui_scripting_ConditionEvaluator.__name__ = "haxe.ui.scripting.ConditionEvaluator";
haxe_ui_scripting_ConditionEvaluator.prototype = {
	evaluate: function(condition) {
		if(haxe_ui_scripting_ConditionEvaluator._parser == null) {
			haxe_ui_scripting_ConditionEvaluator._parser = new hscript_Parser();
		}
		if(haxe_ui_scripting_ConditionEvaluator._interp == null) {
			haxe_ui_scripting_ConditionEvaluator._interp = new hscript_Interp();
		}
		haxe_ui_scripting_ConditionEvaluator._interp.variables.h["Backend"] = haxe_ui_Backend;
		var this1 = haxe_ui_scripting_ConditionEvaluator._interp.variables;
		var value = haxe_ui_Backend.get_id();
		this1.h["backend"] = value;
		var program = haxe_ui_scripting_ConditionEvaluator._parser.parseString(condition);
		var r = haxe_ui_scripting_ConditionEvaluator._interp.execute(program);
		return r;
	}
	,__class__: haxe_ui_scripting_ConditionEvaluator
};
var hscript_Interp = function() {
	var _gthis = this;
	this.variables = new haxe_ds_StringMap();
	this.locals = new haxe_ds_StringMap();
	this.declared = [];
	this.variables.h["null"] = null;
	this.variables.h["true"] = true;
	this.variables.h["false"] = false;
	this.variables.h["trace"] = function(e) {
		haxe_Log.trace(Std.string(e),_gthis.posInfos());
	};
	this.initOps();
};
$hxClasses["hscript.Interp"] = hscript_Interp;
hscript_Interp.__name__ = "hscript.Interp";
hscript_Interp.prototype = {
	variables: null
	,locals: null
	,binops: null
	,depth: null
	,inTry: null
	,declared: null
	,posInfos: function() {
		return { fileName : "hscript", lineNumber : 0};
	}
	,initOps: function() {
		var me = this;
		this.binops = new haxe_ds_StringMap();
		this.binops.h["+"] = function(e1,e2) {
			return me.expr(e1) + me.expr(e2);
		};
		this.binops.h["-"] = function(e1,e2) {
			return me.expr(e1) - me.expr(e2);
		};
		this.binops.h["*"] = function(e1,e2) {
			return me.expr(e1) * me.expr(e2);
		};
		this.binops.h["/"] = function(e1,e2) {
			return me.expr(e1) / me.expr(e2);
		};
		this.binops.h["%"] = function(e1,e2) {
			return me.expr(e1) % me.expr(e2);
		};
		this.binops.h["&"] = function(e1,e2) {
			return me.expr(e1) & me.expr(e2);
		};
		this.binops.h["|"] = function(e1,e2) {
			return me.expr(e1) | me.expr(e2);
		};
		this.binops.h["^"] = function(e1,e2) {
			return me.expr(e1) ^ me.expr(e2);
		};
		this.binops.h["<<"] = function(e1,e2) {
			return me.expr(e1) << me.expr(e2);
		};
		this.binops.h[">>"] = function(e1,e2) {
			return me.expr(e1) >> me.expr(e2);
		};
		this.binops.h[">>>"] = function(e1,e2) {
			return me.expr(e1) >>> me.expr(e2);
		};
		this.binops.h["=="] = function(e1,e2) {
			return me.expr(e1) == me.expr(e2);
		};
		this.binops.h["!="] = function(e1,e2) {
			return me.expr(e1) != me.expr(e2);
		};
		this.binops.h[">="] = function(e1,e2) {
			return me.expr(e1) >= me.expr(e2);
		};
		this.binops.h["<="] = function(e1,e2) {
			return me.expr(e1) <= me.expr(e2);
		};
		this.binops.h[">"] = function(e1,e2) {
			return me.expr(e1) > me.expr(e2);
		};
		this.binops.h["<"] = function(e1,e2) {
			return me.expr(e1) < me.expr(e2);
		};
		this.binops.h["||"] = function(e1,e2) {
			if(me.expr(e1) != true) {
				return me.expr(e2) == true;
			} else {
				return true;
			}
		};
		this.binops.h["&&"] = function(e1,e2) {
			if(me.expr(e1) == true) {
				return me.expr(e2) == true;
			} else {
				return false;
			}
		};
		this.binops.h["="] = $bind(this,this.assign);
		this.binops.h["..."] = function(e1,e2) {
			return new IntIterator(me.expr(e1),me.expr(e2));
		};
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v1,v2) {
			return v1 - v2;
		});
		this.assignOp("*=",function(v1,v2) {
			return v1 * v2;
		});
		this.assignOp("/=",function(v1,v2) {
			return v1 / v2;
		});
		this.assignOp("%=",function(v1,v2) {
			return v1 % v2;
		});
		this.assignOp("&=",function(v1,v2) {
			return v1 & v2;
		});
		this.assignOp("|=",function(v1,v2) {
			return v1 | v2;
		});
		this.assignOp("^=",function(v1,v2) {
			return v1 ^ v2;
		});
		this.assignOp("<<=",function(v1,v2) {
			return v1 << v2;
		});
		this.assignOp(">>=",function(v1,v2) {
			return v1 >> v2;
		});
		this.assignOp(">>>=",function(v1,v2) {
			return v1 >>> v2;
		});
	}
	,assign: function(e1,e2) {
		var v = this.expr(e2);
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var l = this.locals.h[id];
			if(l == null) {
				this.variables.h[id] = v;
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1.f;
			var e = e1.e;
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			var index = e1.index;
			var e = e1.e;
			var arr = this.expr(e);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				arr[index1] = v;
			}
			break;
		default:
			throw haxe_Exception.thrown(hscript_Error.EInvalidOp("="));
		}
		return v;
	}
	,assignOp: function(op,fop) {
		var me = this;
		this.binops.h[op] = function(e1,e2) {
			return me.evalAssignOp(op,fop,e1,e2);
		};
	}
	,evalAssignOp: function(op,fop,e1,e2) {
		var v;
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var l = this.locals.h[id];
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) {
				this.variables.h[id] = v;
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1.f;
			var e = e1.e;
			var obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			var index = e1.index;
			var e = e1.e;
			var arr = this.expr(e);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				v = fop((js_Boot.__cast(arr , haxe_IMap)).get(index1),this.expr(e2));
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				v = fop(arr[index1],this.expr(e2));
				arr[index1] = v;
			}
			break;
		default:
			throw haxe_Exception.thrown(hscript_Error.EInvalidOp(op));
		}
		return v;
	}
	,increment: function(e,prefix,delta) {
		switch(e._hx_index) {
		case 1:
			var id = e.v;
			var l = this.locals.h[id];
			var v = l == null ? this.variables.h[id] : l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					this.variables.h[id] = v;
				} else {
					l.r = v;
				}
			} else if(l == null) {
				this.variables.h[id] = v + delta;
			} else {
				l.r = v + delta;
			}
			return v;
		case 5:
			var f = e.f;
			var e1 = e.e;
			var obj = this.expr(e1);
			var v = this.get(obj,f);
			if(prefix) {
				v += delta;
				this.set(obj,f,v);
			} else {
				this.set(obj,f,v + delta);
			}
			return v;
		case 16:
			var index = e.index;
			var e1 = e.e;
			var arr = this.expr(e1);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				var v = (js_Boot.__cast(arr , haxe_IMap)).get(index1);
				if(prefix) {
					v += delta;
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
				} else {
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v + delta);
				}
				return v;
			} else {
				var v = arr[index1];
				if(prefix) {
					v += delta;
					arr[index1] = v;
				} else {
					arr[index1] = v + delta;
				}
				return v;
			}
			break;
		default:
			throw haxe_Exception.thrown(hscript_Error.EInvalidOp(delta > 0 ? "++" : "--"));
		}
	}
	,execute: function(expr) {
		this.depth = 0;
		this.locals = new haxe_ds_StringMap();
		this.declared = [];
		return this.exprReturn(expr);
	}
	,exprReturn: function(e) {
		try {
			return this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				var e = _g1;
				switch(e._hx_index) {
				case 0:
					throw haxe_Exception.thrown("Invalid break");
				case 1:
					throw haxe_Exception.thrown("Invalid continue");
				case 2:
					var v = e.v;
					return v;
				}
			} else {
				throw _g;
			}
		}
	}
	,duplicate: function(h) {
		var h2 = new haxe_ds_StringMap();
		var k = haxe_ds_StringMap.keysIterator(h.h);
		while(k.hasNext()) {
			var k1 = k.next();
			h2.h[k1] = h.h[k1];
		}
		return h2;
	}
	,restore: function(old) {
		while(this.declared.length > old) {
			var d = this.declared.pop();
			this.locals.h[d.n] = d.old;
		}
	}
	,edef: function(e) {
		return e;
	}
	,error: function(e) {
		throw haxe_Exception.thrown(e);
	}
	,resolve: function(id) {
		var l = this.locals.h[id];
		if(l != null) {
			return l.r;
		}
		var v = this.variables.h[id];
		if(v == null && !Object.prototype.hasOwnProperty.call(this.variables.h,id)) {
			throw haxe_Exception.thrown(hscript_Error.EUnknownVariable(id));
		}
		return v;
	}
	,expr: function(e) {
		var _gthis = this;
		switch(e._hx_index) {
		case 0:
			var c = e.c;
			switch(c._hx_index) {
			case 0:
				var v = c.v;
				return v;
			case 1:
				var f = c.f;
				return f;
			case 2:
				var s = c.s;
				return s;
			}
			break;
		case 1:
			var id = e.v;
			return this.resolve(id);
		case 2:
			var _g = e.t;
			var e1 = e.e;
			var n = e.n;
			this.declared.push({ n : n, old : this.locals.h[n]});
			var this1 = this.locals;
			var value = e1 == null ? null : this.expr(e1);
			this1.h[n] = { r : value};
			return null;
		case 3:
			var e1 = e.e;
			return this.expr(e1);
		case 4:
			var exprs = e.e;
			var old = this.declared.length;
			var v = null;
			var _g = 0;
			while(_g < exprs.length) {
				var e1 = exprs[_g];
				++_g;
				v = this.expr(e1);
			}
			this.restore(old);
			return v;
		case 5:
			var f = e.f;
			var e1 = e.e;
			return this.get(this.expr(e1),f);
		case 6:
			var e2 = e.e2;
			var e1 = e.e1;
			var op = e.op;
			var fop = this.binops.h[op];
			if(fop == null) {
				throw haxe_Exception.thrown(hscript_Error.EInvalidOp(op));
			}
			return fop(e1,e2);
		case 7:
			var e1 = e.e;
			var prefix = e.prefix;
			var op = e.op;
			switch(op) {
			case "!":
				return this.expr(e1) != true;
			case "++":
				return this.increment(e1,prefix,1);
			case "-":
				return -this.expr(e1);
			case "--":
				return this.increment(e1,prefix,-1);
			case "~":
				return ~this.expr(e1);
			default:
				throw haxe_Exception.thrown(hscript_Error.EInvalidOp(op));
			}
			break;
		case 8:
			var params = e.params;
			var e1 = e.e;
			var args = [];
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				args.push(this.expr(p));
			}
			if(e1._hx_index == 5) {
				var f = e1.f;
				var e2 = e1.e;
				var obj = this.expr(e2);
				if(obj == null) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidAccess(f));
				}
				return this.fcall(obj,f,args);
			} else {
				return this.call(null,this.expr(e1),args);
			}
			break;
		case 9:
			var e2 = e.e2;
			var e1 = e.e1;
			var econd = e.cond;
			if(this.expr(econd) == true) {
				return this.expr(e1);
			} else if(e2 == null) {
				return null;
			} else {
				return this.expr(e2);
			}
			break;
		case 10:
			var e1 = e.e;
			var econd = e.cond;
			this.whileLoop(econd,e1);
			return null;
		case 11:
			var e1 = e.e;
			var it = e.it;
			var v = e.v;
			this.forLoop(v,it,e1);
			return null;
		case 12:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SBreak);
		case 13:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SContinue);
		case 14:
			var _g = e.ret;
			var name = e.name;
			var fexpr = e.e;
			var params = e.args;
			var capturedLocals = this.duplicate(this.locals);
			var me = this;
			var hasOpt = false;
			var minParams = 0;
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				if(p.opt) {
					hasOpt = true;
				} else {
					minParams += 1;
				}
			}
			var f = function(args) {
				if(args.length != params.length) {
					if(args.length < minParams) {
						var str = "Invalid number of parameters. Got " + args.length + ", required " + minParams;
						if(name != null) {
							str += " for function '" + name + "'";
						}
						throw haxe_Exception.thrown(str);
					}
					var args2 = [];
					var extraParams = args.length - minParams;
					var pos = 0;
					var _g = 0;
					while(_g < params.length) {
						var p = params[_g];
						++_g;
						if(p.opt) {
							if(extraParams > 0) {
								args2.push(args[pos++]);
								--extraParams;
							} else {
								args2.push(null);
							}
						} else {
							args2.push(args[pos++]);
						}
					}
					args = args2;
				}
				var old = me.locals;
				var depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				var _g = 0;
				var _g1 = params.length;
				while(_g < _g1) {
					var i = _g++;
					me.locals.h[params[i].name] = { r : args[i]};
				}
				var r = null;
				if(_gthis.inTry) {
					try {
						r = me.exprReturn(fexpr);
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						var e = haxe_Exception.caught(_g).unwrap();
						me.locals = old;
						me.depth = depth;
						throw haxe_Exception.thrown(e);
					}
				} else {
					r = me.exprReturn(fexpr);
				}
				me.locals = old;
				me.depth = depth;
				return r;
			};
			var f1 = Reflect.makeVarArgs(f);
			if(name != null) {
				if(this.depth == 0) {
					this.variables.h[name] = f1;
				} else {
					this.declared.push({ n : name, old : this.locals.h[name]});
					var ref = { r : f1};
					this.locals.h[name] = ref;
					capturedLocals.h[name] = ref;
				}
			}
			return f1;
		case 15:
			var e1 = e.e;
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SReturn(e1 == null ? null : this.expr(e1)));
		case 16:
			var index = e.index;
			var e1 = e.e;
			var arr = this.expr(e1);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				return (js_Boot.__cast(arr , haxe_IMap)).get(index1);
			} else {
				return arr[index1];
			}
			break;
		case 17:
			var arr = e.e;
			var tmp;
			if(arr.length > 0) {
				var _g = arr[0];
				if(_g._hx_index == 6) {
					var _g1 = _g.e2;
					var _g1 = _g.e1;
					tmp = _g.op == "=>";
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var isAllString = true;
				var isAllInt = true;
				var isAllObject = true;
				var isAllEnum = true;
				var keys = [];
				var values = [];
				var _g = 0;
				while(_g < arr.length) {
					var e1 = arr[_g];
					++_g;
					if(e1._hx_index == 6) {
						if(e1.op == "=>") {
							var eValue = e1.e2;
							var eKey = e1.e1;
							var key = this.expr(eKey);
							var value = this.expr(eValue);
							isAllString = isAllString && typeof(key) == "string";
							isAllInt = isAllInt && (typeof(key) == "number" && ((key | 0) === key));
							isAllObject = isAllObject && Reflect.isObject(key);
							isAllEnum = isAllEnum && Reflect.isEnumValue(key);
							keys.push(key);
							values.push(value);
						} else {
							throw haxe_Exception.thrown("=> expected");
						}
					} else {
						throw haxe_Exception.thrown("=> expected");
					}
				}
				var map;
				if(isAllInt) {
					map = new haxe_ds_IntMap();
				} else if(isAllString) {
					map = new haxe_ds_StringMap();
				} else if(isAllEnum) {
					map = new haxe_ds_EnumValueMap();
				} else if(isAllObject) {
					map = new haxe_ds_ObjectMap();
				} else {
					throw haxe_Exception.thrown("Inconsistent key types");
				}
				var _g = 0;
				var _g1 = keys.length;
				while(_g < _g1) {
					var n = _g++;
					(js_Boot.__cast(map , haxe_IMap)).set(keys[n],values[n]);
				}
				return map;
			} else {
				var a = [];
				var _g = 0;
				while(_g < arr.length) {
					var e1 = arr[_g];
					++_g;
					a.push(this.expr(e1));
				}
				return a;
			}
			break;
		case 18:
			var params1 = e.params;
			var cl = e.cl;
			var a = [];
			var _g = 0;
			while(_g < params1.length) {
				var e1 = params1[_g];
				++_g;
				a.push(this.expr(e1));
			}
			return this.cnew(cl,a);
		case 19:
			var e1 = e.e;
			throw haxe_Exception.thrown(this.expr(e1));
		case 20:
			var _g = e.t;
			var ecatch = e.ecatch;
			var n = e.v;
			var e1 = e.e;
			var old = this.declared.length;
			var oldTry = this.inTry;
			try {
				this.inTry = true;
				var v = this.expr(e1);
				this.restore(old);
				this.inTry = oldTry;
				return v;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					this.inTry = oldTry;
					throw haxe_Exception.thrown(err);
				} else {
					var err = _g1;
					this.restore(old);
					this.inTry = oldTry;
					this.declared.push({ n : n, old : this.locals.h[n]});
					this.locals.h[n] = { r : err};
					var v = this.expr(ecatch);
					this.restore(old);
					return v;
				}
			}
			break;
		case 21:
			var fl = e.fl;
			var o = { };
			var _g = 0;
			while(_g < fl.length) {
				var f = fl[_g];
				++_g;
				this.set(o,f.name,this.expr(f.e));
			}
			return o;
		case 22:
			var e2 = e.e2;
			var e1 = e.e1;
			var econd = e.cond;
			if(this.expr(econd) == true) {
				return this.expr(e1);
			} else {
				return this.expr(e2);
			}
			break;
		case 23:
			var def = e.defaultExpr;
			var cases = e.cases;
			var e1 = e.e;
			var val = this.expr(e1);
			var match = false;
			var _g = 0;
			while(_g < cases.length) {
				var c = cases[_g];
				++_g;
				var _g1 = 0;
				var _g2 = c.values;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(this.expr(v) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c.expr);
					break;
				}
			}
			if(!match) {
				val = def == null ? null : this.expr(def);
			}
			return val;
		case 24:
			var e1 = e.e;
			var econd = e.cond;
			this.doWhileLoop(econd,e1);
			return null;
		case 25:
			var _g = e.args;
			var _g = e.name;
			var e1 = e.e;
			return this.expr(e1);
		}
	}
	,doWhileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(true) {
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						var _g2 = err.v;
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
			if(!(this.expr(econd) == true)) {
				break;
			}
		}
		this.restore(old);
	}
	,whileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(this.expr(econd) == true) try {
			this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				var err = _g1;
				switch(err._hx_index) {
				case 0:
					break _hx_loop1;
				case 1:
					break;
				case 2:
					var _g2 = err.v;
					throw haxe_Exception.thrown(err);
				}
			} else {
				throw _g;
			}
		}
		this.restore(old);
	}
	,makeIterator: function(v) {
		try {
			v = $getIterator(v);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		if(v.hasNext == null || v.next == null) {
			throw haxe_Exception.thrown(hscript_Error.EInvalidIterator(v));
		}
		return v;
	}
	,forLoop: function(n,it,e) {
		var old = this.declared.length;
		this.declared.push({ n : n, old : this.locals.h[n]});
		var it1 = this.makeIterator(this.expr(it));
		_hx_loop1: while(it1.hasNext()) {
			var this1 = this.locals;
			var value = { r : it1.next()};
			this1.h[n] = value;
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						var _g2 = err.v;
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
		}
		this.restore(old);
	}
	,isMap: function(o) {
		return js_Boot.__implements(o,haxe_IMap);
	}
	,getMapValue: function(map,key) {
		return (js_Boot.__cast(map , haxe_IMap)).get(key);
	}
	,setMapValue: function(map,key,value) {
		(js_Boot.__cast(map , haxe_IMap)).set(key,value);
	}
	,get: function(o,f) {
		if(o == null) {
			throw haxe_Exception.thrown(hscript_Error.EInvalidAccess(f));
		}
		return Reflect.getProperty(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) {
			throw haxe_Exception.thrown(hscript_Error.EInvalidAccess(f));
		}
		Reflect.setProperty(o,f,v);
		return v;
	}
	,fcall: function(o,f,args) {
		return this.call(o,this.get(o,f),args);
	}
	,call: function(o,f,args) {
		return f.apply(o,args);
	}
	,cnew: function(cl,args) {
		var c = $hxClasses[cl];
		if(c == null) {
			c = this.resolve(cl);
		}
		return Type.createInstance(c,args);
	}
	,__class__: hscript_Interp
};
var haxe_ui_scripting_ScriptInterp = function() {
	hscript_Interp.call(this);
	if(haxe_ui_scripting_ScriptInterp._staticClasses != null) {
		var name = haxe_ds_StringMap.keysIterator(haxe_ui_scripting_ScriptInterp._staticClasses.h);
		while(name.hasNext()) {
			var name1 = name.next();
			var c = haxe_ui_scripting_ScriptInterp._staticClasses.h[name1];
			this.variables.h[name1] = c;
		}
	}
	this.variables.h["isVar"] = $bind(this,this.isVar);
};
$hxClasses["haxe.ui.scripting.ScriptInterp"] = haxe_ui_scripting_ScriptInterp;
haxe_ui_scripting_ScriptInterp.__name__ = "haxe.ui.scripting.ScriptInterp";
haxe_ui_scripting_ScriptInterp.addClassAlias = function(alias,classPath) {
	if(haxe_ui_scripting_ScriptInterp._classAliases == null) {
		haxe_ui_scripting_ScriptInterp._classAliases = new haxe_ds_StringMap();
	}
	haxe_ui_scripting_ScriptInterp._classAliases.h[alias] = classPath;
};
haxe_ui_scripting_ScriptInterp.addStaticClass = function(alias,c) {
	if(haxe_ui_scripting_ScriptInterp._staticClasses == null) {
		haxe_ui_scripting_ScriptInterp._staticClasses = new haxe_ds_StringMap();
	}
	haxe_ui_scripting_ScriptInterp._staticClasses.h[alias] = c;
};
haxe_ui_scripting_ScriptInterp.__super__ = hscript_Interp;
haxe_ui_scripting_ScriptInterp.prototype = $extend(hscript_Interp.prototype,{
	isVar: function(varName) {
		return Object.prototype.hasOwnProperty.call(this.variables.h,varName);
	}
	,cnew: function(cl,args) {
		if(haxe_ui_scripting_ScriptInterp._classAliases != null && Object.prototype.hasOwnProperty.call(haxe_ui_scripting_ScriptInterp._classAliases.h,cl)) {
			cl = haxe_ui_scripting_ScriptInterp._classAliases.h[cl];
		}
		return hscript_Interp.prototype.cnew.call(this,cl,args);
	}
	,get: function(o,f) {
		if(o == null) {
			throw haxe_Exception.thrown(hscript_Error.EInvalidAccess(f));
		}
		var v = Reflect.getProperty(o,f);
		return this.parseResult(v);
	}
	,parseResult: function(v) {
		if(v == null) {
			return v;
		}
		if(((v) instanceof haxe_ui_core_Component) || ((v) instanceof Array)) {
			return v;
		}
		var temp = Std.string(v);
		var regexp = new EReg("^_?(Bool|Float|Int|String)\\((.*)\\)","g");
		if(regexp.match(temp) == false) {
			return v;
		}
		var m1 = regexp.matched(1);
		var m2 = regexp.matched(2);
		switch(m1) {
		case "Bool":
			return parseFloat(m2);
		case "Float":
			return parseFloat(m2);
		case "Int":
			return Std.parseInt(m2);
		case "String":
			if(m2 == null) {
				return "null";
			} else {
				return "" + m2;
			}
			break;
		default:
		}
		return v;
	}
	,set: function(o,f,v) {
		if(o == null) {
			throw haxe_Exception.thrown(hscript_Error.EInvalidAccess(f));
		}
		Reflect.setProperty(o,f,v);
		return v;
	}
	,__class__: haxe_ui_scripting_ScriptInterp
});
var haxe_ui_styles_Dimension = $hxEnums["haxe.ui.styles.Dimension"] = { __ename__ : true, __constructs__ : ["PERCENT","PX","VW","VH","REM","CALC"]
	,PERCENT: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_.__params__ = ["value"],$_)
	,PX: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_.__params__ = ["value"],$_)
	,VW: ($_=function(value) { return {_hx_index:2,value:value,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_.__params__ = ["value"],$_)
	,VH: ($_=function(value) { return {_hx_index:3,value:value,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_.__params__ = ["value"],$_)
	,REM: ($_=function(value) { return {_hx_index:4,value:value,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_.__params__ = ["value"],$_)
	,CALC: ($_=function(s) { return {_hx_index:5,s:s,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_.__params__ = ["s"],$_)
};
var haxe_ui_styles_EasingFunction = $hxEnums["haxe.ui.styles.EasingFunction"] = { __ename__ : true, __constructs__ : ["LINEAR","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT"]
	,LINEAR: {_hx_index:0,__enum__:"haxe.ui.styles.EasingFunction",toString:$estr}
	,EASE: {_hx_index:1,__enum__:"haxe.ui.styles.EasingFunction",toString:$estr}
	,EASE_IN: {_hx_index:2,__enum__:"haxe.ui.styles.EasingFunction",toString:$estr}
	,EASE_OUT: {_hx_index:3,__enum__:"haxe.ui.styles.EasingFunction",toString:$estr}
	,EASE_IN_OUT: {_hx_index:4,__enum__:"haxe.ui.styles.EasingFunction",toString:$estr}
};
var haxe_ui_styles_Parser = function() {
};
$hxClasses["haxe.ui.styles.Parser"] = haxe_ui_styles_Parser;
haxe_ui_styles_Parser.__name__ = "haxe.ui.styles.Parser";
haxe_ui_styles_Parser.prototype = {
	parse: function(source) {
		var _gthis = this;
		source = source.replace(haxe_ui_styles_Parser.cssCommentsRegex.r,"");
		var styleSheet = new haxe_ui_styles_StyleSheet();
		source = haxe_ui_styles_Parser.cssImportStatementRegex.map(source,function(e) {
			var i = e.matched(0);
			i = HxOverrides.substr(i,7,null);
			var _this_r = new RegExp("\"|'|;","g".split("u").join(""));
			i = i.replace(_this_r,"");
			i = StringTools.trim(i);
			styleSheet.addImport(new haxe_ui_styles_elements_ImportElement(i));
			return "";
		});
		source = haxe_ui_styles_Parser.cssKeyframesRegex.map(source,function(e) {
			var id = e.matched(1);
			var data = e.matched(2);
			var keyframes = [];
			haxe_ui_styles_Parser.cssKeyframeSelectorRegex.map(data,function(e) {
				var selector = e.matched(1);
				var directives = e.matched(2);
				if(selector == "from") {
					selector = "0%";
				} else if(selector == "to") {
					selector = "100%";
				}
				var keyframe = new haxe_ui_styles_elements_AnimationKeyFrame();
				keyframe.time = haxe_ui_styles_ValueTools.parse(selector);
				keyframe.directives = _gthis.parseDirectives(directives);
				keyframes.push(keyframe);
				return null;
			});
			var animation = new haxe_ui_styles_elements_AnimationKeyFrames(id,keyframes);
			styleSheet.addAnimation(animation);
			return "";
		});
		haxe_ui_styles_Parser.combinedCSSMediaRegex.map(source,function(e) {
			var selector = "";
			if(e.matched(2) == null) {
				selector = StringTools.trim(e.matched(5).split("\r\n").join("\n"));
			} else {
				selector = StringTools.trim(e.matched(2).split("\r\n").join("\n"));
			}
			selector = selector.replace(haxe_ui_styles_Parser.newlineRegex.r,"\n");
			if(selector.indexOf("@media") != -1) {
				var n1 = selector.indexOf("(");
				var n2 = selector.lastIndexOf(")");
				var mediaQuery = selector.substring(n1 + 1,n2);
				var mediaStyleSheet = new haxe_ui_styles_Parser().parse(e.matched(3) + "\n}");
				var mq = new haxe_ui_styles_elements_MediaQuery(_gthis.parseDirectives(mediaQuery),mediaStyleSheet);
				styleSheet.addMediaQuery(mq);
			} else {
				var directives = _gthis.parseDirectives(e.matched(6));
				var selectors = selector.split(",");
				var _g = 0;
				while(_g < selectors.length) {
					var s = selectors[_g];
					++_g;
					s = StringTools.trim(s);
					if(s.length > 0) {
						styleSheet.addRule(new haxe_ui_styles_elements_RuleElement(s,directives));
					}
				}
			}
			return null;
		});
		return styleSheet;
	}
	,parseDirectives: function(rulesString) {
		rulesString = rulesString.split("\r\n").join("\n");
		var ret = [];
		var rules = rulesString.split(";");
		var _g = 0;
		while(_g < rules.length) {
			var line = rules[_g];
			++_g;
			var d = this.parseDirective(line);
			if(d != null) {
				ret.push(d);
			}
		}
		return ret;
	}
	,parseDirective: function(line) {
		var d = null;
		line = StringTools.trim(line);
		if(line.length == 0) {
			return null;
		}
		if(line.indexOf(":") != -1) {
			var parts = line.split(":");
			var cssDirective = StringTools.trim(parts[0]);
			var cssValue = StringTools.trim(parts.slice(1).join(":"));
			if(cssDirective.length < 1 || cssValue.length < 1) {
				return null;
			}
			d = new haxe_ui_styles_elements_Directive(cssDirective,haxe_ui_styles_ValueTools.parse(cssValue));
		} else {
			d = new haxe_ui_styles_elements_Directive("",haxe_ui_styles_ValueTools.parse(line),true);
		}
		return d;
	}
	,__class__: haxe_ui_styles_Parser
};
var haxe_ui_styles_Style = function(left,top,autoWidth,width,percentWidth,initialWidth,initialPercentWidth,minWidth,maxWidth,autoHeight,height,percentHeight,initialHeight,initialPercentHeight,minHeight,maxHeight,paddingTop,paddingLeft,paddingRight,paddingBottom,marginTop,marginLeft,marginRight,marginBottom,horizontalSpacing,verticalSpacing,color,backgroundColor,backgroundColorEnd,backgroundGradientStyle,backgroundOpacity,backgroundImage,backgroundImageRepeat,backgroundImageClipTop,backgroundImageClipLeft,backgroundImageClipBottom,backgroundImageClipRight,backgroundImageSliceTop,backgroundImageSliceLeft,backgroundImageSliceBottom,backgroundImageSliceRight,borderColor,borderTopColor,borderLeftColor,borderBottomColor,borderRightColor,borderSize,borderTopSize,borderLeftSize,borderBottomSize,borderRightSize,borderRadius,borderRadiusTopLeft,borderRadiusTopRight,borderRadiusBottomLeft,borderRadiusBottomRight,borderOpacity,borderStyle,icon,iconPosition,horizontalAlign,verticalAlign,textAlign,opacity,clip,native,fontName,fontSize,fontBold,fontUnderline,fontItalic,cursor,hidden,filter,backdropFilter,resource,animationName,animationOptions,mode,pointerEvents) {
	this.left = left;
	this.top = top;
	this.autoWidth = autoWidth;
	this.width = width;
	this.percentWidth = percentWidth;
	this.initialWidth = initialWidth;
	this.initialPercentWidth = initialPercentWidth;
	this.minWidth = minWidth;
	this.maxWidth = maxWidth;
	this.autoHeight = autoHeight;
	this.height = height;
	this.percentHeight = percentHeight;
	this.initialHeight = initialHeight;
	this.initialPercentHeight = initialPercentHeight;
	this.minHeight = minHeight;
	this.maxHeight = maxHeight;
	this.paddingTop = paddingTop;
	this.paddingLeft = paddingLeft;
	this.paddingRight = paddingRight;
	this.paddingBottom = paddingBottom;
	this.marginTop = marginTop;
	this.marginLeft = marginLeft;
	this.marginRight = marginRight;
	this.marginBottom = marginBottom;
	this.horizontalSpacing = horizontalSpacing;
	this.verticalSpacing = verticalSpacing;
	this.color = color;
	this.backgroundColor = backgroundColor;
	this.backgroundColorEnd = backgroundColorEnd;
	this.backgroundGradientStyle = backgroundGradientStyle;
	this.backgroundOpacity = backgroundOpacity;
	this.backgroundImage = backgroundImage;
	this.backgroundImageRepeat = backgroundImageRepeat;
	this.backgroundImageClipTop = backgroundImageClipTop;
	this.backgroundImageClipLeft = backgroundImageClipLeft;
	this.backgroundImageClipBottom = backgroundImageClipBottom;
	this.backgroundImageClipRight = backgroundImageClipRight;
	this.backgroundImageSliceTop = backgroundImageSliceTop;
	this.backgroundImageSliceLeft = backgroundImageSliceLeft;
	this.backgroundImageSliceBottom = backgroundImageSliceBottom;
	this.backgroundImageSliceRight = backgroundImageSliceRight;
	this.borderColor = borderColor;
	this.borderTopColor = borderTopColor;
	this.borderLeftColor = borderLeftColor;
	this.borderBottomColor = borderBottomColor;
	this.borderRightColor = borderRightColor;
	this.borderSize = borderSize;
	this.borderTopSize = borderTopSize;
	this.borderLeftSize = borderLeftSize;
	this.borderBottomSize = borderBottomSize;
	this.borderRightSize = borderRightSize;
	this.borderRadius = borderRadius;
	this.borderRadiusTopLeft = borderRadiusTopLeft;
	this.borderRadiusTopRight = borderRadiusTopRight;
	this.borderRadiusBottomLeft = borderRadiusBottomLeft;
	this.borderRadiusBottomRight = borderRadiusBottomRight;
	this.borderOpacity = borderOpacity;
	this.borderStyle = borderStyle;
	this.icon = icon;
	this.iconPosition = iconPosition;
	this.horizontalAlign = horizontalAlign;
	this.verticalAlign = verticalAlign;
	this.textAlign = textAlign;
	this.opacity = opacity;
	this.clip = clip;
	this.native = native;
	this.fontName = fontName;
	this.fontSize = fontSize;
	this.fontBold = fontBold;
	this.fontUnderline = fontUnderline;
	this.fontItalic = fontItalic;
	this.cursor = cursor;
	this.hidden = hidden;
	this.filter = filter;
	this.backdropFilter = backdropFilter;
	this.resource = resource;
	this.animationName = animationName;
	this.animationOptions = animationOptions;
	this.mode = mode;
	this.pointerEvents = pointerEvents;
};
$hxClasses["haxe.ui.styles.Style"] = haxe_ui_styles_Style;
haxe_ui_styles_Style.__name__ = "haxe.ui.styles.Style";
haxe_ui_styles_Style.prototype = {
	left: null
	,top: null
	,autoWidth: null
	,width: null
	,percentWidth: null
	,initialWidth: null
	,initialPercentWidth: null
	,minWidth: null
	,maxWidth: null
	,autoHeight: null
	,height: null
	,percentHeight: null
	,initialHeight: null
	,initialPercentHeight: null
	,minHeight: null
	,maxHeight: null
	,paddingTop: null
	,paddingLeft: null
	,paddingRight: null
	,paddingBottom: null
	,marginTop: null
	,marginLeft: null
	,marginRight: null
	,marginBottom: null
	,horizontalSpacing: null
	,verticalSpacing: null
	,color: null
	,backgroundColor: null
	,backgroundColorEnd: null
	,backgroundGradientStyle: null
	,backgroundOpacity: null
	,backgroundImage: null
	,backgroundImageRepeat: null
	,backgroundImageClipTop: null
	,backgroundImageClipLeft: null
	,backgroundImageClipBottom: null
	,backgroundImageClipRight: null
	,backgroundImageSliceTop: null
	,backgroundImageSliceLeft: null
	,backgroundImageSliceBottom: null
	,backgroundImageSliceRight: null
	,borderColor: null
	,borderTopColor: null
	,borderLeftColor: null
	,borderBottomColor: null
	,borderRightColor: null
	,borderSize: null
	,borderTopSize: null
	,borderLeftSize: null
	,borderBottomSize: null
	,borderRightSize: null
	,borderRadius: null
	,borderRadiusTopLeft: null
	,borderRadiusTopRight: null
	,borderRadiusBottomLeft: null
	,borderRadiusBottomRight: null
	,borderOpacity: null
	,borderStyle: null
	,icon: null
	,iconPosition: null
	,horizontalAlign: null
	,verticalAlign: null
	,textAlign: null
	,opacity: null
	,clip: null
	,native: null
	,fontName: null
	,fontSize: null
	,fontBold: null
	,fontUnderline: null
	,fontItalic: null
	,cursor: null
	,hidden: null
	,filter: null
	,backdropFilter: null
	,resource: null
	,animationName: null
	,animationOptions: null
	,mode: null
	,pointerEvents: null
	,mergeDirectives: function(map) {
		var key = haxe_ds_StringMap.keysIterator(map.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var v = map.h[key1];
			switch(key1) {
			case "animation-delay":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				this.animationOptions.delay = haxe_ui_styles_ValueTools.time(v.value);
				break;
			case "animation-direction":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				this.animationOptions.direction = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "animation-duration":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				this.animationOptions.duration = haxe_ui_styles_ValueTools.time(v.value);
				break;
			case "animation-fill-mode":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				this.animationOptions.fillMode = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "animation-iteration-count":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				var _g = v.value;
				var tmp;
				if(_g._hx_index == 6) {
					var val = _g.v;
					tmp = val == "infinite" ? -1 : 0;
				} else {
					tmp = haxe_ui_styles_ValueTools.int(v.value);
				}
				this.animationOptions.iterationCount = tmp;
				break;
			case "animation-name":
				this.animationName = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "animation-timing-function":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				this.animationOptions.easingFunction = haxe_ui_styles_ValueTools.calcEasing(v.value);
				break;
			case "backdrop-filter":
				var _g1 = v.value;
				switch(_g1._hx_index) {
				case 5:
					var vl = _g1.vl;
					var f = _g1.f;
					var arr = haxe_ui_styles_ValueTools.array(vl);
					arr.splice(0,0,f);
					this.backdropFilter = [haxe_ui_filters_FilterParser.parseFilter(arr)];
					break;
				case 6:
					var f1 = _g1.v;
					this.backdropFilter = [haxe_ui_filters_FilterParser.parseFilter([f1])];
					break;
				case 9:
					this.backdropFilter = null;
					break;
				default:
				}
				break;
			case "background-color":
				var _g2 = v.value;
				this.backgroundColor = haxe_ui_styles_ValueTools.int(v.value);
				if(Object.prototype.hasOwnProperty.call(map.h,"background-color-end")) {
					this.backgroundColorEnd = haxe_ui_styles_ValueTools.int(map.h["background-color-end"].value);
				} else {
					this.backgroundColorEnd = null;
				}
				break;
			case "background-color-end":
				this.backgroundColorEnd = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "background-gradient-style":
				this.backgroundGradientStyle = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "background-image":
				this.backgroundImage = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "background-image-clip-bottom":
				this.backgroundImageClipBottom = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-clip-left":
				this.backgroundImageClipLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-clip-right":
				this.backgroundImageClipRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-clip-top":
				this.backgroundImageClipTop = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-repeat":
				this.backgroundImageRepeat = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "background-image-slice-bottom":
				this.backgroundImageSliceBottom = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-slice-left":
				this.backgroundImageSliceLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-slice-right":
				this.backgroundImageSliceRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-slice-top":
				this.backgroundImageSliceTop = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-opacity":
				this.backgroundOpacity = haxe_ui_styles_ValueTools.float(v.value);
				break;
			case "border-bottom-color":
				this.borderBottomColor = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "border-bottom-left-radius":
				this.borderRadiusBottomLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "border-bottom-right-radius":
				this.borderRadiusBottomRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "border-bottom-size":case "border-bottom-width":
				if(v.value == haxe_ui_styles_Value.VNone) {
					this.borderBottomSize = 0;
				} else {
					this.borderBottomSize = haxe_ui_styles_ValueTools.calcDimension(v.value);
				}
				break;
			case "border-color":
				this.borderColor = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "border-left-color":
				this.borderLeftColor = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "border-left-size":case "border-left-width":
				if(v.value == haxe_ui_styles_Value.VNone) {
					this.borderLeftSize = 0;
				} else {
					this.borderLeftSize = haxe_ui_styles_ValueTools.calcDimension(v.value);
				}
				break;
			case "border-opacity":
				this.borderOpacity = haxe_ui_styles_ValueTools.float(v.value);
				break;
			case "border-radius":
				this.borderRadius = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "border-right-color":
				this.borderRightColor = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "border-right-size":case "border-right-width":
				if(v.value == haxe_ui_styles_Value.VNone) {
					this.borderRightSize = 0;
				} else {
					this.borderRightSize = haxe_ui_styles_ValueTools.calcDimension(v.value);
				}
				break;
			case "border-style":
				this.borderStyle = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "border-top-color":
				this.borderTopColor = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "border-top-left-radius":
				this.borderRadiusTopLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "border-top-right-radius":
				this.borderRadiusTopRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "border-top-size":case "border-top-width":
				if(v.value == haxe_ui_styles_Value.VNone) {
					this.borderTopSize = 0;
				} else {
					this.borderTopSize = haxe_ui_styles_ValueTools.calcDimension(v.value);
				}
				break;
			case "clip":
				this.clip = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "color":
				this.color = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "cursor":
				this.cursor = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "filter":
				var _g3 = v.value;
				switch(_g3._hx_index) {
				case 5:
					var vl1 = _g3.vl;
					var f2 = _g3.f;
					var arr1 = haxe_ui_styles_ValueTools.array(vl1);
					arr1.splice(0,0,f2);
					this.filter = [haxe_ui_filters_FilterParser.parseFilter(arr1)];
					break;
				case 6:
					var f3 = _g3.v;
					this.filter = [haxe_ui_filters_FilterParser.parseFilter([f3])];
					break;
				case 9:
					this.filter = null;
					break;
				default:
				}
				break;
			case "font-bold":
				this.fontBold = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "font-italic":
				this.fontItalic = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "font-name":
				this.fontName = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "font-size":
				this.fontSize = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "font-underline":
				this.fontUnderline = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "height":
				this.autoHeight = haxe_ui_styles_ValueTools.constant(v.value,"auto");
				this.height = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.percentHeight = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			case "hidden":
				this.hidden = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "horizontal-align":
				this.horizontalAlign = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "horizontal-spacing":
				this.horizontalSpacing = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "icon":
				if(v.value._hx_index == 9) {
					this.icon = null;
				} else {
					this.icon = haxe_ui_styles_ValueTools.string(v.value);
				}
				break;
			case "icon-position":
				this.iconPosition = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "initial-height":
				this.initialHeight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.initialPercentHeight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "initial-width":
				this.initialWidth = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.initialPercentWidth = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			case "left":
				this.left = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "margin-bottom":
				this.marginBottom = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "margin-left":
				this.marginLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "margin-right":
				this.marginRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "margin-top":
				this.marginTop = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "max-height":
				this.maxHeight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "max-width":
				this.maxWidth = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "min-height":
				this.minHeight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "min-width":
				this.minWidth = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "mode":
				this.mode = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "native":
				this.native = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "opacity":
				this.opacity = haxe_ui_styles_ValueTools.float(v.value);
				break;
			case "padding-bottom":
				this.paddingBottom = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "padding-left":
				this.paddingLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "padding-right":
				this.paddingRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "padding-top":
				this.paddingTop = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "pointer-events":
				if(v.value._hx_index == 9) {
					this.pointerEvents = "none";
				} else {
					this.pointerEvents = haxe_ui_styles_ValueTools.string(v.value);
				}
				break;
			case "resource":
				this.resource = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "text-align":
				this.textAlign = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "top":
				this.top = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "vertical-align":
				this.verticalAlign = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "vertical-spacing":
				this.verticalSpacing = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "width":
				this.autoWidth = haxe_ui_styles_ValueTools.constant(v.value,"auto");
				this.width = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.percentWidth = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			}
		}
	}
	,apply: function(s) {
		if(s.cursor != null) {
			this.cursor = s.cursor;
		}
		if(s.hidden != null) {
			this.hidden = s.hidden;
		}
		if(s.left != null) {
			this.left = s.left;
		}
		if(s.top != null) {
			this.top = s.top;
		}
		if(s.autoWidth != null) {
			this.autoWidth = s.autoWidth;
		}
		if(s.autoHeight != null) {
			this.autoHeight = s.autoHeight;
		}
		if(s.verticalSpacing != null) {
			this.verticalSpacing = s.verticalSpacing;
		}
		if(s.horizontalSpacing != null) {
			this.horizontalSpacing = s.horizontalSpacing;
		}
		if(s.width != null) {
			this.width = s.width;
			this.autoWidth = false;
		}
		if(s.initialWidth != null) {
			this.initialWidth = s.initialWidth;
		}
		if(s.initialPercentWidth != null) {
			this.initialPercentWidth = s.initialPercentWidth;
		}
		if(s.minWidth != null) {
			this.minWidth = s.minWidth;
		}
		if(s.maxWidth != null) {
			this.maxWidth = s.maxWidth;
		}
		if(s.height != null) {
			this.height = s.height;
			this.autoHeight = false;
		}
		if(s.initialHeight != null) {
			this.initialHeight = s.initialHeight;
		}
		if(s.initialPercentHeight != null) {
			this.initialPercentHeight = s.initialPercentHeight;
		}
		if(s.minHeight != null) {
			this.minHeight = s.minHeight;
		}
		if(s.maxHeight != null) {
			this.maxHeight = s.maxHeight;
		}
		if(s.percentWidth != null) {
			this.percentWidth = s.percentWidth;
			this.autoWidth = false;
		}
		if(s.percentHeight != null) {
			this.percentHeight = s.percentHeight;
			this.autoHeight = false;
		}
		if(s.paddingTop != null) {
			this.paddingTop = s.paddingTop;
		}
		if(s.paddingLeft != null) {
			this.paddingLeft = s.paddingLeft;
		}
		if(s.paddingRight != null) {
			this.paddingRight = s.paddingRight;
		}
		if(s.paddingBottom != null) {
			this.paddingBottom = s.paddingBottom;
		}
		if(s.marginTop != null) {
			this.marginTop = s.marginTop;
		}
		if(s.marginLeft != null) {
			this.marginLeft = s.marginLeft;
		}
		if(s.marginRight != null) {
			this.marginRight = s.marginRight;
		}
		if(s.marginBottom != null) {
			this.marginBottom = s.marginBottom;
		}
		if(s.color != null) {
			this.color = s.color;
		}
		if(s.backgroundColor != null) {
			this.backgroundColor = s.backgroundColor;
			this.backgroundColorEnd = null;
		}
		if(s.backgroundColorEnd != null) {
			this.backgroundColorEnd = s.backgroundColorEnd;
		}
		if(s.backgroundGradientStyle != null) {
			this.backgroundGradientStyle = s.backgroundGradientStyle;
		}
		if(s.backgroundOpacity != null) {
			this.backgroundOpacity = s.backgroundOpacity;
		}
		if(s.backgroundImage != null) {
			this.backgroundImage = s.backgroundImage;
		}
		if(s.backgroundImageRepeat != null) {
			this.backgroundImageRepeat = s.backgroundImageRepeat;
		}
		if(s.backgroundImageClipTop != null) {
			this.backgroundImageClipTop = s.backgroundImageClipTop;
		}
		if(s.backgroundImageClipLeft != null) {
			this.backgroundImageClipLeft = s.backgroundImageClipLeft;
		}
		if(s.backgroundImageClipBottom != null) {
			this.backgroundImageClipBottom = s.backgroundImageClipBottom;
		}
		if(s.backgroundImageClipRight != null) {
			this.backgroundImageClipRight = s.backgroundImageClipRight;
		}
		if(s.backgroundImageSliceTop != null) {
			this.backgroundImageSliceTop = s.backgroundImageSliceTop;
		}
		if(s.backgroundImageSliceLeft != null) {
			this.backgroundImageSliceLeft = s.backgroundImageSliceLeft;
		}
		if(s.backgroundImageSliceBottom != null) {
			this.backgroundImageSliceBottom = s.backgroundImageSliceBottom;
		}
		if(s.backgroundImageSliceRight != null) {
			this.backgroundImageSliceRight = s.backgroundImageSliceRight;
		}
		if(s.borderColor != null) {
			this.borderColor = s.borderColor;
		}
		if(s.borderTopColor != null) {
			this.borderTopColor = s.borderTopColor;
		}
		if(s.borderLeftColor != null) {
			this.borderLeftColor = s.borderLeftColor;
		}
		if(s.borderBottomColor != null) {
			this.borderBottomColor = s.borderBottomColor;
		}
		if(s.borderRightColor != null) {
			this.borderRightColor = s.borderRightColor;
		}
		if(s.borderSize != null) {
			this.borderSize = s.borderSize;
		}
		if(s.borderTopSize != null) {
			this.borderTopSize = s.borderTopSize;
		}
		if(s.borderLeftSize != null) {
			this.borderLeftSize = s.borderLeftSize;
		}
		if(s.borderBottomSize != null) {
			this.borderBottomSize = s.borderBottomSize;
		}
		if(s.borderRightSize != null) {
			this.borderRightSize = s.borderRightSize;
		}
		if(s.borderRadius != null) {
			this.borderRadius = s.borderRadius;
		}
		if(s.borderRadiusTopLeft != null) {
			this.borderRadiusTopLeft = s.borderRadiusTopLeft;
		}
		if(s.borderRadiusTopRight != null) {
			this.borderRadiusTopRight = s.borderRadiusTopRight;
		}
		if(s.borderRadiusBottomLeft != null) {
			this.borderRadiusBottomLeft = s.borderRadiusBottomLeft;
		}
		if(s.borderRadiusBottomRight != null) {
			this.borderRadiusBottomRight = s.borderRadiusBottomRight;
		}
		if(s.borderOpacity != null) {
			this.borderOpacity = s.borderOpacity;
		}
		if(s.borderStyle != null) {
			this.borderStyle = s.borderStyle;
		}
		if(s.filter != null) {
			this.filter = s.filter.slice();
		}
		if(s.backdropFilter != null) {
			this.backdropFilter = s.backdropFilter.slice();
		}
		if(s.resource != null) {
			this.resource = s.resource;
		}
		if(s.icon != null) {
			this.icon = s.icon;
		}
		if(s.iconPosition != null) {
			this.iconPosition = s.iconPosition;
		}
		if(s.horizontalAlign != null) {
			this.horizontalAlign = s.horizontalAlign;
		}
		if(s.verticalAlign != null) {
			this.verticalAlign = s.verticalAlign;
		}
		if(s.textAlign != null) {
			this.textAlign = s.textAlign;
		}
		if(s.opacity != null) {
			this.opacity = s.opacity;
		}
		if(s.clip != null) {
			this.clip = s.clip;
		}
		if(s.native != null) {
			this.native = s.native;
		}
		if(s.fontName != null) {
			this.fontName = s.fontName;
		}
		if(s.fontSize != null) {
			this.fontSize = s.fontSize;
		}
		if(s.fontBold != null) {
			this.fontBold = s.fontBold;
		}
		if(s.fontUnderline != null) {
			this.fontUnderline = s.fontUnderline;
		}
		if(s.fontItalic != null) {
			this.fontItalic = s.fontItalic;
		}
		if(s.animationName != null) {
			this.animationName = s.animationName;
		}
		if(s.animationOptions != null) {
			if(this.animationOptions == null) {
				this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
			}
			if(s.animationOptions.duration != null) {
				this.animationOptions.duration = s.animationOptions.duration;
			}
			if(s.animationOptions.delay != null) {
				this.animationOptions.delay = s.animationOptions.delay;
			}
			if(s.animationOptions.iterationCount != null) {
				this.animationOptions.iterationCount = s.animationOptions.iterationCount;
			}
			if(s.animationOptions.easingFunction != null) {
				this.animationOptions.easingFunction = s.animationOptions.easingFunction;
			}
			if(s.animationOptions.direction != null) {
				this.animationOptions.direction = s.animationOptions.direction;
			}
			if(s.animationOptions.fillMode != null) {
				this.animationOptions.fillMode = s.animationOptions.fillMode;
			}
		}
		if(s.mode != null) {
			this.mode = s.mode;
		}
		if(s.pointerEvents != null) {
			this.pointerEvents = s.pointerEvents;
		}
	}
	,equalTo: function(s) {
		if(s.cursor != this.cursor) {
			return false;
		}
		if(s.hidden != this.hidden) {
			return false;
		}
		if(s.left != this.left) {
			return false;
		}
		if(s.top != this.top) {
			return false;
		}
		if(s.autoWidth != this.autoWidth) {
			return false;
		}
		if(s.autoHeight != this.autoHeight) {
			return false;
		}
		if(s.verticalSpacing != this.verticalSpacing) {
			return false;
		}
		if(s.horizontalSpacing != this.horizontalSpacing) {
			return false;
		}
		if(s.width != this.width) {
			return false;
		}
		if(s.initialWidth != this.initialWidth) {
			return false;
		}
		if(s.initialPercentWidth != this.initialPercentWidth) {
			return false;
		}
		if(s.minWidth != this.minWidth) {
			return false;
		}
		if(s.maxWidth != this.maxWidth) {
			return false;
		}
		if(s.height != this.height) {
			return false;
		}
		if(s.initialHeight != this.initialHeight) {
			return false;
		}
		if(s.initialPercentHeight != this.initialPercentHeight) {
			return false;
		}
		if(s.minHeight != this.minHeight) {
			return false;
		}
		if(s.maxHeight != this.maxHeight) {
			return false;
		}
		if(s.percentWidth != this.percentWidth) {
			return false;
		}
		if(s.percentHeight != this.percentHeight) {
			return false;
		}
		if(s.paddingTop != this.paddingTop) {
			return false;
		}
		if(s.paddingLeft != this.paddingLeft) {
			return false;
		}
		if(s.paddingRight != this.paddingRight) {
			return false;
		}
		if(s.paddingBottom != this.paddingBottom) {
			return false;
		}
		if(s.marginTop != this.marginTop) {
			return false;
		}
		if(s.marginLeft != this.marginLeft) {
			return false;
		}
		if(s.marginRight != this.marginRight) {
			return false;
		}
		if(s.marginBottom != this.marginBottom) {
			return false;
		}
		if(s.color != this.color) {
			return false;
		}
		if(s.backgroundColor != this.backgroundColor) {
			return false;
		}
		if(s.backgroundColorEnd != this.backgroundColorEnd) {
			return false;
		}
		if(s.backgroundGradientStyle != this.backgroundGradientStyle) {
			return false;
		}
		if(s.backgroundOpacity != this.backgroundOpacity) {
			return false;
		}
		if(s.backgroundImage != this.backgroundImage) {
			return false;
		}
		if(s.backgroundImageRepeat != this.backgroundImageRepeat) {
			return false;
		}
		if(s.backgroundImageClipTop != this.backgroundImageClipTop) {
			return false;
		}
		if(s.backgroundImageClipLeft != this.backgroundImageClipLeft) {
			return false;
		}
		if(s.backgroundImageClipBottom != this.backgroundImageClipBottom) {
			return false;
		}
		if(s.backgroundImageClipRight != this.backgroundImageClipRight) {
			return false;
		}
		if(s.backgroundImageSliceTop != this.backgroundImageSliceTop) {
			return false;
		}
		if(s.backgroundImageSliceLeft != this.backgroundImageSliceLeft) {
			return false;
		}
		if(s.backgroundImageSliceBottom != this.backgroundImageSliceBottom) {
			return false;
		}
		if(s.backgroundImageSliceRight != this.backgroundImageSliceRight) {
			return false;
		}
		if(s.borderColor != this.borderColor) {
			return false;
		}
		if(s.borderTopColor != this.borderTopColor) {
			return false;
		}
		if(s.borderLeftColor != this.borderLeftColor) {
			return false;
		}
		if(s.borderBottomColor != this.borderBottomColor) {
			return false;
		}
		if(s.borderRightColor != this.borderRightColor) {
			return false;
		}
		if(s.borderSize != this.borderSize) {
			return false;
		}
		if(s.borderTopSize != this.borderTopSize) {
			return false;
		}
		if(s.borderLeftSize != this.borderLeftSize) {
			return false;
		}
		if(s.borderBottomSize != this.borderBottomSize) {
			return false;
		}
		if(s.borderRightSize != this.borderRightSize) {
			return false;
		}
		if(s.borderRadius != this.borderRadius) {
			return false;
		}
		if(s.borderRadiusTopLeft != this.borderRadiusTopLeft) {
			return false;
		}
		if(s.borderRadiusTopRight != this.borderRadiusTopRight) {
			return false;
		}
		if(s.borderRadiusBottomLeft != this.borderRadiusBottomLeft) {
			return false;
		}
		if(s.borderRadiusBottomRight != this.borderRadiusBottomRight) {
			return false;
		}
		if(s.borderOpacity != this.borderOpacity) {
			return false;
		}
		if(s.borderStyle != this.borderStyle) {
			return false;
		}
		if(s.filter != this.filter) {
			return false;
		}
		if(s.backdropFilter != this.backdropFilter) {
			return false;
		}
		if(s.resource != this.resource) {
			return false;
		}
		if(s.icon != this.icon) {
			return false;
		}
		if(s.iconPosition != this.iconPosition) {
			return false;
		}
		if(s.horizontalAlign != this.horizontalAlign) {
			return false;
		}
		if(s.verticalAlign != this.verticalAlign) {
			return false;
		}
		if(s.textAlign != this.textAlign) {
			return false;
		}
		if(s.opacity != this.opacity) {
			return false;
		}
		if(s.clip != this.clip) {
			return false;
		}
		if(s.native != this.native) {
			return false;
		}
		if(s.fontName != this.fontName) {
			return false;
		}
		if(s.fontSize != this.fontSize) {
			return false;
		}
		if(s.fontBold != this.fontBold) {
			return false;
		}
		if(s.fontUnderline != this.fontUnderline) {
			return false;
		}
		if(s.fontItalic != this.fontItalic) {
			return false;
		}
		if(s.resource != this.resource) {
			return false;
		}
		if(s.animationName != this.animationName) {
			return false;
		}
		if(this.animationOptions != null && this.animationOptions.compareTo(s.animationOptions) == false) {
			return false;
		}
		if(s.mode != this.mode) {
			return false;
		}
		if(s.pointerEvents != this.pointerEvents) {
			return false;
		}
		return true;
	}
	,createAnimationOptions: function() {
		if(this.animationOptions == null) {
			this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
		}
	}
	,__class__: haxe_ui_styles_Style
};
var haxe_ui_styles_StyleSheet = function() {
	this._animations = new haxe_ds_StringMap();
	this._mediaQueries = [];
	this._rules = [];
	this._imports = [];
};
$hxClasses["haxe.ui.styles.StyleSheet"] = haxe_ui_styles_StyleSheet;
haxe_ui_styles_StyleSheet.__name__ = "haxe.ui.styles.StyleSheet";
haxe_ui_styles_StyleSheet.prototype = {
	name: null
	,_imports: null
	,_rules: null
	,_mediaQueries: null
	,_animations: null
	,get_animations: function() {
		return this._animations;
	}
	,addImport: function(el) {
		this._imports.push(el);
	}
	,imports: null
	,get_imports: function() {
		return this._imports;
	}
	,rules: null
	,get_rules: function() {
		var r = this._rules.slice();
		var _g = 0;
		var _g1 = this._mediaQueries;
		while(_g < _g1.length) {
			var mq = _g1[_g];
			++_g;
			if(mq.get_relevant()) {
				r = r.concat(mq.get_styleSheet().get_rules());
			}
		}
		return r;
	}
	,findRule: function(selector) {
		var _g = 0;
		var _g1 = this.get_rules();
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			if(r.selector.toString() == selector) {
				return r;
			}
		}
		return null;
	}
	,removeRule: function(selector) {
		var r = this.findRule(selector);
		if(r != null) {
			HxOverrides.remove(this._rules,r);
		}
	}
	,removeAllRules: function() {
		this._rules = [];
	}
	,clear: function() {
		this.removeAllRules();
		this._imports = [];
		this._mediaQueries = [];
		this._animations = new haxe_ds_StringMap();
	}
	,addRule: function(el) {
		this._rules.push(el);
	}
	,addMediaQuery: function(el) {
		this._mediaQueries.push(el);
	}
	,addAnimation: function(el) {
		this._animations.h[el.id] = el;
	}
	,parse: function(css) {
		var parser = new haxe_ui_styles_Parser();
		var ss = parser.parse(css);
		var f = new haxe_ui_styles_StyleSheet();
		var _g = 0;
		var _g1 = ss.get_imports();
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var importCss = haxe_ui_ToolkitAssets.get_instance().getText(i.url);
			var importStyleSheet = new haxe_ui_styles_Parser().parse(importCss);
			f.merge(importStyleSheet);
		}
		f.merge(ss);
		this.merge(f);
	}
	,merge: function(styleSheet) {
		this._imports = this._imports.concat(styleSheet._imports);
		this._rules = this._rules.concat(styleSheet._rules);
		this._mediaQueries = this._mediaQueries.concat(styleSheet._mediaQueries);
		var k = haxe_ds_StringMap.keysIterator(styleSheet._animations.h);
		while(k.hasNext()) {
			var k1 = k.next();
			this._animations.h[k1] = styleSheet._animations.h[k1];
		}
	}
	,buildStyleFor: function(c,style) {
		if(style == null) {
			style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		var _g = 0;
		var _g1 = this.get_rules();
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			if(!r.match(c)) {
				continue;
			}
			style.mergeDirectives(r.directives);
		}
		return style;
	}
	,__class__: haxe_ui_styles_StyleSheet
	,__properties__: {get_rules:"get_rules",get_imports:"get_imports",get_animations:"get_animations"}
};
var haxe_ui_styles_Value = $hxEnums["haxe.ui.styles.Value"] = { __ename__ : true, __constructs__ : ["VString","VNumber","VBool","VDimension","VColor","VCall","VConstant","VComposite","VTime","VNone"]
	,VString: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_.__params__ = ["v"],$_)
	,VNumber: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_.__params__ = ["v"],$_)
	,VBool: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_.__params__ = ["v"],$_)
	,VDimension: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_.__params__ = ["v"],$_)
	,VColor: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_.__params__ = ["v"],$_)
	,VCall: ($_=function(f,vl) { return {_hx_index:5,f:f,vl:vl,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_.__params__ = ["f","vl"],$_)
	,VConstant: ($_=function(v) { return {_hx_index:6,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_.__params__ = ["v"],$_)
	,VComposite: ($_=function(vl) { return {_hx_index:7,vl:vl,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_.__params__ = ["vl"],$_)
	,VTime: ($_=function(v,unit) { return {_hx_index:8,v:v,unit:unit,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_.__params__ = ["v","unit"],$_)
	,VNone: {_hx_index:9,__enum__:"haxe.ui.styles.Value",toString:$estr}
};
var haxe_ui_styles_ValueTools = function() { };
$hxClasses["haxe.ui.styles.ValueTools"] = haxe_ui_styles_ValueTools;
haxe_ui_styles_ValueTools.__name__ = "haxe.ui.styles.ValueTools";
haxe_ui_styles_ValueTools.parse = function(s) {
	var v = null;
	var hasSpace = s.indexOf(" ") != -1;
	if(StringTools.endsWith(s,"%") == true && hasSpace == false) {
		v = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PERCENT(parseFloat(s)));
	} else if(StringTools.endsWith(s,"px") == true && hasSpace == false) {
		v = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PX(parseFloat(s)));
	} else if(StringTools.endsWith(s,"vw") == true && hasSpace == false) {
		v = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.VW(parseFloat(s)));
	} else if(StringTools.endsWith(s,"vh") == true && hasSpace == false) {
		v = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.VH(parseFloat(s)));
	} else if(StringTools.endsWith(s,"rem") == true && hasSpace == false) {
		v = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.REM(parseFloat(s)));
	} else if(haxe_ui_styles_ValueTools.validColor(s)) {
		v = haxe_ui_styles_ValueTools.parseColor(s);
	} else if(s == "none") {
		v = haxe_ui_styles_Value.VNone;
	} else if(s.indexOf("(") != -1 && StringTools.endsWith(s,")")) {
		var n = s.indexOf("(");
		var f = HxOverrides.substr(s,0,n);
		var params = HxOverrides.substr(s,n + 1,s.length - n - 2);
		if(f == "calc") {
			params = "'" + params + "'";
		}
		var vl = [];
		var _g = 0;
		var _g1 = params.split(",");
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p = StringTools.trim(p);
			vl.push(haxe_ui_styles_ValueTools.parse(p));
		}
		v = haxe_ui_styles_Value.VCall(f,vl);
	} else if(StringTools.startsWith(s,"\"") && StringTools.endsWith(s,"\"")) {
		v = haxe_ui_styles_Value.VString(HxOverrides.substr(s,1,s.length - 2));
	} else if(StringTools.startsWith(s,"'") && StringTools.endsWith(s,"'")) {
		v = haxe_ui_styles_Value.VString(HxOverrides.substr(s,1,s.length - 2));
	} else if(haxe_ui_styles_ValueTools.isNum(s) == true) {
		v = haxe_ui_styles_Value.VNumber(parseFloat(s));
	} else if(s == "true" || s == "false") {
		v = haxe_ui_styles_Value.VBool(s == "true");
	} else if(haxe_ui_styles_ValueTools.timeEReg.match(s)) {
		v = haxe_ui_styles_Value.VTime(parseFloat(haxe_ui_styles_ValueTools.timeEReg.matched(1)),haxe_ui_styles_ValueTools.timeEReg.matched(2));
	} else {
		var arr = s.split(" ");
		if(arr.length == 1) {
			v = haxe_ui_styles_Value.VConstant(s);
		} else {
			var vl = [];
			var _g = 0;
			while(_g < arr.length) {
				var a = arr[_g];
				++_g;
				a = StringTools.trim(a);
				vl.push(haxe_ui_styles_ValueTools.parse(a));
			}
			v = haxe_ui_styles_Value.VComposite(vl);
		}
	}
	return v;
};
haxe_ui_styles_ValueTools.compositeParts = function(value) {
	if(value == null) {
		return 0;
	}
	if(value._hx_index == 7) {
		var vl = value.vl;
		return vl.length;
	} else {
		return 0;
	}
};
haxe_ui_styles_ValueTools.composite = function(value) {
	if(value == null) {
		return null;
	}
	switch(value._hx_index) {
	case 1:
		var _g = value.v;
		return [value];
	case 3:
		var _g = value.v;
		return [value];
	case 7:
		var vl = value.vl;
		return vl;
	case 9:
		return [];
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.isNum = function(s) {
	var b = true;
	var _g = 0;
	var _g1 = s.length;
	while(_g < _g1) {
		var i = _g++;
		var c = HxOverrides.cca(s,i);
		if(!(c >= 48 && c <= 57 || c == 46 || c == 45)) {
			b = false;
			break;
		}
	}
	return b;
};
haxe_ui_styles_ValueTools.parseColor = function(s) {
	if(StringTools.startsWith(s,"#")) {
		s = s.substring(1);
		if(s.length == 6) {
			return haxe_ui_styles_Value.VColor(Std.parseInt("0x" + s));
		} else if(s.length == 3) {
			return haxe_ui_styles_Value.VColor(Std.parseInt("0x" + s.charAt(0) + s.charAt(0) + s.charAt(1) + s.charAt(1) + s.charAt(2) + s.charAt(2)));
		}
	} else if(Object.prototype.hasOwnProperty.call(haxe_ui_styles_ValueTools.colors.h,s)) {
		return haxe_ui_styles_Value.VColor(haxe_ui_styles_ValueTools.colors.h[s]);
	}
	return null;
};
haxe_ui_styles_ValueTools.validColor = function(s) {
	if(StringTools.startsWith(s,"#") && (s.length == 7 || s.length == 4)) {
		return true;
	} else if(Object.prototype.hasOwnProperty.call(haxe_ui_styles_ValueTools.colors.h,s)) {
		return true;
	}
	return false;
};
haxe_ui_styles_ValueTools.time = function(value) {
	if(value == null) {
		return null;
	}
	if(value._hx_index == 8) {
		var unit = value.unit;
		var v = value.v;
		switch(unit) {
		case "ms":
			return v / 1000;
		case "s":
			return v;
		default:
			return null;
		}
	} else {
		return null;
	}
};
haxe_ui_styles_ValueTools.string = function(value) {
	if(value == null) {
		return null;
	}
	switch(value._hx_index) {
	case 0:
		var v = value.v;
		return v;
	case 2:
		var v = value.v;
		if(v == null) {
			return "null";
		} else {
			return "" + v;
		}
		break;
	case 6:
		var v = value.v;
		return v;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.bool = function(value) {
	if(value == null) {
		return null;
	}
	if(value._hx_index == 2) {
		var v = value.v;
		return v;
	} else {
		return null;
	}
};
haxe_ui_styles_ValueTools.int = function(value) {
	if(value == null) {
		return null;
	}
	switch(value._hx_index) {
	case 1:
		var v = value.v;
		return v | 0;
	case 4:
		var v = value.v;
		return v;
	case 5:
		var vl = value.vl;
		var f = value.f;
		return haxe_ui_styles_ValueTools.call(f,vl);
	case 9:
		return null;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.float = function(value) {
	if(value == null) {
		return null;
	}
	switch(value._hx_index) {
	case 1:
		var v = value.v;
		return v;
	case 4:
		var v = value.v;
		return v;
	case 9:
		return null;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.any = function(v) {
	if(v == null) {
		return null;
	}
	switch(v._hx_index) {
	case 1:
		var v1 = v.v;
		return v1;
	case 2:
		var v1 = v.v;
		return v1;
	case 3:
		var _g = v.v;
		if(_g._hx_index == 1) {
			var v1 = _g.value;
			return v1;
		} else {
			return null;
		}
		break;
	case 4:
		var v1 = v.v;
		return v1;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.array = function(vl) {
	var arr = [];
	var _g = 0;
	while(_g < vl.length) {
		var v = vl[_g];
		++_g;
		var a = haxe_ui_styles_ValueTools.any(v);
		if(a != null) {
			arr.push(a);
		}
	}
	return arr;
};
haxe_ui_styles_ValueTools.percent = function(value) {
	if(value == null) {
		return null;
	}
	if(value._hx_index == 3) {
		var v = value.v;
		if(v._hx_index == 0) {
			var d = v.value;
			return d;
		} else {
			return null;
		}
	} else {
		return null;
	}
};
haxe_ui_styles_ValueTools.constant = function(value,required) {
	if(value == null) {
		return false;
	}
	if(value._hx_index == 6) {
		var v = value.v;
		return v == required;
	} else {
		return false;
	}
};
haxe_ui_styles_ValueTools.calcDimension = function(value) {
	if(value == null) {
		return null;
	}
	switch(value._hx_index) {
	case 1:
		var v = value.v;
		return v;
	case 3:
		var v = value.v;
		switch(v._hx_index) {
		case 1:
			var d = v.value;
			return d;
		case 2:
			var d = v.value;
			return d / 100 * haxe_ui_core_Screen.get_instance().get_width();
		case 3:
			var d = v.value;
			return d / 100 * haxe_ui_core_Screen.get_instance().get_height();
		case 4:
			var d = v.value;
			return d * haxe_ui_Toolkit.pixelsPerRem;
		default:
			return null;
		}
		break;
	case 5:
		var vl = value.vl;
		var f = value.f;
		return haxe_ui_styles_ValueTools.call(f,vl);
	case 9:
		return null;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.calcEasing = function(value) {
	switch(value._hx_index) {
	case 0:
		var v = value.v;
		switch(v) {
		case "ease":
			return haxe_ui_styles_EasingFunction.EASE;
		case "ease-in":
			return haxe_ui_styles_EasingFunction.EASE_IN;
		case "ease-in-out":
			return haxe_ui_styles_EasingFunction.EASE_IN_OUT;
		case "ease-out":
			return haxe_ui_styles_EasingFunction.EASE_OUT;
		case "linear":
			return haxe_ui_styles_EasingFunction.LINEAR;
		default:
			return null;
		}
		break;
	case 6:
		var v = value.v;
		switch(v) {
		case "ease":
			return haxe_ui_styles_EasingFunction.EASE;
		case "ease-in":
			return haxe_ui_styles_EasingFunction.EASE_IN;
		case "ease-in-out":
			return haxe_ui_styles_EasingFunction.EASE_IN_OUT;
		case "ease-out":
			return haxe_ui_styles_EasingFunction.EASE_OUT;
		case "linear":
			return haxe_ui_styles_EasingFunction.LINEAR;
		default:
			return null;
		}
		break;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.call = function(f,vl) {
	switch(f) {
	case "calc":
		var parser = new hscript_Parser();
		var program = parser.parseString(haxe_ui_styles_ValueTools.string(vl[0]));
		var interp = new hscript_Interp();
		return interp.expr(program);
	case "platform-color":
		return haxe_ui_core_Platform.get_instance().getColor(haxe_ui_styles_ValueTools.string(vl[0]));
	default:
		return null;
	}
};
var haxe_ui_styles_animation_AnimationOptions = function(duration,delay,iterationCount,easingFunction,direction,fillMode) {
	this.duration = duration;
	this.delay = delay;
	this.iterationCount = iterationCount;
	this.easingFunction = easingFunction;
	this.direction = direction;
	this.fillMode = fillMode;
};
$hxClasses["haxe.ui.styles.animation.AnimationOptions"] = haxe_ui_styles_animation_AnimationOptions;
haxe_ui_styles_animation_AnimationOptions.__name__ = "haxe.ui.styles.animation.AnimationOptions";
haxe_ui_styles_animation_AnimationOptions.prototype = {
	duration: null
	,delay: null
	,iterationCount: null
	,easingFunction: null
	,direction: null
	,fillMode: null
	,compareTo: function(op) {
		if(op != null && op.duration == this.duration && op.delay == this.delay && op.iterationCount == this.iterationCount && op.easingFunction == this.easingFunction && op.direction == this.direction) {
			return op.fillMode == this.fillMode;
		} else {
			return false;
		}
	}
	,compareToAnimation: function(anim) {
		if((this.duration == null && anim.duration == 0 || this.duration != null && anim.duration == this.duration) && (this.delay == null && anim.delay == 0 || this.delay != null && anim.delay == this.delay) && (this.iterationCount == null && anim.iterationCount == 1 || this.iterationCount != null && anim.iterationCount == this.iterationCount) && (this.easingFunction == null && anim.easingFunction == haxe_ui_styles_animation_AnimationOptions.DEFAULT_EASING_FUNCTION || this.easingFunction != null && anim.easingFunction == this.easingFunction) && (this.direction == null && anim.direction == "normal" || this.direction != null && anim.direction == this.direction)) {
			if(!(this.fillMode == null && anim.fillMode == "forwards")) {
				if(this.fillMode != null) {
					return anim.fillMode == this.fillMode;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,__class__: haxe_ui_styles_animation_AnimationOptions
};
var haxe_ui_styles_animation_Animation = function(target,options) {
	this._initialized = false;
	this._currentIterationCount = -1;
	this._currentKeyFrameIndex = -1;
	this.iterationCount = 1;
	this.fillMode = "forwards";
	this.easingFunction = haxe_ui_styles_animation_AnimationOptions.DEFAULT_EASING_FUNCTION;
	this.duration = 0;
	this.direction = "normal";
	this.delay = 0;
	this.target = target;
	if(options != null) {
		if(options.duration != null) {
			this.duration = options.duration;
		}
		if(options.easingFunction != null) {
			this.easingFunction = options.easingFunction;
		}
		if(options.delay != null) {
			this.delay = options.delay;
		}
		if(options.iterationCount != null) {
			this.iterationCount = options.iterationCount;
		}
		if(options.direction != null) {
			this.direction = options.direction;
		}
		if(options.fillMode != null) {
			this.fillMode = options.fillMode;
		}
	}
};
$hxClasses["haxe.ui.styles.animation.Animation"] = haxe_ui_styles_animation_Animation;
haxe_ui_styles_animation_Animation.__name__ = "haxe.ui.styles.animation.Animation";
haxe_ui_styles_animation_Animation.createWithKeyFrames = function(animationKeyFrames,target,options) {
	var animation = new haxe_ui_styles_animation_Animation(target,options);
	animation.name = animationKeyFrames.id;
	if(animation._keyframes == null) {
		animation._keyframes = [];
	}
	var _g = 0;
	var _g1 = animationKeyFrames.get_keyFrames();
	while(_g < _g1.length) {
		var keyFrame = _g1[_g];
		++_g;
		var kf = new haxe_ui_styles_animation_KeyFrame();
		var _g2 = keyFrame.time;
		if(_g2._hx_index == 3) {
			var v = _g2.v;
			if(v._hx_index == 0) {
				var p = v.value;
				kf.time = p / 100;
				kf.easingFunction = animation.easingFunction;
				kf.directives = keyFrame.directives;
				animation._keyframes.push(kf);
			}
		}
	}
	return animation;
};
haxe_ui_styles_animation_Animation.prototype = {
	delay: null
	,direction: null
	,duration: null
	,easingFunction: null
	,fillMode: null
	,iterationCount: null
	,name: null
	,running: null
	,target: null
	,run: function(onFinish) {
		if(this.get_keyframeCount() == 0 || this.running) {
			return;
		}
		if(!this._initialized) {
			this._initialize();
		}
		this._currentKeyFrameIndex = -1;
		this._currentIterationCount = 0;
		this.running = true;
		this._saveState();
		this._runNextKeyframe(onFinish);
	}
	,stop: function() {
		if(this.running == false) {
			return;
		}
		this.running = false;
		var currentKF = this.get_currentKeyFrame();
		if(currentKF != null) {
			currentKF.stop();
			this._currentKeyFrameIndex = -1;
		}
		this._keyframes = null;
		this._restoreState();
	}
	,_currentKeyFrameIndex: null
	,_currentIterationCount: null
	,_initialState: null
	,_initialized: null
	,_keyframes: null
	,get_keyframeCount: function() {
		if(this._keyframes == null) {
			return 0;
		} else {
			return this._keyframes.length;
		}
	}
	,get_currentKeyFrame: function() {
		if(this._currentKeyFrameIndex >= 0) {
			return this._keyframes[this._currentKeyFrameIndex];
		} else {
			return null;
		}
	}
	,_initialize: function() {
		switch(this.direction) {
		case "alternate":
			this._addAlternateKeyframes();
			break;
		case "alternate-reverse":
			this._reverseCurrentKeyframes();
			this._addAlternateKeyframes();
			break;
		case "normal":
			break;
		case "reverse":
			this._reverseCurrentKeyframes();
			break;
		}
		var currentTime = 0;
		var _g = 0;
		var _g1 = this._keyframes;
		while(_g < _g1.length) {
			var keyframe = _g1[_g];
			++_g;
			switch(this.direction) {
			case "alternate-reverse":case "reverse":
				keyframe.time = 1 - keyframe.time;
				break;
			case "alternate":case "normal":
				break;
			}
			keyframe.time = this.duration * keyframe.time - currentTime;
			currentTime += keyframe.time;
		}
		if(this.delay > 0) {
			var keyframe = new haxe_ui_styles_animation_KeyFrame();
			keyframe.time = this.delay;
			keyframe.easingFunction = this.easingFunction;
			this._keyframes.unshift(keyframe);
		} else if(this.delay < 0) {
			currentTime = 0;
			var lastKeyframe = null;
			while(this._keyframes.length > 0) {
				var keyframe = this._keyframes[0];
				currentTime -= keyframe.time;
				if(currentTime >= this.delay) {
					lastKeyframe = keyframe;
					this._keyframes.splice(0,1);
				} else {
					keyframe.delay = -(currentTime - this.delay + keyframe.time);
					if(lastKeyframe != null) {
						lastKeyframe.time = 0;
						this._keyframes.unshift(lastKeyframe);
					}
					break;
				}
			}
		}
		this._initialized = true;
	}
	,_runNextKeyframe: function(onFinish) {
		if(this.running == false) {
			return;
		}
		if(++this._currentKeyFrameIndex >= this._keyframes.length) {
			this._currentKeyFrameIndex = -1;
			this._restoreState();
			if(this.iterationCount == -1 || ++this._currentIterationCount < this.iterationCount) {
				this._saveState();
				this._runNextKeyframe(onFinish);
			} else {
				this.running = false;
				if(onFinish != null) {
					onFinish();
				}
			}
			return;
		} else {
			var _g = $bind(this,this._runNextKeyframe);
			var onFinish1 = onFinish;
			var tmp = function() {
				_g(onFinish1);
			};
			this.get_currentKeyFrame().run(this.target,tmp);
		}
	}
	,_addAlternateKeyframes: function() {
		var i = this._keyframes.length;
		while(--i >= 0) {
			var keyframe = this._keyframes[i];
			var newKeyframe = new haxe_ui_styles_animation_KeyFrame();
			newKeyframe.time = 1 - keyframe.time;
			newKeyframe.easingFunction = this._getReverseEasingFunction(keyframe.easingFunction);
			newKeyframe.directives = keyframe.directives;
			this._keyframes.push(newKeyframe);
		}
	}
	,_reverseCurrentKeyframes: function() {
		this._keyframes.reverse();
		var func = this._getReverseEasingFunction(this.easingFunction);
		var _g = 0;
		var _g1 = this._keyframes;
		while(_g < _g1.length) {
			var keyframe = _g1[_g];
			++_g;
			keyframe.easingFunction = func;
		}
	}
	,_getReverseEasingFunction: function(easingFunction) {
		switch(easingFunction._hx_index) {
		case 2:
			return haxe_ui_styles_EasingFunction.EASE_OUT;
		case 3:
			return haxe_ui_styles_EasingFunction.EASE_IN;
		default:
			return easingFunction;
		}
	}
	,_saveState: function() {
		if(!this._shouldRestoreState()) {
			return;
		}
		if(this._initialState == null) {
			this._initialState = new haxe_ds_StringMap();
		}
		var _g = 0;
		var _g1 = this._keyframes;
		while(_g < _g1.length) {
			var keyframe = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = keyframe.directives;
			while(_g2 < _g3.length) {
				var directive = _g3[_g2];
				++_g2;
				var property = haxe_ui_util_StyleUtil.styleProperty2ComponentProperty(directive.directive);
				if(!Object.prototype.hasOwnProperty.call(this._initialState.h,property)) {
					var this1 = this._initialState;
					var value = Reflect.getProperty(this.target,property);
					this1.h[property] = value;
				}
			}
		}
	}
	,_restoreState: function() {
		if(!this._shouldRestoreState()) {
			return;
		}
		if(this._initialState != null) {
			var property = haxe_ds_StringMap.keysIterator(this._initialState.h);
			while(property.hasNext()) {
				var property1 = property.next();
				Reflect.setProperty(this.target,property1,this._initialState.h[property1]);
			}
			this._initialState = null;
		}
	}
	,_shouldRestoreState: function() {
		if(!(this.fillMode == "none" || this.fillMode == "forwards" && this.direction != "normal" && this.direction != "alternate")) {
			if(this.fillMode == "backwards" && this.direction != "reverse") {
				return this.direction != "alternate-reverse";
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: haxe_ui_styles_animation_Animation
	,__properties__: {get_keyframeCount:"get_keyframeCount",get_currentKeyFrame:"get_currentKeyFrame"}
};
var haxe_ui_styles_animation_KeyFrame = function() {
	this.delay = 0;
	this.time = 0;
	this.directives = [];
};
$hxClasses["haxe.ui.styles.animation.KeyFrame"] = haxe_ui_styles_animation_KeyFrame;
haxe_ui_styles_animation_KeyFrame.__name__ = "haxe.ui.styles.animation.KeyFrame";
haxe_ui_styles_animation_KeyFrame.prototype = {
	directives: null
	,time: null
	,delay: null
	,easingFunction: null
	,_actuator: null
	,stop: function() {
		if(this._actuator != null) {
			this._actuator.stop();
			this._actuator = null;
		}
	}
	,run: function(target,cb) {
		var _gthis = this;
		if(this._actuator != null) {
			return;
		}
		var properties = { };
		var _g = 0;
		var _g1 = this.directives;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			properties[d.directive] = d.value;
		}
		this._actuator = new haxe_ui_styles_animation_util_Actuator(target,properties,this.time,new haxe_ui_styles_animation_util_ActuatorOptions(this.delay,this.easingFunction,function() {
			_gthis._actuator = null;
			cb();
		},null));
		this._actuator.run();
	}
	,__class__: haxe_ui_styles_animation_KeyFrame
};
var haxe_ui_styles_animation_util_ActuatorOptions = function(delay,easingFunction,onComplete,onUpdate) {
	this.delay = delay;
	this.easingFunction = easingFunction;
	this.onComplete = onComplete;
	this.onUpdate = onUpdate;
};
$hxClasses["haxe.ui.styles.animation.util.ActuatorOptions"] = haxe_ui_styles_animation_util_ActuatorOptions;
haxe_ui_styles_animation_util_ActuatorOptions.__name__ = "haxe.ui.styles.animation.util.ActuatorOptions";
haxe_ui_styles_animation_util_ActuatorOptions.prototype = {
	delay: null
	,easingFunction: null
	,onComplete: null
	,onUpdate: null
	,__class__: haxe_ui_styles_animation_util_ActuatorOptions
};
var haxe_ui_styles_animation_util_Actuator = function(target,properties,duration,options) {
	this.delay = 0;
	this.duration = 0;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	if(options != null) {
		this._easeFunc = haxe_ui_styles_animation_util__$Actuator_Ease.get(options.easingFunction != null ? options.easingFunction : haxe_ui_styles_EasingFunction.EASE);
		if(options.delay != null) {
			this.delay = options.delay;
		}
		if(options.onComplete != null) {
			this._onComplete = options.onComplete;
		}
		if(options.onUpdate != null) {
			this._onUpdate = options.onUpdate;
		}
	}
};
$hxClasses["haxe.ui.styles.animation.util.Actuator"] = haxe_ui_styles_animation_util_Actuator;
haxe_ui_styles_animation_util_Actuator.__name__ = "haxe.ui.styles.animation.util.Actuator";
haxe_ui_styles_animation_util_Actuator.tween = function(target,properties,duration,options) {
	var actuator = new haxe_ui_styles_animation_util_Actuator(target,properties,duration,options);
	actuator.run();
	return actuator;
};
haxe_ui_styles_animation_util_Actuator.prototype = {
	target: null
	,properties: null
	,duration: null
	,delay: null
	,stop: function() {
		this._stopped = true;
	}
	,run: function() {
		this._initialize();
		this._stopped = false;
		if(this.duration == 0) {
			this._apply(1);
			this._finish();
		} else {
			this._currentTime = HxOverrides.now() / 1000;
			if(this.delay > 0) {
				haxe_ui_util_Timer.delay($bind(this,this._nextFrame),this.delay * 1000 | 0);
			} else {
				new haxe_ui_CallLater($bind(this,this._nextFrame));
			}
		}
	}
	,_currentTime: null
	,_easeFunc: null
	,_onComplete: null
	,_onUpdate: null
	,_stopped: null
	,_propertyDetails: null
	,_colorPropertyDetails: null
	,_initialize: function() {
		this._propertyDetails = [];
		this._colorPropertyDetails = [];
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var componentProperty = haxe_ui_util_StyleUtil.styleProperty2ComponentProperty(p);
			var end = Reflect.getProperty(this.properties,p);
			if(end._hx_index == 3) {
				var _g2 = end.v;
				if(_g2._hx_index == 0) {
					var v = _g2.value;
					componentProperty = "percent" + haxe_ui_util_StringUtil.capitalizeFirstLetter(componentProperty);
				}
			}
			var start = Reflect.getProperty(this.target,componentProperty);
			if(start == null) {
				switch(end._hx_index) {
				case 1:
					var v1 = end.v;
					start = 0;
					break;
				case 3:
					var _g3 = end.v;
					if(_g3._hx_index == 0) {
						var v2 = _g3.value;
						start = 0;
					}
					break;
				default:
				}
			}
			if(start == null || end == null) {
				continue;
			}
			switch(end._hx_index) {
			case 3:
				var _g4 = end.v;
				if(_g4._hx_index == 0) {
					var v3 = _g4.value;
					var val = v3;
					if(val != null) {
						var details = new haxe_ui_styles_animation_util_PropertyDetails(this.target,componentProperty,start,val - start);
						this._propertyDetails.push(details);
					}
				} else {
					var val1 = haxe_ui_styles_ValueTools.calcDimension(end);
					if(val1 != null) {
						var details1 = new haxe_ui_styles_animation_util_PropertyDetails(this.target,componentProperty,start,val1 - start);
						this._propertyDetails.push(details1);
					} else {
						var details2 = new haxe_ui_styles_animation_util_PropertyDetails(this.target,componentProperty,start,end - start);
						this._propertyDetails.push(details2);
					}
				}
				break;
			case 4:
				var v4 = end.v;
				var startColor = js_Boot.__cast(start , Int);
				var endColor = v4;
				var details3 = new haxe_ui_styles_animation_util_ColorPropertyDetails(this.target,componentProperty,startColor,(endColor >> 16 & 255) - (startColor >> 16 & 255),(endColor >> 8 & 255) - (startColor >> 8 & 255),(endColor & 255) - (startColor & 255),(endColor >> 24 & 255) - (startColor >> 24 & 255));
				if(this._colorPropertyDetails == null) {
					this._colorPropertyDetails = [];
				}
				this._colorPropertyDetails.push(details3);
				break;
			default:
				var val2 = haxe_ui_styles_ValueTools.calcDimension(end);
				if(val2 != null) {
					var details4 = new haxe_ui_styles_animation_util_PropertyDetails(this.target,componentProperty,start,val2 - start);
					this._propertyDetails.push(details4);
				} else {
					var details5 = new haxe_ui_styles_animation_util_PropertyDetails(this.target,componentProperty,start,end - start);
					this._propertyDetails.push(details5);
				}
			}
		}
	}
	,_nextFrame: function() {
		if(this._stopped == true) {
			return;
		}
		var currentTime = HxOverrides.now() / 1000;
		var delta = currentTime - this._currentTime;
		if(this.delay < 0) {
			delta += -this.delay;
		}
		var tweenPosition = delta / this.duration;
		if(tweenPosition > 1) {
			tweenPosition = 1;
		}
		this._apply(tweenPosition);
		if(this._onUpdate != null) {
			this._onUpdate(currentTime);
		}
		if(delta >= this.duration) {
			this._finish();
		} else {
			new haxe_ui_CallLater($bind(this,this._nextFrame));
		}
	}
	,_apply: function(position) {
		position = this._easeFunc(position);
		var _g = 0;
		var _g1 = this._propertyDetails;
		while(_g < _g1.length) {
			var details = _g1[_g];
			++_g;
			Reflect.setProperty(this.target,details.propertyName,details.start + details.change * position);
		}
		var _g = 0;
		var _g1 = this._colorPropertyDetails;
		while(_g < _g1.length) {
			var details = _g1[_g];
			++_g;
			var currentColor = haxe_ui_util_Color.fromComponents((details.start >> 16 & 255) + details.changeR * position | 0,(details.start >> 8 & 255) + details.changeG * position | 0,(details.start & 255) + details.changeB * position | 0,(details.start >> 24 & 255) + details.changeA * position | 0);
			Reflect.setProperty(details.target,details.propertyName,currentColor);
		}
	}
	,_finish: function() {
		this._stopped = true;
		if(this._onComplete != null) {
			this._onComplete();
		}
	}
	,__class__: haxe_ui_styles_animation_util_Actuator
};
var haxe_ui_styles_animation_util__$Actuator_Ease = function() { };
$hxClasses["haxe.ui.styles.animation.util._Actuator.Ease"] = haxe_ui_styles_animation_util__$Actuator_Ease;
haxe_ui_styles_animation_util__$Actuator_Ease.__name__ = "haxe.ui.styles.animation.util._Actuator.Ease";
haxe_ui_styles_animation_util__$Actuator_Ease.get = function(easingFunction) {
	switch(easingFunction._hx_index) {
	case 0:
		return haxe_ui_styles_animation_util__$Actuator_Ease.linear;
	case 2:
		return haxe_ui_styles_animation_util__$Actuator_Ease.easeIn;
	case 3:
		return haxe_ui_styles_animation_util__$Actuator_Ease.easeOut;
	case 1:case 4:
		return haxe_ui_styles_animation_util__$Actuator_Ease.easeInOut;
	}
};
haxe_ui_styles_animation_util__$Actuator_Ease.linear = function(k) {
	return k;
};
haxe_ui_styles_animation_util__$Actuator_Ease.easeIn = function(k) {
	return k * k * k;
};
haxe_ui_styles_animation_util__$Actuator_Ease.easeOut = function(k) {
	return --k * k * k + 1;
};
haxe_ui_styles_animation_util__$Actuator_Ease.easeInOut = function(k) {
	if((k /= 0.5) < 1) {
		return 0.5 * k * k * k;
	} else {
		return 0.5 * ((k -= 2) * k * k + 2);
	}
};
var haxe_ui_styles_animation_util_ColorPropertyDetails = function(target,propertyName,start,changeR,changeG,changeB,changeA) {
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.changeR = changeR;
	this.changeG = changeG;
	this.changeB = changeB;
	this.changeA = changeA;
};
$hxClasses["haxe.ui.styles.animation.util.ColorPropertyDetails"] = haxe_ui_styles_animation_util_ColorPropertyDetails;
haxe_ui_styles_animation_util_ColorPropertyDetails.__name__ = "haxe.ui.styles.animation.util.ColorPropertyDetails";
haxe_ui_styles_animation_util_ColorPropertyDetails.prototype = {
	changeR: null
	,changeG: null
	,changeB: null
	,changeA: null
	,propertyName: null
	,start: null
	,target: null
	,__class__: haxe_ui_styles_animation_util_ColorPropertyDetails
};
var haxe_ui_styles_animation_util_PropertyDetails = function(target,propertyName,start,change) {
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
};
$hxClasses["haxe.ui.styles.animation.util.PropertyDetails"] = haxe_ui_styles_animation_util_PropertyDetails;
haxe_ui_styles_animation_util_PropertyDetails.__name__ = "haxe.ui.styles.animation.util.PropertyDetails";
haxe_ui_styles_animation_util_PropertyDetails.prototype = {
	change: null
	,propertyName: null
	,start: null
	,target: null
	,__class__: haxe_ui_styles_animation_util_PropertyDetails
};
var haxe_ui_styles_elements_AnimationKeyFrame = function() {
};
$hxClasses["haxe.ui.styles.elements.AnimationKeyFrame"] = haxe_ui_styles_elements_AnimationKeyFrame;
haxe_ui_styles_elements_AnimationKeyFrame.__name__ = "haxe.ui.styles.elements.AnimationKeyFrame";
haxe_ui_styles_elements_AnimationKeyFrame.prototype = {
	time: null
	,directives: null
	,__class__: haxe_ui_styles_elements_AnimationKeyFrame
};
var haxe_ui_styles_elements_AnimationKeyFrames = function(id,keyframes) {
	this._keyframes = [];
	this.id = id;
	this._keyframes = keyframes;
};
$hxClasses["haxe.ui.styles.elements.AnimationKeyFrames"] = haxe_ui_styles_elements_AnimationKeyFrames;
haxe_ui_styles_elements_AnimationKeyFrames.__name__ = "haxe.ui.styles.elements.AnimationKeyFrames";
haxe_ui_styles_elements_AnimationKeyFrames.prototype = {
	id: null
	,_keyframes: null
	,keyFrames: null
	,get_keyFrames: function() {
		return this._keyframes;
	}
	,__class__: haxe_ui_styles_elements_AnimationKeyFrames
	,__properties__: {get_keyFrames:"get_keyFrames"}
};
var haxe_ui_styles_elements_Directive = function(directive,value,defective) {
	if(defective == null) {
		defective = false;
	}
	this.defective = false;
	this.value = null;
	this.directive = null;
	this.directive = directive;
	this.value = value;
	this.defective = defective;
};
$hxClasses["haxe.ui.styles.elements.Directive"] = haxe_ui_styles_elements_Directive;
haxe_ui_styles_elements_Directive.__name__ = "haxe.ui.styles.elements.Directive";
haxe_ui_styles_elements_Directive.prototype = {
	directive: null
	,value: null
	,defective: null
	,__class__: haxe_ui_styles_elements_Directive
};
var haxe_ui_styles_elements_ImportElement = function(url) {
	this.url = url;
};
$hxClasses["haxe.ui.styles.elements.ImportElement"] = haxe_ui_styles_elements_ImportElement;
haxe_ui_styles_elements_ImportElement.__name__ = "haxe.ui.styles.elements.ImportElement";
haxe_ui_styles_elements_ImportElement.prototype = {
	url: null
	,__class__: haxe_ui_styles_elements_ImportElement
};
var haxe_ui_styles_elements_MediaQuery = function(directives,styleSheet) {
	this._directives = [];
	this._directives = directives;
	this._styleSheet = styleSheet;
};
$hxClasses["haxe.ui.styles.elements.MediaQuery"] = haxe_ui_styles_elements_MediaQuery;
haxe_ui_styles_elements_MediaQuery.__name__ = "haxe.ui.styles.elements.MediaQuery";
haxe_ui_styles_elements_MediaQuery.prototype = {
	_directives: null
	,_styleSheet: null
	,addDirective: function(el) {
		this._directives.push(el);
	}
	,relevant: null
	,get_relevant: function() {
		var b = true;
		var _g = 0;
		var _g1 = this._directives;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			switch(d.directive) {
			case "backend":
				b = b && haxe_ui_Backend.get_id() == haxe_ui_styles_ValueTools.string(d.value);
				break;
			case "max-aspect-ratio":
				var sr = haxe_ui_core_Screen.get_instance().get_width() / haxe_ui_core_Screen.get_instance().get_height();
				b = b && sr < this.buildRatio(haxe_ui_styles_ValueTools.string(d.value));
				break;
			case "max-height":
				b = b && haxe_ui_core_Screen.get_instance().get_height() < haxe_ui_styles_ValueTools.calcDimension(d.value);
				break;
			case "max-width":
				b = b && haxe_ui_core_Screen.get_instance().get_width() < haxe_ui_styles_ValueTools.calcDimension(d.value);
				break;
			case "min-aspect-ratio":
				var sr1 = haxe_ui_core_Screen.get_instance().get_width() / haxe_ui_core_Screen.get_instance().get_height();
				b = b && sr1 > this.buildRatio(haxe_ui_styles_ValueTools.string(d.value));
				break;
			case "min-height":
				b = b && haxe_ui_core_Screen.get_instance().get_height() > haxe_ui_styles_ValueTools.calcDimension(d.value);
				break;
			case "min-width":
				b = b && haxe_ui_core_Screen.get_instance().get_width() > haxe_ui_styles_ValueTools.calcDimension(d.value);
				break;
			case "orientation":
				var v = haxe_ui_styles_ValueTools.string(d.value);
				if(v == "landscape") {
					b = b && haxe_ui_core_Screen.get_instance().get_width() > haxe_ui_core_Screen.get_instance().get_height();
				} else if(v == "portrait") {
					b = b && haxe_ui_core_Screen.get_instance().get_height() > haxe_ui_core_Screen.get_instance().get_width();
				}
				break;
			default:
			}
		}
		return b;
	}
	,buildRatio: function(s) {
		var p = s.split("/");
		var w = Std.parseInt(StringTools.trim(p[0]));
		var h = Std.parseInt(StringTools.trim(p[1]));
		return w / h;
	}
	,styleSheet: null
	,get_styleSheet: function() {
		return this._styleSheet;
	}
	,__class__: haxe_ui_styles_elements_MediaQuery
	,__properties__: {get_styleSheet:"get_styleSheet",get_relevant:"get_relevant"}
};
var haxe_ui_styles_elements_RuleElement = function(selector,directives) {
	this.directives = new haxe_ds_StringMap();
	this.selector = new haxe_ui_styles_elements_Selector(selector);
	var _g = 0;
	while(_g < directives.length) {
		var d = directives[_g];
		++_g;
		this.processDirective(d);
	}
};
$hxClasses["haxe.ui.styles.elements.RuleElement"] = haxe_ui_styles_elements_RuleElement;
haxe_ui_styles_elements_RuleElement.__name__ = "haxe.ui.styles.elements.RuleElement";
haxe_ui_styles_elements_RuleElement.ruleMatch = function(c,d) {
	if(c.nodeName == "*") {
		return true;
	}
	if(c.pseudoClass != null) {
		var pc = ":" + c.pseudoClass;
		if(d.classes.indexOf(pc) == -1) {
			return false;
		}
	}
	if(c.className != null) {
		var _g = 0;
		var _g1 = c.get_classNameParts();
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(d.classes.indexOf(p) == -1) {
				return false;
			}
		}
	}
	if(c.nodeName != null) {
		var c1 = js_Boot.getClass(d);
		var className = c1.__name__.split(".").pop().toLowerCase();
		if(c.nodeName != className) {
			return false;
		}
	}
	if(c.id != null && c.id != d.get_id()) {
		return false;
	}
	if(c.parent != null) {
		if(c.direct == true) {
			var p = d.parentComponent;
			if(p == null) {
				return false;
			}
			if(!haxe_ui_styles_elements_RuleElement.ruleMatch(c.parent,p)) {
				return false;
			}
		} else {
			var p = d.parentComponent;
			while(p != null) {
				if(haxe_ui_styles_elements_RuleElement.ruleMatch(c.parent,p)) {
					break;
				}
				p = p.parentComponent;
			}
			if(p == null) {
				return false;
			}
		}
	}
	return true;
};
haxe_ui_styles_elements_RuleElement.prototype = {
	selector: null
	,directives: null
	,addDirective: function(directive,value) {
		var d = new haxe_ui_styles_elements_Directive(directive,value);
		this.processDirective(d);
	}
	,match: function(d) {
		return haxe_ui_styles_elements_RuleElement.ruleMatch(this.selector.parts[this.selector.parts.length - 1],d);
	}
	,processDirective: function(d) {
		switch(d.directive) {
		case "animation":
			this.processComposite(d,["animation-name","animation-duration","animation-timing-function","animation-delay","animation-iteration-count","animation-direction","animation-fill-mode"]);
			break;
		case "background":
			this.processComposite(d,["background-color","background-color-end","background-gradient-style"]);
			break;
		case "background-image-clip":
			this.processComposite(d,["background-image-clip-top","background-image-clip-left","background-image-clip-bottom","background-image-clip-right"]);
			break;
		case "background-image-slice":
			this.processComposite(d,["background-image-slice-top","background-image-slice-left","background-image-slice-bottom","background-image-slice-right"]);
			break;
		case "border":
			this.processComposite(d,["border-size","border-style","border-color"]);
			break;
		case "border-bottom":
			this.processComposite(d,["border-bottom-size","border-bottom-style","border-bottom-color"]);
			break;
		case "border-color":
			this.processComposite(d,["border-top-color","border-left-color","border-right-color","border-bottom-color"],true);
			break;
		case "border-left":
			this.processComposite(d,["border-left-size","border-left-style","border-left-color"]);
			break;
		case "border-right":
			this.processComposite(d,["border-right-size","border-right-style","border-right-color"]);
			break;
		case "border-size":
			this.processComposite(d,["border-top-size","border-left-size","border-right-size","border-bottom-size"]);
			break;
		case "border-top":
			this.processComposite(d,["border-top-size","border-top-style","border-top-color"]);
			break;
		case "font-style":
			var v1 = haxe_ui_styles_ValueTools.composite(d.value);
			if(v1 == null) {
				v1 = [d.value];
			}
			var _g = 0;
			while(_g < v1.length) {
				var v = v1[_g];
				++_g;
				var s = haxe_ui_styles_ValueTools.string(v).toLowerCase();
				if(s == "bold") {
					var this1 = this.directives;
					var value = new haxe_ui_styles_elements_Directive("font-bold",haxe_ui_styles_Value.VBool(true));
					this1.h["font-bold"] = value;
				} else if(s == "italic") {
					var this2 = this.directives;
					var value1 = new haxe_ui_styles_elements_Directive("font-italic",haxe_ui_styles_Value.VBool(true));
					this2.h["font-italic"] = value1;
				} else if(s == "underline") {
					var this3 = this.directives;
					var value2 = new haxe_ui_styles_elements_Directive("font-underline",haxe_ui_styles_Value.VBool(true));
					this3.h["font-underline"] = value2;
				}
			}
			break;
		case "margin":
			var vl = haxe_ui_styles_ValueTools.composite(d.value);
			if(vl.length == 4 || vl.length == 1) {
				this.processComposite(d,["margin-top","margin-left","margin-right","margin-bottom"]);
			} else if(vl.length == 2) {
				this.processComposite(new haxe_ui_styles_elements_Directive("",vl[0]),["margin-top","margin-bottom"]);
				this.processComposite(new haxe_ui_styles_elements_Directive("",vl[1]),["margin-left","margin-right"]);
			}
			break;
		case "padding":
			var vl = haxe_ui_styles_ValueTools.composite(d.value);
			if(vl.length == 4 || vl.length == 1) {
				this.processComposite(d,["padding-top","padding-left","padding-right","padding-bottom"]);
			} else if(vl.length == 2) {
				this.processComposite(new haxe_ui_styles_elements_Directive("",vl[0]),["padding-top","padding-bottom"]);
				this.processComposite(new haxe_ui_styles_elements_Directive("",vl[1]),["padding-left","padding-right"]);
			} else if(vl.length == 0) {
				this.processComposite(d,["padding-top","padding-left","padding-right","padding-bottom"]);
			}
			break;
		case "spacing":
			this.processComposite(d,["horizontal-spacing","vertical-spacing"]);
			break;
		default:
			this.directives.h[d.directive] = d;
		}
	}
	,processComposite: function(d,parts,duplicate) {
		if(duplicate == null) {
			duplicate = false;
		}
		var _g = 0;
		while(_g < parts.length) {
			var p = parts[_g];
			++_g;
			var _this = this.directives;
			if(Object.prototype.hasOwnProperty.call(_this.h,p)) {
				delete(_this.h[p]);
			}
		}
		var _g = d.value;
		switch(_g._hx_index) {
		case 1:
			var _g1 = _g.v;
			var _g1 = 0;
			while(_g1 < parts.length) {
				var p = parts[_g1];
				++_g1;
				var this1 = this.directives;
				var value = new haxe_ui_styles_elements_Directive(p,d.value);
				this1.h[p] = value;
			}
			break;
		case 3:
			var v = _g.v;
			var _g1 = 0;
			while(_g1 < parts.length) {
				var p = parts[_g1];
				++_g1;
				var this1 = this.directives;
				var value = new haxe_ui_styles_elements_Directive(p,haxe_ui_styles_Value.VDimension(v));
				this1.h[p] = value;
			}
			break;
		case 4:
			var _g1 = _g.v;
			if(duplicate == false) {
				var this1 = this.directives;
				var value = new haxe_ui_styles_elements_Directive(parts[0],d.value);
				this1.h[parts[0]] = value;
			} else {
				var _g1 = 0;
				while(_g1 < parts.length) {
					var p = parts[_g1];
					++_g1;
					var this1 = this.directives;
					var value = new haxe_ui_styles_elements_Directive(p,d.value);
					this1.h[p] = value;
				}
			}
			break;
		case 6:
			var _g1 = _g.v;
			break;
		case 7:
			var vl = _g.vl;
			var n = 0;
			var _g = 0;
			while(_g < parts.length) {
				var p = parts[_g];
				++_g;
				if(vl[n] != null) {
					var nd = new haxe_ui_styles_elements_Directive(p,vl[n]);
					this.processDirective(nd);
					this.directives.h[p] = nd;
				}
				++n;
			}
			break;
		case 9:
			var _g = 0;
			while(_g < parts.length) {
				var p = parts[_g];
				++_g;
				var nd = new haxe_ui_styles_elements_Directive(p,d.value);
				this.processDirective(nd);
				this.directives.h[p] = nd;
			}
			break;
		default:
		}
	}
	,__class__: haxe_ui_styles_elements_RuleElement
};
var haxe_ui_styles_elements_Selector = function(s) {
	this.parts = [];
	s = StringTools.replace(s,">"," > ");
	var p = s.split(" ");
	var parent = null;
	var nextDirect = false;
	var _g = 0;
	while(_g < p.length) {
		var i = p[_g];
		++_g;
		i = StringTools.trim(i);
		if(i.length == 0) {
			continue;
		}
		if(i == ">") {
			nextDirect = true;
			continue;
		}
		var current = new haxe_ui_styles_elements_SelectorPart();
		if(nextDirect == true) {
			current.direct = true;
			nextDirect = false;
		}
		current.parent = parent;
		var p1 = i.split(":");
		current.pseudoClass = p1[1];
		var main = p1[0];
		if(main.charAt(0) == ".") {
			current.className = main.substring(1);
		} else {
			var p2 = main.split(".");
			if(p2[0].charAt(0) == "#") {
				current.id = p2[0].substring(1);
			} else {
				current.nodeName = p2[0].toLowerCase();
			}
			current.className = p2[1];
		}
		this.parts.push(current);
		parent = current;
	}
};
$hxClasses["haxe.ui.styles.elements.Selector"] = haxe_ui_styles_elements_Selector;
haxe_ui_styles_elements_Selector.__name__ = "haxe.ui.styles.elements.Selector";
haxe_ui_styles_elements_Selector.prototype = {
	parts: null
	,toString: function() {
		return this.parts.join(" ");
	}
	,__class__: haxe_ui_styles_elements_Selector
};
var haxe_ui_styles_elements_SelectorPart = function() {
	this._parts = null;
	this.direct = false;
	this.nodeName = null;
	this.id = null;
	this.className = null;
	this.pseudoClass = null;
	this.parent = null;
};
$hxClasses["haxe.ui.styles.elements.SelectorPart"] = haxe_ui_styles_elements_SelectorPart;
haxe_ui_styles_elements_SelectorPart.__name__ = "haxe.ui.styles.elements.SelectorPart";
haxe_ui_styles_elements_SelectorPart.prototype = {
	parent: null
	,pseudoClass: null
	,className: null
	,id: null
	,nodeName: null
	,direct: null
	,_parts: null
	,classNameParts: null
	,get_classNameParts: function() {
		if(this.className == null) {
			return null;
		}
		if(this._parts == null) {
			this._parts = this.className.split(".");
		}
		return this._parts;
	}
	,toString: function() {
		var sb_b = "";
		if(this.id != null) {
			sb_b += Std.string("#" + this.id);
		}
		if(this.nodeName != null) {
			sb_b += Std.string(this.nodeName);
		}
		if(this.className != null) {
			sb_b += Std.string("." + this.className);
		}
		if(this.pseudoClass != null) {
			sb_b += Std.string(":" + this.pseudoClass);
		}
		return sb_b;
	}
	,__class__: haxe_ui_styles_elements_SelectorPart
	,__properties__: {get_classNameParts:"get_classNameParts"}
};
var haxe_ui_themes_Theme = function() {
	this.styles = [];
};
$hxClasses["haxe.ui.themes.Theme"] = haxe_ui_themes_Theme;
haxe_ui_themes_Theme.__name__ = "haxe.ui.themes.Theme";
haxe_ui_themes_Theme.prototype = {
	parent: null
	,styles: null
	,__class__: haxe_ui_themes_Theme
};
var haxe_ui_themes_ThemeManager = function() {
	this._themes = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.themes.ThemeManager"] = haxe_ui_themes_ThemeManager;
haxe_ui_themes_ThemeManager.__name__ = "haxe.ui.themes.ThemeManager";
haxe_ui_themes_ThemeManager.__properties__ = {get_instance:"get_instance"};
haxe_ui_themes_ThemeManager.get_instance = function() {
	if(haxe_ui_themes_ThemeManager._instance == null) {
		haxe_ui_themes_ThemeManager._instance = new haxe_ui_themes_ThemeManager();
	}
	return haxe_ui_themes_ThemeManager._instance;
};
haxe_ui_themes_ThemeManager.prototype = {
	_themes: null
	,getTheme: function(themeName) {
		var theme = this._themes.h[themeName];
		if(theme == null) {
			theme = new haxe_ui_themes_Theme();
			this._themes.h[themeName] = theme;
		}
		return theme;
	}
	,addStyleResource: function(themeName,resourceId,priority) {
		if(priority == null) {
			priority = 0;
		}
		this.getTheme(themeName).styles.push({ resourceId : resourceId, priority : priority});
	}
	,applyTheme: function(themeName) {
		haxe_ui_Toolkit.styleSheet.clear("default");
		var entries = [];
		this.buildThemeEntries("global",entries);
		this.buildThemeEntries(themeName,entries);
		haxe_ds_ArraySort.sort(entries,function(a,b) {
			if(a.priority < b.priority) {
				return -1;
			} else if(a.priority > b.priority) {
				return 1;
			}
			return 0;
		});
		var _g = 0;
		while(_g < entries.length) {
			var e = entries[_g];
			++_g;
			this.applyResource(e.resourceId);
		}
	}
	,applyResource: function(resourceId) {
		var style = haxe_ui_Toolkit.get_assets().getText(resourceId);
		if(style != null) {
			this.addStyleString(style);
		}
	}
	,addStyleString: function(style) {
		haxe_ui_Toolkit.styleSheet.parse(style);
	}
	,buildThemeEntries: function(themeName,arr) {
		var theme = this._themes.h[themeName];
		if(theme == null) {
			return;
		}
		if(theme.parent != null) {
			this.buildThemeEntries(theme.parent,arr);
		}
		var _g = 0;
		var _g1 = theme.styles;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			arr.push(s);
		}
	}
	,__class__: haxe_ui_themes_ThemeManager
};
var haxe_ui_util_CallbackMap = function() {
	this._map = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.util.CallbackMap"] = haxe_ui_util_CallbackMap;
haxe_ui_util_CallbackMap.__name__ = "haxe.ui.util.CallbackMap";
haxe_ui_util_CallbackMap.prototype = {
	_map: null
	,add: function(key,callback,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(callback == null) {
			return false;
		}
		var b = false;
		var arr = this._map.h[key];
		if(arr == null) {
			arr = new haxe_ui_util_FunctionArray();
			arr.push(callback,priority);
			this._map.h[key] = arr;
			b = true;
		} else if(arr.contains(callback) == false) {
			arr.push(callback,priority);
		}
		return b;
	}
	,remove: function(key,callback) {
		var b = false;
		var arr = this._map.h[key];
		if(arr != null) {
			arr.remove(callback);
			if(arr.get_length() == 0) {
				var _this = this._map;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
				b = true;
			}
		}
		return b;
	}
	,removeAll: function(key) {
		var arr = this._map.h[key];
		if(arr != null) {
			while(arr.get_length() > 0) arr.remove(arr.get(0));
			var _this = this._map;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
	}
	,invoke: function(key,param) {
		var arr = this._map.h[key];
		if(arr != null) {
			arr = arr.copy();
			var listener = arr.iterator();
			while(listener.hasNext()) {
				var listener1 = listener.next();
				listener1.callback(param);
			}
		}
	}
	,invokeAndRemove: function(key,param) {
		var arr = this._map.h[key];
		if(arr != null) {
			arr = arr.copy();
			this.removeAll(key);
			var listener = arr.iterator();
			while(listener.hasNext()) {
				var listener1 = listener.next();
				listener1.callback(param);
			}
		}
	}
	,count: function(key) {
		var n = 0;
		var arr = this._map.h[key];
		if(arr != null) {
			n = arr.get_length();
		}
		return n;
	}
	,__class__: haxe_ui_util_CallbackMap
};
var haxe_ui_util_Color = {};
haxe_ui_util_Color.__properties__ = {set_a:"set_a",get_a:"get_a",set_b:"set_b",get_b:"get_b",set_g:"set_g",get_g:"get_g",set_r:"set_r",get_r:"get_r"};
haxe_ui_util_Color.fromString = function(s) {
	if(StringTools.startsWith(s,"0x") || StringTools.startsWith(s,"#")) {
		return Std.parseInt("0x" + s.substring(s.length - 6));
	}
	switch(s) {
	case "aqua":
		return 65535;
	case "black":
		return 0;
	case "blue":
		return 255;
	case "fuchsia":
		return 16711935;
	case "green":
		return 32768;
	case "gray":case "grey":
		return 8421504;
	case "lime":
		return 65280;
	case "maroon":
		return 8388608;
	case "navy":
		return 128;
	case "olive":
		return 8421376;
	case "purple":
		return 8388736;
	case "red":
		return 16711680;
	case "silver":
		return 12632256;
	case "teal":
		return 32896;
	case "white":
		return 16777215;
	case "yellow":
		return 16776960;
	default:
		return 0;
	}
};
haxe_ui_util_Color.fromComponents = function(r,g,b,a) {
	var result = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return result;
};
haxe_ui_util_Color.get_r = function(this1) {
	return this1 >> 16 & 255;
};
haxe_ui_util_Color.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return this1;
};
haxe_ui_util_Color.get_g = function(this1) {
	return this1 >> 8 & 255;
};
haxe_ui_util_Color.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return this1;
};
haxe_ui_util_Color.get_b = function(this1) {
	return this1 & 255;
};
haxe_ui_util_Color.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return this1;
};
haxe_ui_util_Color.get_a = function(this1) {
	return this1 >> 24 & 255;
};
haxe_ui_util_Color.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return this1;
};
haxe_ui_util_Color.set = function(this1,r,g,b,a) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return this1;
};
haxe_ui_util_Color.toInt = function(this1) {
	return this1;
};
haxe_ui_util_Color.or = function(a,b) {
	return haxe_ui_util_Color.toInt(a) | haxe_ui_util_Color.toInt(b);
};
haxe_ui_util_Color.sumColor = function(a,b) {
	return haxe_ui_util_Color.toInt(haxe_ui_util_Color.fromComponents((a >> 16 & 255) + (b >> 16 & 255),(a >> 8 & 255) + (b >> 8 & 255),(a & 255) + (b & 255),(a >> 24 & 255) + (b >> 24 & 255)));
};
haxe_ui_util_Color.restColor = function(a,b) {
	return haxe_ui_util_Color.toInt(haxe_ui_util_Color.fromComponents((a >> 16 & 255) - (b >> 16 & 255),(a >> 8 & 255) - (b >> 8 & 255),(a & 255) - (b & 255),(a >> 24 & 255) - (b >> 24 & 255)));
};
haxe_ui_util_Color.sumFloat = function(a,b) {
	var bInt = b | 0;
	return haxe_ui_util_Color.toInt(haxe_ui_util_Color.fromComponents((a >> 16 & 255) - bInt,(a >> 8 & 255) - bInt,(a & 255) - bInt,(a >> 24 & 255) - bInt));
};
haxe_ui_util_Color.mulFloat = function(a,b) {
	return haxe_ui_util_Color.toInt(haxe_ui_util_Color.fromComponents((a >> 16 & 255) * b | 0,(a >> 8 & 255) * b | 0,(a & 255) * b | 0,(a >> 24 & 255) * b | 0));
};
var haxe_ui_util_ColorUtil = function() { };
$hxClasses["haxe.ui.util.ColorUtil"] = haxe_ui_util_ColorUtil;
haxe_ui_util_ColorUtil.__name__ = "haxe.ui.util.ColorUtil";
haxe_ui_util_ColorUtil.buildColorArray = function(startColor,endColor,size) {
	var array = [];
	var r1 = startColor >> 16 & 255;
	var g1 = startColor >> 8 & 255;
	var b1 = startColor & 255;
	var r2 = endColor >> 16 & 255;
	var g2 = endColor >> 8 & 255;
	var b2 = endColor & 255;
	var rd = r2 - r1;
	var gd = g2 - g1;
	var bd = b2 - b1;
	var ri = rd / (size - 1);
	var gi = gd / (size - 1);
	var bi = bd / (size - 1);
	var r = r1;
	var g = g1;
	var b = b1;
	var c;
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var n = _g++;
		c = 0 | (Math.round(r) & 255) << 16 | (Math.round(g) & 255) << 8 | Math.round(b) & 255;
		array.push(haxe_ui_util_Color.toInt(c));
		r += ri;
		g += gi;
		b += bi;
	}
	return array;
};
haxe_ui_util_ColorUtil.parseColor = function(s) {
	if(StringTools.startsWith(s,"#")) {
		s = s.substring(1,s.length);
	} else if(StringTools.startsWith(s,"0x")) {
		s = s.substring(2,s.length);
	}
	return Std.parseInt("0x" + s);
};
var haxe_ui_util_ComponentUtil = function() { };
$hxClasses["haxe.ui.util.ComponentUtil"] = haxe_ui_util_ComponentUtil;
haxe_ui_util_ComponentUtil.__name__ = "haxe.ui.util.ComponentUtil";
haxe_ui_util_ComponentUtil.getDepth = function(target) {
	var count = 0;
	while(target.parentComponent != null) {
		target = target.parentComponent;
		++count;
	}
	return count;
};
var haxe_ui_util_EventMap = function() {
	this._map = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.util.EventMap"] = haxe_ui_util_EventMap;
haxe_ui_util_EventMap.__name__ = "haxe.ui.util.EventMap";
haxe_ui_util_EventMap.prototype = {
	_map: null
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this._map.h);
	}
	,add: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(listener == null) {
			return false;
		}
		var b = false;
		var arr = this._map.h[type];
		if(arr == null) {
			arr = new haxe_ui_util_FunctionArray();
			arr.push(listener,priority);
			this._map.h[type] = arr;
			b = true;
		} else if(arr.contains(listener) == false) {
			arr.push(listener,priority);
		}
		return b;
	}
	,remove: function(type,listener) {
		if(listener == null) {
			return false;
		}
		var b = false;
		var arr = this._map.h[type];
		if(arr != null) {
			arr.remove(listener);
			if(arr.get_length() == 0) {
				var _this = this._map;
				if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
					delete(_this.h[type]);
				}
				b = true;
			}
		}
		return b;
	}
	,contains: function(type,listener) {
		var b = false;
		var arr = this._map.h[type];
		if(arr != null) {
			b = listener != null ? arr.contains(listener) : true;
		}
		return b;
	}
	,invoke: function(type,event,target) {
		if(event.bubble && event.target == null) {
			event.target = target;
		}
		var arr = this._map.h[type];
		if(arr != null && arr.get_length() > 0) {
			arr = arr.copy();
			var listener = arr.iterator();
			while(listener.hasNext()) {
				var listener1 = listener.next();
				if(event.canceled) {
					break;
				}
				var c = event.clone();
				if(c.target == null) {
					c.target = target;
				}
				listener1.callback(c);
				event.canceled = c.canceled;
			}
		}
	}
	,listenerCount: function(type) {
		var n = 0;
		var arr = this._map.h[type];
		if(arr != null) {
			n = arr.get_length();
		}
		return n;
	}
	,listeners: function(type) {
		var arr = this._map.h[type];
		if(arr == null) {
			return null;
		}
		return arr;
	}
	,__class__: haxe_ui_util_EventMap
};
var haxe_ui_util_FunctionArray = function() {
	this._array = [];
};
$hxClasses["haxe.ui.util.FunctionArray"] = haxe_ui_util_FunctionArray;
haxe_ui_util_FunctionArray.__name__ = "haxe.ui.util.FunctionArray";
haxe_ui_util_FunctionArray.prototype = {
	_array: null
	,get: function(index) {
		return this._array[index].callback;
	}
	,length: null
	,get_length: function() {
		return this._array.length;
	}
	,push: function(x,priority) {
		if(priority == null) {
			priority = 0;
		}
		var this1 = new haxe_ui_util__$Listener_ListenerInternal(x,priority);
		var listener = this1;
		var _g = 0;
		var _g1 = this._array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this._array[i].priority < priority) {
				this._array.splice(i,0,listener);
				return i;
			}
		}
		return this._array.push(listener);
	}
	,pop: function() {
		return this._array.pop().callback;
	}
	,indexOf: function(x,fromIndex) {
		if(fromIndex == null) {
			fromIndex = 0;
		}
		var _g = fromIndex;
		var _g1 = this._array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this._array[i].callback == x) {
				return i;
			}
		}
		return -1;
	}
	,remove: function(x) {
		var index = this.indexOf(x);
		if(index != -1) {
			this._array.splice(index,1);
		}
		return index != -1;
	}
	,contains: function(x) {
		return this.indexOf(x) != -1;
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this._array);
	}
	,copy: function() {
		var fa = new haxe_ui_util_FunctionArray();
		fa._array = this._array.slice();
		return fa;
	}
	,toString: function() {
		var s = "[";
		var iter = this.iterator();
		while(iter.hasNext()) {
			s += Std.string(iter.next());
			if(iter.hasNext()) {
				s += ", ";
			}
		}
		s += "]";
		return s;
	}
	,__class__: haxe_ui_util_FunctionArray
	,__properties__: {get_length:"get_length"}
};
var haxe_ui_util_GUID = function() { };
$hxClasses["haxe.ui.util.GUID"] = haxe_ui_util_GUID;
haxe_ui_util_GUID.__name__ = "haxe.ui.util.GUID";
haxe_ui_util_GUID.randomIntegerWithinRange = function(min,max) {
	return Math.floor(Math.random() * (1 + max - min) + min);
};
haxe_ui_util_GUID.createRandomIdentifier = function(length,radix) {
	if(radix == null) {
		radix = 61;
	}
	var characters = ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
	var id = [];
	if(radix > 61) {
		radix = 61;
	}
	while(length-- > 0) id.push(characters[Math.floor(Math.random() * (1 + radix))]);
	var x;
	var y = 100;
	var z;
	return id.join("");
};
haxe_ui_util_GUID.uuid = function() {
	var specialChars = ["8","9","A","B"];
	return haxe_ui_util_GUID.createRandomIdentifier(8,15) + "-" + haxe_ui_util_GUID.createRandomIdentifier(4,15) + "-4" + haxe_ui_util_GUID.createRandomIdentifier(3,15) + "-" + specialChars[Math.floor(Math.random() * 4)] + haxe_ui_util_GUID.createRandomIdentifier(3,15) + "-" + haxe_ui_util_GUID.createRandomIdentifier(12,15);
};
var haxe_ui_util_ImageLoader = function(resource) {
	this._resource = resource;
};
$hxClasses["haxe.ui.util.ImageLoader"] = haxe_ui_util_ImageLoader;
haxe_ui_util_ImageLoader.__name__ = "haxe.ui.util.ImageLoader";
haxe_ui_util_ImageLoader.prototype = {
	_resource: null
	,load: function(callback) {
		if(haxe_ui_util_Variant.get_isString(this._resource)) {
			var stringResource = haxe_ui_util_Variant.toString(this._resource);
			stringResource = StringTools.trim(stringResource);
			if(StringTools.startsWith(stringResource,"http://") || StringTools.startsWith(stringResource,"https://")) {
				this.loadFromHttp(stringResource,callback);
			} else if(StringTools.startsWith(stringResource,"file://")) {
				this.loadFromFile(HxOverrides.substr(stringResource,7,null),callback);
			} else {
				haxe_ui_Toolkit.get_assets().getImage(stringResource,callback);
			}
		} else if(haxe_ui_util_Variant.get_isImageData(this._resource)) {
			var imageData = haxe_ui_util_Variant.toImageData(this._resource);
			if(callback != null) {
				callback(haxe_ui_ToolkitAssets.get_instance().imageInfoFromImageData(imageData));
			}
		}
	}
	,loadFromHttp: function(url,callback) {
		var request = new XMLHttpRequest();
		request.open("GET",url);
		request.responseType = "arraybuffer";
		request.onreadystatechange = function(_) {
			if(request.readyState != 4) {
				return;
			}
			var s;
			try {
				s = request.status;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				s = null;
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null && s >= 200 && s < 400) {
				haxe_ui_Toolkit.get_assets().imageFromBytes(haxe_io_Bytes.ofData(request.response),callback);
			} else if(s == null) {
				callback(null);
			} else {
				if(s == 0) {
					haxe_ui_Toolkit.get_assets().getImage(url,callback);
					return;
				}
				callback(null);
			}
		};
		request.onerror = function(x) {
		};
		request.send();
	}
	,loadFromFile: function(filename,callback) {
		haxe_Log.trace("WARNING: cant load from file system on non-sys targets [" + filename + "]",{ fileName : "haxe/ui/util/ImageLoader.hx", lineNumber : 128, className : "haxe.ui.util.ImageLoader", methodName : "loadFromFile"});
		callback(null);
	}
	,__class__: haxe_ui_util_ImageLoader
};
var haxe_ui_util_Listener = {};
haxe_ui_util_Listener._new = function(callback,priority) {
	var this1 = new haxe_ui_util__$Listener_ListenerInternal(callback,priority);
	return this1;
};
haxe_ui_util_Listener.compareListener = function(a,b) {
	return a.callback == b.callback;
};
haxe_ui_util_Listener.compareFunction = function(a,b) {
	return a.callback == b;
};
haxe_ui_util_Listener.toFunc = function(this1) {
	return this1.callback;
};
var haxe_ui_util__$Listener_ListenerInternal = function(callback,priority) {
	this.callback = callback;
	this.priority = priority;
};
$hxClasses["haxe.ui.util._Listener.ListenerInternal"] = haxe_ui_util__$Listener_ListenerInternal;
haxe_ui_util__$Listener_ListenerInternal.__name__ = "haxe.ui.util._Listener.ListenerInternal";
haxe_ui_util__$Listener_ListenerInternal.prototype = {
	callback: null
	,priority: null
	,__class__: haxe_ui_util__$Listener_ListenerInternal
};
var haxe_ui_util_MathUtil = function() { };
$hxClasses["haxe.ui.util.MathUtil"] = haxe_ui_util_MathUtil;
haxe_ui_util_MathUtil.__name__ = "haxe.ui.util.MathUtil";
haxe_ui_util_MathUtil.distance = function(x1,y1,x2,y2) {
	return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
};
haxe_ui_util_MathUtil.round = function(v,precision) {
	if(precision == null) {
		precision = 0;
	}
	return Math.round(v * Math.pow(10,precision)) / Math.pow(10,precision);
};
haxe_ui_util_MathUtil.clamp = function(v,min,max) {
	if(v == null || isNaN(v)) {
		return min;
	}
	if(min != null && v < min) {
		v = min;
	} else if(max != null && v > max) {
		v = max;
	}
	return v;
};
var haxe_ui_util_StringUtil = function() { };
$hxClasses["haxe.ui.util.StringUtil"] = haxe_ui_util_StringUtil;
haxe_ui_util_StringUtil.__name__ = "haxe.ui.util.StringUtil";
haxe_ui_util_StringUtil.uncapitalizeFirstLetter = function(s) {
	s = HxOverrides.substr(s,0,1).toLowerCase() + HxOverrides.substr(s,1,s.length);
	return s;
};
haxe_ui_util_StringUtil.capitalizeFirstLetter = function(s) {
	s = HxOverrides.substr(s,0,1).toUpperCase() + HxOverrides.substr(s,1,s.length);
	return s;
};
haxe_ui_util_StringUtil.capitalizeHyphens = function(s) {
	return haxe_ui_util_StringUtil.capitalizeDelim(s,"-");
};
haxe_ui_util_StringUtil.capitalizeDelim = function(s,d) {
	var r = s;
	var n = r.indexOf(d);
	while(n != -1) {
		var before = HxOverrides.substr(r,0,n);
		var after = HxOverrides.substr(r,n + 1,r.length);
		r = before + haxe_ui_util_StringUtil.capitalizeFirstLetter(after);
		n = r.indexOf(d,n + 1);
	}
	return r;
};
haxe_ui_util_StringUtil.toDashes = function(s,toLower) {
	if(toLower == null) {
		toLower = true;
	}
	var s1 = new EReg("([a-zA-Z])(?=[A-Z])","g").map(s,function(re) {
		return "" + re.matched(1) + "-";
	});
	if(toLower == true) {
		s1 = s1.toLowerCase();
	}
	return s1;
};
haxe_ui_util_StringUtil.replaceVars = function(s,params) {
	if(params != null) {
		var k = haxe_ds_StringMap.keysIterator(params.h);
		while(k.hasNext()) {
			var k1 = k.next();
			s = StringTools.replace(s,"${" + k1 + "}",params.h[k1]);
		}
	}
	return s;
};
haxe_ui_util_StringUtil.rpad = function(s,count,c) {
	if(c == null) {
		c = " ";
	}
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		s += c;
	}
	return s;
};
haxe_ui_util_StringUtil.padDecimal = function(v,precision) {
	var s = v == null ? "null" : "" + v;
	if(precision == null || precision <= 0) {
		return s;
	}
	var n = s.indexOf(".");
	if(n == -1) {
		n = s.length;
		s += ".";
	}
	var delta = precision - (s.length - n - 1);
	return haxe_ui_util_StringUtil.rpad(s,delta,"0");
};
var haxe_ui_util_StyleUtil = function() { };
$hxClasses["haxe.ui.util.StyleUtil"] = haxe_ui_util_StyleUtil;
haxe_ui_util_StyleUtil.__name__ = "haxe.ui.util.StyleUtil";
haxe_ui_util_StyleUtil.styleProperty2ComponentProperty = function(property) {
	return haxe_ui_util_StyleUtil.style2ComponentEReg.map(property,function(re) {
		return re.matched(1).toUpperCase();
	});
};
haxe_ui_util_StyleUtil.componentProperty2StyleProperty = function(property) {
	return haxe_ui_util_StyleUtil.component2StyleEReg.map(property,function(re) {
		return "-" + re.matched(1).toLowerCase();
	});
};
var haxe_ui_util_Timer = function(delay,callback) {
	haxe_ui_backend_TimerImpl.call(this,delay,callback);
};
$hxClasses["haxe.ui.util.Timer"] = haxe_ui_util_Timer;
haxe_ui_util_Timer.__name__ = "haxe.ui.util.Timer";
haxe_ui_util_Timer.delay = function(f,time_ms) {
	var t = null;
	t = new haxe_ui_util_Timer(time_ms,function() {
		t.stop();
		f();
	});
	return t;
};
haxe_ui_util_Timer.__super__ = haxe_ui_backend_TimerImpl;
haxe_ui_util_Timer.prototype = $extend(haxe_ui_backend_TimerImpl.prototype,{
	stop: function() {
		haxe_ui_backend_TimerImpl.prototype.stop.call(this);
	}
	,__class__: haxe_ui_util_Timer
});
var haxe_ui_util_TypeConverter = function() { };
$hxClasses["haxe.ui.util.TypeConverter"] = haxe_ui_util_TypeConverter;
haxe_ui_util_TypeConverter.__name__ = "haxe.ui.util.TypeConverter";
haxe_ui_util_TypeConverter.convert = function(input) {
	var output = input;
	var _g = Type.typeof(input);
	if(_g._hx_index == 6) {
		if(_g.c == String) {
			var s = Std.string(input);
			if(s == "true" || s == "false") {
				output = s == "true";
			} else if(new EReg("^-?[0-9]*$","i").match(s == null ? "null" : "" + s)) {
				output = Std.parseInt(s);
			} else if(new EReg("^-?[0-9]*\\.[0-9]*$","i").match(s == null ? "null" : "" + s)) {
				output = parseFloat(s);
			}
		}
	}
	return output;
};
var haxe_ui_util_VariantType = $hxEnums["haxe.ui.util.VariantType"] = { __ename__ : true, __constructs__ : ["VT_Int","VT_Float","VT_String","VT_Bool","VT_Array","VT_DataSource","VT_Component","VT_Date","VT_ImageData"]
	,VT_Int: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VT_Float: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VT_String: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VT_Bool: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VT_Array: ($_=function(s) { return {_hx_index:4,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VT_DataSource: ($_=function(s) { return {_hx_index:5,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VT_Component: ($_=function(s) { return {_hx_index:6,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VT_Date: ($_=function(s) { return {_hx_index:7,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VT_ImageData: ($_=function(s) { return {_hx_index:8,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_.__params__ = ["s"],$_)
};
var haxe_ui_util_Variant = {};
haxe_ui_util_Variant.__properties__ = {get_isNull:"get_isNull",get_isDataSource:"get_isDataSource",get_isImageData:"get_isImageData",get_isComponent:"get_isComponent",get_isDate:"get_isDate",get_isArray:"get_isArray",get_isBool:"get_isBool",get_isNumber:"get_isNumber",get_isInt:"get_isInt",get_isFloat:"get_isFloat",get_isString:"get_isString"};
haxe_ui_util_Variant.fromString = function(s) {
	return haxe_ui_util_VariantType.VT_String(s);
};
haxe_ui_util_Variant.toString = function(this1) {
	if(this1 == null) {
		return null;
	}
	switch(this1._hx_index) {
	case 0:
		var s = this1.s;
		if(s == null) {
			return "null";
		} else {
			return "" + s;
		}
		break;
	case 1:
		var s = this1.s;
		if(s == null) {
			return "null";
		} else {
			return "" + s;
		}
		break;
	case 2:
		var s = this1.s;
		return s;
	case 3:
		var s = this1.s;
		if(s == null) {
			return "null";
		} else {
			return "" + s;
		}
		break;
	case 4:
		var s = this1.s;
		return Std.string(s);
	case 5:
		var _g = this1.s;
		return "";
	case 6:
		var s = this1.s;
		return Std.string(s);
	case 7:
		var s = this1.s;
		return Std.string(s);
	case 8:
		var s = this1.s;
		return "";
	}
};
haxe_ui_util_Variant.get_isString = function(this1) {
	if(this1._hx_index == 2) {
		var _g = this1.s;
		return true;
	} else {
		return false;
	}
};
haxe_ui_util_Variant.fromFloat = function(s) {
	return haxe_ui_util_VariantType.VT_Float(s);
};
haxe_ui_util_Variant.toFloat = function(this1) {
	if(haxe_ui_util_Variant.get_isNull(this1)) {
		return null;
	}
	switch(this1._hx_index) {
	case 0:
		var s = this1.s;
		return s;
	case 1:
		var s = this1.s;
		return s;
	default:
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isFloat = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.s;
		return true;
	} else {
		return false;
	}
};
haxe_ui_util_Variant.fromInt = function(s) {
	return haxe_ui_util_VariantType.VT_Int(s);
};
haxe_ui_util_Variant.toInt = function(this1) {
	if(haxe_ui_util_Variant.get_isNull(this1)) {
		return null;
	}
	switch(this1._hx_index) {
	case 0:
		var s = this1.s;
		return s;
	case 1:
		var s = this1.s;
		return s | 0;
	default:
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isInt = function(this1) {
	if(this1._hx_index == 0) {
		var _g = this1.s;
		return true;
	} else {
		return false;
	}
};
haxe_ui_util_Variant.get_isNumber = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		return true;
	case 1:
		var _g = this1.s;
		return true;
	default:
		return false;
	}
};
haxe_ui_util_Variant.toNumber = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var s = this1.s;
		return s;
	case 1:
		var s = this1.s;
		return s;
	default:
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.fromBool = function(s) {
	return haxe_ui_util_VariantType.VT_Bool(s);
};
haxe_ui_util_Variant.toBool = function(this1) {
	if(this1 == null) {
		return false;
	}
	switch(this1._hx_index) {
	case 2:
		var s = this1.s;
		return s == "true";
	case 3:
		var s = this1.s;
		return s;
	default:
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isBool = function(this1) {
	if(this1._hx_index == 3) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.fromArray = function(s) {
	if(s == null) {
		return null;
	} else {
		return haxe_ui_util_VariantType.VT_Array(s);
	}
};
haxe_ui_util_Variant.toArray = function(this1) {
	if(this1 == null) {
		return null;
	}
	if(this1._hx_index == 4) {
		var s = this1.s;
		return s;
	} else {
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isArray = function(this1) {
	if(this1._hx_index == 4) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.fromDate = function(s) {
	return haxe_ui_util_VariantType.VT_Date(s);
};
haxe_ui_util_Variant.toDate = function(this1) {
	if(this1 == null) {
		return null;
	}
	if(this1._hx_index == 7) {
		var s = this1.s;
		return s;
	} else {
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isDate = function(this1) {
	if(this1._hx_index == 7) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.fromComponent = function(s) {
	return haxe_ui_util_VariantType.VT_Component(s);
};
haxe_ui_util_Variant.toComponent = function(this1) {
	if(this1 == null) {
		return null;
	}
	if(this1._hx_index == 6) {
		var s = this1.s;
		return s;
	} else {
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isComponent = function(this1) {
	if(this1._hx_index == 6) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.fromImageData = function(s) {
	return haxe_ui_util_VariantType.VT_ImageData(s);
};
haxe_ui_util_Variant.toImageData = function(this1) {
	if(this1 == null) {
		return null;
	}
	if(this1._hx_index == 8) {
		var s = this1.s;
		return s;
	} else {
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isImageData = function(this1) {
	if(this1._hx_index == 8) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.fromDataSource = function(s) {
	return haxe_ui_util_VariantType.VT_DataSource(s);
};
haxe_ui_util_Variant.toDataSource = function(this1) {
	if(this1 == null) {
		return null;
	}
	if(this1._hx_index == 5) {
		var s = this1.s;
		return s;
	} else {
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isDataSource = function(this1) {
	if(this1._hx_index == 5) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.addFloat = function(lhs,rhs) {
	return lhs + haxe_ui_util_Variant.toNumber(rhs);
};
haxe_ui_util_Variant.addInt = function(lhs,rhs) {
	return lhs + haxe_ui_util_Variant.toInt(rhs);
};
haxe_ui_util_Variant.subtractFloat = function(lhs,rhs) {
	return lhs - haxe_ui_util_Variant.toNumber(rhs);
};
haxe_ui_util_Variant.subtractInt = function(lhs,rhs) {
	return lhs - haxe_ui_util_Variant.toInt(rhs);
};
haxe_ui_util_Variant.add = function(this1,rhs) {
	var tmp;
	var tmp1;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp1 = true;
		break;
	case 1:
		var _g = this1.s;
		tmp1 = true;
		break;
	default:
		tmp1 = false;
	}
	if(tmp1) {
		switch(rhs._hx_index) {
		case 0:
			var _g = rhs.s;
			tmp = true;
			break;
		case 1:
			var _g = rhs.s;
			tmp = true;
			break;
		default:
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.fromFloat(haxe_ui_util_Variant.toNumber(this1) + haxe_ui_util_Variant.toNumber(rhs));
	} else if(haxe_ui_util_Variant.get_isString(this1) && haxe_ui_util_Variant.get_isString(rhs)) {
		return haxe_ui_util_Variant.fromString(haxe_ui_util_Variant.toString(this1) + haxe_ui_util_Variant.toString(rhs));
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.postInc = function(this1) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		var old = this1;
		this1 = haxe_ui_util_VariantType.VT_Float(haxe_ui_util_Variant.toNumber(this1) + 1);
		return old;
	} else {
		throw haxe_Exception.thrown("Variant operation error");
	}
};
haxe_ui_util_Variant.preInc = function(this1) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		this1 = haxe_ui_util_VariantType.VT_Float(haxe_ui_util_Variant.toNumber(this1) + 1);
		return this1;
	} else {
		throw haxe_Exception.thrown("Variant operation error");
	}
};
haxe_ui_util_Variant.subtract = function(this1,rhs) {
	var tmp;
	var tmp1;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp1 = true;
		break;
	case 1:
		var _g = this1.s;
		tmp1 = true;
		break;
	default:
		tmp1 = false;
	}
	if(tmp1) {
		switch(rhs._hx_index) {
		case 0:
			var _g = rhs.s;
			tmp = true;
			break;
		case 1:
			var _g = rhs.s;
			tmp = true;
			break;
		default:
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.fromFloat(haxe_ui_util_Variant.toNumber(this1) - haxe_ui_util_Variant.toNumber(rhs));
	} else if(haxe_ui_util_Variant.get_isString(this1) && haxe_ui_util_Variant.get_isString(rhs)) {
		return haxe_ui_util_Variant.fromString(StringTools.replace(haxe_ui_util_Variant.toString(this1),haxe_ui_util_Variant.toString(rhs),""));
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.postDeinc = function(this1) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		var old = this1;
		this1 = haxe_ui_util_VariantType.VT_Float(haxe_ui_util_Variant.toNumber(this1) - 1);
		return old;
	} else {
		throw haxe_Exception.thrown("Variant operation error");
	}
};
haxe_ui_util_Variant.preDeinc = function(this1) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		this1 = haxe_ui_util_VariantType.VT_Float(haxe_ui_util_Variant.toNumber(this1) - 1);
		return this1;
	} else {
		throw haxe_Exception.thrown("Variant operation error");
	}
};
haxe_ui_util_Variant.multiply = function(this1,rhs) {
	var tmp;
	var tmp1;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp1 = true;
		break;
	case 1:
		var _g = this1.s;
		tmp1 = true;
		break;
	default:
		tmp1 = false;
	}
	if(tmp1) {
		switch(rhs._hx_index) {
		case 0:
			var _g = rhs.s;
			tmp = true;
			break;
		case 1:
			var _g = rhs.s;
			tmp = true;
			break;
		default:
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.fromFloat(haxe_ui_util_Variant.toNumber(this1) * haxe_ui_util_Variant.toNumber(rhs));
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.divide = function(this1,rhs) {
	var tmp;
	var tmp1;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp1 = true;
		break;
	case 1:
		var _g = this1.s;
		tmp1 = true;
		break;
	default:
		tmp1 = false;
	}
	if(tmp1) {
		switch(rhs._hx_index) {
		case 0:
			var _g = rhs.s;
			tmp = true;
			break;
		case 1:
			var _g = rhs.s;
			tmp = true;
			break;
		default:
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.fromFloat(haxe_ui_util_Variant.toNumber(this1) / haxe_ui_util_Variant.toNumber(rhs));
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.gt = function(this1,rhs) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.toNumber(this1) > haxe_ui_util_Variant.toNumber(rhs);
	} else if(haxe_ui_util_Variant.get_isString(this1)) {
		return haxe_ui_util_Variant.toString(this1) > haxe_ui_util_Variant.toString(rhs);
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.gte = function(this1,rhs) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.toNumber(this1) >= haxe_ui_util_Variant.toNumber(rhs);
	} else if(haxe_ui_util_Variant.get_isString(this1)) {
		return haxe_ui_util_Variant.toString(this1) >= haxe_ui_util_Variant.toString(rhs);
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.lt = function(this1,rhs) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.toNumber(this1) < haxe_ui_util_Variant.toNumber(rhs);
	} else if(haxe_ui_util_Variant.get_isString(this1)) {
		return haxe_ui_util_Variant.toString(this1) < haxe_ui_util_Variant.toString(rhs);
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.lte = function(this1,rhs) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.toNumber(this1) <= haxe_ui_util_Variant.toNumber(rhs);
	} else if(haxe_ui_util_Variant.get_isString(this1)) {
		return haxe_ui_util_Variant.toString(this1) <= haxe_ui_util_Variant.toString(rhs);
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.negate = function(this1) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.fromFloat(-haxe_ui_util_Variant.toNumber(this1));
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.invert = function(this1) {
	if(haxe_ui_util_Variant.get_isBool(this1)) {
		var v = haxe_ui_util_Variant.toBool(this1);
		v = !v;
		return haxe_ui_util_Variant.fromBool(v);
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.eq = function(this1,rhs) {
	if(haxe_ui_util_Variant.get_isNull(this1) && haxe_ui_util_Variant.get_isNull(rhs)) {
		return true;
	}
	if(haxe_ui_util_Variant.get_isNull(this1) && !haxe_ui_util_Variant.get_isNull(rhs)) {
		return false;
	}
	if(!haxe_ui_util_Variant.get_isNull(this1) && haxe_ui_util_Variant.get_isNull(rhs)) {
		return false;
	}
	var tmp;
	var tmp1;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp1 = true;
		break;
	case 1:
		var _g = this1.s;
		tmp1 = true;
		break;
	default:
		tmp1 = false;
	}
	if(tmp1) {
		switch(rhs._hx_index) {
		case 0:
			var _g = rhs.s;
			tmp = true;
			break;
		case 1:
			var _g = rhs.s;
			tmp = true;
			break;
		default:
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.toNumber(this1) == haxe_ui_util_Variant.toNumber(rhs);
	} else if(haxe_ui_util_Variant.get_isBool(this1) && haxe_ui_util_Variant.get_isBool(rhs)) {
		return haxe_ui_util_Variant.toBool(this1) == haxe_ui_util_Variant.toBool(rhs);
	} else if(haxe_ui_util_Variant.get_isString(this1) && haxe_ui_util_Variant.get_isString(rhs)) {
		return haxe_ui_util_Variant.toString(this1) == haxe_ui_util_Variant.toString(rhs);
	}
	return false;
};
haxe_ui_util_Variant.neq = function(this1,rhs) {
	return !haxe_ui_util_Variant.eq(this1,rhs);
};
haxe_ui_util_Variant.get_isNull = function(this1) {
	if(this1 != null) {
		return haxe_ui_util_Variant.toString(this1) == null;
	} else {
		return true;
	}
};
haxe_ui_util_Variant.fromDynamic = function(r) {
	var v = null;
	if(r != null) {
		var tmp;
		if(haxe_ui_util_Variant.containsOnlyDigits(r)) {
			var f = parseFloat(("" + Std.string(r)));
			tmp = isNaN(f) == false;
		} else {
			tmp = false;
		}
		if(tmp) {
			if(Std.string(r).indexOf(".") != -1) {
				v = haxe_ui_util_Variant.fromFloat(parseFloat(("" + Std.string(r))));
			} else {
				v = haxe_ui_util_Variant.fromFloat(Std.parseInt("" + Std.string(r)));
			}
		} else if("" + Std.string(r) == "true" || Std.string(r) + "" == "false") {
			v = haxe_ui_util_Variant.fromBool("" + Std.string(r) == "true");
		} else if(typeof(r) == "string") {
			v = haxe_ui_util_Variant.fromString(js_Boot.__cast(r , String));
		} else if(((r) instanceof haxe_ui_core_Component)) {
			v = haxe_ui_util_Variant.fromComponent(js_Boot.__cast(r , haxe_ui_core_Component));
		} else if(((r) instanceof haxe_ui_data_DataSource)) {
			v = r;
		} else if(((r) instanceof Array)) {
			v = r;
		} else if(((r) instanceof Date)) {
			v = haxe_ui_util_Variant.fromDate(js_Boot.__cast(r , Date));
		} else if(((r) instanceof HTMLImageElement)) {
			v = haxe_ui_util_Variant.fromImageData(js_Boot.__cast(r , HTMLImageElement));
		} else {
			v = r;
		}
	}
	return v;
};
haxe_ui_util_Variant.containsOnlyDigits = function(s) {
	if(typeof(s) == "number" && ((s | 0) === s) || typeof(s) == "number") {
		return true;
	}
	var t = Std.string(s);
	var _g = 0;
	var _g1 = t.length;
	while(_g < _g1) {
		var i = _g++;
		var c = t.charAt(i);
		if(c != "0" && c != "1" && c != "2" && c != "3" && c != "4" && c != "5" && c != "6" && c != "7" && c != "8" && c != "9" && c != ".") {
			return false;
		}
	}
	return true;
};
haxe_ui_util_Variant.toDynamic = function(v) {
	var d = null;
	if(v != null) {
		switch(v._hx_index) {
		case 0:
			var y = v.s;
			d = y;
			break;
		case 1:
			var y = v.s;
			d = y;
			break;
		case 2:
			var y = v.s;
			d = y;
			break;
		case 3:
			var y = v.s;
			d = y;
			break;
		case 4:
			var y = v.s;
			d = y;
			break;
		case 5:
			var y = v.s;
			d = y;
			break;
		case 6:
			var y = v.s;
			d = y;
			break;
		case 7:
			var y = v.s;
			d = y;
			break;
		case 8:
			var y = v.s;
			d = y;
			break;
		}
	}
	return d;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__ : true, __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"]
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.table;
			var _g = t.n;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,isFinal: null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n = h.n;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.prototype = {
	i: null
	,readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		if((flags & 63473) != 0) {
			throw haxe_Exception.thrown("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					var bufSize = 65536;
					if(tmp == null) {
						tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
					}
					var out = new haxe_io_BytesBuffer();
					var z = new haxe_zip_InflateImpl(this.i,false,false);
					while(true) {
						var n = z.readBytes(tmp,0,bufSize);
						out.addBytes(tmp,0,n);
						if(n < bufSize) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var hscript_Const = $hxEnums["hscript.Const"] = { __ename__ : true, __constructs__ : ["CInt","CFloat","CString"]
	,CInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["f"],$_)
	,CString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["s"],$_)
};
var hscript_Expr = $hxEnums["hscript.Expr"] = { __ename__ : true, __constructs__ : ["EConst","EIdent","EVar","EParent","EBlock","EField","EBinop","EUnop","ECall","EIf","EWhile","EFor","EBreak","EContinue","EFunction","EReturn","EArray","EArrayDecl","ENew","EThrow","ETry","EObject","ETernary","ESwitch","EDoWhile","EMeta"]
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EVar: ($_=function(n,t,e) { return {_hx_index:2,n:n,t:t,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["n","t","e"],$_)
	,EParent: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EBlock: ($_=function(e) { return {_hx_index:4,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:5,e:e,f:f,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:6,op:op,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,prefix,e) { return {_hx_index:7,op:op,prefix:prefix,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["op","prefix","e"],$_)
	,ECall: ($_=function(e,params) { return {_hx_index:8,e:e,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","params"],$_)
	,EIf: ($_=function(cond,e1,e2) { return {_hx_index:9,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e1","e2"],$_)
	,EWhile: ($_=function(cond,e) { return {_hx_index:10,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e"],$_)
	,EFor: ($_=function(v,it,e) { return {_hx_index:11,v:v,it:it,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["v","it","e"],$_)
	,EBreak: {_hx_index:12,__enum__:"hscript.Expr",toString:$estr}
	,EContinue: {_hx_index:13,__enum__:"hscript.Expr",toString:$estr}
	,EFunction: ($_=function(args,e,name,ret) { return {_hx_index:14,args:args,e:e,name:name,ret:ret,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["args","e","name","ret"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:15,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,EArrayDecl: ($_=function(e) { return {_hx_index:17,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ENew: ($_=function(cl,params) { return {_hx_index:18,cl:cl,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cl","params"],$_)
	,EThrow: ($_=function(e) { return {_hx_index:19,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ETry: ($_=function(e,v,t,ecatch) { return {_hx_index:20,e:e,v:v,t:t,ecatch:ecatch,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","v","t","ecatch"],$_)
	,EObject: ($_=function(fl) { return {_hx_index:21,fl:fl,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["fl"],$_)
	,ETernary: ($_=function(cond,e1,e2) { return {_hx_index:22,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e1","e2"],$_)
	,ESwitch: ($_=function(e,cases,defaultExpr) { return {_hx_index:23,e:e,cases:cases,defaultExpr:defaultExpr,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","cases","defaultExpr"],$_)
	,EDoWhile: ($_=function(cond,e) { return {_hx_index:24,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:25,name:name,args:args,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["name","args","e"],$_)
};
var hscript_CType = $hxEnums["hscript.CType"] = { __ename__ : true, __constructs__ : ["CTPath","CTFun","CTAnon","CTParent"]
	,CTPath: ($_=function(path,params) { return {_hx_index:0,path:path,params:params,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["path","params"],$_)
	,CTFun: ($_=function(args,ret) { return {_hx_index:1,args:args,ret:ret,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["args","ret"],$_)
	,CTAnon: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,CTParent: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["t"],$_)
};
var hscript_Error = $hxEnums["hscript.Error"] = { __ename__ : true, __constructs__ : ["EInvalidChar","EUnexpected","EUnterminatedString","EUnterminatedComment","EUnknownVariable","EInvalidIterator","EInvalidOp","EInvalidAccess"]
	,EInvalidChar: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EUnexpected: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["s"],$_)
	,EUnterminatedString: {_hx_index:2,__enum__:"hscript.Error",toString:$estr}
	,EUnterminatedComment: {_hx_index:3,__enum__:"hscript.Error",toString:$estr}
	,EUnknownVariable: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EInvalidIterator: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EInvalidOp: ($_=function(op) { return {_hx_index:6,op:op,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["op"],$_)
	,EInvalidAccess: ($_=function(f) { return {_hx_index:7,f:f,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["f"],$_)
};
var hscript__$Interp_Stop = $hxEnums["hscript._Interp.Stop"] = { __ename__ : true, __constructs__ : ["SBreak","SContinue","SReturn"]
	,SBreak: {_hx_index:0,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SContinue: {_hx_index:1,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SReturn: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hscript._Interp.Stop",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var hscript_Token = $hxEnums["hscript.Token"] = { __ename__ : true, __constructs__ : ["TEof","TConst","TId","TOp","TPOpen","TPClose","TBrOpen","TBrClose","TDot","TComma","TSemicolon","TBkOpen","TBkClose","TQuestion","TDoubleDot","TMeta"]
	,TEof: {_hx_index:0,__enum__:"hscript.Token",toString:$estr}
	,TConst: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TId: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TOp: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TPOpen: {_hx_index:4,__enum__:"hscript.Token",toString:$estr}
	,TPClose: {_hx_index:5,__enum__:"hscript.Token",toString:$estr}
	,TBrOpen: {_hx_index:6,__enum__:"hscript.Token",toString:$estr}
	,TBrClose: {_hx_index:7,__enum__:"hscript.Token",toString:$estr}
	,TDot: {_hx_index:8,__enum__:"hscript.Token",toString:$estr}
	,TComma: {_hx_index:9,__enum__:"hscript.Token",toString:$estr}
	,TSemicolon: {_hx_index:10,__enum__:"hscript.Token",toString:$estr}
	,TBkOpen: {_hx_index:11,__enum__:"hscript.Token",toString:$estr}
	,TBkClose: {_hx_index:12,__enum__:"hscript.Token",toString:$estr}
	,TQuestion: {_hx_index:13,__enum__:"hscript.Token",toString:$estr}
	,TDoubleDot: {_hx_index:14,__enum__:"hscript.Token",toString:$estr}
	,TMeta: ($_=function(s) { return {_hx_index:15,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
};
var hscript_Parser = function() {
	this.uid = 0;
	this.line = 1;
	this.opChars = "+*/-=!><&|^%~";
	this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
	var priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^=","=>"]];
	this.opPriority = new haxe_ds_StringMap();
	this.opRightAssoc = new haxe_ds_StringMap();
	this.unops = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = priorities.length;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = priorities[i];
		while(_g2 < _g3.length) {
			var x = _g3[_g2];
			++_g2;
			this.opPriority.h[x] = i;
			if(i == 9) {
				this.opRightAssoc.h[x] = true;
			}
		}
	}
	var x = "!";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "++";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "--";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "-";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "~";
	this.unops.h[x] = x == "++" || x == "--";
};
$hxClasses["hscript.Parser"] = hscript_Parser;
hscript_Parser.__name__ = "hscript.Parser";
hscript_Parser.prototype = {
	line: null
	,opChars: null
	,identChars: null
	,opPriority: null
	,opRightAssoc: null
	,unops: null
	,allowJSON: null
	,allowTypes: null
	,allowMetadata: null
	,input: null
	,char: null
	,ops: null
	,idents: null
	,uid: null
	,tokens: null
	,error: function(err,pmin,pmax) {
		throw haxe_Exception.thrown(err);
	}
	,invalidChar: function(c) {
		throw haxe_Exception.thrown(hscript_Error.EInvalidChar(c));
	}
	,parseString: function(s,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.uid = 0;
		return this.parse(new haxe_io_StringInput(s),origin);
	}
	,parse: function(s,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.line = 1;
		this.tokens = new haxe_ds_GenericStack();
		this.char = -1;
		this.input = s;
		this.ops = [];
		this.idents = [];
		var _g = 0;
		var _g1 = this.opChars.length;
		while(_g < _g1) {
			var i = _g++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		var _g = 0;
		var _g1 = this.identChars.length;
		while(_g < _g1) {
			var i = _g++;
			this.idents[HxOverrides.cca(this.identChars,i)] = true;
		}
		var a = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			a.push(this.parseFullExpr());
		}
		if(a.length == 1) {
			return a[0];
		} else {
			return hscript_Expr.EBlock(a);
		}
	}
	,unexpected: function(tk) {
		throw haxe_Exception.thrown(hscript_Error.EUnexpected(this.tokenString(tk)));
	}
	,push: function(tk) {
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
	}
	,ensure: function(tk) {
		var t = this.token();
		if(t != tk) {
			this.unexpected(t);
		}
	}
	,getIdent: function() {
		var tk = this.token();
		if(tk == null) {
			this.unexpected(tk);
			return null;
		} else if(tk._hx_index == 2) {
			var id = tk.s;
			return id;
		} else {
			this.unexpected(tk);
			return null;
		}
	}
	,expr: function(e) {
		return e;
	}
	,pmin: function(e) {
		return 0;
	}
	,pmax: function(e) {
		return 0;
	}
	,mk: function(e,pmin,pmax) {
		return e;
	}
	,isBlock: function(e) {
		switch(e._hx_index) {
		case 2:
			var _g = e.t;
			var _g = e.n;
			var e1 = e.e;
			if(e1 != null) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 4:
			var _g = e.e;
			return true;
		case 6:
			var _g = e.e1;
			var _g = e.op;
			var e1 = e.e2;
			return this.isBlock(e1);
		case 7:
			var _g = e.op;
			var e1 = e.e;
			var prefix = e.prefix;
			if(!prefix) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 9:
			var _g = e.cond;
			var e2 = e.e2;
			var e1 = e.e1;
			if(e2 != null) {
				return this.isBlock(e2);
			} else {
				return this.isBlock(e1);
			}
			break;
		case 10:
			var _g = e.cond;
			var e1 = e.e;
			return this.isBlock(e1);
		case 11:
			var _g = e.it;
			var _g = e.v;
			var e1 = e.e;
			return this.isBlock(e1);
		case 14:
			var _g = e.ret;
			var _g = e.name;
			var _g = e.args;
			var e1 = e.e;
			return this.isBlock(e1);
		case 15:
			var e1 = e.e;
			if(e1 != null) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 20:
			var _g = e.t;
			var _g = e.v;
			var _g = e.e;
			var e1 = e.ecatch;
			return this.isBlock(e1);
		case 21:
			var _g = e.fl;
			return true;
		case 23:
			var _g = e.defaultExpr;
			var _g = e.cases;
			var _g = e.e;
			return true;
		case 24:
			var _g = e.cond;
			var e1 = e.e;
			return this.isBlock(e1);
		default:
			return false;
		}
	}
	,parseFullExpr: function() {
		var e = this.parseExpr();
		var tk = this.token();
		if(tk != hscript_Token.TSemicolon && tk != hscript_Token.TEof) {
			if(this.isBlock(e)) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				this.unexpected(tk);
			}
		}
		return e;
	}
	,parseObject: function(p1) {
		var fl = [];
		_hx_loop1: while(true) {
			var tk = this.token();
			var id = null;
			if(tk == null) {
				this.unexpected(tk);
			} else {
				switch(tk._hx_index) {
				case 1:
					var c = tk.c;
					if(!this.allowJSON) {
						this.unexpected(tk);
					}
					if(c._hx_index == 2) {
						var s = c.s;
						id = s;
					} else {
						this.unexpected(tk);
					}
					break;
				case 2:
					var i = tk.s;
					id = i;
					break;
				case 7:
					break _hx_loop1;
				default:
					this.unexpected(tk);
				}
			}
			var t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			fl.push({ name : id, e : this.parseExpr()});
			tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else {
				switch(tk._hx_index) {
				case 7:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		}
		return this.parseExprNext(hscript_Expr.EObject(fl));
	}
	,parseExpr: function() {
		var tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 1:
				var c = tk.c;
				return this.parseExprNext(hscript_Expr.EConst(c));
			case 2:
				var id = tk.s;
				var e = this.parseStructure(id);
				if(e == null) {
					e = hscript_Expr.EIdent(id);
				}
				return this.parseExprNext(e);
			case 3:
				var op = tk.s;
				if(Object.prototype.hasOwnProperty.call(this.unops.h,op)) {
					return this.makeUnop(op,this.parseExpr());
				}
				return this.unexpected(tk);
			case 4:
				var e = this.parseExpr();
				var t = this.token();
				if(t != hscript_Token.TPClose) {
					this.unexpected(t);
				}
				return this.parseExprNext(hscript_Expr.EParent(e));
			case 6:
				tk = this.token();
				if(tk == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				} else {
					switch(tk._hx_index) {
					case 1:
						var c = tk.c;
						if(this.allowJSON) {
							if(c._hx_index == 2) {
								var _g = c.s;
								var tk2 = this.token();
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk2,_this.head);
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk2 != null) {
									if(tk2._hx_index == 14) {
										return this.parseExprNext(this.parseObject(0));
									}
								}
							} else {
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
							}
						} else {
							var _this = this.tokens;
							_this.head = new haxe_ds_GenericCell(tk,_this.head);
						}
						break;
					case 2:
						var _g = tk.s;
						var tk2 = this.token();
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk2,_this.head);
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
						if(tk2 != null) {
							if(tk2._hx_index == 14) {
								return this.parseExprNext(this.parseObject(0));
							}
						}
						break;
					case 7:
						return this.parseExprNext(hscript_Expr.EObject([]));
					default:
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
					}
				}
				var a = [];
				while(true) {
					a.push(this.parseFullExpr());
					tk = this.token();
					if(tk == hscript_Token.TBrClose) {
						break;
					}
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				}
				return hscript_Expr.EBlock(a);
			case 11:
				var a = [];
				tk = this.token();
				while(tk != hscript_Token.TBkClose) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
					a.push(this.parseExpr());
					tk = this.token();
					if(tk == hscript_Token.TComma) {
						tk = this.token();
					}
				}
				if(a.length == 1) {
					var _g = a[0];
					switch(_g._hx_index) {
					case 10:
						var _g1 = _g.e;
						var _g1 = _g.cond;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					case 11:
						var _g1 = _g.e;
						var _g1 = _g.it;
						var _g1 = _g.v;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					case 24:
						var _g1 = _g.e;
						var _g1 = _g.cond;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					default:
					}
				}
				return this.parseExprNext(hscript_Expr.EArrayDecl(a));
			case 15:
				var id = tk.s;
				if(this.allowMetadata) {
					var args = this.parseMetaArgs();
					return hscript_Expr.EMeta(id,args,this.parseExpr());
				} else {
					return this.unexpected(tk);
				}
				break;
			default:
				return this.unexpected(tk);
			}
		}
	}
	,parseMetaArgs: function() {
		var tk = this.token();
		if(tk != hscript_Token.TPOpen) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return null;
		}
		var args = [];
		tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			_hx_loop1: while(true) {
				args.push(this.parseExpr());
				var _g = this.token();
				if(_g == null) {
					var tk = _g;
					this.unexpected(tk);
				} else {
					switch(_g._hx_index) {
					case 5:
						break _hx_loop1;
					case 9:
						break;
					default:
						var tk1 = _g;
						this.unexpected(tk1);
					}
				}
			}
		}
		return args;
	}
	,mapCompr: function(tmp,e) {
		var edef;
		switch(e._hx_index) {
		case 3:
			var e2 = e.e;
			edef = hscript_Expr.EParent(this.mapCompr(tmp,e2));
			break;
		case 4:
			var _g = e.e;
			if(_g.length == 1) {
				var e1 = _g[0];
				edef = hscript_Expr.EBlock([this.mapCompr(tmp,e1)]);
			} else {
				edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 9:
			var e2 = e.e2;
			var e1 = e.e1;
			var cond = e.cond;
			edef = e2 == null ? hscript_Expr.EIf(cond,this.mapCompr(tmp,e1),null) : hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			break;
		case 10:
			var e2 = e.e;
			var cond = e.cond;
			edef = hscript_Expr.EWhile(cond,this.mapCompr(tmp,e2));
			break;
		case 11:
			var e2 = e.e;
			var it = e.it;
			var v = e.v;
			edef = hscript_Expr.EFor(v,it,this.mapCompr(tmp,e2));
			break;
		case 24:
			var e2 = e.e;
			var cond = e.cond;
			edef = hscript_Expr.EDoWhile(cond,this.mapCompr(tmp,e2));
			break;
		default:
			edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
		}
		return edef;
	}
	,makeUnop: function(op,e) {
		switch(e._hx_index) {
		case 6:
			var e2 = e.e2;
			var e1 = e.e1;
			var bop = e.op;
			return hscript_Expr.EBinop(bop,this.makeUnop(op,e1),e2);
		case 22:
			var e3 = e.e2;
			var e2 = e.e1;
			var e1 = e.cond;
			return hscript_Expr.ETernary(this.makeUnop(op,e1),e2,e3);
		default:
			return hscript_Expr.EUnop(op,true,e);
		}
	}
	,makeBinop: function(op,e1,e) {
		switch(e._hx_index) {
		case 6:
			var e3 = e.e2;
			var e2 = e.e1;
			var op2 = e.op;
			if(this.opPriority.h[op] <= this.opPriority.h[op2] && !Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3);
			} else {
				return hscript_Expr.EBinop(op,e1,e);
			}
			break;
		case 22:
			var e4 = e.e2;
			var e3 = e.e1;
			var e2 = e.cond;
			if(Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op,e1,e);
			} else {
				return hscript_Expr.ETernary(this.makeBinop(op,e1,e2),e3,e4);
			}
			break;
		default:
			return hscript_Expr.EBinop(op,e1,e);
		}
	}
	,parseStructure: function(id) {
		switch(id) {
		case "break":
			return hscript_Expr.EBreak;
		case "continue":
			return hscript_Expr.EContinue;
		case "do":
			var e = this.parseExpr();
			var tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else if(tk._hx_index == 2) {
				if(tk.s != "while") {
					this.unexpected(tk);
				}
			} else {
				this.unexpected(tk);
			}
			var econd = this.parseExpr();
			return hscript_Expr.EDoWhile(econd,e);
		case "else":
			return this.unexpected(hscript_Token.TId(id));
		case "for":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var tk = this.token();
			if(!Type.enumEq(tk,hscript_Token.TId("in"))) {
				this.unexpected(tk);
			}
			var eiter = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TPClose) {
				this.unexpected(t);
			}
			var e = this.parseExpr();
			return hscript_Expr.EFor(vname,eiter,e);
		case "function":
			var tk = this.token();
			var name = null;
			if(tk == null) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else if(tk._hx_index == 2) {
				var id = tk.s;
				name = id;
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			}
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var args = [];
			tk = this.token();
			if(tk != hscript_Token.TPClose) {
				var done = false;
				while(!done) {
					var name1 = null;
					var opt = false;
					if(tk != null) {
						if(tk._hx_index == 13) {
							opt = true;
							tk = this.token();
						}
					}
					if(tk == null) {
						this.unexpected(tk);
					} else if(tk._hx_index == 2) {
						var id = tk.s;
						name1 = id;
					} else {
						this.unexpected(tk);
					}
					tk = this.token();
					var arg = { name : name1};
					args.push(arg);
					if(opt) {
						arg.opt = true;
					}
					if(tk == hscript_Token.TDoubleDot && this.allowTypes) {
						arg.t = this.parseType();
						tk = this.token();
					}
					if(tk == null) {
						this.unexpected(tk);
					} else {
						switch(tk._hx_index) {
						case 5:
							done = true;
							break;
						case 9:
							tk = this.token();
							break;
						default:
							this.unexpected(tk);
						}
					}
				}
			}
			var ret = null;
			if(this.allowTypes) {
				tk = this.token();
				if(tk != hscript_Token.TDoubleDot) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				} else {
					ret = this.parseType();
				}
			}
			var body = this.parseExpr();
			return hscript_Expr.EFunction(args,body,name,ret);
		case "if":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var cond = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TPClose) {
				this.unexpected(t);
			}
			var e1 = this.parseExpr();
			var e2 = null;
			var semic = false;
			var tk = this.token();
			if(tk == hscript_Token.TSemicolon) {
				semic = true;
				tk = this.token();
			}
			if(Type.enumEq(tk,hscript_Token.TId("else"))) {
				e2 = this.parseExpr();
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				if(semic) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(hscript_Token.TSemicolon,_this.head);
				}
			}
			return hscript_Expr.EIf(cond,e1,e2);
		case "new":
			var a = [];
			a.push(this.getIdent());
			var next = true;
			while(next) {
				var tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
				} else {
					switch(tk._hx_index) {
					case 4:
						next = false;
						break;
					case 8:
						a.push(this.getIdent());
						break;
					default:
						this.unexpected(tk);
					}
				}
			}
			var args = this.parseExprList(hscript_Token.TPClose);
			return hscript_Expr.ENew(a.join("."),args);
		case "return":
			var tk = this.token();
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			var e = tk == hscript_Token.TSemicolon ? null : this.parseExpr();
			return hscript_Expr.EReturn(e);
		case "switch":
			var e = this.parseExpr();
			var def = null;
			var cases = [];
			var t = this.token();
			if(t != hscript_Token.TBrOpen) {
				this.unexpected(t);
			}
			_hx_loop3: while(true) {
				var tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
				} else {
					switch(tk._hx_index) {
					case 2:
						switch(tk.s) {
						case "case":
							var c = { values : [], expr : null};
							cases.push(c);
							_hx_loop4: while(true) {
								var e1 = this.parseExpr();
								c.values.push(e1);
								tk = this.token();
								if(tk == null) {
									this.unexpected(tk);
								} else {
									switch(tk._hx_index) {
									case 9:
										break;
									case 14:
										break _hx_loop4;
									default:
										this.unexpected(tk);
									}
								}
							}
							var exprs = [];
							_hx_loop5: while(true) {
								tk = this.token();
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk == null) {
									exprs.push(this.parseFullExpr());
								} else {
									switch(tk._hx_index) {
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop5;
										default:
											exprs.push(this.parseFullExpr());
										}
										break;
									case 7:
										break _hx_loop5;
									default:
										exprs.push(this.parseFullExpr());
									}
								}
							}
							c.expr = exprs.length == 1 ? exprs[0] : exprs.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs);
							break;
						case "default":
							if(def != null) {
								this.unexpected(tk);
							}
							var t = this.token();
							if(t != hscript_Token.TDoubleDot) {
								this.unexpected(t);
							}
							var exprs1 = [];
							_hx_loop6: while(true) {
								tk = this.token();
								var _this1 = this.tokens;
								_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
								if(tk == null) {
									exprs1.push(this.parseFullExpr());
								} else {
									switch(tk._hx_index) {
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop6;
										default:
											exprs1.push(this.parseFullExpr());
										}
										break;
									case 7:
										break _hx_loop6;
									default:
										exprs1.push(this.parseFullExpr());
									}
								}
							}
							def = exprs1.length == 1 ? exprs1[0] : exprs1.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs1);
							break;
						default:
							this.unexpected(tk);
						}
						break;
					case 7:
						break _hx_loop3;
					default:
						this.unexpected(tk);
					}
				}
			}
			return hscript_Expr.ESwitch(e,cases,def);
		case "throw":
			var e = this.parseExpr();
			return hscript_Expr.EThrow(e);
		case "try":
			var e = this.parseExpr();
			var tk = this.token();
			if(!Type.enumEq(tk,hscript_Token.TId("catch"))) {
				this.unexpected(tk);
			}
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			var t = null;
			if(this.allowTypes) {
				t = this.parseType();
			} else {
				tk = this.token();
				if(!Type.enumEq(tk,hscript_Token.TId("Dynamic"))) {
					this.unexpected(tk);
				}
			}
			var t1 = this.token();
			if(t1 != hscript_Token.TPClose) {
				this.unexpected(t1);
			}
			var ec = this.parseExpr();
			return hscript_Expr.ETry(e,vname,t,ec);
		case "var":
			var ident = this.getIdent();
			var tk = this.token();
			var t = null;
			if(tk == hscript_Token.TDoubleDot && this.allowTypes) {
				t = this.parseType();
				tk = this.token();
			}
			var e = null;
			if(Type.enumEq(tk,hscript_Token.TOp("="))) {
				e = this.parseExpr();
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			}
			return hscript_Expr.EVar(ident,t,e);
		case "while":
			var econd = this.parseExpr();
			var e = this.parseExpr();
			return hscript_Expr.EWhile(econd,e);
		default:
			return null;
		}
	}
	,parseExprNext: function(e1) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return e1;
		} else {
			switch(tk._hx_index) {
			case 3:
				var op = tk.s;
				if(this.unops.h[op]) {
					var tmp;
					if(!this.isBlock(e1)) {
						if(e1._hx_index == 3) {
							var _g = e1.e;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
						return e1;
					}
					return this.parseExprNext(hscript_Expr.EUnop(op,false,e1));
				}
				return this.makeBinop(op,e1,this.parseExpr());
			case 4:
				return this.parseExprNext(hscript_Expr.ECall(e1,this.parseExprList(hscript_Token.TPClose)));
			case 8:
				var field = this.getIdent();
				return this.parseExprNext(hscript_Expr.EField(e1,field));
			case 11:
				var e2 = this.parseExpr();
				var t = this.token();
				if(t != hscript_Token.TBkClose) {
					this.unexpected(t);
				}
				return this.parseExprNext(hscript_Expr.EArray(e1,e2));
			case 13:
				var e2 = this.parseExpr();
				var t = this.token();
				if(t != hscript_Token.TDoubleDot) {
					this.unexpected(t);
				}
				var e3 = this.parseExpr();
				return hscript_Expr.ETernary(e1,e2,e3);
			default:
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return e1;
			}
		}
	}
	,parseType: function() {
		var t = this.token();
		if(t == null) {
			return this.unexpected(t);
		} else {
			switch(t._hx_index) {
			case 2:
				var v = t.s;
				var path = [v];
				while(true) {
					t = this.token();
					if(t != hscript_Token.TDot) {
						break;
					}
					path.push(this.getIdent());
				}
				var params = null;
				if(t == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				} else if(t._hx_index == 3) {
					var op = t.s;
					if(op == "<") {
						params = [];
						_hx_loop2: while(true) {
							params.push(this.parseType());
							t = this.token();
							if(t != null) {
								switch(t._hx_index) {
								case 3:
									var op = t.s;
									if(op == ">") {
										break _hx_loop2;
									}
									if(HxOverrides.cca(op,0) == 62) {
										var _this = this.tokens;
										_this.head = new haxe_ds_GenericCell(hscript_Token.TOp(HxOverrides.substr(op,1,null)),_this.head);
										break _hx_loop2;
									}
									break;
								case 9:
									continue;
								default:
								}
							}
							this.unexpected(t);
						}
					} else {
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(t,_this.head);
					}
				} else {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				}
				return this.parseTypeNext(hscript_CType.CTPath(path,params));
			case 4:
				var t1 = this.parseType();
				var t2 = this.token();
				if(t2 != hscript_Token.TPClose) {
					this.unexpected(t2);
				}
				return this.parseTypeNext(hscript_CType.CTParent(t1));
			case 6:
				var fields = [];
				var meta = null;
				_hx_loop3: while(true) {
					t = this.token();
					if(t == null) {
						this.unexpected(t);
					} else {
						switch(t._hx_index) {
						case 2:
							var _g = t.s;
							if(_g == "var") {
								var name = this.getIdent();
								var t1 = this.token();
								if(t1 != hscript_Token.TDoubleDot) {
									this.unexpected(t1);
								}
								fields.push({ name : name, t : this.parseType(), meta : meta});
								meta = null;
								var t2 = this.token();
								if(t2 != hscript_Token.TSemicolon) {
									this.unexpected(t2);
								}
							} else {
								var name1 = _g;
								var t3 = this.token();
								if(t3 != hscript_Token.TDoubleDot) {
									this.unexpected(t3);
								}
								fields.push({ name : name1, t : this.parseType(), meta : meta});
								t = this.token();
								if(t == null) {
									this.unexpected(t);
								} else {
									switch(t._hx_index) {
									case 7:
										break _hx_loop3;
									case 9:
										break;
									default:
										this.unexpected(t);
									}
								}
							}
							break;
						case 7:
							break _hx_loop3;
						case 15:
							var name2 = t.s;
							if(meta == null) {
								meta = [];
							}
							meta.push({ name : name2, params : this.parseMetaArgs()});
							break;
						default:
							this.unexpected(t);
						}
					}
				}
				return this.parseTypeNext(hscript_CType.CTAnon(fields));
			default:
				return this.unexpected(t);
			}
		}
	}
	,parseTypeNext: function(t) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		} else if(tk._hx_index == 3) {
			var op = tk.s;
			if(op != "->") {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return t;
			}
		} else {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		}
		var t2 = this.parseType();
		if(t2._hx_index == 1) {
			var _g = t2.ret;
			var args = t2.args;
			args.unshift(t);
			return t2;
		} else {
			return hscript_CType.CTFun([t],t2);
		}
	}
	,parseExprList: function(etk) {
		var args = [];
		var tk = this.token();
		if(tk == etk) {
			return args;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
		while(true) {
			args.push(this.parseExpr());
			tk = this.token();
			if(tk == null) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
			} else if(tk._hx_index != 9) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
			}
		}
		return args;
	}
	,incPos: function() {
	}
	,readChar: function() {
		try {
			return this.input.readByte();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return 0;
		}
	}
	,readString: function(until) {
		var c = 0;
		var b = new haxe_io_BytesOutput();
		var esc = false;
		var old = this.line;
		var s = this.input;
		while(true) {
			try {
				c = s.readByte();
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				this.line = old;
				throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 34:case 39:case 92:
					b.writeByte(c);
					break;
				case 47:
					if(this.allowJSON) {
						b.writeByte(c);
					} else {
						this.invalidChar(c);
					}
					break;
				case 110:
					b.writeByte(10);
					break;
				case 114:
					b.writeByte(13);
					break;
				case 116:
					b.writeByte(9);
					break;
				case 117:
					if(!this.allowJSON) {
						this.invalidChar(c);
					}
					var code = null;
					try {
						code = s.readString(4);
					} catch( _g1 ) {
						haxe_NativeStackTrace.lastError = _g1;
						this.line = old;
						throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
					}
					var k = 0;
					k <<= 4;
					var char = HxOverrides.cca(code,0);
					if(char == null) {
						this.invalidChar(char);
					} else {
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += char - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += char - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += char - 87;
							break;
						default:
							this.invalidChar(char);
						}
					}
					k <<= 4;
					var char1 = HxOverrides.cca(code,1);
					if(char1 == null) {
						this.invalidChar(char1);
					} else {
						switch(char1) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += char1 - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += char1 - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += char1 - 87;
							break;
						default:
							this.invalidChar(char1);
						}
					}
					k <<= 4;
					var char2 = HxOverrides.cca(code,2);
					if(char2 == null) {
						this.invalidChar(char2);
					} else {
						switch(char2) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += char2 - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += char2 - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += char2 - 87;
							break;
						default:
							this.invalidChar(char2);
						}
					}
					k <<= 4;
					var char3 = HxOverrides.cca(code,3);
					if(char3 == null) {
						this.invalidChar(char3);
					} else {
						switch(char3) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += char3 - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += char3 - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += char3 - 87;
							break;
						default:
							this.invalidChar(char3);
						}
					}
					if(k <= 127) {
						b.writeByte(k);
					} else if(k <= 2047) {
						b.writeByte(192 | k >> 6);
						b.writeByte(128 | k & 63);
					} else {
						b.writeByte(224 | k >> 12);
						b.writeByte(128 | k >> 6 & 63);
						b.writeByte(128 | k & 63);
					}
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) {
				esc = true;
			} else if(c == until) {
				break;
			} else {
				if(c == 10) {
					this.line++;
				}
				b.writeByte(c);
			}
		}
		return b.getBytes().toString();
	}
	,token: function() {
		if(this.tokens.head != null) {
			var _this = this.tokens;
			var k = _this.head;
			if(k == null) {
				return null;
			} else {
				_this.head = k.next;
				return k.elt;
			}
		}
		var char;
		if(this.char < 0) {
			char = this.readChar();
		} else {
			char = this.char;
			this.char = -1;
		}
		while(true) {
			switch(char) {
			case 0:
				return hscript_Token.TEof;
			case 10:
				this.line++;
				break;
			case 9:case 13:case 32:
				break;
			case 34:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(34)));
			case 39:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(39)));
			case 40:
				return hscript_Token.TPOpen;
			case 41:
				return hscript_Token.TPClose;
			case 44:
				return hscript_Token.TComma;
			case 46:
				char = this.readChar();
				switch(char) {
				case 46:
					char = this.readChar();
					if(char != 46) {
						this.invalidChar(char);
					}
					return hscript_Token.TOp("...");
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					var n = char - 48;
					var exp = 1;
					while(true) {
						char = this.readChar();
						exp *= 10;
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n = n * 10 + (char - 48);
							break;
						default:
							this.char = char;
							return hscript_Token.TConst(hscript_Const.CFloat(n / exp));
						}
					}
					break;
				default:
					this.char = char;
					return hscript_Token.TDot;
				}
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var n1 = (char - 48) * 1.0;
				var exp1 = 0.;
				while(true) {
					char = this.readChar();
					exp1 *= 10;
					switch(char) {
					case 46:
						if(exp1 > 0) {
							if(exp1 == 10 && this.readChar() == 46) {
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(hscript_Token.TOp("..."),_this.head);
								var i = n1 | 0;
								return hscript_Token.TConst(i == n1 ? hscript_Const.CInt(i) : hscript_Const.CFloat(n1));
							}
							this.invalidChar(char);
						}
						exp1 = 1.;
						break;
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n1 = n1 * 10 + (char - 48);
						break;
					case 120:
						if(n1 > 0 || exp1 > 0) {
							this.invalidChar(char);
						}
						var n2 = 0;
						while(true) {
							char = this.readChar();
							switch(char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n2 = (n2 << 4) + char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n2 = (n2 << 4) + (char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n2 = (n2 << 4) + (char - 87);
								break;
							default:
								this.char = char;
								return hscript_Token.TConst(hscript_Const.CInt(n2));
							}
						}
						break;
					default:
						this.char = char;
						var i1 = n1 | 0;
						return hscript_Token.TConst(exp1 > 0 ? hscript_Const.CFloat(n1 * 10 / exp1) : i1 == n1 ? hscript_Const.CInt(i1) : hscript_Const.CFloat(n1));
					}
				}
				break;
			case 58:
				return hscript_Token.TDoubleDot;
			case 59:
				return hscript_Token.TSemicolon;
			case 61:
				char = this.readChar();
				if(char == 61) {
					return hscript_Token.TOp("==");
				} else if(char == 62) {
					return hscript_Token.TOp("=>");
				}
				this.char = char;
				return hscript_Token.TOp("=");
			case 63:
				return hscript_Token.TQuestion;
			case 64:
				char = this.readChar();
				if(this.idents[char] || char == 58) {
					var id = String.fromCodePoint(char);
					while(true) {
						char = this.readChar();
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TMeta(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 91:
				return hscript_Token.TBkOpen;
			case 93:
				return hscript_Token.TBkClose;
			case 123:
				return hscript_Token.TBrOpen;
			case 125:
				return hscript_Token.TBrClose;
			default:
				if(this.ops[char]) {
					var op = String.fromCodePoint(char);
					var prev = -1;
					while(true) {
						char = this.readChar();
						if(!this.ops[char] || prev == 61) {
							if(HxOverrides.cca(op,0) == 47) {
								return this.tokenComment(op,char);
							}
							this.char = char;
							return hscript_Token.TOp(op);
						}
						prev = char;
						op += String.fromCodePoint(char);
					}
				}
				if(this.idents[char]) {
					var id1 = String.fromCodePoint(char);
					while(true) {
						char = this.readChar();
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TId(id1);
						}
						id1 += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
			}
			char = this.readChar();
		}
	}
	,tokenComment: function(op,char) {
		var c = HxOverrides.cca(op,1);
		var s = this.input;
		if(c == 47) {
			try {
				while(char != 13 && char != 10) char = s.readByte();
				this.char = char;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
			return this.token();
		}
		if(c == 42) {
			var old = this.line;
			if(op == "/**/") {
				this.char = char;
				return this.token();
			}
			try {
				while(true) {
					while(char != 42) {
						if(char == 10) {
							this.line++;
						}
						char = s.readByte();
					}
					char = s.readByte();
					if(char == 47) {
						break;
					}
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				this.line = old;
				throw haxe_Exception.thrown(hscript_Error.EUnterminatedComment);
			}
			return this.token();
		}
		this.char = char;
		return hscript_Token.TOp(op);
	}
	,constString: function(c) {
		switch(c._hx_index) {
		case 0:
			var v = c.v;
			if(v == null) {
				return "null";
			} else {
				return "" + v;
			}
			break;
		case 1:
			var f = c.f;
			if(f == null) {
				return "null";
			} else {
				return "" + f;
			}
			break;
		case 2:
			var s = c.s;
			return s;
		}
	}
	,tokenString: function(t) {
		switch(t._hx_index) {
		case 0:
			return "<eof>";
		case 1:
			var c = t.c;
			return this.constString(c);
		case 2:
			var s = t.s;
			return s;
		case 3:
			var s = t.s;
			return s;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		case 15:
			var id = t.s;
			return "@" + id;
		}
	}
	,__class__: hscript_Parser
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var panels_Khanvas = function() {
	var _gthis = this;
	haxe_ui_containers_VBox.call(this);
	var c0 = new custom_Canvas();
	c0.set_id("khanvas-container");
	c0.set_percentWidth(100.);
	c0.set_percentHeight(100.);
	c0.set_styleString("background-color: #000000;");
	this.addComponent(c0);
	var c1 = new haxe_ui_components_Button();
	c1.set_id("fullscreen");
	c1.set_text("Fullscreen");
	c1.set_horizontalAlign("right");
	this.addComponent(c1);
	this.set_percentWidth(100.);
	this.set_percentHeight(100.);
	this.set_styleString("padding: 5px;");
	this.bindingRoot = true;
	this.khanvasContainer = c0;
	this.fullscreen = c1;
	this.fullscreen.set_onClick(function(e) {
		_gthis.khanvasContainer.fullscreen();
	});
};
$hxClasses["panels.Khanvas"] = panels_Khanvas;
panels_Khanvas.__name__ = "panels.Khanvas";
panels_Khanvas.__super__ = haxe_ui_containers_VBox;
panels_Khanvas.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new panels_Khanvas();
	}
	,khanvasContainer: null
	,fullscreen: null
	,__class__: panels_Khanvas
});
var panels_LogManager = function() {
	this._rawLog = "";
	haxe_ui_containers_VBox.call(this);
	var c0 = new haxe_ui_containers_ScrollView();
	c0.set_id("log");
	c0.set_percentWidth(100.);
	c0.set_percentHeight(100.);
	c0.set_percentContentWidth(100.);
	this.addComponent(c0);
	var c1 = new haxe_ui_containers_HBox();
	c1.set_horizontalAlign("right");
	var c2 = new haxe_ui_components_Button();
	c2.set_id("copyButton");
	c2.set_text("Copy");
	c1.addComponent(c2);
	var c3 = new haxe_ui_components_Button();
	c3.set_id("clearButton");
	c3.set_text("Clear");
	c1.addComponent(c3);
	this.addComponent(c1);
	this.set_percentWidth(100.);
	this.set_percentHeight(100.);
	this.set_styleString("padding: 5px;");
	this.bindingRoot = true;
	this.log = c0;
	this.copyButton = c2;
	this.clearButton = c3;
	var c = this.clearButton;
	if(c != null) {
		c.registerEvent("click",$bind(this,this.onClearButton));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "clearButton" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "panels.LogManager", methodName : "new"});
	}
	var c = this.copyButton;
	if(c != null) {
		c.registerEvent("click",$bind(this,this.onCopyButton));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "copyButton" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "panels.LogManager", methodName : "new"});
	}
	panels_LogManager.instance = this;
};
$hxClasses["panels.LogManager"] = panels_LogManager;
panels_LogManager.__name__ = "panels.LogManager";
panels_LogManager.__super__ = haxe_ui_containers_VBox;
panels_LogManager.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	onCopyButton: function(e) {
		var temp = window.document.createElement("textarea");
		temp.style.border = "none";
		temp.style.outline = "none";
		temp.style.boxShadow = "none";
		temp.style.background = "transparent";
		window.document.body.appendChild(temp);
		temp.value = this._rawLog;
		temp.select();
		try {
			var successful = window.document.execCommand("copy");
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		window.document.body.removeChild(temp);
	}
	,onClearButton: function(e) {
		this._rawLog = "";
		this.log.findComponent("scrollview-contents",haxe_ui_core_Component).removeAllComponents();
	}
	,khaLocation: null
	,kgLocationWin: null
	,kgLocationLin: null
	,logMessage: function(message,error) {
		if(error == null) {
			error = false;
		}
		var messages = message.split("\n");
		var _g = 0;
		while(_g < messages.length) {
			var m = messages[_g];
			++_g;
			m = StringTools.trim(m);
			if(m.length == 0) {
				continue;
			}
			this.createLogMessageUI(m,error);
		}
	}
	,_rawLog: null
	,createLogMessageUI: function(message,error) {
		if(error == null) {
			error = false;
		}
		var _gthis = this;
		if(StringTools.startsWith(message,"Using Kha from ")) {
			this.khaLocation = message.substring("Using Kha from ".length);
			var parts = this.khaLocation.split("\\");
			parts.pop();
			this.kgLocationWin = parts.join("\\");
			var parts = this.khaLocation.split("/");
			parts.pop();
			this.kgLocationLin = parts.join("/");
			return;
		}
		if(this.kgLocationWin != null) {
			message = StringTools.replace(message,this.kgLocationWin + "\\Projects\\Checkouts\\" + project_Project.get_instance().sha + "\\","");
		}
		if(this.kgLocationLin != null) {
			message = StringTools.replace(message,this.kgLocationLin + "/Projects/Checkouts/" + project_Project.get_instance().sha + "/","");
		}
		var n = message.indexOf("\\" + project_Project.get_instance().sha + "\\");
		if(n == -1) {
			var tmp = "/" + project_Project.get_instance().sha + "/";
		}
		if(n != -1) {
			message = HxOverrides.substr(message,n + project_Project.get_instance().sha.length + 2,null);
		}
		this._rawLog += message + "\n";
		var hbox = new haxe_ui_containers_HBox();
		hbox.set_styleString("spacing: 0");
		hbox.set_percentWidth(100);
		var resourceRegExp = new EReg("(^.*.hx(:\\d*)?)","");
		if(resourceRegExp.match(message)) {
			var pos = resourceRegExp.matchedPos();
			var resourcePart = HxOverrides.substr(message,pos.pos,pos.len);
			message = HxOverrides.substr(message,pos.len,null);
			var resourceLabel = new haxe_ui_components_Label();
			resourceLabel.set_styleNames("resource-link");
			resourceLabel.set_text(message);
			if(error == true) {
				resourceLabel.set_styleNames("error-resource-link");
			}
			resourceLabel.set_text(resourcePart);
			resourceLabel.registerEvent("click",$bind(this,this.onResourceLabelClick));
			hbox.addComponent(resourceLabel);
		}
		var label = new haxe_ui_components_Label();
		label.set_percentWidth(100);
		message = StringTools.replace(message," ","&nbsp;");
		label.set_text(message);
		if(error == true) {
			label.set_styleNames("error");
		}
		hbox.addComponent(label);
		this.log.addComponent(hbox);
		haxe_ui_Toolkit.callLater(function() {
			_gthis.log.set_vscrollPos(_gthis.log.get_vscrollMax());
		});
	}
	,onResourceLabelClick: function(e) {
		var text = e.target.get_text();
		var parts = text.split(":");
		var f = parts[0];
		var resources = project_Project.get_instance().resourcesRoot.flatten();
		var r = null;
		var _g = 0;
		while(_g < resources.length) {
			var t = resources[_g];
			++_g;
			if(t.get_fullName() == f) {
				r = t;
			}
		}
		if(r != null) {
			project_Project.get_instance().set_activeResource(r);
		}
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new panels_LogManager();
	}
	,log: null
	,copyButton: null
	,clearButton: null
	,__class__: panels_LogManager
});
var project_IProjectListener = function() { };
$hxClasses["project.IProjectListener"] = project_IProjectListener;
project_IProjectListener.__name__ = "project.IProjectListener";
project_IProjectListener.__isInterface__ = true;
project_IProjectListener.prototype = {
	projectResourceAdded: null
	,activeResourceChanged: null
	,projectRefreshed: null
	,__class__: project_IProjectListener
};
var panels_ProjectManager = function() {
	this._root = null;
	this._firstLoad = true;
	haxe_ui_containers_VBox.call(this);
	var c0 = new haxe_ui_containers_Box();
	c0.set_percentWidth(100.);
	c0.set_percentHeight(100.);
	var c1 = new haxe_ui_containers_TabView();
	c1.set_percentWidth(100.);
	c1.set_percentHeight(100.);
	var c2 = new haxe_ui_containers_VBox();
	c2.set_percentWidth(100.);
	c2.set_percentHeight(100.);
	c2.set_text("Project");
	c2.set_icon("icons/folder.png");
	var c3 = new custom_TreeView();
	c3.set_id("projectTree");
	c3.set_percentWidth(100.);
	c3.set_percentHeight(100.);
	c2.addComponent(c3);
	c1.addComponent(c2);
	c0.addComponent(c1);
	var c4 = new haxe_ui_containers_HBox();
	c4.set_styleString("spacing: 2px;");
	c4.set_horizontalAlign("right");
	var c5 = new haxe_ui_components_Button();
	c5.set_id("importButton");
	c5.set_icon(haxe_ui_util_Variant.fromString("icons/upload.png"));
	c4.addComponent(c5);
	var c6 = new haxe_ui_components_Button();
	c6.set_id("downloadButton");
	c6.set_icon(haxe_ui_util_Variant.fromString("icons/download.png"));
	c4.addComponent(c6);
	var c7 = new haxe_ui_components_Button();
	c7.set_id("addResourceButton");
	c7.set_icon(haxe_ui_util_Variant.fromString("icons/plus.png"));
	c4.addComponent(c7);
	c0.addComponent(c4);
	this.addComponent(c0);
	this.set_percentWidth(100.);
	this.set_percentHeight(100.);
	this.bindingRoot = true;
	this.projectTree = c3;
	this.importButton = c5;
	this.downloadButton = c6;
	this.addResourceButton = c7;
	var c = this.projectTree;
	if(c != null) {
		c.registerEvent("nodeRightClick",$bind(this,this.onNodeRightClicked));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "projectTree" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "panels.ProjectManager", methodName : "new"});
	}
	var c = this.projectTree;
	if(c != null) {
		c.registerEvent("nodeSelected",$bind(this,this.onNodeSelected));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "projectTree" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "panels.ProjectManager", methodName : "new"});
	}
	var c = this.addResourceButton;
	if(c != null) {
		c.registerEvent("click",$bind(this,this.onAddResource));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "addResourceButton" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "panels.ProjectManager", methodName : "new"});
	}
	panels_ProjectManager.instance = this;
	EventDispatcher.get_instance().registerListener(this);
};
$hxClasses["panels.ProjectManager"] = panels_ProjectManager;
panels_ProjectManager.__name__ = "panels.ProjectManager";
panels_ProjectManager.__interfaces__ = [IListener,project_IProjectListener];
panels_ProjectManager.__super__ = haxe_ui_containers_VBox;
panels_ProjectManager.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	onAddResource: function(e) {
		MainView.instance.startAddResource();
	}
	,onNodeSelected: function(e) {
		var resource = js_Boot.__cast(e.get_node().userData , project_Resource);
		if(resource == null || resource.type == 1 || resource.type == 0) {
			return;
		}
		project_Project.get_instance().set_activeResource(resource);
		EventDispatcher.get_instance().dispatchEvent(0,resource);
	}
	,onNodeRightClicked: function(e) {
		if(this.projectTree.get_selectedNode() == null || this.projectTree.get_selectedNode().get_expandable() == false) {
			return;
		}
		var contextPath = this.projectTree.get_selectedNode().get_nodePath();
		var parts = contextPath.split("/");
		if(parts[parts.length - 1].indexOf(".") != -1) {
			parts.pop();
		}
		var type = parts[1];
		parts.shift();
		parts.shift();
		contextPath = "";
		if(parts.length > 0) {
			contextPath = parts.join("/") + "/";
		}
		MainView.instance.startAddResource(type,contextPath);
	}
	,_firstLoad: null
	,_root: null
	,projectRefreshed: function() {
		if(this._root == null) {
			this._root = this.projectTree.addNode("Kha Project","icons/folder.png",true);
			this._root.expand();
		}
		var _g = 0;
		var _g1 = project_Project.get_instance().resourcesRoot.flatten();
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			this.projectResourceAdded(r);
			if(this._firstLoad == true && r.get_fullName() == "Sources/Main.hx") {
				this.projectTree.set_selectedNode(this._root.findNodeByPath("Sources/Main.hx"));
			}
		}
		if(this._firstLoad == true) {
			this._firstLoad = false;
		}
	}
	,projectResourceAdded: function(resource) {
		if(this._root == null) {
			this._root = this.projectTree.addNode("Kha Project","icons/folder.png",true);
			this._root.expand();
		}
		var node = this._root.findNodeByPath(resource.get_fullName());
		if(node == null) {
			var isExpandable = false;
			if(resource.type == 1) {
				isExpandable = true;
			}
			node = this._root.addNodeByPath(resource.get_fullName(),resource.get_icon(),isExpandable);
			node.userData = resource;
			if(node.get_nodeDepth() <= 3) {
				node.expandPath();
			}
		}
	}
	,activeResourceChanged: function(resource) {
		if(this._root != null) {
			var node = this._root.findNodeByPath(resource.get_fullName());
			if(node != null) {
				node.expandPath();
				this.projectTree.set_selectedNode(node);
			}
		}
	}
	,onEvent: function(event,data) {
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new panels_ProjectManager();
	}
	,projectTree: null
	,importButton: null
	,downloadButton: null
	,addResourceButton: null
	,__class__: panels_ProjectManager
});
var panels_TabManager = function() {
	haxe_ui_containers_VBox.call(this);
	var c0 = new haxe_ui_containers_TabView();
	c0.set_id("resources");
	c0.set_percentWidth(100.);
	c0.set_percentHeight(100.);
	c0.set_closable(true);
	this.addComponent(c0);
	this.set_percentWidth(100.);
	this.set_percentHeight(100.);
	this.bindingRoot = true;
	this.resources = c0;
	var c = this.resources;
	if(c != null) {
		c.registerEvent("change",$bind(this,this.onTabChange));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "resources" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 259, className : "panels.TabManager", methodName : "new"});
	}
	panels_TabManager.instance = this;
	EventDispatcher.get_instance().registerListener(this);
};
$hxClasses["panels.TabManager"] = panels_TabManager;
panels_TabManager.__name__ = "panels.TabManager";
panels_TabManager.__interfaces__ = [IListener,project_IProjectListener];
panels_TabManager.__super__ = haxe_ui_containers_VBox;
panels_TabManager.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	activeEditor: null
	,get_activeEditor: function() {
		return js_Boot.__cast(this.resources.get_selectedPage() , IEditor);
	}
	,onTabChange: function(e) {
		if(this.resources.get_selectedPage() == null) {
			return;
		}
		var resource = js_Boot.__cast(this.resources.get_selectedPage().userData , project_Resource);
		project_Project.get_instance().set_activeResource(resource);
	}
	,projectRefreshed: function() {
	}
	,projectResourceAdded: function(resource) {
	}
	,activeResourceChanged: function(resource) {
		var index = this.findTabIndexFromResource(resource);
		if(index == -1) {
			var tab = this.createTabFromResource(resource);
			if(tab == null) {
				return;
			}
			tab.userData = resource;
			this.resources.addComponent(tab);
			index = this.resources.get_pageCount() - 1;
		}
		this.resources.set_pageIndex(index);
	}
	,onEvent: function(event,data) {
	}
	,createTabFromResource: function(resource) {
		var tab = null;
		switch(resource.type) {
		case 2:
			tab = new editors_SourceEditor();
			(js_Boot.__cast(tab , editors_SourceEditor)).set_resource(resource);
			break;
		case 3:
			tab = new editors_ShaderEditor();
			(js_Boot.__cast(tab , editors_ShaderEditor)).set_resource(resource);
			break;
		default:
			haxe_ui_Toolkit.messageBox("There is currently no viewer for '" + resource.name + "'","No Viewer");
		}
		if(tab != null) {
			tab.set_text(resource.name);
			tab.set_icon(resource.get_icon());
		}
		return tab;
	}
	,findTabIndexFromResource: function(resource) {
		var index = -1;
		var _g = 0;
		var _g1 = this.resources.get_pageCount();
		while(_g < _g1) {
			var i = _g++;
			if(this.resources.getPage(i).userData == resource) {
				index = i;
				break;
			}
		}
		return index;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		return c;
	}
	,self: function() {
		return new panels_TabManager();
	}
	,resources: null
	,__class__: panels_TabManager
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{get_activeEditor:"get_activeEditor"})
});
var project_Project = function() {
	this.changes = [];
	this.changing = false;
	this._listeners = [];
	this.resourcesRoot = new project_Resource(1);
};
$hxClasses["project.Project"] = project_Project;
project_Project.__name__ = "project.Project";
project_Project.__properties__ = {get_instance:"get_instance"};
project_Project.get_instance = function() {
	if(project_Project._instance == null) {
		project_Project._instance = new project_Project();
	}
	return project_Project._instance;
};
project_Project.prototype = {
	resourcesRoot: null
	,_listeners: null
	,sha: null
	,changing: null
	,changes: null
	,add: function(params) {
		var _gthis = this;
		switch(params.type) {
		case "Asset":
			var reader = new FileReader();
			reader.onload = function(upload) {
				project_Project.get_instance().set_activeResource(project_Project.get_instance().addResource(4,params.filename));
				var buffer = upload.target.result;
				_gthis.addAssetFromArrayBuffer(params.filename,buffer);
			};
			reader.readAsArrayBuffer(params.file);
			break;
		case "Shader":
			var shaderFile = params.filename + params.subType;
			var content = this.applyResourceTemplate("shaders/" + params.template + params.subType + ".template",shaderFile);
			project_Project.get_instance().set_activeResource(project_Project.get_instance().addResource(3,shaderFile,content));
			this.addShaderFromString(shaderFile,content);
			break;
		case "Source":
			var sourceFile = params.filename;
			if(StringTools.endsWith(sourceFile,".hx") == false) {
				sourceFile += ".hx";
			}
			var content = this.applyResourceTemplate("sources/" + params.template + ".template",sourceFile);
			project_Project.get_instance().set_activeResource(project_Project.get_instance().addResource(2,sourceFile,content));
			this.addSourceFromString(sourceFile,content);
			break;
		}
	}
	,addSourceFromString: function(filename,content,cb) {
		this.scheduleChange(function(sha,done) {
			Server.addSource(sha,filename).handle(function(newSha) {
				Server.setSource(newSha,filename,content).handle(function(newSha) {
					done(newSha);
					if(cb != null) {
						cb();
					}
				});
			});
		});
	}
	,addShaderFromString: function(filename,content,cb) {
		this.scheduleChange(function(sha,done) {
			Server.addShader(sha,filename).handle(function(newSha) {
				Server.setShader(newSha,filename,content).handle(function(newSha) {
					done(newSha);
					if(cb != null) {
						cb();
					}
				});
			});
		});
	}
	,addAssetFromArrayBuffer: function(filename,buffer,cb) {
		this.scheduleChange(function(sha,done) {
			Server.addAsset(sha,filename,buffer).handle(function(newSha) {
				done(newSha);
				if(cb != null) {
					cb();
				}
			});
		});
	}
	,scheduleChange: function(change) {
		this.changes.push(change);
		if(!this.changing) {
			this.runChanges();
		}
	}
	,runChanges: function() {
		var _gthis = this;
		this.changing = true;
		if(this.changes.length == 0) {
			this.changing = false;
			return;
		}
		var first = this.changes[0];
		HxOverrides.remove(this.changes,first);
		first(this.sha,function(sha) {
			_gthis.sha = sha;
			window.history.pushState("","","#" + sha);
			_gthis.runChanges();
		});
	}
	,applyResourceTemplate: function(templateName,resource) {
		var full = "templates/" + templateName;
		var content = haxe_ui_ToolkitAssets.get_instance().getText(full);
		var parts = resource.split("/");
		var name = parts.pop();
		name = StringTools.replace(name,".hx","");
		var pckg = "";
		if(parts.length > 0) {
			pckg = parts.join(".");
		}
		content = StringTools.replace(content,"$package",pckg);
		content = StringTools.replace(content,"$name",name);
		return content;
	}
	,addResource: function(type,name,content) {
		if(content == null) {
			content = "";
		}
		var r = null;
		switch(type) {
		case 2:
			var folder = this.resourcesRoot.findResource(1,"Sources");
			if(folder == null) {
				folder = this.resourcesRoot.addResource(1,"Sources");
			}
			r = folder.addResource(type,name,content);
			break;
		case 3:
			var folder = this.resourcesRoot.findResource(1,"Shaders");
			if(folder == null) {
				folder = this.resourcesRoot.addResource(1,"Shaders");
			}
			r = folder.addResource(type,name,content);
			break;
		case 4:
			var folder = this.resourcesRoot.findResource(1,"Assets");
			if(folder == null) {
				folder = this.resourcesRoot.addResource(1,"Assets");
			}
			r = folder.addResource(type,name,content);
			break;
		default:
			r = this.resourcesRoot.addResource(type,name,content);
		}
		var _g = 0;
		var _g1 = this._listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l.projectResourceAdded(r);
		}
		return r;
	}
	,findResource: function(type,name) {
		return this.resourcesRoot.findResource(type,name);
	}
	,hasResource: function(type,name) {
		return this.resourcesRoot.hasResource(type,name);
	}
	,registerListener: function(listener) {
		this._listeners.push(listener);
	}
	,_activeResource: null
	,get_activeResource: function() {
		return this._activeResource;
	}
	,set_activeResource: function(value) {
		if(value == this._activeResource) {
			return value;
		}
		this._activeResource = value;
		var _g = 0;
		var _g1 = this._listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l.activeResourceChanged(this._activeResource);
		}
		return value;
	}
	,refresh: function(sha,callback) {
		var _gthis = this;
		this.sha = sha;
		Server.sources(sha).handle(function(sources) {
			var _g = 0;
			while(_g < sources.length) {
				var source = [sources[_g]];
				++_g;
				Server.source(sha,source[0]).handle((function(source) {
					return function(content) {
						_gthis.addResource(2,source[0],content);
					};
				})(source));
			}
			Server.shaders(sha).handle(function(shaders) {
				var _g = 0;
				while(_g < shaders.length) {
					var shader = [shaders[_g]];
					++_g;
					Server.shader(sha,shader[0]).handle((function(shader) {
						return function(content) {
							_gthis.addResource(3,shader[0],content);
						};
					})(shader));
				}
				Server.assets(sha).handle(function(assets) {
					var _g = 0;
					while(_g < assets.length) {
						var asset = assets[_g];
						++_g;
						_gthis.addResource(4,asset);
					}
				});
				var cookie = window.document.cookie.split(";");
				var lastFile = null;
				var _g = 0;
				while(_g < cookie.length) {
					var c = cookie[_g];
					++_g;
					c = StringTools.trim(c);
					var parts = c.split("=");
					if(StringTools.trim(parts[0]) == "lastFile") {
						break;
					}
				}
				var lastResource = null;
				var _g = 0;
				var _g1 = _gthis.resourcesRoot.flatten();
				while(_g < _g1.length) {
					var r = _g1[_g];
					++_g;
					if(r.get_fullName() == lastFile) {
						lastResource = r;
						break;
					}
				}
				if(lastResource != null) {
					_gthis.set_activeResource(lastResource);
				}
				if(callback != null) {
					callback();
				}
				var _g = 0;
				var _g1 = _gthis._listeners;
				while(_g < _g1.length) {
					var l = _g1[_g];
					++_g;
					l.projectRefreshed();
				}
			});
		});
	}
	,save: function(resource,cb,autoSave) {
		if(autoSave == null) {
			autoSave = false;
		}
		if(resource == null) {
			if(cb != null) {
				cb();
			}
			return;
		}
		this.saveResources([resource],function() {
			if(cb != null) {
				cb();
			}
		},autoSave);
	}
	,saveAll: function(cb,autoSave) {
		if(autoSave == null) {
			autoSave = false;
		}
		this.saveResources(this.resourcesRoot.flatten(),function() {
			if(cb != null) {
				cb();
			}
		},autoSave);
	}
	,saveResources: function(list,callback,autoSave) {
		var _gthis = this;
		if(list.length == 0) {
			callback();
			return;
		}
		var resource = list.shift();
		if(resource.get_dirty() == true) {
			switch(resource.type) {
			case 2:
				this.scheduleChange(function(sha,done) {
					haxe_Log.trace("Changing " + resource.get_fullName() + " (" + sha + ")",{ fileName : "src/project/Project.hx", lineNumber : 330, className : "project.Project", methodName : "saveResources"});
					Server.setSource(sha,StringTools.replace(resource.get_fullName(),"Sources/",""),resource.content).handle(function(newSha) {
						haxe_Log.trace("Changed " + resource.get_fullName() + " (" + Std.string(newSha) + ")",{ fileName : "src/project/Project.hx", lineNumber : 332, className : "project.Project", methodName : "saveResources"});
						resource.set_dirty(false);
						if(autoSave == true) {
							panels_LogManager.instance.logMessage("" + resource.get_fullName() + " auto saved");
						} else {
							panels_LogManager.instance.logMessage("" + resource.get_fullName() + " saved");
						}
						_gthis.saveResources(list,callback,autoSave);
						done(newSha);
					});
				});
				break;
			case 3:
				this.scheduleChange(function(sha,done) {
					Server.setShader(sha,StringTools.replace(resource.get_fullName(),"Shaders/",""),resource.content).handle(function(newSha) {
						resource.set_dirty(false);
						if(autoSave == true) {
							panels_LogManager.instance.logMessage("" + resource.get_fullName() + " auto saved");
						} else {
							panels_LogManager.instance.logMessage("" + resource.get_fullName() + " saved");
						}
						_gthis.saveResources(list,callback,autoSave);
						done(newSha);
					});
				});
				break;
			default:
				this.saveResources(list,callback,autoSave);
			}
		} else {
			this.saveResources(list,callback,autoSave);
		}
	}
	,build: function(name,content) {
		var _gthis = this;
		this.saveAll(function() {
			Server.compile(_gthis.sha).handle(function(result) {
				WorkerKha.instance.load("/projects/" + _gthis.sha + "/khaworker.js");
			});
		});
	}
	,inject: function(name,content) {
		var _gthis = this;
		this.saveAll(function() {
			Server.compile(_gthis.sha).handle(function(result) {
				WorkerKha.instance.inject("/projects/" + _gthis.sha + "/khaworker.js");
			});
		});
	}
	,download: function() {
		var _gthis = this;
		Server.download(this.sha).handle(function(e) {
			window.location.replace("/archives/" + _gthis.sha + ".zip");
		});
	}
	,importFromZippedBytes: function(bytes,progressCallback) {
		var zip = new haxe_zip_Reader(new haxe_io_BytesInput(bytes)).read();
		var itemsToAdd = [];
		var _g_head = zip.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var entry = val;
			this.unzipEntry(entry);
			if(StringTools.endsWith(entry.fileName,".hx")) {
				var fixedName = entry.fileName;
				var n = fixedName.indexOf("/Sources/");
				if(n != -1) {
					fixedName = HxOverrides.substr(fixedName,n + "/Sources/".length,null);
					var content = Std.string(entry.data);
					itemsToAdd.push({ type : "Source", filename : fixedName, data : content});
				}
			} else if(StringTools.endsWith(entry.fileName,".glsl")) {
				var fixedName1 = entry.fileName;
				var n1 = fixedName1.indexOf("/Shaders/");
				if(n1 != -1) {
					fixedName1 = HxOverrides.substr(fixedName1,n1 + "/Shaders/".length,null);
					var content1 = Std.string(entry.data);
					itemsToAdd.push({ type : "Shader", filename : fixedName1, data : content1});
				}
			} else if(entry.fileName.indexOf(".") != -1 && entry.fileName.indexOf("/Assets/") != -1) {
				var fixedName2 = entry.fileName;
				var n2 = fixedName2.indexOf("/Assets/");
				if(n2 != -1) {
					fixedName2 = HxOverrides.substr(fixedName2,n2 + "/Assets/".length,null);
					var content2 = entry.data;
					itemsToAdd.push({ type : "Asset", filename : fixedName2, data : content2});
				}
			}
		}
		this.importItems(itemsToAdd,0,itemsToAdd.length,progressCallback);
	}
	,importItems: function(items,current,max,progressCallback) {
		var _gthis = this;
		if(items.length == 0) {
			if(progressCallback != null) {
				progressCallback(null,max,max);
			}
			return;
		}
		var item = items.shift();
		switch(item.type) {
		case "Asset":
			var bytes = js_Boot.__cast(item.data , haxe_io_Bytes);
			var buffer = new ArrayBuffer(bytes.length);
			var view = new DataView(buffer);
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				view.setUint8(i,bytes.b[i]);
			}
			this.addAssetFromArrayBuffer(item.filename,buffer,function() {
				project_Project.get_instance().addResource(4,item.filename);
				current += 1;
				if(progressCallback != null) {
					progressCallback(item.filename,current,max);
				}
				_gthis.importItems(items,current,max,progressCallback);
			});
			break;
		case "Shader":
			this.addShaderFromString(item.filename,item.data,function() {
				project_Project.get_instance().addResource(3,item.filename,item.data);
				current += 1;
				if(progressCallback != null) {
					progressCallback(item.filename,current,max);
				}
				_gthis.importItems(items,current,max,progressCallback);
			});
			break;
		case "Source":
			this.addSourceFromString(item.filename,item.data,function() {
				project_Project.get_instance().addResource(2,item.filename,item.data);
				current += 1;
				if(progressCallback != null) {
					progressCallback(item.filename,current,max);
				}
				_gthis.importItems(items,current,max,progressCallback);
			});
			break;
		}
	}
	,unzipEntry: function(entry) {
		if(entry.compressed) {
			var entryData = entry.data.b.bufferValue;
			entryData = window.pako.inflateRaw(entryData);
			entry.data = haxe_io_Bytes.ofData(entryData);
		}
	}
	,__class__: project_Project
	,__properties__: {set_activeResource:"set_activeResource",get_activeResource:"get_activeResource"}
};
var project_Resource = function(type,name,parent,content) {
	if(content == null) {
		content = "";
	}
	this._dirty = false;
	this._listeners = [];
	this.type = type;
	this.name = name;
	this.parent = parent;
	this.content = content;
};
$hxClasses["project.Resource"] = project_Resource;
project_Resource.__name__ = "project.Resource";
project_Resource.prototype = {
	type: null
	,name: null
	,parent: null
	,content: null
	,_childResources: null
	,_listeners: null
	,addListener: function(l) {
		this._listeners.push(l);
	}
	,_dirty: null
	,get_dirty: function() {
		return this._dirty;
	}
	,set_dirty: function(value) {
		if(value == this._dirty) {
			return value;
		}
		this._dirty = value;
		var _g = 0;
		var _g1 = this._listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l.onDirtyChanged();
		}
		return value;
	}
	,updateContent: function(content) {
		if(content == this.content) {
			return;
		}
		this.content = content;
		var _g = 0;
		var _g1 = this._listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l.onContentUpdated();
		}
	}
	,childResources: null
	,get_childResources: function() {
		if(this._childResources == null) {
			return [];
		}
		return this._childResources;
	}
	,flatten: function() {
		var resources = [];
		resources = resources.concat(this.get_childResources());
		var _g = 0;
		var _g1 = this.get_childResources();
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			resources = resources.concat(r.flatten());
		}
		return resources;
	}
	,addResource: function(type,name,content) {
		if(content == null) {
			content = "";
		}
		if(this.type != 1) {
			throw haxe_Exception.thrown("Can only added child resources to a folder");
		}
		if(this.hasResource(type,name)) {
			var r = this.findResource(type,name);
			r.updateContent(content);
			return r;
		}
		if(this._childResources == null) {
			this._childResources = [];
		}
		var resource = null;
		if(name.indexOf("/") != -1) {
			var path = name.split("/");
			name = path.pop();
			var ref = this;
			var _g = 0;
			while(_g < path.length) {
				var p = path[_g];
				++_g;
				p = StringTools.trim(p);
				if(p.length == 0) {
					continue;
				}
				ref = ref.addResource(1,p);
			}
			resource = ref.addResource(type,name,content);
		} else {
			resource = new project_Resource(type,name,this,content);
			this._childResources.push(resource);
		}
		this.sort();
		return resource;
	}
	,sort: function() {
		if(this._childResources != null) {
			this._childResources.sort(function(r1,r2) {
				if(r1.type == 1 && r2.type != 1) {
					return -1;
				}
				if(r1.type != 1 && r2.type == 1) {
					return 1;
				}
				var a = r1.name.toLowerCase();
				var b = r2.name.toLowerCase();
				if(a < b) {
					return -1;
				}
				if(a > b) {
					return 1;
				}
				return 0;
			});
		}
	}
	,findResource: function(type,name,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		var match = null;
		if(this._childResources != null) {
			var _g = 0;
			var _g1 = this._childResources;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.type == type && child.name.toLowerCase() == name.toLowerCase()) {
					match = child;
					break;
				}
			}
		}
		return match;
	}
	,hasResource: function(type,name) {
		return this.findResource(type,name) != null;
	}
	,isImage: null
	,get_isImage: function() {
		if(!(StringTools.endsWith(this.name,".png") || StringTools.endsWith(this.name,".bmp") || StringTools.endsWith(this.name,".jpg"))) {
			return StringTools.endsWith(this.name,".jpeg");
		} else {
			return true;
		}
	}
	,icon: null
	,get_icon: function() {
		var icon = IconUtil.iconFromExtension(this.name);
		if(this.type == 1) {
			icon = "icons/folder.png";
		}
		return icon;
	}
	,fullName: null
	,get_fullName: function() {
		var p = this.parent;
		var parts = [];
		while(p != null) {
			if(p.name != null) {
				parts.push(p.name);
			}
			p = p.parent;
		}
		parts.reverse();
		parts.push(this.name);
		return parts.join("/");
	}
	,toString: function() {
		return this.get_fullName();
	}
	,__class__: project_Resource
	,__properties__: {get_fullName:"get_fullName",get_icon:"get_icon",get_isImage:"get_isImage",get_childResources:"get_childResources",set_dirty:"set_dirty",get_dirty:"get_dirty"}
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		tink_core_Callback.defer(function() {
			this1(data);
		});
	}
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core_Callback.invoke(callback,v);
		}
	};
};
tink_core_Callback.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var tink_core_LinkObject = function() { };
$hxClasses["tink.core.LinkObject"] = tink_core_LinkObject;
tink_core_LinkObject.__name__ = "tink.core.LinkObject";
tink_core_LinkObject.__isInterface__ = true;
tink_core_LinkObject.prototype = {
	cancel: null
	,__class__: tink_core_LinkObject
};
var tink_core_CallbackLinkRef = function() {
};
$hxClasses["tink.core.CallbackLinkRef"] = tink_core_CallbackLinkRef;
tink_core_CallbackLinkRef.__name__ = "tink.core.CallbackLinkRef";
tink_core_CallbackLinkRef.__interfaces__ = [tink_core_LinkObject];
tink_core_CallbackLinkRef.prototype = {
	link: null
	,cancel: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
	}
	,__class__: tink_core_CallbackLinkRef
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	var this1 = new tink_core_SimpleLink(link);
	return this1;
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.fromFunction = function(f) {
	var this1 = new tink_core_SimpleLink(f);
	return this1;
};
tink_core_CallbackLink.join = function(this1,b) {
	return new tink_core__$Callback_LinkPair(this1,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	var this1 = new tink_core_SimpleLink(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		} else {
			callbacks = null;
		}
	});
	return this1;
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
$hxClasses["tink.core.SimpleLink"] = tink_core_SimpleLink;
tink_core_SimpleLink.__name__ = "tink.core.SimpleLink";
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	f: null
	,cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
$hxClasses["tink.core._Callback.LinkPair"] = tink_core__$Callback_LinkPair;
tink_core__$Callback_LinkPair.__name__ = "tink.core._Callback.LinkPair";
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	a: null
	,b: null
	,dissolved: null
	,cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this1 = this.b;
			if(this1 != null) {
				this1.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
$hxClasses["tink.core._Callback.ListCell"] = tink_core__$Callback_ListCell;
tink_core__$Callback_ListCell.__name__ = "tink.core._Callback.ListCell";
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	cb: null
	,list: null
	,invoke: function(data) {
		if(this.list != null) {
			this.cb(data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used <= list.cells.length >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_Disposable = function() { };
$hxClasses["tink.core.Disposable"] = tink_core_Disposable;
tink_core_Disposable.__name__ = "tink.core.Disposable";
tink_core_Disposable.__isInterface__ = true;
tink_core_Disposable.prototype = {
	get_disposed: null
	,ondispose: null
	,__class__: tink_core_Disposable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_OwnedDisposable = function() { };
$hxClasses["tink.core.OwnedDisposable"] = tink_core_OwnedDisposable;
tink_core_OwnedDisposable.__name__ = "tink.core.OwnedDisposable";
tink_core_OwnedDisposable.__isInterface__ = true;
tink_core_OwnedDisposable.__interfaces__ = [tink_core_Disposable];
tink_core_OwnedDisposable.prototype = {
	dispose: null
	,__class__: tink_core_OwnedDisposable
};
var tink_core_SimpleDisposable = function(dispose) {
	this.disposeHandlers = [];
	this.f = dispose;
};
$hxClasses["tink.core.SimpleDisposable"] = tink_core_SimpleDisposable;
tink_core_SimpleDisposable.__name__ = "tink.core.SimpleDisposable";
tink_core_SimpleDisposable.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_SimpleDisposable.noop = function() {
};
tink_core_SimpleDisposable.prototype = {
	f: null
	,disposeHandlers: null
	,get_disposed: function() {
		return this.disposeHandlers == null;
	}
	,ondispose: function(d) {
		var _g = this.disposeHandlers;
		if(_g == null) {
			d();
		} else {
			var v = _g;
			v.push(d);
		}
	}
	,dispose: function() {
		var _g = this.disposeHandlers;
		if(_g != null) {
			var v = _g;
			this.disposeHandlers = null;
			var f = this.f;
			this.f = tink_core_SimpleDisposable.noop;
			f();
			var _g = 0;
			while(_g < v.length) {
				var h = v[_g];
				++_g;
				h();
			}
		}
	}
	,__class__: tink_core_SimpleDisposable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_CallbackList = function(destructive) {
	if(destructive == null) {
		destructive = false;
	}
	this.onfill = function() {
	};
	this.ondrain = function() {
	};
	this.busy = false;
	this.queue = [];
	this.used = 0;
	var _gthis = this;
	tink_core_SimpleDisposable.call(this,function() {
		if(!_gthis.busy) {
			_gthis.destroy();
		}
	});
	this.destructive = destructive;
	this.cells = [];
};
$hxClasses["tink.core.CallbackList"] = tink_core_CallbackList;
tink_core_CallbackList.__name__ = "tink.core.CallbackList";
tink_core_CallbackList.__super__ = tink_core_SimpleDisposable;
tink_core_CallbackList.prototype = $extend(tink_core_SimpleDisposable.prototype,{
	destructive: null
	,cells: null
	,get_length: function() {
		return this.used;
	}
	,used: null
	,queue: null
	,busy: null
	,ondrain: null
	,onfill: null
	,release: function() {
		if(--this.used <= this.cells.length >> 1) {
			this.compact();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.cb = null;
			c.list = null;
		}
		this.queue = null;
		this.cells = null;
		if(this.used > 0) {
			this.used = 0;
			var fn = this.ondrain;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		}
	}
	,drain: function() {
		var fn = this.ondrain;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			fn();
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(fn);
		}
	}
	,add: function(cb) {
		if(this.get_disposed()) {
			return null;
		}
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		if(this.used++ == 0) {
			var fn = this.onfill;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		}
		return node;
	}
	,invoke: function(data) {
		var _gthis = this;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			if(!_gthis.get_disposed()) {
				if(_gthis.busy) {
					if(_gthis.destructive != true) {
						var _g = $bind(_gthis,_gthis.invoke);
						var data1 = data;
						var tmp = function() {
							_g(data1);
						};
						_gthis.queue.push(tmp);
					}
				} else {
					_gthis.busy = true;
					if(_gthis.destructive) {
						_gthis.dispose();
					}
					var length = _gthis.cells.length;
					var _g1 = 0;
					var _g2 = length;
					while(_g1 < _g2) {
						var i = _g1++;
						var _this = _gthis.cells[i];
						if(_this.list != null) {
							_this.cb(data);
						}
					}
					_gthis.busy = false;
					if(_gthis.get_disposed()) {
						_gthis.destroy();
					} else {
						if(_gthis.used < _gthis.cells.length) {
							_gthis.compact();
						}
						if(_gthis.queue.length > 0) {
							(_gthis.queue.shift())();
						}
					}
				}
			}
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(function() {
				if(!_gthis.get_disposed()) {
					if(_gthis.busy) {
						if(_gthis.destructive != true) {
							var _g = $bind(_gthis,_gthis.invoke);
							var data1 = data;
							var tmp = function() {
								_g(data1);
							};
							_gthis.queue.push(tmp);
						}
					} else {
						_gthis.busy = true;
						if(_gthis.destructive) {
							_gthis.dispose();
						}
						var length = _gthis.cells.length;
						var _g1 = 0;
						var _g2 = length;
						while(_g1 < _g2) {
							var i = _g1++;
							var _this = _gthis.cells[i];
							if(_this.list != null) {
								_this.cb(data);
							}
						}
						_gthis.busy = false;
						if(_gthis.get_disposed()) {
							_gthis.destroy();
						} else {
							if(_gthis.used < _gthis.cells.length) {
								_gthis.compact();
							}
							if(_gthis.queue.length > 0) {
								(_gthis.queue.shift())();
							}
						}
					}
				}
			});
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			var fn = this.ondrain;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g3 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
	,__properties__: $extend(tink_core_SimpleDisposable.prototype.__properties__,{get_length:"get_length"})
});
var tink_core_AlreadyDisposed = function() {
};
$hxClasses["tink.core.AlreadyDisposed"] = tink_core_AlreadyDisposed;
tink_core_AlreadyDisposed.__name__ = "tink.core.AlreadyDisposed";
tink_core_AlreadyDisposed.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_AlreadyDisposed.prototype = {
	get_disposed: function() {
		return true;
	}
	,ondispose: function(d) {
		d();
	}
	,dispose: function() {
	}
	,__class__: tink_core_AlreadyDisposed
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
$hxClasses["tink.core.TypedError"] = tink_core_TypedError;
tink_core_TypedError.__name__ = "tink.core.TypedError";
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		var e1 = tink_core_TypedError.asError(e);
		var tmp;
		if(e1 == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1);
		} else {
			var e = e1;
			tmp = e;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,isTinkError: null
	,printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,toPromise: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(this)));
	}
	,throwSelf: function() {
		var any = this;
		throw haxe_Exception.thrown(any);
	}
	,toJsError: function() {
		var value = this.data;
		var _g = ((value) instanceof Error) ? value : null;
		if(_g == null) {
			return new tink_core__$Error_TinkError(this);
		} else {
			var e = _g;
			return e;
		}
	}
	,__class__: tink_core_TypedError
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Error_TinkError = function(e) {
	Error.call(this);
	this.message = e.message;
	this.data = e;
};
$hxClasses["tink.core._Error.TinkError"] = tink_core__$Error_TinkError;
tink_core__$Error_TinkError.__name__ = "tink.core._Error.TinkError";
tink_core__$Error_TinkError.__super__ = Error;
tink_core__$Error_TinkError.prototype = $extend(Error.prototype,{
	data: null
	,__class__: tink_core__$Error_TinkError
});
var tink_core__$Future_FutureObject = function() { };
$hxClasses["tink.core._Future.FutureObject"] = tink_core__$Future_FutureObject;
tink_core__$Future_FutureObject.__name__ = "tink.core._Future.FutureObject";
tink_core__$Future_FutureObject.__isInterface__ = true;
tink_core__$Future_FutureObject.prototype = {
	getStatus: null
	,handle: null
	,eager: null
	,__class__: tink_core__$Future_FutureObject
};
var tink_core__$Future_NeverFuture = function() {
};
$hxClasses["tink.core._Future.NeverFuture"] = tink_core__$Future_NeverFuture;
tink_core__$Future_NeverFuture.__name__ = "tink.core._Future.NeverFuture";
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	getStatus: function() {
		return tink_core_FutureStatus.NeverEver;
	}
	,handle: function(callback) {
		return null;
	}
	,eager: function() {
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core__$Lazy_Computable = function() { };
$hxClasses["tink.core._Lazy.Computable"] = tink_core__$Lazy_Computable;
tink_core__$Lazy_Computable.__name__ = "tink.core._Lazy.Computable";
tink_core__$Lazy_Computable.__isInterface__ = true;
tink_core__$Lazy_Computable.prototype = {
	isComputed: null
	,compute: null
	,underlying: null
	,__class__: tink_core__$Lazy_Computable
};
var tink_core__$Lazy_LazyObject = function() { };
$hxClasses["tink.core._Lazy.LazyObject"] = tink_core__$Lazy_LazyObject;
tink_core__$Lazy_LazyObject.__name__ = "tink.core._Lazy.LazyObject";
tink_core__$Lazy_LazyObject.__isInterface__ = true;
tink_core__$Lazy_LazyObject.__interfaces__ = [tink_core__$Lazy_Computable];
tink_core__$Lazy_LazyObject.prototype = {
	isComputed: null
	,get: null
	,__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
$hxClasses["tink.core._Lazy.LazyConst"] = tink_core__$Lazy_LazyConst;
tink_core__$Lazy_LazyConst.__name__ = "tink.core._Lazy.LazyConst";
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	value: null
	,isComputed: function() {
		return true;
	}
	,get: function() {
		return this.value;
	}
	,compute: function() {
	}
	,underlying: function() {
		return null;
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
$hxClasses["tink.core._Future.SyncFuture"] = tink_core__$Future_SyncFuture;
tink_core__$Future_SyncFuture.__name__ = "tink.core._Future.SyncFuture";
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	value: null
	,getStatus: function() {
		return tink_core_FutureStatus.Ready(this.value);
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,tink_core_Lazy.get(this.value));
		return null;
	}
	,eager: function() {
		if(!this.value.isComputed()) {
			tink_core_Lazy.get(this.value);
		}
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_Future = {};
tink_core_Future.__properties__ = {get_status:"get_status"};
tink_core_Future.get_status = function(this1) {
	return this1.getStatus();
};
tink_core_Future._new = function(f) {
	var this1 = new tink_core__$Future_SuspendableFuture(f);
	return this1;
};
tink_core_Future.handle = function(this1,callback) {
	return this1.handle(callback);
};
tink_core_Future.eager = function(this1) {
	this1.eager();
	return this1;
};
tink_core_Future.first = function(this1,that) {
	var _g = this1;
	var _g1 = _g.getStatus();
	switch(_g1._hx_index) {
	case 3:
		var _g2 = _g1.result;
		var _g1 = that.getStatus();
		switch(_g1._hx_index) {
		case 3:
			var _g2 = _g1.result;
			var v = _g;
			return v;
		case 4:
			var v = _g;
			return v;
		default:
			var v = _g;
			return v;
		}
		break;
	case 4:
		var v = that;
		return v;
	default:
		var _g1 = that.getStatus();
		switch(_g1._hx_index) {
		case 3:
			var _g2 = _g1.result;
			var v = that;
			return v;
		case 4:
			var v = _g;
			return v;
		default:
			return new tink_core__$Future_SuspendableFuture(function(fire) {
				return new tink_core__$Callback_LinkPair(this1.handle(fire),that.handle(fire));
			});
		}
	}
};
tink_core_Future.map = function(this1,f,gather) {
	var _g = this1.getStatus();
	switch(_g._hx_index) {
	case 3:
		var l = _g.result;
		var this2 = l;
		var f1 = f;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
			return f1(this2.get());
		},this2));
	case 4:
		return tink_core_Future.NEVER;
	default:
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return this1.handle(function(v) {
				fire(f(v));
			});
		});
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	var _g = this1.getStatus();
	switch(_g._hx_index) {
	case 3:
		var l = _g.result;
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return next(tink_core_Lazy.get(l)).handle(function(v) {
				fire(v);
			});
		});
	case 4:
		return tink_core_Future.NEVER;
	default:
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var inner = new tink_core_CallbackLinkRef();
			var outer = this1.handle(function(v) {
				var outer = next(v).handle($yield);
				inner.link = outer;
			});
			return new tink_core__$Callback_LinkPair(outer,inner);
		});
	}
};
tink_core_Future.next = function(this1,n) {
	return tink_core_Future.flatMap(this1,n);
};
tink_core_Future.gather = function(this1) {
	return this1;
};
tink_core_Future.merge = function(this1,that,combine) {
	var _g = that.getStatus();
	if(this1.getStatus()._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else if(_g._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var check = function(v) {
				var _g = that.getStatus();
				var _g1 = this1.getStatus();
				if(_g1._hx_index == 3) {
					if(_g._hx_index == 3) {
						var a = _g1.result;
						var b = _g.result;
						$yield(combine(tink_core_Lazy.get(a),tink_core_Lazy.get(b)));
					}
				}
			};
			return new tink_core__$Callback_LinkPair(this1.handle(check),that.handle(check));
		});
	}
};
tink_core_Future.flatten = function(f) {
	return tink_core_Future.flatMap(f,function(v) {
		return v;
	});
};
tink_core_Future.ofJsPromise = function(promise) {
	return tink_core_Future.irreversible(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		}).catch(function(e) {
			cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 137, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"})));
		});
	});
};
tink_core_Future.fromNever = function(l) {
	return l;
};
tink_core_Future.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	return tink_core_Future.inSequence(futures);
};
tink_core_Future.inParallel = function(futures,concurrency) {
	return tink_core_Future.many(futures,concurrency);
};
tink_core_Future.inSequence = function(futures) {
	return tink_core_Future.many(futures,1);
};
tink_core_Future.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,tink_core_Outcome.Success,function(o) {
		return tink_core_OutcomeTools.orNull(o);
	});
};
tink_core_Future.processMany = function(a,concurrency,fn,lift) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(lift(tink_core_Outcome.Success([]))));
	} else {
		var this1 = new tink_core__$Future_SuspendableFuture(function($yield) {
			var links = [];
			var _g = [];
			var _g1 = 0;
			while(_g1 < a.length) {
				var x = a[_g1];
				++_g1;
				_g.push(null);
			}
			var ret = _g;
			var index = 0;
			var pending = 0;
			var done = false;
			var concurrency1;
			if(concurrency == null) {
				concurrency1 = a.length;
			} else {
				var v = concurrency;
				concurrency1 = v < 1 ? 1 : v > a.length ? a.length : v;
			}
			var fireWhenReady = function() {
				if(index == ret.length) {
					if(pending == 0) {
						var v = lift(tink_core_Outcome.Success(ret));
						done = true;
						$yield(v);
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			};
			var step = null;
			step = function() {
				if(!done && !fireWhenReady()) {
					while(index < ret.length) {
						index += 1;
						var index1 = [index - 1];
						var p = a[index1[0]];
						var check = [(function(index) {
							return function(o) {
								var _g = fn(o);
								switch(_g._hx_index) {
								case 0:
									var v = _g.data;
									ret[index[0]] = v;
									fireWhenReady();
									break;
								case 1:
									var e = _g.failure;
									var _g = 0;
									while(_g < links.length) {
										var l = links[_g];
										++_g;
										if(l != null) {
											l.cancel();
										}
									}
									var v = lift(tink_core_Outcome.Failure(e));
									done = true;
									$yield(v);
									break;
								}
							};
						})(index1)];
						var _g = p.getStatus();
						if(_g._hx_index == 3) {
							var _hx_tmp;
							_hx_tmp = tink_core_Lazy.get(_g.result);
							var v = _hx_tmp;
							check[0](v);
							if(!done) {
								continue;
							}
						} else {
							pending += 1;
							links.push(p.handle((function(check) {
								return function(o) {
									pending -= 1;
									check[0](o);
									if(!done) {
										step();
									}
								};
							})(check)));
						}
						break;
					}
				}
			};
			var _g = 0;
			var _g1 = concurrency1;
			while(_g < _g1) {
				var i = _g++;
				step();
			}
			return tink_core_CallbackLink.fromMany(links);
		});
		return this1;
	}
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return js_Boot.__implements(maybeFuture,tink_core__$Future_FutureObject);
};
tink_core_Future.async = function(init,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var ret = tink_core_Future.irreversible(init);
	if(lazy) {
		return ret;
	} else {
		ret.eager();
		return ret;
	}
};
tink_core_Future.irreversible = function(init) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		init($yield);
		return null;
	});
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	return tink_core_Future.first(tink_core_Future.map(a,haxe_ds_Either.Left),tink_core_Future.map(b,haxe_ds_Either.Right));
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return map(d);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
};
tink_core_Future._tryFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return tink_core_Future.map(map(d),tink_core_Outcome.Success);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
};
tink_core_Future._tryFailingMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
};
tink_core_Future._tryMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
};
tink_core_Future._flatMap = function(f,map) {
	return tink_core_Future.flatMap(f,map);
};
tink_core_Future._map = function(f,map) {
	return tink_core_Future.map(f,map);
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	var this1 = tink_core_Future.irreversible(function(cb) {
		haxe_Timer.delay(function() {
			cb(tink_core_Lazy.get(value));
		},ms);
	});
	this1.eager();
	return this1;
};
var tink_core_FutureStatus = $hxEnums["tink.core.FutureStatus"] = { __ename__ : true, __constructs__ : ["Suspended","Awaited","EagerlyAwaited","Ready","NeverEver"]
	,Suspended: {_hx_index:0,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Awaited: {_hx_index:1,__enum__:"tink.core.FutureStatus",toString:$estr}
	,EagerlyAwaited: {_hx_index:2,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Ready: ($_=function(result) { return {_hx_index:3,result:result,__enum__:"tink.core.FutureStatus",toString:$estr}; },$_.__params__ = ["result"],$_)
	,NeverEver: {_hx_index:4,__enum__:"tink.core.FutureStatus",toString:$estr}
};
var tink_core_FutureTrigger = function() {
	this.status = tink_core_FutureStatus.Awaited;
	this.list = new tink_core_CallbackList(true);
};
$hxClasses["tink.core.FutureTrigger"] = tink_core_FutureTrigger;
tink_core_FutureTrigger.__name__ = "tink.core.FutureTrigger";
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.prototype = {
	status: null
	,list: null
	,getStatus: function() {
		return this.status;
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var result = _g.result;
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(result));
			return null;
		} else {
			var v = _g;
			var _this = this.list;
			if(_this.get_disposed()) {
				return null;
			} else {
				var node = new tink_core__$Callback_ListCell(callback,_this);
				_this.cells.push(node);
				if(_this.used++ == 0) {
					var fn = _this.onfill;
					if(tink_core_Callback.depth < 500) {
						tink_core_Callback.depth++;
						fn();
						tink_core_Callback.depth--;
					} else {
						tink_core_Callback.defer(fn);
					}
				}
				return node;
			}
		}
	}
	,eager: function() {
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var _g1 = _g.result;
			return false;
		} else {
			this.status = tink_core_FutureStatus.Ready(new tink_core__$Lazy_LazyConst(result));
			this.list.invoke(result);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_JsPromiseTools = function() { };
$hxClasses["tink.core.JsPromiseTools"] = tink_core_JsPromiseTools;
tink_core_JsPromiseTools.__name__ = "tink.core.JsPromiseTools";
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.status = tink_core_FutureStatus.Suspended;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList(true);
	this.callbacks.ondrain = function() {
		if(_gthis.status == tink_core_FutureStatus.Awaited) {
			_gthis.status = tink_core_FutureStatus.Suspended;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
	this.callbacks.onfill = function() {
		if(_gthis.status == tink_core_FutureStatus.Suspended) {
			_gthis.status = tink_core_FutureStatus.Awaited;
			_gthis.arm();
		}
	};
};
$hxClasses["tink.core._Future.SuspendableFuture"] = tink_core__$Future_SuspendableFuture;
tink_core__$Future_SuspendableFuture.__name__ = "tink.core._Future.SuspendableFuture";
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SuspendableFuture.prototype = {
	callbacks: null
	,status: null
	,link: null
	,wakeup: null
	,getStatus: function() {
		return this.status;
	}
	,trigger: function(value) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var _g1 = _g.result;
		} else {
			this.status = tink_core_FutureStatus.Ready(new tink_core__$Lazy_LazyConst(value));
			var link = this.link;
			this.link = null;
			this.wakeup = null;
			this.callbacks.invoke(value);
			if(link != null) {
				link.cancel();
			}
		}
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var result = _g.result;
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(result));
			return null;
		} else {
			var _this = this.callbacks;
			if(_this.get_disposed()) {
				return null;
			} else {
				var node = new tink_core__$Callback_ListCell(callback,_this);
				_this.cells.push(node);
				if(_this.used++ == 0) {
					var fn = _this.onfill;
					if(tink_core_Callback.depth < 500) {
						tink_core_Callback.depth++;
						fn();
						tink_core_Callback.depth--;
					} else {
						tink_core_Callback.defer(fn);
					}
				}
				return node;
			}
		}
	}
	,arm: function() {
		this.link = this.wakeup($bind(this,this.trigger));
	}
	,eager: function() {
		switch(this.status._hx_index) {
		case 0:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			this.arm();
			break;
		case 1:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			break;
		default:
		}
	}
	,__class__: tink_core__$Future_SuspendableFuture
};
var tink_core_Lazy = {};
tink_core_Lazy.__properties__ = {get_computed:"get_computed"};
tink_core_Lazy.get_computed = function(this1) {
	return this1.isComputed();
};
tink_core_Lazy.get = function(this1) {
	this1.compute();
	return this1.get();
};
tink_core_Lazy.fromNoise = function(l) {
	return l;
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return f(this1.get());
	},this1);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return tink_core_Lazy.get(f(this1.get()));
	},this1);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f,from) {
	this.f = f;
	this.from = from;
};
$hxClasses["tink.core._Lazy.LazyFunc"] = tink_core__$Lazy_LazyFunc;
tink_core__$Lazy_LazyFunc.__name__ = "tink.core._Lazy.LazyFunc";
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	f: null
	,from: null
	,result: null
	,underlying: function() {
		return this.from;
	}
	,isComputed: function() {
		return this.f == null;
	}
	,get: function() {
		return this.result;
	}
	,compute: function() {
		var _g = this.f;
		if(_g != null) {
			var v = _g;
			this.f = null;
			var _g = this.from;
			if(_g != null) {
				var cur = _g;
				this.from = null;
				var stack = [];
				while(cur != null && !cur.isComputed()) {
					stack.push(cur);
					cur = cur.underlying();
				}
				stack.reverse();
				var _g = 0;
				while(_g < stack.length) {
					var c = stack[_g];
					++_g;
					c.compute();
				}
			}
			this.result = v();
		}
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_Noise = {};
tink_core_Noise.ofAny = function(t) {
	return null;
};
var tink_core_OptionTools = function() { };
$hxClasses["tink.core.OptionTools"] = tink_core_OptionTools;
tink_core_OptionTools.__name__ = "tink.core.OptionTools";
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.sure = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.toOutcome = function(o,pos) {
	switch(o._hx_index) {
	case 0:
		var value = o.v;
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Option.hx", lineNumber : 31, className : "tink.core.OptionTools", methodName : "toOutcome"}));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return tink_core_Lazy.get(l);
	}
};
tink_core_OptionTools.orTry = function(o,fallback) {
	if(o._hx_index == 0) {
		var v = o.v;
		return o;
	} else {
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		var v1 = o.v;
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		var v = o.v;
		this.value = v;
	} else {
		this.alive = false;
	}
};
$hxClasses["tink.core.OptionIter"] = tink_core_OptionIter;
tink_core_OptionIter.__name__ = "tink.core.OptionIter";
tink_core_OptionIter.prototype = {
	value: null
	,alive: null
	,hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
var tink_core_OutcomeTools = function() { };
$hxClasses["tink.core.OutcomeTools"] = tink_core_OutcomeTools;
tink_core_OutcomeTools.__name__ = "tink.core.OutcomeTools";
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var failure = outcome.failure;
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw haxe_Exception.thrown(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return haxe_ds_Option.Some(data);
	case 1:
		var _g = outcome.failure;
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	return tink_core_OutcomeTools.or(outcome,fallback);
};
tink_core_OutcomeTools.or = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var _g = outcome.data;
		return outcome;
	case 1:
		var _g = outcome.failure;
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data == to;
	case 1:
		var _g = outcome.failure;
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		var _g = outcome.data;
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		var v = outcome.data;
		return f(v);
	case 1:
		var e = outcome.failure;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		return tink_core_Outcome.Failure(report(e));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			var d = _g.data;
			return tink_core_Outcome.Success(d);
		case 1:
			var f = _g.failure;
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f = o.failure;
		return tink_core_Outcome.Failure(f);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var _g = f(d);
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f1 = _g.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f1));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair.__properties__ = {get_b:"get_b",get_a:"get_a"};
tink_core_Pair._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
$hxClasses["tink.core.MPair"] = tink_core_MPair;
tink_core_MPair.__name__ = "tink.core.MPair";
tink_core_MPair.prototype = {
	a: null
	,b: null
	,__class__: tink_core_MPair
};
var tink_core_Promise = {};
tink_core_Promise._new = function(f) {
	var this1 = new tink_core__$Future_SuspendableFuture(function(cb) {
		return f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	});
	var this2 = this1;
	return this2;
};
tink_core_Promise.eager = function(this1) {
	this1.eager();
	return this1;
};
tink_core_Promise.map = function(this1,f) {
	return tink_core_Future.map(this1,f);
};
tink_core_Promise.flatMap = function(this1,f) {
	return tink_core_Future.flatMap(this1,f);
};
tink_core_Promise.tryRecover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
};
tink_core_Promise.recover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
};
tink_core_Promise.mapError = function(this1,f) {
	return tink_core_Future.map(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			return o;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(f(e));
		}
	});
};
tink_core_Promise.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core_Promise.noise = function(this1) {
	return tink_core_Promise.next(this1,function(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
	});
};
tink_core_Promise.isSuccess = function(this1) {
	return tink_core_Future.map(this1,function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
};
tink_core_Promise.next = function(this1,f,gather) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Promise.next(this1,function(_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
	});
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	return tink_core_Future.flatMap(tink_core_Future.merge(this1,other,function(a,b) {
		switch(a._hx_index) {
		case 0:
			var _g = a.data;
			switch(b._hx_index) {
			case 0:
				var a1 = _g;
				var b1 = b.data;
				return merger(a1,b1);
			case 1:
				var e = b.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
			}
			break;
		case 1:
			var e = a.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	}),function(o) {
		return o;
	});
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
	});
};
tink_core_Promise.iterate = function(promises,$yield,fallback) {
	return tink_core_Future.irreversible(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						$yield(v).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									var ret = _g.v;
									cb(tink_core_Outcome.Success(ret));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								var e = o.failure;
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						});
						break;
					case 1:
						var e = o.failure;
						cb(tink_core_Outcome.Failure(e));
						break;
					}
				});
			} else {
				fallback.handle(cb);
			}
		};
		next();
	});
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		return HxOverrides.now() / 1000 * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
				return attempt(count + 1);
			});
		};
		return tink_core_Future.flatMap(gen(),function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		this1.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				resolve(v);
				break;
			case 1:
				var e = o.failure;
				reject(e.toJsError());
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.fromNever = function(l) {
	return l;
};
tink_core_Promise.ofTrigger = function(f) {
	return f;
};
tink_core_Promise.ofHappyTrigger = function(f) {
	return tink_core_Future.map(f,tink_core_Outcome.Success);
};
tink_core_Promise.ofFuture = function(f) {
	return tink_core_Future.map(f,tink_core_Outcome.Success);
};
tink_core_Promise.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core_Promise.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core_Promise.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core_Promise.lazy = function(p) {
	var this1 = new tink_core__$Future_SuspendableFuture(function(cb) {
		return tink_core_Lazy.get(p).handle(cb);
	});
	return this1;
};
tink_core_Promise.inParallel = function(a,concurrency) {
	return tink_core_Promise.many(a,concurrency);
};
tink_core_Promise.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,function(o) {
		return o;
	},function(o) {
		return o;
	});
};
tink_core_Promise.inSequence = function(a) {
	return tink_core_Promise.many(a,1);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		return tink_core_Future.map(ret,function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_Promise.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core_Promise.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core_Next = {};
tink_core_Next.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core_Next.ofSync = function(f) {
	return function(x) {
		return tink_core_Future.map(f(x),tink_core_Outcome.Success);
	};
};
tink_core_Next.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core_Next._chain = function(a,b) {
	return function(v) {
		return tink_core_Promise.next(a(v),b);
	};
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner.ofSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core_Combiner.ofSafe = function(f) {
	return function(x1,x2) {
		return tink_core_Future.map(f(x1,x2),tink_core_Outcome.Success);
	};
};
tink_core_Combiner.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1;
};
var tink_core_Gather = {};
tink_core_Gather._new = function(v) {
	var this1 = v;
	return this1;
};
tink_core_Gather.ofBool = function(b) {
	var this1 = b;
	return this1;
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f,init) {
	var this1 = new tink_core__$Signal_Suspendable(f,init);
	return this1;
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			fire(f(v));
		});
	});
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			f(v).handle(fire);
		});
	});
};
tink_core_Signal.filter = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			if(f(v)) {
				fire(v);
			}
		});
	});
};
tink_core_Signal.select = function(this1,selector,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			var _g = selector(v);
			if(_g._hx_index == 0) {
				var v = _g.v;
				fire(v);
			}
		});
	});
};
tink_core_Signal.join = function(this1,that,gather) {
	if(this1.get_disposed()) {
		return that;
	} else if(that.get_disposed()) {
		return this1;
	} else {
		return new tink_core__$Signal_Suspendable(function(fire) {
			var cb = fire;
			return new tink_core__$Callback_LinkPair(this1.listen(cb),that.listen(cb));
		},function(self) {
			var release = function() {
				if(this1.get_disposed() && that.get_disposed()) {
					self.dispose();
				}
			};
			this1.ondispose(release);
			that.ondispose(release);
		});
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	return tink_core_Signal.pickNext(this1,function(v) {
		if(condition == null || condition(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
tink_core_Signal.pickNext = function(this1,selector) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	link = this1.listen(function(v) {
		var _g = selector(v);
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			ret.trigger(v);
			break;
		case 1:
			break;
		}
	});
	ret.handle(link == null ? tink_core_CallbackLink.noop : ($_=link,$bind($_,$_.cancel)));
	return ret;
};
tink_core_Signal.until = function(this1,end) {
	return new tink_core__$Signal_Suspendable(function($yield) {
		return this1.listen($yield);
	},function(self) {
		end.handle($bind(self,self.dispose));
	});
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return null;
	});
};
tink_core_Signal.gather = function(this1) {
	return this1;
};
tink_core_Signal.create = function(f) {
	var this1 = new tink_core__$Signal_Suspendable(f,null);
	return this1;
};
tink_core_Signal.generate = function(generator,init) {
	var this1 = new tink_core__$Signal_Suspendable(function(fire) {
		generator(fire);
		return null;
	},init);
	return this1;
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	return new tink_core__$Signal_Suspendable(function(fire) {
		add(fire);
		var _g = remove;
		var a1 = fire;
		var this1 = new tink_core_SimpleLink(function() {
			_g(a1);
		});
		return this1;
	});
};
tink_core_Signal.dead = function() {
	return tink_core__$Signal_Disposed.INST;
};
var tink_core__$Signal_SignalObject = function() { };
$hxClasses["tink.core._Signal.SignalObject"] = tink_core__$Signal_SignalObject;
tink_core__$Signal_SignalObject.__name__ = "tink.core._Signal.SignalObject";
tink_core__$Signal_SignalObject.__isInterface__ = true;
tink_core__$Signal_SignalObject.__interfaces__ = [tink_core_Disposable];
tink_core__$Signal_SignalObject.prototype = {
	listen: null
	,__class__: tink_core__$Signal_SignalObject
};
var tink_core__$Signal_Disposed = function() {
	tink_core_AlreadyDisposed.call(this);
};
$hxClasses["tink.core._Signal.Disposed"] = tink_core__$Signal_Disposed;
tink_core__$Signal_Disposed.__name__ = "tink.core._Signal.Disposed";
tink_core__$Signal_Disposed.__interfaces__ = [tink_core__$Signal_SignalObject];
tink_core__$Signal_Disposed.__super__ = tink_core_AlreadyDisposed;
tink_core__$Signal_Disposed.prototype = $extend(tink_core_AlreadyDisposed.prototype,{
	listen: function(cb) {
		return null;
	}
	,__class__: tink_core__$Signal_Disposed
});
var tink_core__$Signal_Suspendable = function(activate,init) {
	this.handlers = new tink_core_CallbackList();
	var _gthis = this;
	this.activate = activate;
	this.init = init;
	this.handlers.ondrain = function() {
		var this1 = _gthis.subscription;
		if(this1 != null) {
			this1.cancel();
		}
	};
	this.handlers.onfill = function() {
		if(init != null) {
			var f = init;
			init = null;
			f(_gthis);
		}
		_gthis.subscription = activate(($_=_gthis.handlers,$bind($_,$_.invoke)));
	};
};
$hxClasses["tink.core._Signal.Suspendable"] = tink_core__$Signal_Suspendable;
tink_core__$Signal_Suspendable.__name__ = "tink.core._Signal.Suspendable";
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core__$Signal_Suspendable.over = function(s,activate) {
	if(s.get_disposed()) {
		return tink_core_Signal.dead();
	} else {
		var ret = new tink_core__$Signal_Suspendable(activate);
		s.ondispose($bind(ret,ret.dispose));
		return ret;
	}
};
tink_core__$Signal_Suspendable.prototype = {
	handlers: null
	,activate: null
	,init: null
	,subscription: null
	,get_disposed: function() {
		return this.handlers.get_disposed();
	}
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(handler) {
		this.handlers.ondispose(handler);
	}
	,listen: function(cb) {
		var _this = this.handlers;
		if(_this.get_disposed()) {
			return null;
		} else {
			var node = new tink_core__$Callback_ListCell(cb,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				var fn = _this.onfill;
				if(tink_core_Callback.depth < 500) {
					tink_core_Callback.depth++;
					fn();
					tink_core_Callback.depth--;
				} else {
					tink_core_Callback.defer(fn);
				}
			}
			return node;
		}
	}
	,__class__: tink_core__$Signal_Suspendable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
$hxClasses["tink.core.SignalTrigger"] = tink_core_SignalTrigger;
tink_core_SignalTrigger.__name__ = "tink.core.SignalTrigger";
tink_core_SignalTrigger.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core_SignalTrigger.prototype = {
	get_disposed: function() {
		return this.handlers.get_disposed();
	}
	,handlers: null
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(d) {
		this.handlers.ondispose(d);
	}
	,trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.used;
	}
	,listen: function(cb) {
		var _this = this.handlers;
		if(_this.get_disposed()) {
			return null;
		} else {
			var node = new tink_core__$Callback_ListCell(cb,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				var fn = _this.onfill;
				if(tink_core_Callback.depth < 500) {
					tink_core_Callback.depth++;
					fn();
					tink_core_Callback.depth--;
				} else {
					tink_core_Callback.defer(fn);
				}
			}
			return node;
		}
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
	,__properties__: {get_disposed:"get_disposed"}
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [{ name : "haxeui-core/styles/default/dialogs/question-small.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAz5JREFUeNpMVG1IU1EYfrZ7d6denVa26WItHaVlrSDLoi+WFRGpRflHWgXVjyAq+vgTEdXffkRQRH8CIdwPjSlBQRR9UTEzmgm1tpZu1XKT6bzb3If3zt5zi/LAc8+597zP877nPe97NW1tbdBoNNBqtepMmE9YCsBEMODPkAjRmZmZz4QxAgqFAtjM4//QE9ZardYN7e3tHbW1tStkWVY3eJ5HMBgc6u7u7gqFQq/pUz8hx/a4+vp65pWRd7S0tBxwOp1nB77A5H6WwN0HEh68SiEQSoMXRFPH/i3bKFLO7/czcoigcHV1dSyUja2trQccDsfBi7ej8EVKUFRWjaoqEyorK5EtiPhAnBfv4ji0t24lx3EyiYwxEV5RFFNNTc2m5uatzgu3otAbzEAmjxun5sw6nYjLd9IIRnS4dCeKS0e2OL1erz8cDvs4m83WdOzY0fNvhqaNgWgZBEGPiYkk4vE4PB/HMC7JWGwtQzCcwLdflM2pArSFJNbYzSaPp/89i8BssVgaup7+RGmpEaOjcdVn38ss0ukpbLbHYSyJIBBIoL9/EmazEYMBBev2VDcwrpYeFclkCp+GZShKAblcHtHYOH5EYqitltGxsxxfwtO4/3wKGk5AKp1XbTOZLBiXp6tiIpBlBVIqi9j4FEgH0Ohw9bhVjebK3VFwgqiu5RmebFUyGJcJJDmOxxILpTSRp0svAfc3dbvPjPypg6KKf+ksQFZtAS0TSDLvkUDgq2+5TY+klECxWE7eSlWDt52rVbA1+8agTGfQUCNgeHjEx7hM4KPL5XJvb6rEvOIU5OwkdHoy1hX988rWnI7IuSQWVGTgaJyDvj63m3E5o9GYmpgY19Ghi08fcSx78sqP0ViCTjIX955x6HwsU6h5SLEAqsQ4rp9rQG9vz32P542bCtDLBFhj/Bwc/KCl/tBePNlaX16UQzo+jCHvO0xGfVi1MIt9jvk4d3gZXK7O3p6eLjeV9COWU43dblc7S5Kk4lwut8NmW9J84sT5XY2N622zShEDA2+DN29eexgM+p/q9frHBoMho3bwLAEqnDTy+byF3puIs4gw7y+fVdcIETyCIHwXRREkoP4CfgswAD0VkVFpyDl9AAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/right_arrow_square.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAIAAABLMMCEAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAMUlEQVQImWN8K6PCwMCQbKIz98wVBhhggrOSTXSwiCJLoIjCJdBFIaYzYQqhiCK7AQAMqA07hk2gSAAAAABJRU5ErkJggg"},{ name : "styles/default/main.css", data : "LmJ1dHRvbiwgLmxhYmVsLCAudGV4dGFyZWEsIC50ZXh0ZmllbGQgew0KICAgIGZvbnQtbmFtZTogIkFyaWFsIjsNCiAgICBmb250LXNpemU6IDEzcHg7DQp9DQoNCi5idXR0b246bmF0aXZlIHsNCiAgICBiYWNrZ3JvdW5kOiBub25lOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiBub25lOw0KfQ0KDQoucHJvZ3Jlc3M6bmF0aXZlLCAuc2xpZGVyOm5hdGl2ZSB7DQogICAgYmFja2dyb3VuZDogbm9uZTsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYm9yZGVyLXJhZGl1czogbm9uZTsNCiAgICBmaWx0ZXI6IG5vbmU7DQogICAgY29sb3I6IG5vbmU7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0KDQoudGV4dGZpZWxkOm5hdGl2ZSB7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJvcmRlci1yYWRpdXM6IG5vbmU7DQogICAgZmlsdGVyOiBub25lOw0KICAgIGNvbG9yOiBub25lOw0KICAgIGJhY2tncm91bmQtY29sb3I6IG5vbmU7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0KDQoubnVtYmVyc3RlcHBlcjpuYXRpdmUgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiBub25lOw0KICAgIGZpbHRlcjogbm9uZTsNCiAgICBjb2xvcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lOw0KICAgIHdpZHRoOiA3MHB4Ow0KICAgIGhlaWdodDogMjBweDsNCn0NCg0KLnRleHRhcmVhOm5hdGl2ZSB7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJvcmRlci1yYWRpdXM6IG5vbmU7DQogICAgZmlsdGVyOiBub25lOw0KICAgIGNvbG9yOiBub25lOw0KICAgIGJhY2tncm91bmQtY29sb3I6IG5vbmU7DQogICAgZm9udC1uYW1lOiAiQXJpYWwiOw0KICAgIGZvbnQtc2l6ZTogMTNweDsNCn0NCg0KLmNvbXBvbmVudDpkaXNhYmxlZCB7DQogICAgY3Vyc29yOiBub3QtYWxsb3dlZDsNCn0"},{ name : "haxeui-core/styles/default/right_arrow_white.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAYAAAAvZezQAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3wcMBgEIxAeiMwAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAOUlEQVQI12P8/////3eyqowMUMDEwMDAIPT49n8UAWRBxv///8NlUVQwMDAwvJNVZWRC5sBVINsCAJMjEmd7MjYNAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/up_arrow.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAYAAABCxiV9AAAABGdBTUEAALGPC/xhBQAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB98KChUfKOizO2AAAAAdaVRYdENvbW1lbnQAAAAAAENyZWF0ZWQgd2l0aCBHSU1QZC5lBwAAACNJREFUCNdjYEACAQEB/5H5jNgkNmzYwAiXRNcBU8CITQIGALSTC+IXz7eLAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/global.css", data : ""},{ name : "haxeui-core/styles/default/ranges.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogUkFOR0UNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoucmFuZ2Ugew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICNBQkFCQUI7DQogICAgcGFkZGluZzogMnB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCiAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDEsIDQ1LCAjODg4ODg4LCAwLjIsIDIsIDIsIDEsIDMsIHRydWUpOw0KfQ0KDQoucmFuZ2UtdmFsdWUgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQp9DQoNCi5ob3Jpem9udGFsLXJhbmdlIHsNCiAgICBiYWNrZ3JvdW5kOiAjRjFGMUYxICNGRkZGRkYgdmVydGljYWw7DQogICAgaW5pdGlhbC13aWR0aDogMTUwcHg7DQogICAgaW5pdGlhbC1oZWlnaHQ6IDIwcHg7DQp9ICAgIA0KDQouaG9yaXpvbnRhbC1yYW5nZSAucmFuZ2UtdmFsdWUgew0KICAgIGJhY2tncm91bmQ6ICM2Q0FBREIgIzIxNkFBRSB2ZXJ0aWNhbDsNCiAgICBoZWlnaHQ6IDEwMCU7DQp9DQoNCi52ZXJ0aWNhbC1yYW5nZSB7DQogICAgYmFja2dyb3VuZDogI0YxRjFGMSAjRkZGRkZGIGhvcml6b250YWw7DQogICAgaW5pdGlhbC13aWR0aDogMjBweDsNCiAgICBpbml0aWFsLWhlaWdodDogMTUwcHg7DQp9DQoNCi52ZXJ0aWNhbC1yYW5nZSAucmFuZ2UtdmFsdWUgew0KICAgIGJhY2tncm91bmQ6ICM2Q0FBREIgIzIxNkFBRSBob3Jpem9udGFsOw0KICAgIHdpZHRoOiAxMDAlOw0KfQ0K"},{ name : "haxeui-core/styles/default/up_arrow.svg", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pg0KPCEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDE2LjAuMCwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgIC0tPg0KPCFET0NUWVBFIHN2ZyBQVUJMSUMgIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkIj4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iQ2FwYV8xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4PSIwcHgiIHk9IjBweCINCgkgd2lkdGg9IjI5Mi4zNjJweCIgaGVpZ2h0PSIyOTIuMzYycHgiIHZpZXdCb3g9IjAgMCAyOTIuMzYyIDI5Mi4zNjIiIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDI5Mi4zNjIgMjkyLjM2MjsiDQoJIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZD0iTTI4Ni45MzUsMTk3LjI4NkwxNTkuMDI4LDY5LjM3OWMtMy42MTMtMy42MTctNy44OTUtNS40MjQtMTIuODQ3LTUuNDI0cy05LjIzMywxLjgwNy0xMi44NSw1LjQyNEw1LjQyNCwxOTcuMjg2DQoJCUMxLjgwNywyMDAuOSwwLDIwNS4xODQsMCwyMTAuMTMyczEuODA3LDkuMjMzLDUuNDI0LDEyLjg0N2MzLjYyMSwzLjYxNyw3LjkwMiw1LjQyOCwxMi44NSw1LjQyOGgyNTUuODEzDQoJCWM0Ljk0OSwwLDkuMjMzLTEuODExLDEyLjg0OC01LjQyOGMzLjYxMy0zLjYxMyw1LjQyNy03Ljg5OCw1LjQyNy0xMi44NDdTMjkwLjU0OCwyMDAuOSwyODYuOTM1LDE5Ny4yODZ6Ii8+DQo8L2c+DQo8Zz4NCjwvZz4NCjxnPg0KPC9nPg0KPGc+DQo8L2c+DQo8Zz4NCjwvZz4NCjxnPg0KPC9nPg0KPGc+DQo8L2c+DQo8Zz4NCjwvZz4NCjxnPg0KPC9nPg0KPGc+DQo8L2c+DQo8Zz4NCjwvZz4NCjxnPg0KPC9nPg0KPGc+DQo8L2c+DQo8Zz4NCjwvZz4NCjxnPg0KPC9nPg0KPGc+DQo8L2c+DQo8L3N2Zz4NCg"},{ name : "haxeui-core/styles/default/dialogs/cross-circle.png", data : "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA61pVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wUmlnaHRzPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvcmlnaHRzLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcFJpZ2h0czpNYXJrZWQ9IkZhbHNlIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InV1aWQ6NzBDQkJENjFFODMxREYxMTlCMjJGQkJBMDE3QTBERTkiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6QzgzMTgzMzI4NDM0MTFFMDkyMTU5REUxMDUzQTBFMjciIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6QzgzMTgzMzE4NDM0MTFFMDkyMTU5REUxMDUzQTBFMjciIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6QTI1NDYxQUQyRjg0RTAxMTg1RkJBOTI1NDUxRDI5NkIiIHN0UmVmOmRvY3VtZW50SUQ9InV1aWQ6NzBDQkJENjFFODMxREYxMTlCMjJGQkJBMDE3QTBERTkiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5un3+3AAAICklEQVR42sRXW0xc1xXd834DNWaYGRjGqjEYk8FAoAETsAdccFTLdYRSUeI4UaRYSqX8VPnpRypV/ozUr/5UStREdu3KGGMh27FDx8HY1FR2Yg9jwNhQUx7m/Z47wzCvrn2ZiwYCtOlPjrQ4l7nn7LXO3vvsc64sFovRj9mU/OfkyZPrP8hkMhFyuXz9/3ivRZcJZAG7AYM0Hy0MCMAMMAyMYmEr/EJaYDQaFZ8TF3z16tV1Azs1I3BQq9XmOZ3OvINodrt9j16v361UKo0iezjsEwRhZmRkZKi7u9vj9Xr7AoFAH155AN9OxmWsaBsP8NKdJpOprLq6urKsrKxGrVZbQUbbhY3nKRQKWl1dHe/q6nLfvn37rs/n68IrLzwQ+yEe0GBgVV5eXlVjY+M7WL2DiX0vXlDg229p5ckTCo+PU2RhQRysSEkhpdVK2ldeId2rr5LKZrNWVFScKi4urrx48eK5p0+fpmNYBxD8XzygAX5eV1d34ujRo42hUMgQAtlSczNFvF7anZxMaWlpZDAYSKPRiHNWVlYIK6WZmRmaXVwkRUEBJdXXkwqi4EnB7XZfaGtrawVXGxDcyQPs9sO1tbUnampqTiOOGv/dDhKaLlPmrl1kLyoSkykYDJLf7xdJJderVCpyOBy0B89jY2M0dvYsGd96i/RVlYbqatfpSCRCELKK4W2cmxt2ARuNGyrYv39/lcvlahQEn0a4foNCN25QYX6+GNvZ2dn1sVs1FsRiUlNTKRme6jt/nsIIk/H4LzQu15HG4eF/T/X3P5uEFzzSHHnCFjHBrYcaGhpO+f2CQbhzh4LXr1Mh3AlP0OTkpLhqdvdO4DHT09Nin5udTYHWVmJbSExDfX39KeyeQ8wlLUQuKcGPRVh5JRbgWIELfZeb6UBuLs1h1bxyNr4PefDfBOS2tIj9AlY+Pz9PWZmZtHSpiULjExwmB5Kzkrk2ewCJrs0vKSlxibGFEYvJRCtYOScWG3TCG9y43468AOHiVnjzppgni0hItpGsVNIybCKhqbi4yIXkzWfOdQFQlJWfn58XjUYsoZdjFO5GtiOOL1++FA2Vut0bYs3/8++J2DymrL2d3S56Qa/TUfDRI4pOTHAuWXJycvKYM9EDP4UApxjjRx5KxhbjiRx7NnIZsdzcmJDHsMiMc+docHCQBgYGxH5oaIj+kp5OEyCcnpqiGeSEiovAY49oLydnn5M513cB1JitVouDt8pqby+ZjEbRuJQoKSg0TXv30i/7+mhubk58xy7PunBB3B38zGcHPzO+KS0lNbZlFMUrBBsLGG9ASAMoYMZqF5nN6Q7mTPSAUaPRpnJRCk0iWRAzjpfUIjAkh6HzFguh3n+PUHrG2UDflJSQBv+zYTnsMVhIDFhFQeNtqtNpU5kzUYAaLwxcpsOLSySHMen08nM2Y1cEkVCcNb11dduS30EZ1vF5wOU5Ti5jwLMEhGBLJoM4ucLAnImFiEuyjNUxMdf9CGIlIH5hJJhoMO4NjuVW5Nwb1uIpQgY7snhpZbsxeDSKcXEOGSPRA2G43CeqS0oiAUqDKDwykKvipBLyOjq2JGe83tMjrkgFAUpAARESohAgR3VkfaFQ2MeciQIEn0+YYwEKczoJKDwaru+byLN3IJd+q+zvF8lVcShBzuAEV9tsogBB8M8xZ6KAqeHh4REWoHc6yQf363HScZAkOLYgf1BcTF0HD67/xj3j0PPnawJALIFPIWNBIbhinMgjzJko4F8ej6dPpVKTseQ1WuLJ2EaczUxu3YL8O5DzPmL848CBdXKplUCEGnYYnJBBLMhY+jMxCXt7e/uYM1HAC9yknmF7TalsGWR4rZzmETOdWi26frCqagO5B+SWhNDw8719+zYUqg7UDVU8H3yYk1TxOsnNFnb/VG9vzzPmTBQQQBXsvnu3o1MuV5L17dM0g2oYBqEGk20Y86y8XCT3gty2KTcY/Ns9kFK8t8XJI8ilJdwlMk69hzyIUWfnvc5AwN/NnIlnAeOfbW23unCKjSrTM8j+wYf0nN9BhBqrt3MNALl9C3IJ/O4+yKUx2Nj0QqulPb/5iCjVzFV0tL39713MJd0NRQGcocDS8vJS++ef/7kFz/5dNW+Q5f0z9BgJtAJDaj6ndyCXII3hO3m3QkkZZz6klCO1OLBC/i+++KxleXm5nbmYc8OFJI4HT5542i9d+mtrOBxZtTecpuzf/Z4e6vU0gAmxeOXaCTxmELa+MyVRzid/oIxfvcPkq01NF1p7errbmUPio4QPi/V7CQrSV1euXDKgWCjefffMccuxk7rUolLq/tMf6eu2W2QJhygTYUlGWHTxj5YA3LkIg6MQOaFUkaX2DTr80W9JkWbjm1Hgyy8/u3bt2pUbyKGvcBeIfe9WXIBrl9T4bMdu0KEcnygoKKr5+ONPjmdmZlmVSgUFRodo2H2LRu/dofnBAfJPi1uZ9Glm+snebLJXHqasmmOkzXCgnEdodHR4/NNPz17zeh+5Qd6KS09Auklzw0fMtgIYXK8rjEbTsTffbCipr/91idlsSeVFKxRyEWvfLiQWl7UzZO3DY2pqYra5+eLDlpa/PfT5lm9iC3eCPAbQDxEgJWcKcESn05eWl1dlV1XVZDudhelpaekpuMTqeA4+ywLT05MLXu/jyY4O98D9+x0D2GoPUDfagQWuH0z+/woQ7wYYx0doLvoDGJYBJPMXlDQNWATGcNr1YsX96AWuptJZsaOAH7P9R4ABAJnpEv/4dkWKAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/left_arrow.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAYAAAAvZezQAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3wcMBQEeMpWpOwAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAKElEQVQI12NgQAIBAQH/GZE5DAwMDIzIHAYGBgZGZA52FehmMKDbAgAUiA2PlOfODgAAAABJRU5ErkJggg"},{ name : "css/listviews.css", data : "Lmxpc3R2aWV3IHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjNDg0ODQ4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDFweDsNCiAgICBwYWRkaW5nOiAxcHg7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KICAgIGJhY2tncm91bmQ6ICMzMDMwMzA7DQp9DQoNCi5saXN0dmlldyAubGlzdHZpZXctY29udGVudHMgew0KICAgIHNwYWNpbmc6IDA7DQogICAgd2lkdGg6IDEwMCU7DQogICAgcGFkZGluZzogMHB4Ow0KfQ0KDQoubGlzdHZpZXcgLml0ZW1yZW5kZXJlciB7DQogICAgY3Vyc29yOiBwb2ludGVyOyAgICANCn0NCg0KLmxpc3R2aWV3IC5pdGVtcmVuZGVyZXIgLmxhYmVsIHsNCn0NCg0KLmxpc3R2aWV3IC5ldmVuIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzAzMDMwOw0KfQ0KDQoubGlzdHZpZXcgLmV2ZW46aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICM0ODQ4NDg7DQp9DQoNCi5saXN0dmlldyAub2RkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzUzNTM1Ow0KfQ0KDQoubGlzdHZpZXcgLm9kZDpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogIzQ4NDg0ODsNCn0NCg0KLmxpc3R2aWV3IC5pdGVtcmVuZGVyZXIgew0KICAgIGhlaWdodDogYXV0bzsNCiAgICBwYWRkaW5nOiA1cHg7DQp9DQoNCi5saXN0dmlldyAuaXRlbXJlbmRlcmVyOnNlbGVjdGVkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTI1MjUyOw0KICAgIGNvbG9yOiAjY2NjY2NjOw0KfQ0KDQoubGlzdHZpZXcgLml0ZW1yZW5kZXJlcjpzZWxlY3RlZCAubGFiZWwgew0KICAgIGNvbG9yOiAjY2NjY2NjOw0KfQ0K"},{ name : "haxeui-core/styles/default/buttons.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogQlVUVE9OUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5idXR0b24gew0KICAgIGJhY2tncm91bmQ6ICNFREVERUQgI0U2RTZFNiB2ZXJ0aWNhbDsNCiAgICBjb2xvcjogIzIyMjIyMjsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjQUJBQkFCOw0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCiAgICBwYWRkaW5nOiA1cHggOHB4Ow0KICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgc3BhY2luZzogNXB4IDVweDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQp9DQoNCi5idXR0b246aG92ZXIgew0KICAgIGJhY2tncm91bmQ6ICNGNUY1RjUgI0YxRjFGMSB2ZXJ0aWNhbDsNCiAgICBjb2xvcjogIzAwMDAwMDsNCn0NCg0KLmJ1dHRvbjpkb3duIHsNCiAgICBiYWNrZ3JvdW5kOiAjRDJEMkQyICNDMkMyQzIgdmVydGljYWw7DQogICAgY29sb3I6ICMwMDAwMDA7DQogICAgYm9yZGVyLWNvbG9yOiAjN0Y3RjdGOw0KfQ0KDQouYnV0dG9uOmFjdGl2ZSB7DQogICAgYm9yZGVyOiAycHggc29saWQgIzc3QzZGRjsNCn0NCg0KLmJ1dHRvbi5lbXBoYXNpemVkIHsNCiAgICBiYWNrZ3JvdW5kOiAjREFFNEVFICNENERFRTggdmVydGljYWw7DQogICAgYm9yZGVyLWNvbG9yOiAjNkNBMUQ3Ow0KfQ0KDQouYnV0dG9uLmVtcGhhc2l6ZWQ6aG92ZXIgew0KICAgIGJhY2tncm91bmQ6ICNFMkVDRjYgI0RFRThGMiB2ZXJ0aWNhbDsNCiAgICBib3JkZXItY29sb3I6ICM2Q0ExRDc7DQp9DQoNCi5idXR0b24uZW1waGFzaXplZDpkb3duIHsNCiAgICBiYWNrZ3JvdW5kOiAjQzJDQ0Q2ICNCNEJFQzggdmVydGljYWw7DQogICAgYm9yZGVyLWNvbG9yOiAjNTY4Q0MxOw0KfQ0KDQouYnV0dG9uOmRpc2FibGVkIHsNCiAgICBiYWNrZ3JvdW5kOiAjRDRENEQ0ICNDQ0NDQ0MgdmVydGljYWw7DQogICAgY29sb3I6ICM5MDkwOTA7DQogICAgY3Vyc29yOiBkZWZhdWx0Ow0KfQ0KDQouYnV0dG9uIC5sYWJlbCB7DQogICAgcG9pbnRlci1ldmVudHM6IG5vbmU7DQp9"},{ name : "haxeui-core/styles/default/dialogs/exclamation-small.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAgdJREFUeNqkk8tu00AUho9nfKnDJU5j5NoJkTB20+JU3ZR1F+xaKhZIkRCSAYkdL9CqEgtW9B14BVa8AiyQQCELJCRUFUgXMZAKqOPY8WWYsZISaFohdaTPnjnz/2c84zMcIQTO0rg3L7iT5oqUZ6P+Q8rPaSJ0SvKmbt2zdcu1Wf8kEcoygH+hu7qMhdKaVru5qNXWF7GgrLHYNO3UBBTXsN0GCT+JJPwsGtbdBov9VwK60rJ0rrZaKjfM7Z2vsL3zDZTyNVMqVFfZ3LEEKX1MwMYPKtYdJ/I/oiAIgDHs7yH9yi2HzY00Rx6UpTTTCJLBjQuKsyLLRSONf4Hv+zlp7EOhoBjnL1orTDPp4dP06EBlDnGucXXdiYMvMExDaLVa4Hke7D9ahozsAj9bd9Lerksy8pLqB/lfiBMABv2c2+W560sIRUpv0AGvvwftdhu63S6kQghEjADESJGK1SWmHfsQK0SKCpzYVKuN+d7hW4izHgg4gu/ekxwRD3Mw50NR1+YJ4CbzMC9K6BboNu6rlfpCnH2QeeSDhMMcVXucMx4zZCmRS3OXFpiHeVGSgIUFaUOrzJgC/IAZutKYcZuMMfSqYiKe32BePgjIlllXbREfYkLYif65XMHBZv7uHzz/u34xYKM2a79/523xwQCi16/2OzTcOV7pT0+/iRxE3Fmv828BBgCYsyym9ECFNgAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/default/down_arrow.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAYAAABCxiV9AAAABGdBTUEAALGPC/xhBQAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB98KChUgEnZhyO4AAAAdaVRYdENvbW1lbnQAAAAAAENyZWF0ZWQgd2l0aCBHSU1QZC5lBwAAAClJREFUCNdjDAgI+M+AAzAyMDAwYFOwYcMGRkYYB1nBhg0bGDGMQTcBALTqC+LBRYBOAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/tabs.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogVEFCQkFSIChUT1ApDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLnRhYmJhciB7DQogICAgaG9yaXpvbnRhbC1zcGFjaW5nOiA1cHg7DQogICAgcGFkZGluZy1sZWZ0OiA1cHg7DQogICAgcGFkZGluZy1yaWdodDogNXB4Ow0KICAgIGhlaWdodDogYXV0bzsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7DQogICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI0FCQUJBQjsNCiAgICBib3JkZXItdG9wLXdpZHRoOiAwcHg7DQogICAgY2xpcDogdHJ1ZTsNCn0NCg0KLnRhYmJhciA+IC50YWJiYXItY29udGVudHMgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7DQogICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI0FCQUJBQjsNCn0NCg0KLnRhYmJhci1idXR0b24gew0KICAgIGJvcmRlci1yYWRpdXM6IDBweDsNCiAgICBiYWNrZ3JvdW5kOiAjRURFREVEICNFNkU2RTYgdmVydGljYWw7DQogICAgcGFkZGluZzogNnB4Ow0KICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207DQp9DQoNCi50YWJiYXItYnV0dG9uOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kOiAjRjVGNUY1ICNGMUYxRjEgdmVydGljYWw7DQp9DQoNCi50YWJiYXItYnV0dG9uOmRvd24gew0KfQ0KDQoudGFiYmFyLWJ1dHRvbi1zZWxlY3RlZCB7DQogICAgYm9yZGVyLXJhZGl1czogMHB4Ow0KDQogICAgYm9yZGVyOiAxcHggc29saWQgI0FCQUJBQjsNCiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7DQogICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogd2hpdGU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQp9DQoNCg0KLnRhYmJhci1zY3JvbGwtbGVmdCB7DQogICAgaWNvbjogImhheGV1aS1jb3JlL3N0eWxlcy9kZWZhdWx0L2xlZnRfYXJyb3cucG5nIjsNCiAgICBib3JkZXItcmFkaXVzOiAwOw0KICAgIHBhZGRpbmc6IDVweDsNCn0NCg0KLnRhYmJhci1zY3JvbGwtcmlnaHQgew0KICAgIGljb246ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC9yaWdodF9hcnJvdy5wbmciOw0KICAgIGJvcmRlci1yYWRpdXM6IDA7DQogICAgcGFkZGluZzogNXB4Ow0KfQ0KDQoudGFiYmFyLWJ1dHRvbi1zZWxlY3RlZCAubGFiZWwgew0KfQ0KDQoudGFiYmFyLWJ1dHRvbi1zZWxlY3RlZCAuaWNvbiB7DQp9DQoNCi50YWJiYXItYnV0dG9uIC50YWItY2xvc2UtYnV0dG9uIHsNCiAgICByZXNvdXJjZTogImhheGV1aS1jb3JlL3N0eWxlcy9kZWZhdWx0L3NtYWxsLWNsb3NlLWJ1dHRvbi5wbmciOw0KfQ0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogVEFCQkFSIChCT1RUT00pDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLnRhYmJhcjpib3R0b20gew0KICAgIGhvcml6b250YWwtc3BhY2luZzogNXB4Ow0KICAgIHBhZGRpbmctbGVmdDogNXB4Ow0KICAgIHBhZGRpbmctcmlnaHQ6IDVweDsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgd2lkdGg6IGF1dG87DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMHB4Ow0KICAgIGJvcmRlci10b3Atd2lkdGg6IDFweDsNCiAgICBib3JkZXItdG9wLWNvbG9yOiAjQUJBQkFCOw0KICAgIGNsaXA6IHRydWU7DQp9DQoNCi50YWJiYXI6Ym90dG9tIC50YWJiYXItY29udGVudHMgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAwcHg7DQogICAgYm9yZGVyLXRvcC13aWR0aDogMXB4Ow0KICAgIGJvcmRlci10b3AtY29sb3I6ICNBQkFCQUI7DQp9DQoNCi50YWJiYXItYnV0dG9uOmJvdHRvbSB7DQogICAgdmVydGljYWwtYWxpZ246IHRvcDsNCn0NCg0KLnRhYmJhci1idXR0b24tc2VsZWN0ZWQ6Ym90dG9tIHsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQoNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjQUJBQkFCOw0KICAgIGJvcmRlci10b3Atd2lkdGg6IDFweDsNCiAgICBib3JkZXItdG9wLWNvbG9yOiB3aGl0ZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogVEFCVklFVw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi50YWJ2aWV3IHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0KDQoudGFidmlldyA+IC50YWJ2aWV3LXRhYnMgew0KICAgIG1hcmdpbi10b3A6IDFweDsNCn0NCg0KLnRhYnZpZXc6Ym90dG9tID4gLnRhYnZpZXctdGFicyB7DQogICAgbWFyZ2luLXRvcDogLTFweDsNCn0NCg0KLnRhYnZpZXcgPiAudGFidmlldy1jb250ZW50IHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjQUJBQkFCOw0KICAgIHBhZGRpbmc6IDVweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsNCn0NCg"},{ name : "css/tabs.css", data : "LnRhYmJhciB7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDsNCiAgICBib3JkZXItYm90dG9tLWNvbG9yOiAjNDg0ODQ4Ow0KfQ0KDQoudGFiYmFyIC50YWJiYXItY29udGVudHMgew0KICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDsNCiAgICBib3JkZXItYm90dG9tLWNvbG9yOiAjNDg0ODQ4Ow0KfQ0KDQoudGFiYmFyLWJ1dHRvbiB7DQogICAgYm9yZGVyLXJhZGl1czogMHB4Ow0KICAgIGJhY2tncm91bmQ6ICMzMDMwMzA7DQogICAgcGFkZGluZzogNnB4Ow0KICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207DQogICAgYm9yZGVyLWNvbG9yOiAjNDg0ODQ4Ow0KICAgIGNvbG9yOiAjYTBhMGEwOw0KICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDNweDsNCiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogM3B4Ow0KfQ0KDQoudGFiYmFyLWJ1dHRvbjpob3ZlciB7DQogICAgYmFja2dyb3VuZDogIzM1MzUzNTsNCiAgICBjb2xvcjogI2JiYmJiYjsNCn0NCg0KLnRhYmJhci1idXR0b24tc2VsZWN0ZWQgew0KICAgIGJvcmRlci1yYWRpdXM6IDBweDsNCg0KICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDsNCiAgICBib3JkZXItYm90dG9tLWNvbG9yOiAjM2EzYTNhOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICMzYTNhM2E7DQogICAgY29sb3I6ICNjY2NjY2M7DQogICAgDQogICAgYm9yZGVyLXRvcC1jb2xvcjogIzY2OTdFNjsNCiAgICBib3JkZXItdG9wLXdpZHRoOiAycHg7DQp9DQoNCi50YWJ2aWV3LWNvbnRlbnQgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICMzYTNhM2E7DQogICAgYm9yZGVyOiAxcHggc29saWQgIzQ4NDg0ODsNCiAgICANCiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwcHg7DQogICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDBweDsNCiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAzcHg7DQogICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDNweDsNCn0NCg0KLnRhYmJhci1idXR0b24gLnRhYi1jbG9zZS1idXR0b24gew0KICAgIHJlc291cmNlOiAiaWNvbnMvY2xvc2UucG5nIjsNCn0NCg"},{ name : "icons/audio-file.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABRElEQVQ4jZ2SPU8CQRCGnzkOvAQbTMRoZbSjtjJqoomWhj9gYgWCib/A32B5Cg2d0UZttUD0R/jR+NEQiTEWIorhdiwISODgiJNsspPZeWb3fVcANguPTuTbOQZdAITeuA1paGM/O/HQXbAAwl+RNdB1YAyIda13kLgnXinjVmZ8AZZF1GdqK95sE1oEqp54pVSuMtsDCAp3O/5iG3sFqGK8y07IUIAWxMJbBaljvGLGfY4B2EP0jqfdcgpAFQRzqCK7xgovAyfDAKZVyP2lLZN0JPAJquwZZc4oS8C935nBGqgc1Uetu+be938Ea+B8aEIsrvvV+99AyDc8noIG+AIELea3ptKFncnXfwEUcdowITEI0E+D+dRB+RTlBtEsGgAwhk/p1lhJAskBzdU2wGnUzuuR6BlNv33t6kQLXEV+ahcAv2a1aNr9IhpqAAAAAElFTkSuQmCC"},{ name : "icons/puzzle.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABQElEQVQ4jb2RO0sDURCFv9ksYqcQ0IRUFqnsBFEwWFhZCYLWNsYQfICvxiqFbRAsNsEU9oKCPyH4wEptbAQrdRcUUbHcZMcixGyy2bCVp5rLzPnumXuFEGWt1zlB9hSuKvnkDiLabc4IA4iIhTAhwtZyycmEzjWLxZOHvvjH4GhNxQAwhEugvwFju+5RBTDFeC7nE28BQK5knynMh93k07frSvp4I/netoLCWAQzwIAZ89LNQ+gbRFULoBwBd5FMIjO5sj2NqkhnM2s5hyK6HjFAMbiCaDWiGUGnzOahUFDTSbyMqMcugVwB/QCfqsb+H8AZti9UY5MRzKins5XV1DW0faMkO+LdKCwAB71gpq+u+RteXZcqa6lH4HSlZGeA8VbXcLsApAi6CcQUnK+h1JOPdw7EG0m5FTNx33PHf9Uv81hdigzgWesAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/dropdowns.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogRFJPUERPV05TDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmRyb3Bkb3duIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvdXBfZG93bl9hcnJvd3MucG5nIjsNCiAgICBpY29uLXBvc2l0aW9uOiBmYXItcmlnaHQ7DQogICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICBwYWRkaW5nOiA1cHg7DQp9DQoNCi5kcm9wZG93bi1wb3B1cCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogICAgYm9yZGVyOiAxcHggc29saWQgI0FCQUJBQjsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogTU9CSUxFIFZBUklBTlRTDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmRyb3Bkb3duOm1vYmlsZSB7DQogICAgbW9kZTogbW9iaWxlOw0KfQ0KDQouZHJvcGRvd24tcG9wdXA6bW9iaWxlIHsNCiAgICB3aWR0aDogNzUlOw0KfQ0K"},{ name : "haxeui-core/styles/default/small-close-button.png", data : ""},{ name : "css/menus.css", data : "Lm1lbnViYXIgew0KCWJvcmRlci1ib3R0b20td2lkdGg6IDFweDsNCn0NCg0KLm1lbnViYXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICMzYTNhM2E7DQogICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogIzQ4NDg0ODsNCn0NCg0KLm1lbnViYXItYnV0dG9uIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2EzYTNhOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBjb2xvcjogI2NjY2NjYzsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KfQ0KDQoubWVudWJhci1idXR0b246aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICMzYTNhM2E7DQogICAgY29sb3I6ICNjY2NjY2M7DQp9DQoNCi5tZW51YmFyLWJ1dHRvbjpkb3duIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2EzYTNhOw0KICAgIGNvbG9yOiAjY2NjY2NjOw0KfQ0KICAgIA0KLm1lbnUgew0KICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICM0ODQ4NDg7DQoJcGFkZGluZzogMXB4Ow0KCWJvcmRlcjogMXB4IHNvbGlkICM1NTU1NTU7DQoJd2lkdGg6IDIwMHB4Ow0KICAgIA0KICAgIGJhY2tncm91bmQ6ICM1NTU1NTU7DQogICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDNweDsNCiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAzcHg7DQogICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDNweDsNCn0NCg0KLm1lbnUtc2VwYXJhdG9yIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDg0ODQ4Ow0KfQ0KDQoubWVudS1pdGVtIHsNCiAgICBjb2xvcjogI2NjY2NjYzsNCiAgICBiYWNrZ3JvdW5kOiAjNTU1NTU1Ow0KICAgIGJvcmRlci1yYWRpdXM6IDNweDsNCiAgICBwYWRkaW5nOiA4cHg7DQp9DQoNCi5tZW51LWl0ZW06aG92ZXIgew0KICAgIGJhY2tncm91bmQ6ICMzNTM1MzU7DQogICAgY29sb3I6ICNiYmJiYmI7DQp9DQoNCi5tZW51LWl0ZW0gLmxhYmVsLCAubWVudS1pdGVtIC5sYWJlbCB7DQogICAgY29sb3I6ICNjY2NjY2M7DQp9DQoNCg0KLm1lbnViYXItYnV0dG9uIHsNCiAgICBjb2xvcjogI2NjY2NjYzsNCn0NCg0KLm1lbnViYXItYnV0dG9uOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kOiAjNTU1NTU1Ow0KICAgIGNvbG9yOiAjY2ZjZmNmOw0KfQ0KDQoNCi5tZW51YmFyLWJ1dHRvbjpkb3duIHsNCiAgICBiYWNrZ3JvdW5kOiAjNTU1NTU1Ow0KICAgIGNvbG9yOiAjY2ZjZmNmOw0KfQ0K"},{ name : "templates/shaders/Empty.frag.glsl.template", data : "I3ZlcnNpb24gNDUwDQoNCnZvaWQgbWFpbigpIHsNCn0NCg"},{ name : "icons/folder.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAApElEQVQ4jWNgoBAwJsy/z8H+k831/z8mDmQJZgams9OzxO8RNCBt+vONDAz//bDI/WBkZAyemSG5jYABz94yMDAI4ZD/ycDAcBibxH8Ghl///zN0sDAwMDDisYCdgYHBBavNEKzChM95BAEjgyhlBjAwMIwaQCUD/lOg/z8TAyPDIXJ1MzIwHGRh//U14gcrryvj//+cJFnNyPid/ffn3eRaDgcAqHcmk2H3j5EAAAAASUVORK5CYII"},{ name : "icons/picture.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABD0lEQVQ4jb2PLU/DYBRGz31b2o4PgWNLkPwIEoKbBAQCDAlqY0j+B0EOhgCLQ2GmCCiCAIshITCBGGIZbWn6XgQZ6RI26JbwuJubc+59YMzI9slj4MdeWa0JcoHGRrH/0XS9KDhTdBXRXJdVBS/2zw3oUi6yz8KyAWRkAYgZAwbgfwQKNwh3fxWEwH1mfnEwKwhrQPtXgSK7U2G6CNwCCYbNw9rca6NaehKRra+HBgvqx7Xi6cHefIhhXZFKo1q67i2PdooXorqfBaRSb7WBWSA0pAui9v2nrr2kzmSATR6AaeDNzbxUsDjPiDOMB5v0NTYKV8OJwRG4dIOkuxFNzJRFtZAHVpHQTzrNUY9/5xNs/1MVc0PExQAAAABJRU5ErkJggg"},{ name : "icons/save-all.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABfUlEQVQ4jY2Sv2tTURTHP+e+J9UkIHRpCBUqtOJU2qF/QHYHh7qJDRheCXTqJJ0yOgiO+VVowU1Kp07+AdlKpzo4ufje1EqENAh557gk8SW5qX7hwj3nfPlwzrlX6nULk2JSVWQNj5yaqupp52D1m68eJsWkakZDMF8dE4bOua+AH6DImmC/27XSQy/hHwqzwavPFizfxhXFbfjMYhbnB2nn4+GTgRewfBtXzOR40TgA/VzwMmrFL9r7pTsAly2ayVPARNJn7VpJxmeQdwVstAOjjHERteLcHGDMCdKlJJv49KbYR+j9dVBG+TA3wkhu6NKrqBF/z+QeAztZk2DbAKGYGaAzTawD6/4tTCu0VE+cc9cL6oZwZsqNCK+Bwhxg9MO8n0SM961a6Qhgv/nj3Ey+zHp8S5xIxXXH97tc0PV57gWA7tXrFgI86utbn2PmFewXyCQS2I1Xkp2oGf/E2Jr2Sm8OENiwo/JgE3g+zQXgchIKN5rqu/u7/0/9Ae3Ai1C2Yp4jAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/up_arrow_white.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAYAAABCxiV9AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3wkMBhUMUvQPHgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAK0lEQVQI12N8K6PCAANCj2//fyerygjjMyFLINNwSWQBZD7j////USSQAQAKMRRsCchObQAAAABJRU5ErkJggg"},{ name : "icons/refresh.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABL0lEQVQ4jc2SvUvDUBTFz315oql0caqtH5M4CwpOoohjZx0cNW2CCoqI/4GDQkEhadOCi4POXYU6CiI46yJCoosglNZq2lwHTXSIEAfRM917ub9zD48H/LUoKHTTGZXt5u3B2siLZjlbAG1/w9z5LPIVI3UeGixbzgKBjgA6631uZ+vJrpTi+XPRJ3meifrsfHoMAOQnDAXg2YYqq8m6ly1sDNpRfM50PACFoBcCtPkOB+KZZkKZiPsGsqSnxwFAs9wnYl4vGZnDuDAAiJ8s/08DGXcxV3SnmFHjj6Oa5TIBl7ETJJqdC4BqX0YdH7wX/kTNcq8I/AimkygDAeW0p/V631BlFeBpBi+W9cxxaLBkPkwK8osAhiIjMO3YRv/u6v5Nd0uow+WVgeu46X9Xb1xOYkEo/K3kAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/dialogs/information-small.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyNJREFUeNpMlF9sS1Ecx7+997Zdd2uKamdLO7ZERxkPiz9BlhoSS7ZhFiKKxBMRkeCJePJG4kWIF4kH68MmnQgSIYIgYwkjYVrNNP5tlW7dbau9dXvr9zsTnOTbc+455/M95/x+59TS3d0Ni8UCSZJETZpPWgLAS6rBTNFIE5VK5T3pBwmmaYJrBf+KnbSqoaFhXW9v757GxsblhmGIAUVRkEgk3vb39/clk8mn1PWCpPOY3NzczKsyvKWzs3NvOBw+PvwB3ujDDK7e0nDrSQ7xZB6KTfXu2dm2iXYqx2IxhpOkshwIBHgr67u6uvaGQqF9py9PYPRbNapmLUBtrRdutxtFU8UrYh69TGP/9sAKWZYNMvnBJlK5XPb6/f4N7e0bw6cuTUCu9sLlcmFs7DvOHVJx/rCKZHJc9JlWN85cSaOtrS1cX1+/gVk2CPb07Nh9+3EKxcosCg4wPp5GsVj8Gxxup1KTYkzTHbg/NIWOjq27mVXop87n8wX7HnyF0+kRMBfqR2BrlGpTBJG/udTVeTASL2PNtgVBZtnAlc3m8G7MwMJGE7peQmY6h/zPPCJn/SK1u059gUW2CYNcvkRzKygUimzqUihVfAwYRhlajrY6+RO0KCySXcAOhwOSXEUGMxk3KgrNFTCYZYOsTIOLfRTSTImSXg2ZJpqGLmCn0wnJSiaKXRiYMMRcQGKDLK/+LR7/OLqsyY6sloFDnQ3ZRpAyA6uqKtrcxyr/KiC4yEZZ+jTKLBu8iUQi0c2r3ZjnyMEoTsNqp8nWKgHzMbgtWwnWs6h3FRBqnYObN6NRZmWPx5Obmpq00qkdxw6Glt5/EsN4KkMnmYvrDxVcu2fQVkvQUnHUqmlcOBHE4ODAjaGhZ1G6gK/ZgB/G15GRVxLlWTp9tKt5dpWOfHoMb1+/xPTEKFb6i+gJzceJA0sRiVwbHBjoi9KVvssxtbS0tIiXpWmaQ9f1LU1Ni9uPHDnZ0dq6tum/h4bh4eeJixfP3UkkYg/sdvu9mpqagnjB/xkgn8+jVCr56Hs1MQtJ8/7wfLs+ETBks9k+c2zIQPwF/BZgAGlYhQuEH1lJAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/haxeui.png", data : ""},{ name : "haxeui-core/styles/default/down_arrow_square.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAIAAABLMMCEAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAMUlEQVQImWN8K6PCgAGYMIUYGBhYkk10sKide+YKmtDcM1eYIBSyEMJcCAcuzYjVDQAFcxCadfC9sQAAAABJRU5ErkJggg"},{ name : "templates/sources/Enum.template", data : "cGFja2FnZSAkcGFja2FnZTsNCg0KZW51bSAkbmFtZSB7DQogICAgDQp9"},{ name : "haxeui-core/styles/default/main.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogR0VORVJBTA0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5jb21wb25lbnQgew0KfQ0KDQouY3VzdG9tLWNvbXBvbmVudCB7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0KDQoubW9kYWwtYmFja2dyb3VuZCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogICAgb3BhY2l0eTogMC43NTsNCn0NCg0KLm1vZGFsLWNvbXBvbmVudCB7DQogICAgZmlsdGVyOiBibHVyKDEpOw0KfQ0KDQoucG9wdXAgew0KICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMiwgNDUsICMwMDAwMDAsIDAuMTUsIDYsIDEsIDMwLCAzNSwgZmFsc2UpOw0KfQ0KDQpAa2V5ZnJhbWVzIGFuaW1hdGlvbkZhZGVJbiB7DQogICAgMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgb3BhY2l0eTogMTsNCiAgICB9DQp9DQoNCi5mYWRlLWluIHsNCiAgICBhbmltYXRpb246IGFuaW1hdGlvbkZhZGVJbiAwLjFzIGxpbmVhciAwcyAxOw0KfQ0KDQouZmFkZS1vdXQgew0KICAgIGFuaW1hdGlvbjogYW5pbWF0aW9uRmFkZUluIDAuMXMgbGluZWFyIDBzIDEgcmV2ZXJzZTsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogQ09OVEFJTkVSUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5ib3gsIC52Ym94LCAuaGJveCwgLmFic29sdXRlLCAuY29udGludW91c2hib3gsIC5oZ3JpZCwgLnZncmlkLCAuZ3JpZCB7DQogICAgc3BhY2luZzogNXB4IDVweDsNCn0NCg0KLmJveCwgLnZib3gsIC5oYm94LCAuY29udGludW91c2hib3gsIC5oZ3JpZCwgLnZncmlkLCAuZ3JpZCB7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBMQUJFTA0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5sYWJlbCB7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBJTUFHRQ0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5pbWFnZSB7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0K"},{ name : "haxeui-core/styles/default/right_arrow.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAYAAAAvZezQAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3wcMBQExmUSUYgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAALUlEQVQI122MwQkAMBDCck7oqG7Yvg6kNC8NKLYPhQBaasPK+U6WJKMuvIcAF0CaDdeJj/KWAAAAAElFTkSuQmCC"},{ name : "img/parrot_small.png", data : ""},{ name : "styles/native/main.css", data : "LmJ1dHRvbiB7DQp9DQoNCi50YWJiYXItYnV0dG9uLCAubWVudWJhci1idXR0b24sIC50YWJiYXIgLmJ1dHRvbiB7DQogICAgbmF0aXZlOiBmYWxzZTsNCn0NCg0KLnN3aXRjaCAuYnV0dG9uIHsNCiAgICBuYXRpdmU6IGZhbHNlOw0KfQ0KDQoudGFiYmFyLWJ1dHRvbiB7DQogICAgYm9yZGVyLXJhZGl1czogMHB4Ow0KICAgIGJhY2tncm91bmQ6ICNFREVERUQgI0U2RTZFNjsNCiAgICBwYWRkaW5nOiA2cHg7DQogICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjQUJBQkFCOw0KfQ0KDQoudGFiYmFyLWJ1dHRvbjpkb3duIHsNCn0NCg0KLnRhYmJhci1idXR0b24tc2VsZWN0ZWQsIC50YWJiYXItYnV0dG9uLXNlbGVjdGVkOmhvdmVyLCAudGFiYmFyLWJ1dHRvbi1zZWxlY3RlZDpkb3duIHsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQoNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjQUJBQkFCOw0KICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDsNCiAgICBib3JkZXItYm90dG9tLWNvbG9yOiB3aGl0ZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsNCn0NCg0KLnRhYmxldmlldyAuaGVhZGVyIHsNCiAgICBtYXJnaW4tdG9wOiAwcHg7DQogICAgbWFyZ2luLWxlZnQ6IDBweDsNCn0"},{ name : "haxeui-core/styles/default/dialogs/question.png", data : "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA61pVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wUmlnaHRzPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvcmlnaHRzLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcFJpZ2h0czpNYXJrZWQ9IkZhbHNlIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InV1aWQ6NzBDQkJENjFFODMxREYxMTlCMjJGQkJBMDE3QTBERTkiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6RTkxRDlCRjg4NDM0MTFFMDk1NDQ5NjM2NUYzMUQ5NjMiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6RTkxRDlCRjc4NDM0MTFFMDk1NDQ5NjM2NUYzMUQ5NjMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6QTI1NDYxQUQyRjg0RTAxMTg1RkJBOTI1NDUxRDI5NkIiIHN0UmVmOmRvY3VtZW50SUQ9InV1aWQ6NzBDQkJENjFFODMxREYxMTlCMjJGQkJBMDE3QTBERTkiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6KMnz6AAAI6klEQVR42sRXa2wU1xX+Zmcfsy977fWu3zZP462xiV3TGCgutsEqTaAQhEosCk1VRaqiqqoa9V9/VG1VtWnzp1KrVkFNlERuinikcqHENbIMxCblEdtgMIJSr9exvX7ta3Z2d3Z2eu54d1mwQUr/ZKRvZ3bu4/vOueece4dTVRVf5KVnPwcOHMi+4DhOg06ny/5P3wW6VRCqCEUEa2Y8XUmCSJgneAk+MizGGjIGplIp7TnX4LNnz2YneNZlI2wRBMFTX1/v2UJXZWXlGovFUqTX620aezIZEUVxfnJy8r8jIyPDo6OjdyRJukNNw4TIsybnmKKneICZXm+321va29t3trS0dBiNxlIiw9OWjY3jeR6JRGJ6aGio7+LFi5cikcgQNY2SB9TP4wETdWz1eDytXV1d3ybrqxmxd1rCyIMk7k4o8C+lEBKXJ8uzcnAX6FBbzaNhvR7FhbrSHTt2HG1qatrZ3d397t27d4up2wAhvmoMPElO2NPZ2bl/9+7dXbIsW32zEv7xsYw7ExzyC/JRVORATakAQTBqAyQpjkhEwuB4CBeuBuGpVvHCdgOJ0lcfP378R319fcW9vb1s3t4nRTwpgLn9a4y8o6PjGK2j6epYEj0fp1DocuO5Jje5VyGyOLzeRcRicS24TCYD7HYryspcqKoqxtTUHN78YB77tvNoqeOt7e1txxRFAQlJpEWojwlgk6TXsKG2tra1ra2tSxQjpr7rKfTd4FC3eSPY0vl8S4iEw2j2GNDW6cD6KhdsZj2m/DFcux3C2f4pGM15KCjIg8Nhw6mBCQRFBXuaU6a2tl1dXu+Ef3z83iwt73BGgC4nRexWq3X7kSNHjkajonXwloze6xSFDRsRDEpk1RK5OobO5434yXeqsXVzPgrzDDAaOKwtN+NwZzF+9YNKiOFFzMwEEApJWL++Ch99ooLNRYFpPXTo0FHKnu2MK2O0LqOEXjaS5TspkKun52XN7bW1a+D3h7CwEGITgOIBl26EoKRWz4KqUjMO7sqjpYkhEIho48orSvDh5aQWtAaDoZqCcyfjetIDFOhCXXNzc1s0GsX5IQX5hUWIRhM0SVAjzmA+qOLkBR9OfjSF7/9iFK/+bBTTc7GsiOY6B9gcLGtCIZHEJGAU7Dg3mNTGNzU1tplMpjrGmRVAiqrq6uo8qZRSMrOgYIyi3enMx/T0wmPkDCyPT5z1E+YwMaPCN6fi3MD0o6pl0Wv9mAAWeIFAGFargFsPU5gLgNWJkpqaGg/jzA3CdSSgnim/9ZAmsds0F8bjiVVdzcp0IiFTexzxWBRuuwrKdS2Wbo6LFAOz5G49qFIyt5MYGZxOT3Mr2FEno6ZmY/2NGzfW0VT39GkPuEtLS6qZ4nEvp6XU0lI4mx2Zi7UzkRExmhan4rv7CkGZp1nNCC9/GiGBPM3JabGiJpJkTAg2m4XqSJIEAG53cTXjzPWAzWQSnJR6FCwqyvN4mlDJEieJOBwWIUalrCgdWdT5vBnf+KpD8wgjH5+IY+Am7UnUBraZcQxMCONQMTOv0F8eZrPgZJy5AoxUA6ws10ORFCrJgszuFRHjCJPFbAJwelCTdhVYFRx7wZklnw+m8Ot3/ERsyu4n0KAjP3FIEYKRJL0yMA9ZGWeuALYpcWxQSk3RmimQCYFQTPMEG8TzuYuhor3ZBMHEa+RsA/rtu9OIxI0kkNPKKUd7mY5Lb+ccWz5OM0rjID6GXAFJWsMIx+nyrIJKXpAQiqagqDx5k18RhCqJLHY+Ivf5k7j/mQ683ojl4wO3fNew7AlZUWG3cFpFleVkhHHmChAjEXFREMx5bocOc+E4eIOJvKGsmgVqStHigpEzETMLMepvpP+mdEnHE3eyWkmguFivCRDF6CLjzBXg93q9k5s2edZ41hoxcU2E2eYkAfJTDxJ//nAKfzw1vxyQvAE2R/kjxrTxmQf2Wo6GsXmdoC0DHVwmGWduJfzP8PDwHQNZ0VhjRlwKgj3rjQItgWlVWAsq4aBq6XI5YXWUQWd4vC+XeeYp1ijyoUTRuMlMYnQYGxu7wzhzBTykk9Q9quH+EqceTTUmhIMLtN8LtK6mFWB5vqMmhA9+WYnTv1mP175JWZOMr+ynQYAcC2GrxwJXPsfc7x8bu32PceYKkKjAjFy6NHCF5ffh3UVISX5aaxlG40oRciyM771UCotg0OLgYEcZygvjq4pVKdYMygK+1emiTFBx5crlK5IUHWGcuXsBw9Xe3gtDgUDA5y4wUI674J8cI/elaCkovfSPwJO7pXhKI+fT+ZlUdI/1YWDZEpwZwyv7S1Fo57C4uOjr7//XEOPKnA11mRJLCIXDof4TJ/50hp6ju75ciJf3FMA3Pgg5LlG0syhfhiW/DL+jvJ8PyJBiCt58z4tQqiLbziDHo5h5MISje4vQ2phPpVuOvv32W2fC4XA/42Kc2VNxQ0NDNmbJNQf37t13uKvrlZcEwWTsHfLj9933YczfgKLyWhJiSp/zk4gGPqO7TEFYTu4Wlj1BsTA/dRdy8D5+eLQGHV9x0f4hJd5//y+nL1zoOUmV80zmSEZH+BVnQpUK0vnTp/9mpWLBHz/+6oud28rMWzY58Yfu2+j/5DZFfxUK3WspTQtgc1ZrgxIxEZHgFBb9DyEuedHWXITXftwCl8PINi/pnXfe6unpOX2OasZ5OguoK74LcjygbbGUDWbaz/c3NDR2vP76T1+sqKgq1VNF9M1GcfHqJC5fn8IDbxBzi1FtjKvQQudDB3Y2l6O9pQLlLotWzn0+7/Qbb/y8Z3T0Zh+R/52ySiIBWS7mgacJYGDLscNms3/94MEjzYcOvdzsdpc4WVHheZ2G5W+X5Z2OFZhkcvnDw++fWTh1qvvamTN/vRaJhP9Jbr9C5CpL688jIBOcDsIus9myddu21g2trR0b6uufK3a5ih10iDWzMfRZJs3NzQZGRz+dHRjouz84OHCfUu3flCH9hADLFEb+/wrIHMXYFrqJ7l+iblR3kZ/+iEH6YyNImKK6P0YWj9NdZKehTKo+U8AXef1PgAEA4gDzbt3jjkkAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/menus.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogTUVOVUJBUg0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5tZW51YmFyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUVFRUVFOw0KICAgIHBhZGRpbmc6IDVweDsNCiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7DQogICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI0FCQUJBQjsNCiAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDIsIDQ1LCAjMDAwMDAwLCAwLjE1LCA2LCAxLCAzMCwgMzUsIGZhbHNlKTsNCn0NCg0KLm1lbnViYXItYnV0dG9uIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUVFRUVFOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBjb2xvcjogIzY2NjY2NjsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KfQ0KDQoubWVudWJhci1idXR0b246aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNDQ0NDQ0M7DQogICAgY29sb3I6ICM0NDQ0NDQ7DQp9DQoNCi5tZW51YmFyLWJ1dHRvbjpkb3duIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQUJBQkFCOw0KICAgIGNvbG9yOiAjRUVFRUVFOw0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBNRU5VDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLm1lbnUgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNFRUVFRUU7DQogICAgcGFkZGluZzogMXB4Ow0KICAgIGJvcmRlcjogMXB4IHNvbGlkICNBQkFCQUI7DQogICAgZmlsdGVyOiBkcm9wLXNoYWRvdygyLCA0NSwgIzAwMDAwMCwgMC4xNSwgNiwgMSwgMzAsIDM1LCBmYWxzZSk7DQogICAgc3BhY2luZzogMDsNCiAgICB3aWR0aDogMjAwcHg7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIE1FTlVJVEVNUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5tZW51aXRlbSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0VFRUVFRTsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBwYWRkaW5nOiA1cHg7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQoubWVudWl0ZW0tbGFiZWwsIC5tZW51aXRlbS1jaGVja2JveCwgLm1lbnVpdGVtLW9wdGlvbmJveCwgLm1lbnVpdGVtLXNob3J0Y3V0LWxhYmVsIHsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KfQ0KDQoubWVudWl0ZW0tc2hvcnRjdXQtbGFiZWwgew0KICAgIHRleHQtYWxpZ246IHJpZ2h0Ow0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQogICAgaG9yaXpvbnRhbC1hbGlnbjogcmlnaHQ7DQp9DQoNCi5tZW51aXRlbS1pY29uIHsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KfQ0KDQoubWVudWl0ZW06aG92ZXIsIC5tZW51aXRlbTpzZWxlY3RlZCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0NDQ0NDQzsNCn0NCg0KLm1lbnVpdGVtIC5sYWJlbDpob3ZlciwgLm1lbnVpdGVtIC5sYWJlbDpzZWxlY3RlZCB7DQogICAgY29sb3I6ICMyMjIyMjI7DQp9DQoNCi5tZW51aXRlbS1leHBhbmRhYmxlIHsNCiAgICByZXNvdXJjZTogImhheGV1aS1jb3JlL3N0eWxlcy9kZWZhdWx0L3JpZ2h0X2Fycm93LnBuZyI7DQogICAgdmVydGljYWwtYWxpZ246ICJjZW50ZXIiOw0KfQ0KDQoubWVudXNlcGFyYXRvciB7DQogICAgaGVpZ2h0OiAxcHg7DQogICAgd2lkdGg6IDEwMCU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0FCQUJBQjsNCiAgICBob3Jpem9udGFsLWFsaWduOiAiY2VudGVyIjsNCn0NCg"},{ name : "icons/example.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABrklEQVQ4jZWRz0tUURTHP+fcN9IqSNLQRUMR0c5Fm9BFEA20D2pRYD9olEckLeq/CEKw54BgBO0iaFGE2CYkkJitVDvJGQMFo0XYPN85bUadNz61DtzVuZ/P/d5zhP+ouzPfe0MangIjCJ+yKJuI/gWs1prngHVS5oEhAJzT2gomh8HjyY9+w1ZA1sAHc03nmx4mMDUDWd4DAwgfDxRUa83jGPPgv8T9DpDustRbm38eRfemGsOi8gw4uZuMJbPsFsYrIAueXk7i8sbYdEPdZQZYUU8rzx+e+qlteAg41j6rZDIWNOTg25Orfe4yAXwFTpj2DABEQOfffrvZDQn6shsulfyDQEs9vbi51RPNPhhY2xZ0DmVOJFRwPxpIzxfAlSQub3QieYGzCH4B9XfJeDccriXxYA4G6NzCFzd7j3AFF61ON2ulktcFWpbJ6JZkL4o2tZNAoC5BL7kTATdxeeviT8xYUPXX7QHvqZ0EDlcz47MLj1EdAZYEKiosIJwtgrtncESFOUzeIH4f/Ay+H5YXNIG+bQni1wtvCo1CgZvHEmQKp7zvM8KyYHFR6y+qn7t8IgYxWwAAAABJRU5ErkJggg"},{ name : "templates/sources/Class.template", data : "cGFja2FnZSAkcGFja2FnZTsNCg0KY2xhc3MgJG5hbWUgew0KICAgIHB1YmxpYyBmdW5jdGlvbiBuZXcoKSB7DQogICAgfQ0KfQ"},{ name : "haxeui-core/styles/default/check.png", data : "iVBORw0KGgoAAAANSUhEUgAAAA4AAAAKCAYAAACE2W/HAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3woKFDgxV99L8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAACRUlEQVQoFQE6AsX9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADVm1gAAAAAAAAAAADclUeEl663/3O89DEAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANmdWGy42gCTvNLv/iVchwJXRSwpAgAAAAAAAAAAAAAAAAAAAAAAAAAAfLvqANWbWAAAAAAA1pxYXcPgAJO72///CAgLAu/b5QAbEAK3BAAAAAD347ZXcGST+gRMZgUfTVC9diAB7YQAAADfoFhcwt8Aoq7U//8KAf4AFSI+AExgQcscBgQ2Avv4z4TJtc6o9wkHrvbi1Knu0NqaAAAAAOynWGW/3QCjqtL//wsB/gAXIzkBQ2JexkkfCzwAAAAABAH+/gD79O4A5v0C/xPdzADsAwRSV2NunKfR6mO82wAACwT/AREZMwA9WlvKQSoRTgEBAfq76v8AAQAAAAD51Jt3rb7ciKO72/8OCAIAAQIDAfv+AQAFAv4ABgonAExwbtlALhQ+FgEB6rvq/wBFFgEABAAAAAAHLGWJ+9KZCvX4/H6zxuH/CggBAAUD/QD9/B0AUnh07z0mDjgTAQHwu+r/AEUWAQAAAAAAAP/VmwAAAAAAAAAAAP/YnJeIfGv/VFVT/1BMbP+04Pb//f//BgAAAAC76v8AAAAAAAAAAAAAAAAAAAAAAAD/1ZsAAAAAAAAAAAD/35yvb2V4/7Tg9v8AAAAAAAAAALvq/wAAAAAAAAAAAAAAAAAAAAAA6MK1OUXq0R0AAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/option.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3wkMBhgPflMg6QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABB0lEQVQY043MQSsEYRyA8ef/zhtK2WTWpkSSjMbWnqQNN5vWkVrOfAcX5exDODOa87ZxW9ritLVNu5SUXJaRVgjNzuuw5TblOf96BMC8+6Pbu/5wYYZW5RYUMfbiBuFV09k/PnidF3nSxhz2X5w2A8Au32C0QkDxXPOMWOnWZbkRVoyZVC/B9NfRSd0G6KFeYvUJdDjzPTvT/rhWreo5b5YmKd1p4NUeXVWvddBaEqGyNPcPbRT/TOXyKaLIJIK4GzE1kUE5K6sMdaNEGKWylPLjgRpx7wZ2tnIhQBTztzbdHwMpCpulsJ0ZXFAie9/L63Mu4BRnkdgAJiadLwmMOUvFrLsm8vkLmFpcqEjhuWQAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/optionboxes.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogT1BUSU9OQk9YDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLm9wdGlvbmJveCB7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KICAgIGhvcml6b250YWwtc3BhY2luZzogNHB4Ow0KICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICBjb2xvcjogIzAwMDAwMDsNCn0NCg0KLm9wdGlvbmJveDpob3ZlciB7DQp9DQoNCi5vcHRpb25ib3g6ZGlzYWJsZWQgew0KICAgIGN1cnNvcjogZGVmYXVsdDsNCiAgICBjb2xvcjogIzkwOTA5MDsNCn0NCg0KLm9wdGlvbmJveC12YWx1ZSB7DQogICAgYm9yZGVyOiAxcHggc29saWQgI0FCQUJBQjsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGOw0KICAgIHdpZHRoOiAxNnB4Ow0KICAgIGhlaWdodDogMTZweDsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KICAgIGJvcmRlci1yYWRpdXM6IDE4cHg7DQogICAgaWNvbjogbm9uZTsNCiAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDEsIDQ1LCAjODg4ODg4LCAwLjIsIDIsIDIsIDEsIDMsIHRydWUpOw0KICAgIHBhZGRpbmctdG9wOiAxcHg7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQoub3B0aW9uYm94LXZhbHVlOmhvdmVyIHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjMjE2QUFFOw0KfQ0KDQoub3B0aW9uYm94LXZhbHVlOnNlbGVjdGVkIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvb3B0aW9uLnBuZyI7DQp9DQoNCi5vcHRpb25ib3gtdmFsdWU6ZGlzYWJsZWQgew0KICAgIGJhY2tncm91bmQ6ICNENEQ0RDQgI0NDQ0NDQyB2ZXJ0aWNhbDsNCiAgICBjdXJzb3I6IGRlZmF1bHQ7DQp9DQoNCi5vcHRpb25ib3gtbGFiZWwgew0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQoub3B0aW9uYm94LWljb24gew0KICAgIGhvcml6b250YWwtYWxpZ246IGNlbnRlcjsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICBvcGFjaXR5OiAxOw0KfQ0KDQoub3B0aW9uYm94LWljb246ZGlzYWJsZWQgew0KICAgIGN1cnNvcjogZGVmYXVsdDsNCiAgICBvcGFjaXR5OiAwLjU7DQp9DQo"},{ name : "icons/document.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABTElEQVQ4jZWTsUoDQRCGv9m7nAEheIJRO1HwKVRQ0FJ8AUGbhCj4BDa+gsVJqnSCFmKrhcanECwUGzWIxCKJJno7VtHk7oznD1vsDPvtP7szArBRuct679kj0DlAiOvaUWf9YGv8NpowAJk3bwV0FRgF/Miqg+RDCauloDadCDCG4YRbu3pxrTMPNEIJq4VybSYG+EvBdv7Jte4S0MCGl72QVIAuxBAug7Sx4UUpuPcB3BRnx4rBQwFAFQR7qCK71mQWgZM0gCkVyj/b7ifp0L9K+E1xB8LrR0dmKzuTz73hzf3HsYynNygjgwFKzvUoFYOHp96wNUyg5P52AEZU9zTSj6KasgSlqeiaIvU+AOoLcor0N13SGziixgcbCRsfUSdNCVlEjyU2U8klGABraSZmB6vx7SD72Tpre8OnKAskj3OfFYErr9M6B/gC0Q9pyqAE7ZoAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/calendars.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogQ0FMRU5EQVINCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouY2FsZW5kYXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7DQogICAgcGFkZGluZzogNXB4Ow0KICAgIGJvcmRlcjogMXB4IHNvbGlkICNBQkFCQUI7DQogICAgYm9yZGVyLXJhZGl1czogMXB4Ow0KfQ0KDQouY2FsZW5kYXIgLmJ1dHRvbiB7DQogICAgcGFkZGluZzogOHB4Ow0KfQ0KDQouY2FsZW5kYXIgLmNhbGVuZGFyLW9mZi1kYXkgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsNCiAgICBjdXJzb3I6IGRlZmF1bHQ7DQp9DQoNCi5jYWxlbmRhciAuY2FsZW5kYXItZGF5IHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2VjZjJmOTsNCn0NCg0KLmNhbGVuZGFyIC5jYWxlbmRhci1kYXk6aG92ZXIgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTdjNGUyOw0KfQ0KDQouY2FsZW5kYXIgLmNhbGVuZGFyLWRheS1zZWxlY3RlZCB7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICNhN2M0ZTI7DQogICAgY29sb3I6IHdoaXRlOw0KfQ0KDQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIENBTEVOREFSVklFVw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5jYWxlbmRhci12aWV3IHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGOw0KICAgIHBhZGRpbmc6IDVweDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjQUJBQkFCOw0KICAgIGJvcmRlci1yYWRpdXM6IDFweDsNCn0NCg0KLmNhbGVuZGFyLXZpZXcgLmNhbGVuZGFyIHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgcGFkZGluZzogMHB4Ow0KfQ0KDQouY2FsZW5kYXItdmlldyAuaGJveCB7DQoJc3BhY2luZzogMDsNCn0NCg0KLmNhbGVuZGFyLXZpZXcgI3ByZXYtbW9udGggew0KICAgIGljb246ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC9sZWZ0X2Fycm93LnBuZyI7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQp9DQoNCi5jYWxlbmRhci12aWV3ICNuZXh0LW1vbnRoIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvcmlnaHRfYXJyb3cucG5nIjsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsNCn0NCg0KLmNhbGVuZGFyLXZpZXcgI2N1cnJlbnQtbW9udGggew0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQp9DQoNCi5jYWxlbmRhci12aWV3ICNjdXJyZW50LXllYXIgew0KICAgIHRleHQtYWxpZ246IHJpZ2h0Ow0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQoJYm9yZGVyOiBub25lOw0KCXBhZGRpbmctdG9wOiAxcHg7DQoJYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQp9DQouY2FsZW5kYXItdmlldyAjY3VycmVudC15ZWFyIC5idXR0b24gew0KCWJhY2tncm91bmQtY29sb3I6IHdoaXRlOw0KCWJvcmRlcjogbm9uZTsNCn0NCg"},{ name : "icons/plus.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABYElEQVQ4jZWSPS9DYRTHf+fpDTGR6FLx0sRuMkhITPUZ6EzpG4nVZu8irepNrPgK2AziIxgMJdpOqEQi0vY5Bpe09/ZG+x/POf+Xk3MEH1KVelRUN9SaBKJxAFSqYuy109azUm76pXteesjl+i5wCIz7hT28o3LgZmKlgMB2uVZSJBNC9EGKbjqWBzAA2ye1/OBkAM1tnTQyAJKq1KNYHkJi74sgqhSCIWh2nM68gyUZQgZjbhVAbZ8QTERaJmkETQwePeCQcBQzC9oT2yo3AF9j3AOMfrAIEDGs9q6jc8avKdJ72v/gCPZJkYU/TaVgPImxT5Z+VLnzen67R4NwNYxjN1S4NE5bzxCa/QZE7TJWV0L4b9ZpXwhA6riRRbQ4ZIAdNz1VMQA/vy3DCBy56akKeK8M4KZjeRXJhq3zG9tz3vstBE6WLT5PtkxkHWENiHvlKspVZ6R9fro589o9/w35mHjabpPlxAAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/default/haxeui_tiny.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAB2AAAAdgB+lymcgAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAHfSURBVDiNfZO9bhNBFEa/uTPjdeI4siENjSVEXoECCSQXFNSUlIjecp6CzkmBUlFTQQ1SBA2SCz8AUpoYQ2xlwdn/2Z31zg4FcuJYa3/lzD3nXs3VsPdfL6a2tLomCFJQm1lMS5ijV88efsZKPny76OYWx5zToRfpYHadmokbSvZx+PvnzEs7y0IiBkdQQsRGltl355dhWJe8F6XF0ys/208ycyONQ28iWg2BmXfbqSwt0tw0AHTdUHcv5xnitEBVUqVAzR3Zqrp0Qw030GjUJfZ2RKUgz9MWwWLiSF4JL1MlMcUCAJsQ47bfbshoE7xJkqVJZK3p0+NHB2dOjQ+3wVWSoiiGo9PXZwQAujAnbrAdviOpC3DJTwCAAEApA6XNdnIlSaqhwv/NCABqDvV2HcKeU/3aq3GvY7hejBJFDwDY8Pzv8x+/wk9jN2kCgNIlYl299yUMACZPoyIJXxJKNnAD3VwWbZpkFQYAErUmOA2ICB211nFdsg4DACMOC9uheZT7VeMuJVXwjYRLX/yJsjuHemHgxzpRejGSAgNWMv3gfrOfL8onkcr28+J2W1I6EOOrRM68ZDz3M/hJ3mbAVJvy6PvbF6vf+cub01H34N7uMREdptkiiJU2QWBr/wCzgBMSEX+xcQAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/default/splitters.css", data : "LnNwbGl0dGVyIHsNCiAgICBzcGFjaW5nOiAwOw0KfQ0KDQoudmVydGljYWwtc3BsaXR0ZXItZ3JpcHBlciB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiA2cHg7DQogICAgY3Vyc29yOiByb3ctcmVzaXplOw0KICAgIF9fYmFja2dyb3VuZC1jb2xvcjogI0VFRUVFRTsNCn0NCg0KLnZlcnRpY2FsLXNwbGl0dGVyLWdyaXBwZXI6aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNEREREREQ7DQp9DQoNCi52ZXJ0aWNhbC1zcGxpdHRlci1ncmlwcGVyIC5pbWFnZSB7DQogICAgcmVzb3VyY2U6ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC9zaXplcl9ncmlwcGVyX2hvcml6b250YWwucG5nIjsNCiAgICBob3Jpem9udGFsLWFsaWduOiBjZW50ZXI7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCn0NCg0KLmhvcml6b250YWwtc3BsaXR0ZXItZ3JpcHBlciB7DQogICAgd2lkdGg6IDZweDsNCiAgICBoZWlnaHQ6IDEwMCU7DQogICAgY3Vyc29yOiBjb2wtcmVzaXplOw0KICAgIF9fYmFja2dyb3VuZC1jb2xvcjogI0VFRUVFRTsNCn0NCg0KLmhvcml6b250YWwtc3BsaXR0ZXItZ3JpcHBlcjpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0RERERERDsNCn0NCg0KLmhvcml6b250YWwtc3BsaXR0ZXItZ3JpcHBlciAuaW1hZ2Ugew0KICAgIHJlc291cmNlOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvc2l6ZXJfZ3JpcHBlcl92ZXJ0aWNhbC5wbmciOw0KICAgIGhvcml6b250YWwtYWxpZ246IGNlbnRlcjsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KfQ0K"},{ name : "haxeui-core/styles/default/listview.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogTElTVFZJRVcNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoubGlzdHZpZXcgew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICNBQkFCQUI7DQogICAgYm9yZGVyLXJhZGl1czogMXB4Ow0KICAgIHBhZGRpbmc6IDFweDsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjsNCn0NCg0KLmxpc3R2aWV3IC5saXN0dmlldy1jb250ZW50cyB7DQogICAgc3BhY2luZzogMDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBwYWRkaW5nOiAwcHg7DQp9DQoNCi5saXN0dmlldyAuaXRlbXJlbmRlcmVyIHsNCiAgICBjdXJzb3I6IHBvaW50ZXI7ICAgIA0KfQ0KDQoubGlzdHZpZXcgLml0ZW1yZW5kZXJlciAubGFiZWwgew0KICAgIGNvbG9yOiBibGFjazsNCn0NCg0KLmxpc3R2aWV3IC5ldmVuIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGOw0KfQ0KDQoubGlzdHZpZXcgLmV2ZW46aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNkOWU1ZjI7DQp9DQoNCi5saXN0dmlldyAub2RkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY4Ow0KfQ0KDQoubGlzdHZpZXcgLm9kZDpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2Q5ZTVmMjsNCn0NCg0KLmxpc3R2aWV3IC5pdGVtcmVuZGVyZXIgew0KICAgIGhlaWdodDogYXV0bzsNCiAgICBwYWRkaW5nOiA1cHg7DQp9DQoNCi5saXN0dmlldyAuaXRlbXJlbmRlcmVyOnNlbGVjdGVkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTdjNGUyOw0KICAgIGNvbG9yOiB3aGl0ZTsNCn0NCg0KLmxpc3R2aWV3IC5pdGVtcmVuZGVyZXI6c2VsZWN0ZWQgLmxhYmVsIHsNCiAgICBjb2xvcjogd2hpdGU7DQp9DQo"},{ name : "fonts/Roboto-Black.ttf", data : ""},{ name : "haxeui-core/styles/default/dialogs.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogRElBTE9HUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5kaWFsb2cgew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICNBQkFCQUI7DQogICAgZmlsdGVyOiBkcm9wLXNoYWRvdygxLCA0NSwgIzAwMDAwMCwgMC4yLCAzMCwgMiwgMSwgMywgZmFsc2UpOw0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgaW5pdGlhbC13aWR0aDogMzAwcHg7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogICAgcGFkZGluZzogMXB4Ow0KfQ0KDQouZGlhbG9nLWNvbnRhaW5lciB7DQogICAgc3BhY2luZzogMDsNCn0NCg0KLmRpYWxvZy10aXRsZSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0VFRUVFRTsNCiAgICBwYWRkaW5nOiA1cHg7DQogICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4Ow0KICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICNBQkFCQUI7DQp9DQoNCi5kaWFsb2ctdGl0bGUtbGFiZWwgew0KICAgIHdpZHRoOiAxMDAlOw0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQogICAgY29sb3I6ICM4ODg4ODg7DQogICAgdmVydGljYWwtYWxpZ246ICJjZW50ZXIiOw0KfQ0KDQouZGlhbG9nLWNvbnRlbnQgew0KICAgIHBhZGRpbmc6IDVweDsNCn0NCg0KLmRpYWxvZy1mb290ZXItY29udGFpbmVyIHsNCiAgICBib3JkZXItdG9wLXdpZHRoOiAxcHg7DQogICAgYm9yZGVyLXRvcC1jb2xvcjogI0FCQUJBQjsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUVFRUVFOw0KfQ0KDQouZGlhbG9nLWZvb3RlciB7DQogICAgcGFkZGluZzogNXB4Ow0KICAgIGhvcml6b250YWwtYWxpZ246IHJpZ2h0Ow0KfQ0KDQouZGlhbG9nLWNsb3NlLWJ1dHRvbiB7DQogICAgcmVzb3VyY2U6ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC9zbWFsbC1jbG9zZS1idXR0b24ucG5nIjsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogImNlbnRlciI7DQogICAgY3Vyc29yOiAicG9pbnRlciI7DQp9DQoNCi5kaWFsb2cgI2ljb25JbWFnZS5pbmZvIHsNCiAgICByZXNvdXJjZTogImhheGV1aS1jb3JlL3N0eWxlcy9kZWZhdWx0L2RpYWxvZ3MvaW5mb3JtYXRpb24ucG5nIjsNCn0NCg0KLmRpYWxvZyAjaWNvbkltYWdlLnF1ZXN0aW9uIHsNCiAgICByZXNvdXJjZTogImhheGV1aS1jb3JlL3N0eWxlcy9kZWZhdWx0L2RpYWxvZ3MvcXVlc3Rpb24ucG5nIjsNCn0NCg0KLmRpYWxvZyAjaWNvbkltYWdlLndhcm5pbmcgew0KICAgIHJlc291cmNlOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvZGlhbG9ncy9leGNsYW1hdGlvbi5wbmciOw0KfQ0KDQouZGlhbG9nICNpY29uSW1hZ2UuZXJyb3Igew0KICAgIHJlc291cmNlOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvZGlhbG9ncy9jcm9zcy1jaXJjbGUucG5nIjsNCn0"},{ name : "haxeui-core/styles/default/scrollview.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogU0NST0xMVklFVw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5zY3JvbGx2aWV3IHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjQUJBQkFCOw0KICAgIGJvcmRlci1yYWRpdXM6IDFweDsNCiAgICBwYWRkaW5nOiAxcHg7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0KDQouc2Nyb2xsdmlldyAuc2Nyb2xsdmlldy1jb250ZW50cyB7DQogICAgaGVpZ2h0OiBhdXRvOw0KICAgIHNwYWNpbmc6IDVweDsNCiAgICBwYWRkaW5nOiA1cHg7DQogICAgYm9yZGVyOiBub25lOw0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBNT0JJTEUgVkFSSUFOVFMNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouc2Nyb2xsdmlldzptb2JpbGUgew0KICAgIG1vZGU6IG1vYmlsZTsNCn0NCg"},{ name : "haxeui-core/styles/default/sizer_gripper_horizontal.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAECAIAAAA4WjmaAAAABnRSTlMA7QAcACSX3bo6AAAAJElEQVQImWN8K6PCgBswMTAwTEqOnpQcjZXBhEcrAwMDI37DARkxCkFtOZfXAAAAAElFTkSuQmCC"},{ name : "fonts/LICENSE.txt", data : ""},{ name : "icons/download.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABaUlEQVQ4jcVSv0sCcRT/vLv0CCq5goybGhqCWoPGtiCXCAyspaQuRdqChsBscZSQ0M7qHzCazL2hwcW2cGjWKyqr7bq6ey2eVndGm2/6vs97nx/fL1+g10XdBhsnD0HR+pgGREm0xJtcYvT+XwLRs8dBn2lmGbQKwNeCP0Gsgfr3ClvDb10FwsVbv/wsXwOY8XJj4Op15GX+fHnKdLA+AEilWNDH9EVuItqN3HKbk5/kHQBpBxO2s3dSPaiXmHEBRqhjR6VCXKFCXCEwlToqtK5qjcl2AsM/sEvMCy47gY0fZ24rT8BGTT1ulCVTWhGIOeKRtUxA5Vv0CgjlXw8SevcbaQHAuItvc1WLKRmn12JKhmyuuoyYlgQANTdOSTVfTzm9mq+nmCjpEgAxqTk9DOKiewgAfNBa3Pee0xEBwGZeXyPwIYCA96IHFXwp2r5I+yOpWjPAtjFLTEN/EgW2LAu104Tiunpv6gtse33DF3PY4AAAAABJRU5ErkJggg"},{ name : "icons/save.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABU0lEQVQ4jZ2TvzIDURTGf+duSEMVQzYjldpDoPEUKFib8afhAdJrTSSL4UEoFV5BKWSZiZIisfspyEhixZ9T3fPdc37nmzP3GkC1Ktfy41kv8XKMCJO91LamHwa0alWuVYwvEAujmvtaDqOwuIuZAHLNqbjsiQXEjRznLlU63JI6lzdpFyiAtoNGPB5JIWbKYckYeICdHIf+wXdzN2qtOTNWABBBUH/oRLDjPp3xZfKAcUODirbXjx9n+pam1c1665k0A+SUl1geltXpTPZvfV7iCMsYryzxgz3K9m/iJ8AdcP9fQBhVSuWoUpo1o/IngOAqqpQavbwRluqCq784aA8Lhj39GmCwFDQe53r5+1mLWbU55HUz9AnS5Hqzdn8mMyNN1oCJL1Xyuq7c9ptglxmQgsz2gT2gkHF/cbrl376/EMmCKC7/9J17kXjJaxT4Tcz0Bk4keiEciLMKAAAAAElFTkSuQmCC"},{ name : "img/parrot.png", data : ""},{ name : "haxeui-code-editor/styles/code-editor.css", data : "LmNvZGUtZWRpdG9yIHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjQUJBQkFCOw0KICAgIHBhZGRpbmc6IDFweDsNCiAgICBib3JkZXItcmFkaXVzOiAxcHg7DQp9"},{ name : "css/trees.css", data : "LnRyZWV2aWV3IHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjNDg0ODQ4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDNweDsNCiAgICBwYWRkaW5nOiAxcHg7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KICAgIGJhY2tncm91bmQ6ICMzMDMwMzA7DQp9DQoNCiNub2RlIHsNCiAgICBwYWRkaW5nOiAzcHg7DQogICAgcGFkZGluZy1yaWdodDogNHB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCn0NCg0KI25vZGU6aG92ZXIgew0KICAgIGJhY2tncm91bmQ6ICM0ODQ4NDg7DQp9DQoNCiNub2RlOnNlbGVjdGVkIHsNCiAgICBiYWNrZ3JvdW5kOiAjNTU1NTU1Ow0KfQ0KDQojbm9kZSAubGFiZWwgew0KICAgIGNvbG9yOiAjY2NjY2NjOw0KfQ0KDQojbm9kZTpzZWxlY3RlZCAubGFiZWwgew0KICAgIGNvbG9yOiAjY2ZjZmNmOw0KfQ0K"},{ name : "haxeui-code-editor/languages/hxml/language.json", data : "ew0KCSJrZXl3b3JkcyI6IFsNCgkJImNwIiwgIm1haW4iLCAibGliIiwgImpzIg0KCV0sDQoJInR5cGVLZXl3b3JkcyI6IFsNCgldLA0KCSJvcGVyYXRvcnMiOiBbDQoJXQ0KfQ0K"},{ name : "haxeui-core/styles/default/sliders.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogU0xJREVSUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5ob3Jpem9udGFsLXNsaWRlciB7DQogICAgcGFkZGluZy1sZWZ0OiA1cHg7DQogICAgcGFkZGluZy1yaWdodDogNXB4Ow0KICAgIHBhZGRpbmctdG9wOiAxcHg7DQogICAgcGFkZGluZy1ib3R0b206IDFweDsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgaW5pdGlhbC13aWR0aDogMTUwcHg7DQp9DQoNCi5ob3Jpem9udGFsLXNsaWRlciAuc2xpZGVyLXZhbHVlIHsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBoZWlnaHQ6IDhweDsNCiAgICBib3JkZXItcmFkaXVzOiA0cHg7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQp9DQoNCi5ob3Jpem9udGFsLXNsaWRlciAuYnV0dG9uIHsNCiAgICB3aWR0aDogMTRweDsNCiAgICBoZWlnaHQ6IDE0cHg7DQogICAgYm9yZGVyLXJhZGl1czogMTZweDsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMSwgNDUsICMwMDAwMDAsIDAuMiwgMCwgMCwgMCwgMywgZmFsc2UpOw0KfQ0KICAgIA0KLnZlcnRpY2FsLXNsaWRlciB7DQogICAgcGFkZGluZy10b3A6IDVweDsNCiAgICBwYWRkaW5nLWJvdHRvbTogNXB4Ow0KICAgIHBhZGRpbmctbGVmdDogMXB4Ow0KICAgIHBhZGRpbmctcmlnaHQ6IDFweDsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBpbml0aWFsLWhlaWdodDogMTUwcHg7DQp9DQoNCi52ZXJ0aWNhbC1zbGlkZXIgLnNsaWRlci12YWx1ZSB7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIHdpZHRoOiA4cHg7DQogICAgYm9yZGVyLXJhZGl1czogNHB4Ow0KICAgIGhvcml6b250YWwtYWxpZ246IGNlbnRlcjsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQp9DQoNCi52ZXJ0aWNhbC1zbGlkZXIgLmJ1dHRvbiB7DQogICAgd2lkdGg6IDE0cHg7DQogICAgaGVpZ2h0OiAxNHB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDE2cHg7DQogICAgaG9yaXpvbnRhbC1hbGlnbjogY2VudGVyOw0KICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMSwgNDUsICMwMDAwMDAsIDAuMiwgMCwgMCwgMCwgMywgZmFsc2UpOw0KfQ0KDQo"},{ name : "css/progressbars.css", data : "Lmhvcml6b250YWwtcHJvZ3Jlc3Mgew0KICAgIGJhY2tncm91bmQ6ICMzMDMwMzA7DQogICAgYm9yZGVyLWNvbG9yOiAjNDg0ODQ4Ow0KICAgIGNvbG9yOiAjY2NjY2NjOw0KICAgIGZpbHRlcjogbm9uZTsNCn0NCg0KLmhvcml6b250YWwtcHJvZ3Jlc3MgLnByb2dyZXNzLXZhbHVlIHsNCiAgICBiYWNrZ3JvdW5kOiAjNjY5N0U2ICM2Njk3RTYgdmVydGljYWw7DQogICAgYm9yZGVyLXJhZGl1czogbm9uZTsNCn0"},{ name : "css/textinputs.css", data : "LnRleHRmaWVsZCB7DQogICAgYmFja2dyb3VuZDogIzMwMzAzMDsNCiAgICBib3JkZXItY29sb3I6ICM0ODQ4NDg7DQogICAgY29sb3I6ICNjY2NjY2M7DQogICAgZmlsdGVyOiBub25lOw0KfQ0KDQoudGV4dGZpZWxkOmFjdGl2ZSB7DQp9DQoNCi50ZXh0ZmllbGQ6ZW1wdHkgew0KICAgIGNvbG9yOiAjNTI1MjUyOw0KfQ0KDQouc3RlcHBlci10ZXh0ZmllbGQgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBwYWRkaW5nOiA0cHg7DQogICAgcGFkZGluZy10b3A6IDVweDsNCiAgICBwYWRkaW5nLWJvdHRvbTogM3B4Ow0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQogICAgZmlsdGVyOiBub25lOw0KfQ0K"},{ name : "css/main.css", data : "LmxhYmVsLCAuYnV0dG9uLCAudGV4dGZpZWxkLCAudGV4dGFyZWEgew0KICAgIGZvbnQtbmFtZTogImZvbnRzL1JvYm90by1SZWd1bGFyLnR0ZiI7DQogICAgY29sb3I6ICNjY2NjY2M7DQp9DQogICAgDQoNCiNsb2cgLnNjcm9sbHZpZXctY29udGVudHMgLmhib3ggLmxhYmVsIHsNCiAgICBjb2xvcjogIzg5OWZjMjsNCn0NCg0KI2xvZyAuc2Nyb2xsdmlldy1jb250ZW50cyAuaGJveCAubGFiZWwuZXJyb3Igew0KICAgIGNvbG9yOiAjQ0MyMjIyOw0KfQ0KDQojbG9nIC5zY3JvbGx2aWV3LWNvbnRlbnRzIC5oYm94IC5sYWJlbC5yZXNvdXJjZS1saW5rIHsNCiAgICBjb2xvcjogIzg5OWZjMjsNCiAgICBmb250LXVuZGVybGluZTogdHJ1ZTsNCiAgICBwb2ludGVyLWV2ZW50czogdHJ1ZTsNCn0NCg0KI2xvZyAuc2Nyb2xsdmlldy1jb250ZW50cyAuaGJveCAubGFiZWwuZXJyb3ItcmVzb3VyY2UtbGluayB7DQogICAgY29sb3I6ICNDQzIyMjI7DQogICAgZm9udC11bmRlcmxpbmU6IHRydWU7DQogICAgcG9pbnRlci1ldmVudHM6IHRydWU7DQp9DQoNCi5jb2RlLWVkaXRvciB7DQogICAgYm9yZGVyOiAxcHggc29saWQgIzQ4NDg0ODsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUxZTFlOw0KfQ0K"},{ name : "haxeui-core/styles/default/accordion.css", data : "LmFjY29yZGlvbiB7DQogICAgYm9yZGVyOiAxcHggc29saWQgI2FiYWJhYjsNCiAgICBzcGFjaW5nOiAwOw0KICAgIHBhZGRpbmc6IDFweDsNCiAgICBwYWRkaW5nLWJvdHRvbTogMHB4Ow0KICAgIGNsaXA6IHRydWU7DQp9DQoNCi5hY2NvcmRpb24tYnV0dG9uIHsNCiAgICBib3JkZXItcmFkaXVzOiAwOw0KICAgIGJvcmRlcjogMHB4IHNvbGlkICNhYmFiYWI7DQogICAgd2lkdGg6IDEwMCU7DQogICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvcmlnaHRfYXJyb3dfc3F1YXJlLnBuZyI7DQogICAgaWNvbi1wb3NpdGlvbjogbGVmdDsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYm9yZGVyLWNvbG9yOiAjYWJhYmFiOw0KICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDsNCn0NCg0KLmFjY29yZGlvbi1idXR0b246ZG93biB7DQogICAgaWNvbjogImhheGV1aS1jb3JlL3N0eWxlcy9kZWZhdWx0L2Rvd25fYXJyb3dfc3F1YXJlLnBuZyI7DQp9DQoNCi5hY2NvcmRpb24tcGFnZSB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgY2xpcDogdHJ1ZTsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBib3JkZXItY29sb3I6ICNhYmFiYWI7DQogICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4Ow0KICAgIG9wYWNpdHk6IDE7DQogICAgcGFkZGluZzogNXB4Ow0KfQ0KDQouYWNjb3JkaW9uLXBhZ2U6ZXhwYW5kZWQgew0KICAgIGFuaW1hdGlvbjogYWNjb3JkaW9uQW5pbWF0ZUV4cGFuZCAwLjNzIGVhc2UgMHMgMTsNCn0NCg0KLmFjY29yZGlvbi1wYWdlOmNvbGxhcHNlZCB7DQogICAgYW5pbWF0aW9uOiBhY2NvcmRpb25BbmltYXRlQ29sbHBhc2UgMC4zcyBlYXNlIDBzIDE7DQp9DQoNCkBrZXlmcmFtZXMgYWNjb3JkaW9uQW5pbWF0ZUV4cGFuZCB7DQogICAgMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgICAgICBoZWlnaHQ6IDAlOw0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgb3BhY2l0eTogMTsNCiAgICAgICAgaGVpZ2h0OiAxMDAlOw0KICAgIH0NCn0NCg0KQGtleWZyYW1lcyBhY2NvcmRpb25BbmltYXRlQ29sbHBhc2Ugew0KICAgIDAlIHsNCiAgICAgICAgb3BhY2l0eTogMTsNCiAgICAgICAgaGVpZ2h0OiAxMDAlOw0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICAgICAgaGVpZ2h0OiAwJTsNCiAgICB9DQp9DQoNCi5hY2NvcmRpb24tcGFnZSAuc2Nyb2xsdmlldyB7DQogICAgYm9yZGVyOiBub25lOw0KICAgIHBhZGRpbmctdG9wOiAwOw0KICAgIHBhZGRpbmctcmlnaHQ6IDA7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KICAgIHBhZGRpbmctYm90dG9tOiAwOw0KfQ0K"},{ name : "haxeui-core/styles/default/tableview.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogSEVBREVSDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmhlYWRlciB7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KICAgIHNwYWNpbmc6IDA7DQp9DQoNCi5oZWFkZXIgLmNvbHVtbiB7DQogICAgYm9yZGVyLXJhZGl1czogMDsNCiAgICBpY29uLXBvc2l0aW9uOiBmYXItcmlnaHQ7DQp9DQoNCi5oZWFkZXIgLnNvcnRhYmxlIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvdXBfZG93bl9hcnJvd3MucG5nIjsNCiAgICBpY29uLXBvc2l0aW9uOiBmYXItcmlnaHQ7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIExJU1RWSUVXDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLnRhYmxldmlldyB7DQogICAgYm9yZGVyOiAxcHggc29saWQgI0FCQUJBQjsNCiAgICBib3JkZXItcmFkaXVzOiAxcHg7DQogICAgcGFkZGluZzogMXB4Ow0KICAgIHdpZHRoOiBhdXRvOw0KICAgIGhlaWdodDogYXV0bzsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGOw0KICAgIHNwYWNpbmc6IDA7DQp9DQoNCi50YWJsZXZpZXcgLnRhYmxldmlldy1jb250ZW50cyB7DQogICAgc3BhY2luZzogMDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBwYWRkaW5nOiAwcHg7DQp9DQoNCi50YWJsZXZpZXcgLmV2ZW4gew0KICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOw0KICAgIGN1cnNvcjogcG9pbnRlcjsNCn0NCg0KLnRhYmxldmlldyAub2RkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY4Ow0KICAgIGN1cnNvcjogcG9pbnRlcjsNCn0NCg0KLnRhYmxldmlldyAuY29tcG91bmRpdGVtcmVuZGVyZXIgLml0ZW1yZW5kZXJlciB7DQogICAgaGVpZ2h0OiBhdXRvOw0KICAgIHBhZGRpbmc6IDVweDsNCn0NCg0KLnRhYmxldmlldyAuZXZlbjpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2Q5ZTVmMjsNCn0NCg0KLnRhYmxldmlldyAub2RkOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDllNWYyOw0KfQ0KDQoudGFibGV2aWV3IC5jb21wb3VuZGl0ZW1yZW5kZXJlciAubGFiZWwgew0KICAgIGNvbG9yOiBibGFjazsNCn0NCg0KLnRhYmxldmlldyAuY29tcG91bmRpdGVtcmVuZGVyZXI6c2VsZWN0ZWQgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNhN2M0ZTI7DQogICAgY29sb3I6IHdoaXRlOw0KfQ0KDQoudGFibGV2aWV3IC5jb21wb3VuZGl0ZW1yZW5kZXJlcjpzZWxlY3RlZCAubGFiZWwgew0KICAgIGNvbG9yOiB3aGl0ZTsNCn0NCg"},{ name : "templates/sources/Abstract.template", data : "cGFja2FnZSAkcGFja2FnZTsNCg0KYWJzdHJhY3QgJG5hbWUoKSB7DQoNCn0"},{ name : "haxeui-core/styles/default/progressbars.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogUFJPR1JFU1MNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQpAa2V5ZnJhbWVzIGluZGV0ZXJtaW5hdGUgew0KICAgIDAlIHsNCiAgICAgICAgc3RhcnQ6IDA7DQogICAgICAgIGVuZDogMjU7DQogICAgfQ0KICAgIDUwJSB7DQogICAgICAgIHN0YXJ0OiA3NTsNCiAgICAgICAgZW5kOiAxMDA7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBzdGFydDogMDsNCiAgICAgICAgZW5kOiAyNTsNCiAgICB9DQp9DQoNCi5wcm9ncmVzczppbmRldGVybWluYXRlIHsNCiAgICBhbmltYXRpb246IGluZGV0ZXJtaW5hdGUgMXMgZWFzZSAwcyBpbmZpbml0ZTsNCn0NCg0KLnByb2dyZXNzLXZhbHVlIHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYm9yZGVyLXJhZGl1czogMnB4Ow0KfQ0KDQouaG9yaXpvbnRhbC1wcm9ncmVzcyB7DQogICAgYmFja2dyb3VuZDogI0YxRjFGMSAjRkZGRkZGIHZlcnRpY2FsOw0KICAgIGluaXRpYWwtd2lkdGg6IDE1MHB4Ow0KICAgIGluaXRpYWwtaGVpZ2h0OiAyMHB4Ow0KfQ0KDQouaG9yaXpvbnRhbC1wcm9ncmVzcyAucHJvZ3Jlc3MtdmFsdWUgew0KICAgIGJhY2tncm91bmQ6ICM2Q0FBREIgIzIxNkFBRSB2ZXJ0aWNhbDsNCiAgICBoZWlnaHQ6IDEwMCU7DQp9DQoNCi52ZXJ0aWNhbC1wcm9ncmVzcyB7DQogICAgYmFja2dyb3VuZDogI0YxRjFGMSAjRkZGRkZGIGhvcml6b250YWw7DQogICAgaW5pdGlhbC13aWR0aDogMjBweDsNCiAgICBpbml0aWFsLWhlaWdodDogMTUwcHg7DQp9DQoNCi52ZXJ0aWNhbC1wcm9ncmVzcyAucHJvZ3Jlc3MtdmFsdWUgew0KICAgIGJhY2tncm91bmQ6ICM2Q0FBREIgIzIxNkFBRSBob3Jpem9udGFsOw0KICAgIHdpZHRoOiAxMDAlOw0KfQ0KDQo"},{ name : "haxeui-core/styles/default/tiny-close-button.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAIAAABLbSncAAAABnRSTlMA7QAcACSX3bo6AAAAl0lEQVQImWMsLq3Q0FAPqm9lgIF1jdU3btxkMjQ0OHL02LrGarjokaPHDA0NGN/KqKxtqDp67LiNtRUDA8ORo8esrSyDG9oY38qoMDAwQOQYGBggogwMDEwQExgZGRkYGP7//w9hQCUg5lpbWdpYW8HtY1yybMXuPXvhJkDMdHVxZlZQUjYyNICIMjAwaB04/CU26vKVKwAHbkFIJjY1pAAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/default/textinputs.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogVEVYVCBGSUVMRA0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi50ZXh0ZmllbGQgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7DQogICAgY29sb3I6ICM0NDQ0NDQ7DQogICAgYm9yZGVyOiAxcHggc29saWQgI0FCQUJBQjsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQogICAgcGFkZGluZzogNXB4IDVweDsNCiAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDEsIDQ1LCAjODg4ODg4LCAwLjIsIDEsIDEsIDEsIDMsIHRydWUpOw0KICAgIGluaXRpYWwtd2lkdGg6IDE1MHB4Ow0KICAgIGhlaWdodDogYXV0bzsNCiAgICBzcGFjaW5nOiA1cHg7DQogICAgaWNvbi1wb3NpdGlvbjogcmlnaHQ7DQp9DQoNCi50ZXh0ZmllbGQ6YWN0aXZlIHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjMjE2QUFFOw0KfQ0KDQoudGV4dGZpZWxkOmVtcHR5IHsNCiAgICBjb2xvcjogI0EwQTBBMDsNCn0NCg0KLnRleHRmaWVsZDpkaXNhYmxlZCB7DQogICAgY29sb3I6ICM5MDkwOTA7DQogICAgYmFja2dyb3VuZDogI0Q0RDRENCAjQ0NDQ0NDIHZlcnRpY2FsOw0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBURVhUIEFSRUENCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoudGV4dGFyZWEgew0KICAgIGNvbG9yOiAjNDQ0NDQ0Ow0KICAgIGJvcmRlcjogMXB4IHNvbGlkICNBQkFCQUI7DQogICAgYm9yZGVyLXJhZGl1czogMnB4Ow0KICAgIHBhZGRpbmc6IDFweDsNCiAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDEsIDQ1LCAjODg4ODg4LCAwLjIsIDEsIDEsIDEsIDMsIHRydWUpOw0KICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOw0KICAgIGluaXRpYWwtd2lkdGg6IDE1MHB4Ow0KICAgIGluaXRpYWwtaGVpZ2h0OiAxMDBweDsNCn0NCg0KLnRleHRhcmVhOmFjdGl2ZSB7DQogICAgYm9yZGVyOiAxcHggc29saWQgIzIxNkFBRTsNCn0NCg0KLnRleHRhcmVhOmVtcHR5IHsNCiAgICBjb2xvcjogI0EwQTBBMDsNCn0NCg"},{ name : "icons/control-270-small.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAABnRSTlMA/wD/AP83WBt9AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAQklEQVQokWP8//8/AymAiSTVw0QDCzInLCwMU8WqVatw2oAmh1UE3UnIKjBVMzAwMPzHBkJDQ7GK////n3E0pokAAGs5PuPLY2eHAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/dialogs/cross-circle-small.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAxtJREFUeNpUVF9IU2EU/213c+XmyjJtDV1NmytTK6YhaaJWlKBCYUW4nqKHqKfwVane8lUEoRcRHOVSh5GZBDaM0FaxCtS1uznMf6iIW7o/XbVzbkL2we9+373n/H7nO98531XU1dVBoVBAqVTKM+EA4RiADIIef0eYsLC1tTVOWCRgc3MTPKvwb2gIxSaT6Wx9ff1Ns9mcL0mSbFCpVBBF8Vt3d3dXKBR6T5/GCHG2CVarlaMy+WJNTU2D3W5/IHm9GfPPn2OurQ1LPT2IiCJ0Wm1G5fVr52mngs/nY3KIsCHk5ubyVkpra2sbKioqbgWbm6EeGYGJopoMBhjT0qALh7HqdmPe8wn59oZCQRAkEllkEeXGxkZGVlZWWVVVpV1sbsJBcj45MIC1tTUsLS3JWF9fx6nBQaQtL2Pq0SOUl5fbjUZjGXNZIO/q1Ss3fg4NQT8zC4vTKed95NkzrKysyOA1j+MuFzTBKSy+G0Z19eUbzGWBQ5mZmXnh0THodDo4c3Jk51gsBmNnJ1Lb2+H3+xEIBPB03z5EVlcR+eiBwWDIYy4L7I1EfiHq9UL6/RspWi06KO/x8XEsLCzIQlxet80mlylGAuwbjcbAXBWVikUgUV2jZFyfnYWO1nRQUKvVSEpKkpGyXWshkUCM7DKHuEp6RARBBXXeCcQo32QyHB0e/o/MfXBuchI6FiAy+wJKFohw9NkfP/wTOlsxVmi7hh3k70VF+FxYKAswiqkforSz5NNFCAanJpjLAl8dDkdvWmk54icK4L1wQSb7iHyY4jA81Cs8Xlos2KRAqSWlcLl6e5nLKcwFAn53X1/PC+vjFihsZ/CaDmwPt/A2eN1lNkNRXALLwyfo73e9CAYDbuYK6enpfDFmvN4vSkpPeamxyborx4KQoManmWn4VGpIlZdgvn0Xljv34XB09DmdXb3U0gOkKykKCgrkmxUOh3fH4/GL2dmWqnv3GqtttpLsHRcNHs8HsbW15ZUo+t5qNJo3er0+Kt/gHQJy+yYSiUx6P7Od/v5t/jJhigijdD7TWuoVEpB/AX8EGAD9/4gGGMr1dAAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/default/steppers.css", data : "Lm51bWJlcnN0ZXBwZXIgew0KICAgIHBhZGRpbmc6IDFweDsNCiAgICBzcGFjaW5nOiAwOw0KfQ0KDQouc3RlcHBlciB7DQogICAgc3BhY2luZzogMDsNCn0NCg0KLnN0ZXBwZXItYnV0dG9uIHsNCiAgICBwYWRkaW5nOiAzcHg7DQogICAgcGFkZGluZy10b3A6IDRweDsNCiAgICBwYWRkaW5nLWJvdHRvbTogNHB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDA7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICNFNkU2RTY7DQogICAgb3BhY2l0eTogMTsNCn0NCg0KLnN0ZXBwZXItYnV0dG9uOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjFGMUYxOw0KfQ0KDQouc3RlcHBlci1idXR0b246ZG93biB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0MyQzJDMjsNCn0NCg0KLnN0ZXBwZXItYnV0dG9uOmRpc2FibGVkIHsNCiAgICBvcGFjaXR5OiAwLjU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0NDQ0NDQzsNCn0NCg0KLnN0ZXBwZXItaW5jIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvdXBfYXJyb3cucG5nIjsNCn0NCg0KLnN0ZXBwZXItZGVpbmMgew0KICAgIGljb246ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC9kb3duX2Fycm93LnBuZyI7DQp9DQoNCi5zdGVwcGVyLWluYzpkb3duIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvdXBfYXJyb3dfd2hpdGUucG5nIjsNCn0NCg0KLnN0ZXBwZXItZGVpbmM6ZG93biB7DQogICAgaWNvbjogImhheGV1aS1jb3JlL3N0eWxlcy9kZWZhdWx0L2Rvd25fYXJyb3dfd2hpdGUucG5nIjsNCn0NCg0KLnN0ZXBwZXItdGV4dGZpZWxkLCAuc3RlcHBlci10ZXh0ZmllbGQ6YWN0aXZlIHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgd2lkdGg6IDEwMCU7DQogICAgcGFkZGluZzogNHB4Ow0KICAgIHBhZGRpbmctdG9wOiA1cHg7DQogICAgcGFkZGluZy1ib3R0b206IDNweDsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMSwgNDUsICM4ODg4ODgsIDAuMiwgMSwgMSwgMSwgMywgdHJ1ZSk7DQogICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTsNCn0NCg0KLnN0ZXBwZXItc3RlcCB7DQogICAgaGVpZ2h0OiAxMDAlOw0KfQ0KDQouc3RlcHBlci1zdGVwIC5zdGVwcGVyLWluYywgLnN0ZXBwZXItc3RlcCAuc3RlcHBlci1kZWluYyB7DQogICAgaGVpZ2h0OiA1MCU7DQp9DQoNCi5udW1iZXItc3RlcHBlciB7DQogICAgaW5pdGlhbC13aWR0aDogNjBweDsNCn0"},{ name : "haxeui-core/styles/default/up_down_arrows.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAYAAAD+WDajAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4AgUERIPwDSeLgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAjElEQVQY012PMQ4BYRBG3/vXJag4E0KsZGuF1e1dCBtRbETiPEpHGYV/BZN8zbzJmxkfwzEBCJzKWWy6uwUyEBK5jqtpAOzX8+h7KSFtOQuVPvtqEQI2TRMRgZqn0yc+R5PegkgBFEoCBodq+dnxrVZJ28vNH1UGdduZCqA+X/0Hvq99/1O3nSq7DFReYz8i0UirE+EAAAAASUVORK5CYII"},{ name : "css/dialogs.css", data : "Lm1vZGFsLWJhY2tncm91bmQgew0KICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrOw0KICAgIG9wYWNpdHk6IDAuNTsNCiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNSk7DQp9DQoNCi5kaWFsb2cgew0KICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMSwgNDUsICMwMDAwMDAsIDAuMiwgMzAsIDIsIDEsIDMsIGZhbHNlKTsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgaW5pdGlhbC13aWR0aDogMzAwcHg7DQogICAgcGFkZGluZzogMXB4Ow0KICAgIA0KICAgIGJhY2tncm91bmQtY29sb3I6ICMzYTNhM2E7DQogICAgYm9yZGVyOiAxcHggc29saWQgIzQ4NDg0ODsNCiAgICBib3JkZXItcmFkaXVzOiAzcHg7DQp9DQoNCi5kaWFsb2ctdGl0bGUgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICM0ODQ4NDg7DQogICAgcGFkZGluZzogNXB4Ow0KICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDsNCiAgICBib3JkZXItYm90dG9tLWNvbG9yOiAjNDg0ODQ4Ow0KfQ0KDQouZGlhbG9nLWZvb3Rlci1jb250YWluZXIgew0KICAgIGJvcmRlci10b3Atd2lkdGg6IDFweDsNCiAgICBib3JkZXItdG9wLWNvbG9yOiAjNDg0ODQ4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICM0ODQ4NDg7DQp9DQoNCi5zY3JvbGx2aWV3IHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjNDg0ODQ4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDFweDsNCiAgICBwYWRkaW5nOiAxcHg7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KICAgIGJhY2tncm91bmQ6ICMzMDMwMzA7DQp9DQoNCg0KLmRpYWxvZyAjaWNvbkltYWdlLmluZm8gew0KICAgIHJlc291cmNlOiAiaWNvbnMvZGlhbG9ncy9pbmZvLnBuZyI7DQp9DQo"},{ name : "icons/sound.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABo0lEQVQ4jY2SPWsUYRSFn/vurJiohSS6uyMGtUphYxEVEQsR9CcoiJK4M5sRtEshmDQWNnaizuxoRLHIT1AIIiKiYKEgaCkBZ7Lxq9Cswey810ILjfPKnvqch3vvucJ/1EwXd5pCp432puNo+/syj3GFwyQbMT37ENVxFXPQ5SsFNNNODcsDYAeAVaRvQDPt1EyveASMlgWCa/lYeD2fQlX+AYRJNmx6xbwrPHHrw6b0bP2FGLsSxtkUgBfE2SVRLgJdUYkU3e0at7r6Y39wIz/ZWPLHs3p+J0yyEU9gryvwp1pxdqg7aJ4OLNtd2db8uFG5apXTzhbWqrDo+m96+fsGcw/h2Kehzy9BR/sGuNQ3oGKQlY1yYWBZT6Hc3/xlaI8obwzK834AyaT/eLBbHADd5y815sTac1rhrteO/BlgBn7ViPIaKG1itbru2ezE8HyQ5OfFyqt2q7Hw1wrtlv/RepUjwNsywOyZLV8n48UxkGo7ql8Byl907TcqeiKNts2VeUuPeDOodTAcBd4BGEHLfE7A73UWrGcOI3Jb1D5x+X4CHN2dgJB3sdsAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/dialogs/information.png", data : "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAACElJREFUeNrEV2tMW+cZfs/xsX1sYzAX2xAubnMBPAopjFYkKCxcgjali9KhaAljQf2zP5MmbevP7de0P6s0aZo0qVKrpZo6ulS5LKJNO0rESCgkadJxMxAlyzBmgLn5dnx8O8d738/Ys4Fk6v70SA/n8N2e53tv32cumUzC1/kI9Ofs2bOZBo7jGHiez/y/8xbxVYGoQpQgTOn5+CQQEmID4UZ4cGMR6khvUFVV9p294evXr2cWeN6ThzgqiqKzvr7eeRSfysrKF4xGY4kgCHmMPZEISZK0sbS09K+pqanJ6enpOVmW57BrEhF63uIcKXqGBWjr9WazuaWjo+NES0tLp06nK0MyeJbbaJ5Go4FYLLYyMTExfOvWrduhUGgCu6bRAsmvYgE9DmxzOp1tvb29P8TdO4jYvSLD1JMEzC8q4N1WISClFss3cWAr5KHWoYGGQwLYi/iy1tbWvqamphMDAwN/mp+ft+OwUUR03xjYTY441d3dfaarq6s3Ho+bPGsyfPR5HOYWOSgoLICSEgtUl4kgijo2QZajEArJML4QgE/v+sHpSMLp41oUJTj6+/t/Ojw8bB8aGqJ1h3aL2C2AzP4tIu/s7LyIftTfdSVg8HMViqw2eLnJhuZVkCwKCwvLGFgpC5C3bLZiOHDAClVVdlheXoff/mUDvntcAy11GlNHR/tFRVEAhcR2RCRzBFCE7viwoba2tq29vb1XkkL64QcqDD/koO6lI0Cu83i2QVFU8Pv98IPTFdD1qpHN++xeGN7/yAP5+fkYAzwUFuaDxZIHV0YXwS8pcKpZ1be3n+x1uxe9CwuP1tC9k2kBfFaKmE0m0/Hz58/3hcOSaXwmDkMPMAobjiChjLvahkgkCugSqHEIcK4zDwrNPAN9Uxv10ZjVVR8EAjIcOlQFf7uXBFoLA9PU09PTh9lznLjSm+bTSrCxEXd+AgPZsbIRZ2avrX0BvN4AbG4GaIEMHKXaPYFDbdljfL4Qm1deUQp/vZNgQavVah0YnCeIa7cFMNDFuubm5vZwOAw3JxQoKCqBcDiGi/jZzrLx2B3eI4DaKFOon96EQEBCi8RAJ5rh4/FUX1NTY7ter68jzowAVFRVV1fnVFWldHVTARdGe3FxAaysbO4hJ3w5H4A/3liFTV+cgb6pLU2eflPg+XxBMJlEmHmqwroPqE6UVldXO4kzOwgPooB62v3MUyx95jxmwmg0tm+RwIIEv7s0Cb95OxUT6TbcwE5W8IBVkgHNjmLiwPECrq1Aa10cqquP1D98+PAgDn2UtoCtrKzUQYoX3CqYzSbY3g6y4MwGkVEGLP97BaSwDAkczyEZgb6TQFVUw5BMcqBgmsZiCdxMgFXAucUEE2iz2R3EmW2BPL1eLMbUw2BJQnm+BsmUzI5p8WBQYqSpjFHhg19X5pTgC79YBl6jSR1eBDrMOJ59Y+aymrG6oTBxBoNYTJzZAnQ40US5HgipUMlrMqdXSIpCUAqnig4nIAlaTE3sqf8cT9BCip/7rxAUQZZREf5QApu0qE1jIs5sAXQocTRJxd0lEgrEEb5AhFmCJiFH5lGByyEn//M8jdEyUurlsDryO2KoQVE4tinGgXyEbAEJ9G+I4/h8k5hEK8gQCKugJDXAC5o9QZjcRU7gkJzT6CB1feBSb4aUJeJKEsxGjlXUeDwRIs5sAVIoJG2JoiHfZuFhPRgFjVaP1lD2zQJyQTY55jWLfI2g37EM7HrjrpUY2O0CEyBJ4S3izC5EXrfbvYQWAOeLOgiHJAwUAxOxH8jf2eTMAtiW7udRCInhNalvXtChW6Pw0kGRxRJeXJaIM1vAPycnJ+e0Wh00VhsgKvuBvgWduLNALjiNkENO+U5tOWPS3+gW7MQgCENjjQFoky6Xa444swU8xZvUo0gk4i0tFqCpWg9B/yae9yLbyW7wWFRyyNkNStg7jkGEeCQArziNYC3gyPxel2v2EXFmC5CxCk7dvj06Rgud6yoBVfair+NIso8IrSGHnB5q208sxYtW2YTvd1sxE5IwNnZnTJbDU8SZfRYQ7g4NfTrh8/k8tkItXDxtBe+SC82noit0zI9pCFoxh5xFs1bMGUOgguVfdcEbZ8qgyMzB1taWZ2TkswniSt8NmQAqwYhAMBgYeffdt6/hd/jkN4vgwqlC8CyMQzwqI6EOIz8FslI2ear+C5l+QjwahtUnE9D3nRJoayzAcyUevnTpnWvBYHCEuIhzz40In/szM5MVly+/b+3tfeN7506V6yxmLfx+4O+gKzgMJeW1KEQPhvxS6PrJQo4Ai70mVbYx2jeW5yHufww/66uGzleteKzLsQ8//PON2dmpEUzX+8+7EyaxIN28evWyCYuFpr//R691HztgOFpTDH8YmIWRe7NgKqyCItuLYLRU4jlvYpNiEQn8m8uw5X0K0rYb2ptL4Mc/bwGrBVMa2d97753BwcGrH6PbbmLwJvf8LmhoaMg0RKNRvEREDHien2loaOx8881fvlZRUVUmYEX0rIXh1t0luPNgGZ64/bC+lbqYWIuMcKjKAieay6GjpQLKrUZWzj0e98pbb/1qcHr6y2Ekv4FZJVP2pB/8EfNMAQSq1615eeZvv/76+eaengvNNltpMbmeLp6E1G+X1ElHbkwkUj88vN7VzStXBr64du2DL0Kh4Cdo9jEkT1JafxUB6eC0IE4aDMZXjh1rO9zW1nm4vv5lu9Vqt+Al1kBz8GeZvL6+5pue/sfa6Ojw4/Hx0ceYavexXI8gfFS2ifz/FcAuIjiOjtAafH8Dh5UjCnZ+xMDOjw0/Yhmzw4U7XsC3RLchIv+fAr7O5z8CDAAlrruaC1+vLgAAAABJRU5ErkJggg"},{ name : "icons/help.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABaUlEQVQ4ja2SsS9DURSHv/PSvjeJQQxqRaQJq6mjmdEuaRNEwmq01ExCGzEgXYk/QCI2sRBJBTMG6aBLq3p/hpe+tH0PA2e775z3nd93c+GPZUkfC3svWYfmPGkCwJk9qM3p/nKm+iMgX6oNyjV2DRYS4DKo+K1gaXt16D0GyJdqg7jGJTD1S+jboOXnOhAvwrvGbt/Pr4g1YB147Qoy3Uw3d3oSFPZespLuemJ75HA2YyYB1xIX3Tp4ZMuFzH0q3K55LOb8BtoS1DFGUa8HjnmgGCp4NhZTdVQBT9iGSbMJdzEOkIo3utdQMXQl2fl3M2ECp6fktkYkKwIDCb3HCODECfRZAsLGIXxMfeXwOI0A+8uZqkElpiDKJsoxsDguFzL30HUHfitYaqY/pkDT0aCxmbD9ph2kVzqH6CFtrw69By0/Bxwl6QBO4vDTT+cOFofrUcqEQfKl50lraw5jkpBWxbOzTux/rS/ZSInJLw7CDwAAAABJRU5ErkJggg"},{ name : "icons/blank.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4QIKDCIwjMBeawAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAHElEQVQ4y2P8//8/AyWAiYFCMGrAqAGjBgwWAwBjmgMd7D3zQQAAAABJRU5ErkJggg"},{ name : "icons/dialogs/info.png", data : "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAABmJLR0QA/wD/AP+gvaeTAAAEkElEQVRoge2aS2wbVRSG/zN37PEQQCjQhCSqqqS0ojvEkkSphACpKDuUHaBUVV5OE5FQqd3CqgWRqImwkxApBcOKig0qDxWQ2oZVVZZQkcZeRHkRteVRx/Z4PIdFPNb4Wc8jdkD9VmfOnLn3/31nxvfODPCI/QV51dCphdVGoYluELoYOEbAYQBNABqyJXEAWwxEJeZfGfSzQPpaOHjovhf9uzLStxgL+JJKLwFvA3gZgGSziQwIP5KBSEpNXb50sj3pVIsjI+OTq+qDx+QRYp4A0OK08wI2APqoIaGHpiYOJuwebNtIf3izh9iYBqHd7rFVEgXT2Hyw5Yqdg6o20rcYC/iTygUAY7alOSMCCUPzg6071RRXZWRgbrsFnP4GjBfcabMHAbeEIfeERpo2q6itzHBoqyNDmasAOjxRZ58VweK1cLA5WqmoopGh8GaTAWMJwBFPpdknKhtyZ6WRKXu7HJ9cVQ0yvkf9TQBAhy7pV/oWY4FyBWWN7KjiostrQgP4rK7rbbqutxHzud2cY170JZSpcjtLnlr94c0egvG1i05BzOfmgm0XrLnB0NpZJjrvpl1mev2TYMu3hfmiERmfXFUJxkU3nQEAC/9nhTnBvk/dtkvEM6VOsSIj8YB8Gh7coXQtUTTahpQSbtsFcNifVIYLk3lG+hZjARCPe9AZfEK8VZgzUJxzBp0pHBU5r/Ok0guP5k5M9P5gaA3pTCYC7Bpj4D0v2ga41ZdU3gDwhZnJG5HsLNYr/Ex0XpblNVmW17IXud+rxiUgb3Rz5/GphdVGkRZ/APDiPK4FGS2ZeubSePufgGVEpLQ4jv+OCQAQPsXfbW7kjBDQWR89ziEJXWacu9izy1NPmB9uLdnUQHidPepiF0N63gytI7If5lT2ID5qhta71tNetT8QXmfPf/3SNJqB1cjjNejYa540A7tPPfYtViMP6qbCOX+bgdXI3ToIccs9M8gZYWC5PlpcwPS7GVpvv7/VR40LJON2LswlGUt1EeMCAm6Ycc6IQPoagExdFDlDZ1Kvmxs5I+HgofsM/FQfTQ5g/DA/2PiXuZn3PyIxitbZ+5iIdSPPiF+PfwnQem31OGJDU1NfWRN5RmbGjqQATNZUkhMYHxS+S5ELaxoSeiiuiiBcPEkpN4038+4mlHRHU5OzhdmiudbUxMEEmGr16sA2RDxa6s1W2bXUQHh9FsDgnqqyC/HH80Ntp0vtKjv71QKpdwi4tXeqbHNT0XbeLbez4ur25PTGAZ/MSyAcrVRXA1YMWXQu9DdvlSuouB5ZHGvZFhAnAKx4Lq16VgxZerWSCaCKhVU42ByVDbkLwC+eSauem7sj8WzsYYVVrRBDI02bSjr+EoBp19KqJ9KQyBx/2EiY2H89Hdo4QcQz2P2yYQ+gO0Q8OjfU+p2to5x0lX1VPQzQGYBbnbRRQso6mD/U1NSsky8gXD2TG51eVjS5oReENxl4BfYfuWbAuMqEzwPp+OXsFMkRnn1U0zcVe8qn+LtJQhcxjjHoOQAHADyRLfkHwDaYliEZtwm4waRet07FH/F/4l8W/2KqS9mU7gAAAABJRU5ErkJggg"},{ name : "icons/file.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAA7UlEQVQ4je2TMU4CURBA3/xdlk2oIBFbA9dQE0205AYmVBDgCp5jCRWdiY2x1ULxFHYaGiKFsVlAjP+PDRsJrHGhsvAlU0wm8yY/f0YA6v3nMHgPL0H3AWGdR0+9s25792m1YABys+AUtAaUgOJKvIGUrdhBKxpXUgXGUEiZmvDqO+8AiK3YQaM3rq4JfiPqlF985x8DMc7eL0syCRKJwZ6AzHH2rhUNiwB+ht6dZjRqAKiC4C5U5NyZ3BFwlUWwp0LvO00+SfMbPeEn/gV/RuAcky16Y1hsYvg5vZkHhWuUQ9LPeRkVeAg+prcAX4XERe7DDkuJAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/switches.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogU1dJVENIIChERUZBVUxUKQ0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5zd2l0Y2ggew0KICAgIHdpZHRoOiBhdXRvOw0KICAgIGhlaWdodDogYXV0bzsNCiAgICBob3Jpem9udGFsLXNwYWNpbmc6IDVweDsNCn0NCg0KLnN3aXRjaC1sYWJlbCB7DQogICAgY29sb3I6IGJsYWNrOw0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQp9DQoNCi5zd2l0Y2gtYnV0dG9uLXN1YiB7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGZpbHRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lOw0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgcGFkZGluZzogMHB4Ow0KICAgIGluaXRpYWwtaGVpZ2h0OiAyMHB4Ow0KICAgIGluaXRpYWwtd2lkdGg6IDQwcHg7DQp9DQoNCi5zd2l0Y2gtYnV0dG9uLXN1Yi1leHRyYSB7DQogICAgaGVpZ2h0OiAxNHB4Ow0KICAgIHdpZHRoOiAxMDAlOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7DQogICAgYm9yZGVyOiAxcHggc29saWQgI0FCQUJBQjsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7DQogICAgZmlsdGVyOiBkcm9wLXNoYWRvdygxLCA0NSwgIzg4ODg4OCwgMC4zLCAxLCAxLCAxLCAzLCB0cnVlKTsNCn0NCg0KLnN3aXRjaC1idXR0b24tc3ViIC5idXR0b24gew0KICAgIHdpZHRoOiAyMHB4Ow0KICAgIGhlaWdodDogMjBweDsNCiAgICBib3JkZXItcmFkaXVzOiA1MHB4Ow0KICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMSwgNDUsICMwMDAwMDAsIDAuMiwgMCwgMCwgMCwgMywgZmFsc2UpOw0KfQ0KDQpAa2V5ZnJhbWVzIHN3aXRjaEFuaW1hdGVTZWxlY3RlZCB7DQogICAgMCUgew0KICAgICAgICBwb3M6IDA7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBwb3M6IDEwMDsNCiAgICB9DQp9DQoNCi5zd2l0Y2gtYnV0dG9uLXN1YjpzZWxlY3RlZCB7DQogICAgYW5pbWF0aW9uOiBzd2l0Y2hBbmltYXRlU2VsZWN0ZWQgMC4ycyBlYXNlIDBzIDE7DQp9DQogDQouc3dpdGNoLWJ1dHRvbi1zdWI6dW5zZWxlY3RlZCB7DQogICAgYW5pbWF0aW9uOiBzd2l0Y2hBbmltYXRlU2VsZWN0ZWQgMC4ycyBlYXNlIDBzIDEgcmV2ZXJzZSBiYWNrd2FyZHM7DQp9DQoNCg0KQGtleWZyYW1lcyBzd2l0Y2hBbmltYXRlRXh0cmFTZWxlY3RlZCB7DQogICAgMCUgew0KICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGOw0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzk4YzRlNjsNCiAgICB9DQp9DQoNCi5zd2l0Y2gtYnV0dG9uLXN1Yi1leHRyYTpzZWxlY3RlZCB7DQogICAgYW5pbWF0aW9uOiBzd2l0Y2hBbmltYXRlRXh0cmFTZWxlY3RlZCAwLjJzIGVhc2UgMHMgMTsNCn0NCg0KLnN3aXRjaC1idXR0b24tc3ViLWV4dHJhOnVuc2VsZWN0ZWQgew0KICAgIGFuaW1hdGlvbjogc3dpdGNoQW5pbWF0ZUV4dHJhU2VsZWN0ZWQgMC4ycyBlYXNlIDBzIDEgcmV2ZXJzZSBiYWNrd2FyZHM7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIFNXSVRDSCAoU1FVQVJFKQ0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5zcXVhcmUtc3dpdGNoIC5zd2l0Y2gtYnV0dG9uLXN1YiB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjQUJBQkFCOw0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgcGFkZGluZzogMHB4Ow0KICAgIGluaXRpYWwtd2lkdGg6IDQwcHg7DQogICAgaW5pdGlhbC1oZWlnaHQ6IDIwcHg7DQogICAgZmlsdGVyOiBkcm9wLXNoYWRvdygxLCA0NSwgIzg4ODg4OCwgMC4zLCAxLCAxLCAxLCAzLCB0cnVlKTsNCn0NCg0KLnNxdWFyZS1zd2l0Y2ggLnN3aXRjaC1idXR0b24tc3ViIC5idXR0b24gew0KICAgIGhlaWdodDogMTAwJTsNCiAgICB3aWR0aDogNTAlOw0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCiAgICBmaWx0ZXI6IG5vbmU7DQp9DQoNCi5zcXVhcmUtc3dpdGNoIC5zd2l0Y2gtYnV0dG9uLXN1Yi1leHRyYSB7DQogICAgaGVpZ2h0OiAwOw0KICAgIHdpZHRoOiAwOw0KICAgIGJhY2tncm91bmQtY29sb3I6IG5vbmU7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGZpbHRlcjogbm9uZTsNCn0NCg0KQGtleWZyYW1lcyBzd2l0Y2hBbmltYXRlU2VsZWN0ZWRTcXVhcmUgew0KICAgIDAlIHsNCiAgICAgICAgcG9zOiAwOw0KICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGOw0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgcG9zOiAxMDA7DQogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM5OGM0ZTY7DQogICAgfQ0KfQ0KDQouc3F1YXJlLXN3aXRjaCAuc3dpdGNoLWJ1dHRvbi1zdWI6c2VsZWN0ZWQgew0KICAgIGFuaW1hdGlvbjogc3dpdGNoQW5pbWF0ZVNlbGVjdGVkU3F1YXJlIDAuMnMgZWFzZSAwcyAxOw0KfQ0KDQouc3F1YXJlLXN3aXRjaCAuc3dpdGNoLWJ1dHRvbi1zdWI6dW5zZWxlY3RlZCB7DQogICAgYW5pbWF0aW9uOiBzd2l0Y2hBbmltYXRlU2VsZWN0ZWRTcXVhcmUgMC4ycyBlYXNlIDBzIDEgcmV2ZXJzZSBiYWNrd2FyZHM7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIFNXSVRDSCAoUElMTCkNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoucGlsbC1zd2l0Y2ggLnN3aXRjaC1idXR0b24tc3ViIHsNCiAgICBib3JkZXItcmFkaXVzOiA1MHB4Ow0KICAgIGluaXRpYWwtd2lkdGg6IDQwcHg7DQogICAgaW5pdGlhbC1oZWlnaHQ6IDIwcHg7DQogICAgcGFkZGluZzogMHB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7DQogICAgYm9yZGVyOiAxcHggc29saWQgI0FCQUJBQjsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgZmlsdGVyOiBkcm9wLXNoYWRvdygxLCA0NSwgIzg4ODg4OCwgMC4zLCAxLCAxLCAxLCAzLCB0cnVlKTsNCn0NCg0KLnBpbGwtc3dpdGNoIC5zd2l0Y2gtYnV0dG9uLXN1YiAuYnV0dG9uIHsNCiAgICBib3JkZXItcmFkaXVzOiA1MHB4Ow0KICAgIHdpZHRoOiAyMHB4Ow0KICAgIGhlaWdodDogMjBweDsNCiAgICBmaWx0ZXI6IG5vbmU7DQp9DQoNCi5waWxsLXN3aXRjaCAuc3dpdGNoLWJ1dHRvbi1zdWItZXh0cmEgew0KICAgIGhlaWdodDogMDsNCiAgICB3aWR0aDogMDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBmaWx0ZXI6IG5vbmU7DQp9DQoNCkBrZXlmcmFtZXMgc3dpdGNoQW5pbWF0ZVNlbGVjdGVkUGlsbCB7DQogICAgMCUgew0KICAgICAgICBwb3M6IDA7DQogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBwb3M6IDEwMDsNCiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzk4YzRlNjsNCiAgICB9DQp9DQoNCi5waWxsLXN3aXRjaCAuc3dpdGNoLWJ1dHRvbi1zdWI6c2VsZWN0ZWQgew0KICAgIGFuaW1hdGlvbjogc3dpdGNoQW5pbWF0ZVNlbGVjdGVkUGlsbCAwLjJzIGVhc2UgMHMgMTsNCn0NCg0KLnBpbGwtc3dpdGNoIC5zd2l0Y2gtYnV0dG9uLXN1Yjp1bnNlbGVjdGVkIHsNCiAgICBhbmltYXRpb246IHN3aXRjaEFuaW1hdGVTZWxlY3RlZFBpbGwgMC4ycyBlYXNlIDBzIDEgcmV2ZXJzZSBiYWNrd2FyZHM7DQp9DQo"},{ name : "templates/shaders/Basic.vert.glsl.template", data : "I3ZlcnNpb24gNDUwDQoNCmluIHZlYzMgcG9zOw0KDQp2b2lkIG1haW4oKSB7DQoJZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcy54LCBwb3MueSwgMC41LCAxLjApOw0KfQ0K"},{ name : "styles/main.css", data : ""},{ name : "templates/sources/Interface.template", data : "cGFja2FnZSAkcGFja2FnZTsNCg0KaW50ZXJmYWNlICRuYW1lIHsNCn0"},{ name : "haxeui-core/styles/default/down_arrow_white.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAYAAABCxiV9AAAABGdBTUEAALGPC/xhBQAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB98KChcWJt1NeUAAAAAdaVRYdENvbW1lbnQAAAAAAENyZWF0ZWQgd2l0aCBHSU1QZC5lBwAAAClJREFUCNdj/P///38GHIDpnawqIzaJd7KqjEwwBroEAwMDAxO6ALJCAAXdCyoVfrojAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/transparent_px.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAAl21bKAAAAA1BMVEX/AP804Oa6AAAAAXRSTlMAQObYZgAAAApJREFUeJxjYgAAAAYAAzY3fKgAAAAASUVORK5CYII"},{ name : "icons/close.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAABmJLR0QA/wD/AP+gvaeTAAAApUlEQVQYlY2QMQrCQBBF3w7mBgnYK5jGK9gEZsNGPKzFdkHwCmlzg+QMQ5pdWYKIvxpm/uf/+QB47wdVbdlBVVvv/QDgVPUuIk9gFZEuxjgBhBCuZjYCtZk9DsAMrEBjZmMIoQNIpAZYgNnt1PlAnrOLK/OIyAs4ptVSRpFMrKrqI/qG/62T5bs87J8xs5sAZ6Au1THGKQkWoHbOnfhVeN/3l1z4BtsHUK9/I/pAAAAAAElFTkSuQmCC"},{ name : "templates/shaders/Empty.vert.glsl.template", data : "I3ZlcnNpb24gNDUwDQoNCnZvaWQgbWFpbigpIHsNCn0NCg"},{ name : "haxeui-core/styles/default/sizer_gripper_vertical.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAKCAIAAAAcmWhZAAAABnRSTlMA7QAcACSX3bo6AAAAH0lEQVQImWN8K6PCAANMDAwMk5KjJyVHQzlwwEg7ZQCDgwyl+MMKdgAAAABJRU5ErkJggg"},{ name : "css/scrolls.css", data : "LnZlcnRpY2FsLXNjcm9sbCB7DQogICAgd2lkdGg6IDdweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzAzMDMwOw0KCWJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7DQoJYm9yZGVyLWxlZnQtY29sb3I6ICM0ODQ4NDg7DQogICAgcGFkZGluZzogMXB4Ow0KICAgIHBhZGRpbmctbGVmdDogMnB4Ow0KfQ0KDQoudmVydGljYWwtc2Nyb2xsIC50aHVtYiB7DQogICAgd2lkdGg6IDRweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDg0ODQ4Ow0KICAgIGJvcmRlcjogbm9uZTsNCn0NCg0KLnZlcnRpY2FsLXNjcm9sbCAuaW5jLCAudmVydGljYWwtc2Nyb2xsIC5kZWluY3sNCiAgICBoaWRkZW46IHRydWU7DQp9DQoNCi5ob3Jpem9udGFsLXNjcm9sbCB7DQogICAgaGVpZ2h0OiA3cHg7DQogICAgYmFja2dyb3VuZC1jb2xvcjogIzMwMzAzMDsNCglib3JkZXItbGVmdC13aWR0aDogMXB4Ow0KCWJvcmRlci1sZWZ0LWNvbG9yOiAjNDg0ODQ4Ow0KICAgIHBhZGRpbmc6IDFweDsNCiAgICBwYWRkaW5nLXRvcDogMnB4Ow0KfQ0KDQouaG9yaXpvbnRhbC1zY3JvbGwgLnRodW1iIHsNCiAgICBoZWlnaHQ6IDRweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDg0ODQ4Ow0KICAgIGJvcmRlcjogbm9uZTsNCn0NCg0KLmhvcml6b250YWwtc2Nyb2xsIC5pbmMsIC5ob3Jpem9udGFsLXNjcm9sbCAuZGVpbmN7DQogICAgaGlkZGVuOiB0cnVlOw0KfQ0KDQouaG9yaXpvbnRhbC1zcGxpdHRlci1ncmlwcGVyOmhvdmVyLCAudmVydGljYWwtc3BsaXR0ZXItZ3JpcHBlcjpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTsNCn0NCg"},{ name : "haxeui-core/styles/default/left_arrow_white.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAYAAAAvZezQAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4AESCxUGz2OrRgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAOklEQVQI11XMoRWAQAxEwUlKQIPj+i8IiYYWgrp7Yd18sfHsp7ntvio7IDsgqmoB8j1G/AL0uE5n/AD4RBE2xaxDjQAAAABJRU5ErkJggg"},{ name : "icons/map.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAACGUlEQVQ4jaWQTUhUYRiFn/e7t0kksGkymwkkiqCoTYmL2gS1CYTapIv+KNIZx02boJ0I7YWCcX4UWjRBGEFg26QfiCyINtUqg3DuVZkZpYRsnPu9LRpFnVkUvcvznXM4zwf/efK3xqEhNf5u77SKO51LtH35p4Jrd/3W0Ba9b5WPYjiKlce5gWhqrSCe9dptQOvmoHFMZSHc9ml7yX/hoLcsckStnTIiF9WYyNbKUlL6Un6nGB1BeF/Hp1pt/mlvLjfZJituRpEeYElEL6jKCZQpF6PtKuRH+2N3Gs3vTXmHjDjPgGhN2qZWrqrhJeCYRqHucXXWMAznamEF0nWYm4PxtPc8XPaLyZG5fX8M5imwgvAgl4wNgAwivFvNuOsLwgv+ceAkig2cINQ9rk4JPu8szh8sRoozALlk9DZAX8a7UVeApRewInqp8suUwiV/UpFU1QYfdpRbOhIjhTOIdAWu00UQbERIZArXgStARcWZDoX0MsKPxUj5iXHNKVXzWkUGFZbGenfN1yGomrOgAjRh7aQaDuUSseHacyaRKRRUzbFqyB1GRMl49X+w7ppF2Qt8WxWy/XsmgInNxsYFytdyZOHNeime9hII/aJaVuPGVYONBSLBoFonDxBYffuo53ClxiZ9aX8U+B6bjXbOtPoHHKp5RGYV8hLPzu3HBg+BxQZbVjCctwEdYwOxV2trsuUWscv3EJv6DS954ttUXXlhAAAAAElFTkSuQmCC"},{ name : "icons/upload.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABXUlEQVQ4jcWSzStEYRTGf+ded24SGiNkZT+2ih0rIiU1ChvJx0KUslMaG2sNYQb/AGVFsWKhZmcniv0lY3xsjMt1LNxRuDRFOavznnOe5znP6YX/DvmuMbR6WW16T/Vg2qZnHi2NVV0URDC4flVquW5CkX7A8svPiCaR4unUaMXdtwSxjeNQ+Dp8CDQEqSkc3EZuWjd7om6+VgQQj6vh1DhdmmXwI1jSPrTJV2sOZ8JTwNz7xHjizM5ZJVsC7Z/cpe2nUBvAo+Xu5klAzjG0MzVaewogwyvOjKjOBoEXJiL3AOOJ67KPJICwY7t2nyGqvQF299zQQzT/8PO9TwfpeAzl5oqAuoBzxRUjCqTfZo1J0NjXMek2gJOADQoMURlZcmKIbgR0Mwj7/rotQGUAwaIADC87A4LOA+UFa6Pb5ovV+/6RRpLZcn3JNYpK2Y9AQz3P42RtrPYX1v8yXgFaEnfV9G/tfQAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/native/main.css", data : "KiB7DQogICAgbmF0aXZlOiB0cnVlOw0KfQ0KDQouaHNsaWRlcjpuYXRpdmUsIC52c2xpZGVyOm5hdGl2ZSwgLmhwcm9ncmVzczpuYXRpdmUsIC52cHJvZ3Jlc3M6bmF0aXZlIHsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgYmFja2dyb3VuZDogbm9uZTsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYm9yZGVyLXJhZGl1czogbm9uZTsNCn0NCg0KLmJ1dHRvbjpuYXRpdmUsIC5kcm9wZG93bjpuYXRpdmUgew0KICAgIGJhY2tncm91bmQ6IG5vbmU7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJvcmRlci1yYWRpdXM6IG5vbmU7DQogICAgY29sb3I6IG5vbmU7DQp9DQoNCi50ZXh0ZmllbGQ6bmF0aXZlLCAudGV4dGFyZWE6bmF0aXZlIHsNCiAgICBiYWNrZ3JvdW5kOiBub25lOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiBub25lOw0KICAgIGNvbG9yOiBub25lOw0KICAgIGZpbHRlcjogbm9uZTsNCn0NCg0KLmRpYWxvZzpuYXRpdmUgew0KICAgIHBhZGRpbmctdG9wOiAwcHggIWltcG9ydGFudDsNCn0"},{ name : "haxeui-core/styles/default/haxeui_small.png", data : "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4QEeDAkARLIptgAAD0pJREFUaN69WlmMpVdx/qrOOf9/99u3p7tnscHLeB2MB4QNQomDYpAA8YbQKCB4RIKHRBGvlmAkQBGKQmIe4gdHiZAJEY7kB5YIhOMYsgwCC3uGwTYGzOwzvd71X885VXnonvbY7vEsBkr6pfvwL3WqvvrOV3UuAcDDD3+VBoMBBgu3saGUKqOEbJlEAGUGg0FQsDPa7/axUZBaZl1oef35s8/oFz//GX0XL+A/1qc4fFhx+DBhJzt8+DAOHz4MAPjWN/4KX/raXnrwwX10z62Gzq3nZLRJGRUwSZd6UKxKBGOMsC6oStHeoNAab9GTx07J2+/6e/38l1dBDz/8VXrrWz/Aw43TnHQp0cQ6I2QTw0zqyDQIIAsLgBxgxUgQL5bJB6NenAtdqeXoHMuLf/NefeTfdnb+oj300F/DuUXqNLvsW4nxM2uZrVVER0IcmThKAIEQREE+oJKoQWP0MQYt1Ret2pfnJH7z4z8V+vrX/4ViXLKDQaOVe+mC0AekZdk4YrC1CYwFCAQmVjCEiCtASwMzU46ZZVNyzH0+6MdfHl0WXlnT9eERfOUr/wgA+MIXHgJgQaTcbu8nIm8CWkkMeSMSt4m4EzU0IJRA1agCEQExKkIUjSFqiLEO3md1iJNawoRbdfn0t08Ga90CN7s2KaDdkHbfq0nrwdSgSQwHEEcCIghEBCIogRSAt7F4Fn76HDiZlORHFs2p3ciKt9/a8HLLHfH0sRvkgx+CLjRPoNHcS5ZKRrrbIKgrY9oKUvUAnatmk7nFm/bf35qbPyAqBgpSVVJVAAATQASZFrE+MyyzybnTP7DZ8jP1yIZ7PjCINsiUGmavo4h+0uk9uOrdZ/IIWDBSy0iTzQqQ10DBu/ZfGNc57mYrj4D0TKXVGpPZCJ6n7Ipi8Y7SH2o+EM/mB0inbKZun0NWNImkp4r5EMOCS9Pb7njvn3+22e3vJ6IEAEAAEYEJyMqIU6sZTq0VGOc1QrRaFH48X1e/KkLI9qZ7art3962U596q0daubtJcGwJRFHUQVF6AQmENI7Gbl2ECE4GJ0mha75L+W/6J6+z7VE1/6KvsODGv1VUcliVmM1gvRRNDKVMqRx2IDjTGpcHefQd37X3Lh+eW9jzAxgCqKH1EUUdMi4DzGwXODQuMc7/9PSIghqjlbNyqEFoUo7lwbkg2m0VKm4Y5wDUS49opYZR50GbqABCiKIp68wNEABPBMCGxm1mitPchce0H0KieD6Ozj9VF+WIQGscQ8gAhUmrns+nc/NKeg7e87R2fbPd6tznnGiuTCuc3prgwKpFXAUUdUXvZzkJieTvjRIQin0FEXB2CC1rxhUrJMls4NgQrpApe7KUYzmoQ7cwmqkBU3c7SVAFmILWm3Uga99uF/fe7fPhkuXz6OyHIEADIJrtvv+9PPzbYve89a9MaR18a4fR6Dh9kO7oXjXnn7xIR8mwKqzA+1uSLmoqaYIkZSdNC60ggwq5OAlGAcXVGtLmoYgsCTIC1vQ+Y3Xc+4JL1Y+vnpta25w4eWycenjwLHxTMr2Txak1UURUZWBW+Dqg0gmBh9+x2qHwTiS2309ZpWJQ+4lpsC21QAD5EVErpybx5f5VaXBhW2/dZQ7geK/MMCkBEECSCKg+w2wy0JYVhCyaGApjrOGyx2HWZKHB6LUfhIxLL6LUSvBkjIpTFDARAVRGDhycCAeCiAMg6sGEl2qTfQfv6P6gKvLycYVIGXIx1MzUYdNI38U5FVRYACKqqEhVmM9bgGEUNiTCTgEgBoOHMdaVaRHFyLUfpI177dOIY/XaC6wFQjAExRoAAAURIIpQ1SVPlGFVFWAxxxUQewDbnX2vkT6wWmBbhsvc0EoNeO9kslGsJTAyQGAAFFFRrhA9ai2mXykABwHtiU4aqOgrV2llC6sw1McTLqxnyOoCuEOJGYjDXvTaIVlUFEQGglZ2dPwZoSYFDubYKXllRCcEEkTgL2ew5qesXAMJc++oKWRU4tV4gL6+etVK3lYmrLeB8BhDDzC78iKvJr1Vi7psxnHxmqHzu3DFNU/XMmrG149nq6iNQxaCTQK+Qa1XgtysZZsWVI/9aayYGg256VRtNWWTgWPnG+OVviHHTaDmLEw39g5nw5z73Kd3YuCAxlhWTGQn0ZJVlT/WaFpb5DWFzei1HWcfrZpfE8hUzUVclYoxwxeoTQrzMsCNboZp2nZz5r5+CjelhcbEhZelrQpwaMmvFdPoDiVLs6iU7wkgBnFjNMX6Dgr2WTMx1di5sIkI+m4A1jtNq40dEtCoUZoqm/833frpJowDwzDNH1fth9F6KoHGjnEyOVmX10mI3hbxmBaKKE6s58ipeM2zeqCb6nR0olghFNkPix8+kWryoKkNVU16QOgIvbmqnxx9/HJ/+9KfRarW1LLOaVCZieG3t7LnHuk0Le4leUQCn1wrMfg+RvyzFXmLBe0RfyHx9/pvKbt3BzLxt+ZM/+p5uuQM+dOjQlgqEtNomQmIpQYfj8cbxfDz+33bTvWqHnZbh9xb5nRZx6Y5d1xW6Yf2JxNoThnnkDcpIGxG7aRsW21V67NhzmM2CqGjtRWZEZnzmxO+eSI1GVeD0eo78TRTsVRe2u0Q7VbPJoin/k50bJRYZVbV/6aUfK5ZXt+/f3q2++93vARjhnrfdSdOSTQi+WVZVv1R3y6/Xwt5ZFUH445izjMQxdHz+J404/m8FztSQsStd/csjT76qu30VT45Gf4YY5VWOZlWEj/pHc/6iNK/rgKwoL6G+nT2wF388+ugjWFq4g1xnFydUJFBpszELsdO/dz5WGOcBVZA/ivMbkwJnV8cAWu/sexmEEFvkvZuGMXfvvlumL7zw+hq4556DWNw9xzbGJCHbUQ39fTff8tHcqwGAfsvCmT98HiZ5teU8EG2rt+LT96uvBz5oW5PE3bhvP2H30isQevzxx7ekMDjPxChTgy0N5vrz97R6/T8ZZfX2zXNtd80q9eqbFmA0LXDi3PAV54zFxM5/tPLxphhl4ASNduNmg2XZjiQfOnQIjz76KPI8o0ajlYBtj2NcWLhh36c2ZjV81Felt9+0cH+ARYymJc6uTl5F0cQGsCmvp3s/QfDzHrHj4szd9L6P0MUulgHgvvsOknMD4xw3LfF8o9c7mDbTO86s5Xht300EDFrm9wYnImCSVTh1YQjdQbcY14R33fsqat5FxAOi2NjDiQHuwlZHNsHqasmNhksUphtVFprd7geZTfPssADvuGsR5loOiX3zi9iYFDh9YbjzGEcV1jUgZPpVMnifQhdZbYdQuNs+8m4CANPt3kgHDhw0RLYdRfao6IH2wsJfjnKPl85NL7OAzcilzqAO+jq9dLVsMytqnDo/whtxNBmDUGUQk96ZTs8+GTVMvEXmsuDtrS3hffvupaoiJ0JtCaHfWVz8LDHhwqi4rPOXOjFo22subCJgOC1w4uzGlWWJAsamUJu6sn/LJzn6rgnSNj2y46Nt5qUlYmujZTYd2+68g5PkbiiwPK6uSvNsF/Y11MQk26LKq3pEYWwKqCC097wvJv3biU3LFcbedN+AGGgCcE4lNmyaHgRRUvmIogrXFNFB28FZesMebrNgS5w4t3FNcyey7uLYOpXO7nsBaqgV21hYBBtDxCwcVVJRdQBQ+njNkzkAmGs6pG8Ap9G0wOnl8WXnrpdfuNmk1M3JUEIGzlLCMWsQG8MUlVlEGbopOGZlRH0dsoEI6LdeP1MiAFlR4dTyeEeqvOJ7mTcXoAAIzMoGJFRXFXGzCWjwkCikqsQErIzL6xZvBMKg/QrFXizY350bvglBSGDjtk5siNgQLmpOBoCghCgBogKiTQZ6M10LAei3HKwhzPIKZ1bGb3K3ULBLASiICMY4ON2cmfCFZQ+JBeoQoKoo64hx7q85WhfH5aKKUVZjYzStWvXGz/K188/2m1aaabLdU18PjIxLt+FkjYGmbnOjUxHUZUAQUVLF2Y38ivx/KeaJCD4Izo8yLA8LzPIK+9L8yVtb+XdiXQ3fSgXyQneHwc0foz1L78mrgPGsxCSrEEVAoKtMNoFtCkMM5ywQIxSAVQ0oRTT6qESQs+s7b2C0Nc6uw+YxUFEHbEwrrE8KTHKPhCTrOf/8u7vTx/qJvFgGGkeNufpAGkMbZ35+XFvzBzt77/5kf7F7G/YMGkVZY5pXmBU1fIgIURC3xOPrXFDApk1QTtFZo9ROtKkKS2w0lF6q6P2sDH6Uv3I+tnn8Q5gWHuvjAuvTEmUdUHtBHSIAgoVgX5J/f8nmP1xIquMhmrVxSUMGzWIZfR0DNGgKSjtaztb8b478IvZ2H+TBvg+nvaUHGoMuFucEQQQhCCofMcsrTIsKVR22jndp858CNgWBvLOpp0hyQ+rUbgxf1rSzEKJHfnajKHwAQlBMixorowIrwwJ1iNtw2cYkoeoiP367W3uEIGdi1LVRZTcS+KlhLooQ/ep0HNXX1ASK2GpnzseJWBpKNlyV8cpz6hr/7m56x2e51dtvmBLjDNLEoN9OQQTUPmKclZjMKlQ+QMBkknZuZJYrJ3Fp15xa2LYG733taTxdX39qOhasDmfNsvQOAC8YhTKgIhCFAqoi5PuUP7uLJs+V3kwAHqnyVCQWBatv5zae+t1IjnV+rmQt7lq+Ny4d8IEoqaHIQWGi1m2Q1Cv1i08/bxZvvZ/bgwOAmi0SI0DBIMwzYaEFqYLU49xnmpqfmNJNjXp/HstqTViXMuyt2cep0fGRG9k/v9DzLd+IrqoD+xjha0GgCAEpYpSgWgFUzqKbwdSZl6REGXy64OL//etYkibp0aMjAJvd3m9xu75nHrH+dakPvr8dhzP2kqCIMYw57azpdO1CGC//EEQJQY2CL+lDVEGqIlL3IFkMNAkNnTWsC0e+fVbpy1/6B+ruvZ8lLLMvkQhKV9Rqi+jZF55ECWUI0BCACCiTIEQRwBNXXrtLIa7XQqTyz1/7lQJ/dwU2eQif+Lijlm2y7mkZ9VOrXq3AOsPCUYhJ5JWBjwBgqGFEFQ4q3odG7rO1fnxCj4h56qnv4+Xn347F/Sy37OnFyVrwy0zV2nBczbwv8xBKr1KWEko/NIWTWNpGUaa79tSjRjf8+Fsr8iF4+dvH/gfAowAOA3j6Ms4fBvBF/OL407jxhnfqz44a6XRW46B9s7eNYaWFVj5H4ctGGUu7eVW21FpLQ3nVnDd1GNmweiHEF+78um587Qj+H/scE5pvKbATAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/dialogs/exclamation.png", data : "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAABUJJREFUeNrkV0tsG1UUvfOxHcfxJ3YTT8dOUzueprFJS8PCEUKtCv1QVEFb1CoVbVFKxAJ1x54NEhICVsCmEgiJDbsiFkilYsGqEqB+QGoqmrRJayel+fs/nnnzeHfsuEk6/qRCdMGTjnV933333nfefZ/hKKXwLBsPz7iJ+OMcGFinRFaoYZjyUKwI7xxehD19xY1j3QxfV+XzDNm1ndcnnfDVZT9cm3Ca/zmeB47j1jkojo83ZgADf/Fe2io4thNS7FwMgfLGThyDY9FHUwbOH1qADRQwB4V6gbF1iTbPUanvLKOOwvz090d1LfMj089ZTQJZvD7Zzmjg6iRwcH6zSzfCZp4QqObABKTY2URq/MsRpv/cyhgnUm8yfHXCm0Gvra37YFfvcYXkx4Hkb0PXtmMK6rBvM76eNoG3ZGU0TrVFUVfnAYGyHDsXx76nSsCgrYENSrR1RPb55QNRPXsLDEM3oWVvg19+OdrW0bsPbVr1t1kGOIazof7RBCk+4PTyci0Boi2DXkxzIeVcAm2qti0xIK4m0Kyx+h12+RNJ75ahUHH+F/j2Eg9TqcoujoQNOHPiL/AEkiGXbyCZWxofZi6vtnwSUqMpBJbkmfCOtxNabpLNOAf30zqUy2UTKKNOy9+DUOw0snDGHNPEb+tLAHDA253c4/Js71Kzd5jOAJ4rQalUAcdk1JXzU9Du7uliLO3BMf9WEToo5U+HldPxcm6CrblqBrMJai0BUajoDKMMWmEK5NjxOI7Bsa0VYSOqKLy+JbR30OHs9GqF+7W1c9g1KBaLJtpsWk2vlx6Cw+HzBqThQRzbbAnMIiRGncLjwCPw9pPh2Js7ce0pJY+Lh8vD9HQaFhYWwN3uhNmlHiCEmEy05XLQIQ3vnJv59aRB9csskUzj65hagw08Few9GBdFsV1THwJhCWTLKzCbS0F67k+4e/cmrKykwNlRBJUvg24jQOwU8jqzFUm7W3oBD6dT9fzXGDCo5bbrFkXXsVD0iFJghbdc/BvyWpbZVujaKtlBkhxV2cEYWU9jgRWkTx5SVmZvHDN09QcW4lFdBvDqfwLsQJH7DvcXtTn77PI1FhyvVY0FIiakoA3krQ4TKK/qV0H0RTAgb/fJz/ejL6sYdXcBoy0i2n1HvPJgZGn5N8ZGGQTmdC36og4IssDBoN2UN/YjNDUN3q2xiGBzHUGfVrtAXN0F654DHIwGoy8qZW1GIGQReItnS2T7Tvjsk6NVuicgn7/zpBHNs0gZwR8eUGYnfh9l6/6B5XvAMNZV/i6nK7A/ICs9ucwNcyZWrVS4bWK1CZx1lRMyD75uqWch5d6vFrK7GBN/NKoBjmFMVpKKrqU5oBkQeN0SV35egFdevWkC5Xp2PJRYhBUu2BtV0Hc1hnUNsOxecnmDSX9XMEhKUyCy2dfDx5+m4EFKNYFyI1uOZMEbcAedbk8SYzxxEmoaRYg6oWO9/bsVoqXNs17gjboQbYHH68jkRrYVJvIQisoKxsBYGLOWgKoCu9XgNY9fHvJ2dnRSfcayqtfiow+PQzQaMoFyM3tcCp/P1un2eYYwFsasFaFahjZB4MaURH8Eg/Ns2wHX+B4/tPcuvHHj/cr7fuUKaCXSwu1vQHRHIDKTyo4RQn/CWjYT0HUYCW+X4x4v7yIqKyiu+QvFUNnWezTRdBdsbF6v6JJkd3z6XgZf0d+sJnDhud3bwhw760W7VL0IDPZrmFlXDgpak2lNpo/1ppauOVTWHPgbWmLQH568k7lQS4D5uXjpu6vv/sefhRfNc+d//3X8jwADAHWOFkaFGOstAAAAAElFTkSuQmCC"},{ name : "icons/settings.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABzElEQVQ4jYWRzWtTURDFfzNpyHMltAXbFzfpThDavQuhmICrQtz7ATEfraIr6Z8g7kQbXj7A4h8g4kaKWlBxn4LQlbYu2ihiXZpQ3x0XecWXlycOXC4z95wzd84IaWEmtaD/1uA8gMDHVn3+IiKWhEoav9H8thBK+Clec1O60L05t5cqcP3Jnpcd5C5n0A8m4aIhDzCWEsieYPfEMjsh7sKxN3y5eaMwmALIDXL3De44XIiJpv7MWDJky3BOIJMb5B4Cd6WycXhOlR0gmzLNj0hsOuXt2DkWNSNcmSTLoYi71G74s+2GPyNiJaCfEMiqUlbLeI8E2x6jS3i1VT/75iRv1fOvROzauCW2jXqPBaAWHKyYyfOTb7cb/uykBybVoP8dmBmlttJZzb9QAOeI71cwS11vPFRHHKm2jk6L+/XMkOW/zazYWc2/jhOqG4cllK34CKanyirh4HacPPJAntaCg2KCvDk2EbKMG9z63xqPovvfa+yu+bsCzagYwpgf0wmyRRgEmt01f1cBht5w3aCsqG9mJYTeRD+hJ+KKivoG5aE3XI+EJqPS+VrQ3+5zvKZIIWjM7yexmibQrZzZF3gP/IzOu6A+9yUN+weHTq/7eEBClQAAAABJRU5ErkJggg"},{ name : "templates/shaders/Basic.frag.glsl.template", data : "I3ZlcnNpb24gNDUwDQoNCm91dCB2ZWM0IEZyYWdDb2xvcjsNCg0Kdm9pZCBtYWluKCkgew0KCUZyYWdDb2xvciA9IHZlYzQoMS4wLCAwLjAsIDAuMCwgMS4wKTsNCn0NCg"},{ name : "haxeui-code-editor/languages/haxe/language.json", data : "ew0KCSJrZXl3b3JkcyI6IFsNCgkJInRyeSIsICJjYXRjaCIsICJ0aHJvdyIsICJpZiIsICJyZXR1cm4iLCAid2hpbGUiLCAiZm9yIiwNCgkJInJldHVybiIsICJicmVhayIsICJjYXNlIiwgImRlZmF1bHQiLCAiY29udGludWUiLCAiZG8iLA0KCQkid2hpbGUiLCAiZm9yIiwgInN3aXRjaCIsICJpZiIsICJlbHNlIiwgIi4uLiIsICJjYXN0IiwNCgkJInVudHlwZWQiLCAidHJhY2UiLCAidGhpcyIsICJzdXBlciIsICJuZXciLCAidmFyIiwNCgkJImZ1bmN0aW9uIiwgImFic3RyYWMgdCIsICJjbGFzcyIsICJlbnVtIiwgImludGVyZmFjZSIsICJ0eXBlZGVmIiwNCgkJImZyb20iLCAidG8iLCAiZGVmYXVsdCIsICJnZXQiLCAic2V0IiwgImR5bmFtaWMiLCAibmV2ZXIiLCAibnVsbCIsDQoJCSJwdWJsaWMiLCAicHJpdmF0ZSIsICJzdGF0aWMiLCAiZHluYW1pYyIsICJpbmxpbmUiLCAibWFjcm8iLCAiZXh0ZXJuIiwgIm92ZXJyaWRlIiwNCgkJImltcG9ydCIsICJwYWNrYWdlIg0KCV0sDQoJInR5cGVLZXl3b3JkcyI6IFsNCgkJIkJvb2wiLCAiRmxvYXQiLCAiSW50Ig0KCV0sDQoJIm9wZXJhdG9ycyI6IFsNCgkJIj0iLCAiPiIsICI8IiwgIiEiLCAifiIsICI/IiwgIjoiLCAiPT0iLCAiPD0iLCAiPj0iLCAiIT0iLA0KCQkiJiYiLCAifHwiLCAiKysiLCAiLS0iLCAiKyIsICItIiwgIioiLCAiLyIsICImIiwgInwiLCAiXiIsICIlIiwNCgkJIjw8IiwgIj4+IiwgIj4+PiIsICIrPSIsICItPSIsICIqPSIsICIvPSIsICImPSIsICJ8PSIsICJePSIsDQoJCSIlPSIsICI8PD0iLCAiPj49IiwgIj4+Pj0iDQoJXQ0KfQ0K"},{ name : "templates/sources/TypeDef.template", data : "cGFja2FnZSAkcGFja2FnZTsNCg0KdHlwZWRlZiAkbmFtZSA9IHsNCn0"},{ name : "haxeui-core/styles/default/frames.css", data : "LmZyYW1lIHsNCiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0KDQouZnJhbWUtY29udGVudHMgew0KICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNEREREREQ7DQogICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjREREREREOw0KICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjREREREREOw0KICAgIHBhZGRpbmc6IDEwcHg7DQogICAgcGFkZGluZy10b3A6IDE1cHg7DQp9DQoNCi5mcmFtZS10aXRsZSB7DQogICAgY29sb3I6ICMyMjIyMjI7DQp9DQoNCi5mcmFtZS1sZWZ0LWxpbmUsIC5mcmFtZS1yaWdodC1saW5lIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjREREREREOw0KICAgIGhlaWdodDogMXB4Ow0KfQ0K"},{ name : "haxeui-core/styles/default/propertygrids.css", data : "LnByb3BlcnR5LWdyaWQgew0KICAgIHBhZGRpbmctdG9wOiAwcHg7DQogICAgcGFkZGluZy1ib3R0b206IDBweDsNCn0NCg0KLnByb3BlcnR5LWdyaWQgLnNjcm9sbHZpZXctY29udGVudHMgew0KICAgIHBhZGRpbmc6IDA7DQogICAgd2lkdGg6IDEwMCU7DQogICAgc3BhY2luZzogMDsNCn0NCg0KLnByb3BlcnR5LWdyb3VwIHsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBzcGFjaW5nOiAwOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAtaGVhZGVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRURFREVEOw0KICAgIHBvaW50ZXItZXZlbnRzOiB0cnVlOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIHBhZGRpbmc6IDVweDsNCiAgICBib3JkZXItY29sb3I6ICNBQkFCQUI7DQogICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4Ow0KICAgIGJvcmRlci1ib3R0b20tc2l6ZTogMXB4Ow0KICAgIGN1cnNvcjogcG9pbnRlcjsNCn0NCg0KLnByb3BlcnR5LWdyb3VwLWhlYWRlcjpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0Y1RjVGNTsNCn0NCg0KLnByb3BlcnR5LWdyb3VwLWhlYWRlci1pY29uIHsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAtaGVhZGVyOmV4cGFuZGVkIC5wcm9wZXJ0eS1ncm91cC1oZWFkZXItaWNvbiB7DQogICAgcmVzb3VyY2U6ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC9kb3duX2Fycm93X3NxdWFyZS5wbmciOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAtaGVhZGVyOmNvbGxhcHNlZCAucHJvcGVydHktZ3JvdXAtaGVhZGVyLWljb24gew0KICAgIHJlc291cmNlOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvcmlnaHRfYXJyb3dfc3F1YXJlLnBuZyI7DQp9DQoNCi5wcm9wZXJ0eS1ncm91cC1oZWFkZXItbGFiZWwgew0KfQ0KDQoucHJvcGVydHktZ3JvdXAtY29udGVudHMgew0KICAgIHdpZHRoOiAxMDAlOw0KICAgIHNwYWNpbmc6IDE7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0FCQUJBQjsNCiAgICBwYWRkaW5nLWJvdHRvbTogMXB4Ow0KfQ0KDQoucHJvcGVydHktZ3JvdXAtaXRlbS1sYWJlbC1jb250YWluZXIgew0KICAgIHdpZHRoOiA1MCU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIHBhZGRpbmctbGVmdDogNXB4Ow0KfQ0KDQoucHJvcGVydHktZ3JvdXAtaXRlbS1lZGl0b3ItY29udGFpbmVyIHsNCiAgICB3aWR0aDogNTAlOw0KICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOw0KfSAgICAgICAgDQoNCi5wcm9wZXJ0eS1ncm91cC1pdGVtLWxhYmVsIHsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAtaXRlbS1lZGl0b3Igew0KICAgIHdpZHRoOiAxMDAlOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAgLnRleHRmaWVsZCB7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGZpbHRlcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiAwOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAgLmNoZWNrYm94IHsNCiAgICBwYWRkaW5nOiA1cHg7DQogICAgcGFkZGluZy1sZWZ0OiA0cHg7DQp9DQoNCi5wcm9wZXJ0eS1ncm91cCAubnVtYmVyLXN0ZXBwZXIgew0KICAgIHBhZGRpbmc6IDA7DQp9DQoNCi5wcm9wZXJ0eS1ncm91cCAuZHJvcGRvd24gew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiBub25lOw0KfQ0K"},{ name : "css/buttons.css", data : "LmJ1dHRvbiB7DQogICAgYm9yZGVyLXJhZGl1czogM3B4Ow0KICAgIGJhY2tncm91bmQ6ICM0ODQ4NDg7DQogICAgYm9yZGVyLWNvbG9yOiAjMzAzMDMwOw0KICAgIGNvbG9yOiAjY2NjY2NjOw0KfQ0KDQouYnV0dG9uOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kOiAjNTU1NTU1Ow0KICAgIGNvbG9yOiAjY2ZjZmNmOw0KfQ0KDQouYnV0dG9uOmRvd24gew0KICAgIGJhY2tncm91bmQ6ICM0ODQ4NDg7DQogICAgY29sb3I6ICNjY2NjY2M7DQp9DQoNCi5kcm9wZG93biB7DQogICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogM3B4Ow0KICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAzcHg7DQogICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogM3B4Ow0KICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAzcHg7DQp9DQoNCg0KLmRyb3Bkb3duOmRvd24gew0KICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDNweDsNCiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogM3B4Ow0KICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDBweDsNCiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMHB4Ow0KfQ0KDQouZHJvcGRvd24tcG9wdXAgLmxpc3R2aWV3IHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjMzAzMDMwOw0KICAgIGJvcmRlci1yYWRpdXM6IDBweDsNCn0NCg"},{ name : "icons/control-000-small.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAABnRSTlMA/wD/AP83WBt9AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAPklEQVQokWP8//8/AymAiSTVA6UhLCyMZBvw6MHpJFx68PkBqx58GlatWkWCBqyqcWrApZqBgYFxeCYN/AAASY8QG6x/R94AAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/checkboxes.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogQ0hFQ0tCT1gNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouY2hlY2tib3ggew0KICAgIHdpZHRoOiBhdXRvOw0KICAgIGhlaWdodDogYXV0bzsNCiAgICBob3Jpem9udGFsLXNwYWNpbmc6IDRweDsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgY29sb3I6ICMwMDAwMDA7DQp9DQoNCi5jaGVja2JveDpob3ZlciB7DQp9DQoNCi5jaGVja2JveDpkaXNhYmxlZCB7DQogICAgY3Vyc29yOiBkZWZhdWx0Ow0KICAgIGNvbG9yOiAjOTA5MDkwOw0KfQ0KDQouY2hlY2tib3gtdmFsdWUgew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICNBQkFCQUI7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjsNCiAgICB3aWR0aDogMTZweDsNCiAgICBoZWlnaHQ6IDE2cHg7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQogICAgaWNvbjogbm9uZTsNCiAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDEsIDQ1LCAjODg4ODg4LCAwLjIsIDIsIDIsIDEsIDMsIHRydWUpOw0KICAgIGN1cnNvcjogcG9pbnRlcjsNCn0NCg0KLmNoZWNrYm94LXZhbHVlOmhvdmVyIHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjMjE2QUFFOw0KfQ0KDQouY2hlY2tib3gtdmFsdWU6c2VsZWN0ZWQgew0KICAgIGljb246ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC9jaGVjay5wbmciOw0KfQ0KDQouY2hlY2tib3gtdmFsdWU6ZGlzYWJsZWQgew0KICAgIGJhY2tncm91bmQ6ICNENEQ0RDQgI0NDQ0NDQyB2ZXJ0aWNhbDsNCiAgICBjdXJzb3I6IGRlZmF1bHQ7DQp9DQoNCi5jaGVja2JveC1sYWJlbCB7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCn0NCg0KLmNoZWNrYm94LWljb24gew0KICAgIGhvcml6b250YWwtYWxpZ246IGNlbnRlcjsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICBvcGFjaXR5OiAxOw0KfQ0KDQouY2hlY2tib3gtaWNvbjpkaXNhYmxlZCB7DQogICAgY3Vyc29yOiBkZWZhdWx0Ow0KICAgIG9wYWNpdHk6IDAuNTsNCn0NCg"},{ name : "haxeui-core/styles/default/scrollbars.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogU0NST0xMDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLnNjcm9sbCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0U5RTlFOTsNCn0NCg0KLnNjcm9sbCAuYnV0dG9uIHsNCiAgICBib3JkZXItcmFkaXVzOiAwOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTlFOUU5Ow0KICAgIHBhZGRpbmc6IDA7DQogICAgZmlsdGVyOiBub25lOw0KfQ0KDQouc2Nyb2xsIC5idXR0b246aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNEN0Q3RDc7DQp9DQoNCi5zY3JvbGwgLmJ1dHRvbjpkb3duIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTI1MjUyOw0KICAgIGZpbHRlcjogbm9uZTsNCn0NCg0KLnNjcm9sbCAuZGVpbmMgew0KICAgIGhlaWdodDogMTdweDsNCiAgICB3aWR0aDogMTdweDsNCiAgICBvcGFjaXR5OiAxOw0KfQ0KDQouc2Nyb2xsIGRlaW5jOmRpc2FibGVkIHsNCiAgICBvcGFjaXR5OiAwLjU7DQp9DQoNCi5zY3JvbGwgZGVpbmM6ZG93biB7DQp9DQoNCi5zY3JvbGwgLmluYyB7DQogICAgaGVpZ2h0OiAxN3B4Ow0KICAgIHdpZHRoOiAxN3B4Ow0KICAgIG9wYWNpdHk6IDE7DQp9DQoNCi5zY3JvbGwgLmluYzpkaXNhYmxlZCB7DQogICAgb3BhY2l0eTogMC41Ow0KfQ0KDQouc2Nyb2xsIC5pbmM6ZG93biB7DQp9DQoNCi5zY3JvbGwgLnRodW1iIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQzZDNkM2Ow0KfQ0KDQouc2Nyb2xsIC50aHVtYjpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0FBQUFBQTsNCn0NCg0KLnNjcm9sbCAudGh1bWI6ZG93biB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogIzUyNTI1MjsNCn0NCg0KLnNjcm9sbCAudGh1bWI6ZGlzYWJsZWQgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNEREREREQ7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIFZFUlRJQ0FMIFNDUk9MTA0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi52ZXJ0aWNhbC1zY3JvbGwgew0KICAgIHdpZHRoOiAxN3B4Ow0KfQ0KDQoudmVydGljYWwtc2Nyb2xsIC50aHVtYiB7DQogICAgd2lkdGg6IDE3cHg7DQogICAgaGVpZ2h0OiAxN3B4Ow0KfQ0KDQoudmVydGljYWwtc2Nyb2xsIC5kZWluYyB7DQogICAgaWNvbjogImhheGV1aS1jb3JlL3N0eWxlcy9kZWZhdWx0L3VwX2Fycm93LnBuZyI7DQp9DQoNCi52ZXJ0aWNhbC1zY3JvbGwgLmRlaW5jOmRvd24gew0KICAgIGljb246ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC91cF9hcnJvd193aGl0ZS5wbmciOw0KfQ0KDQoudmVydGljYWwtc2Nyb2xsIC5pbmMgew0KICAgIGljb246ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC9kb3duX2Fycm93LnBuZyI7DQp9DQoNCi52ZXJ0aWNhbC1zY3JvbGwgLmluYzpkb3duIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvZG93bl9hcnJvd193aGl0ZS5wbmciOw0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBIT1JJWk9OVEFMIFNDUk9MTA0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5ob3Jpem9udGFsLXNjcm9sbCB7DQogICAgaGVpZ2h0OiAxN3B4Ow0KfQ0KDQouaG9yaXpvbnRhbC1zY3JvbGwgLnRodW1iIHsNCiAgICB3aWR0aDogMTdweDsNCiAgICBoZWlnaHQ6IDE3cHg7DQp9DQoNCi5ob3Jpem9udGFsLXNjcm9sbCAuZGVpbmMgew0KICAgIGljb246ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC9sZWZ0X2Fycm93LnBuZyI7DQp9DQoNCi5ob3Jpem9udGFsLXNjcm9sbCAuZGVpbmM6ZG93biB7DQogICAgaWNvbjogImhheGV1aS1jb3JlL3N0eWxlcy9kZWZhdWx0L2xlZnRfYXJyb3dfd2hpdGUucG5nIjsNCn0NCg0KLmhvcml6b250YWwtc2Nyb2xsIC5pbmMgew0KICAgIGljb246ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC9yaWdodF9hcnJvdy5wbmciOw0KfQ0KDQouaG9yaXpvbnRhbC1zY3JvbGwgLmluYzpkb3duIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvcmlnaHRfYXJyb3dfd2hpdGUucG5nIjsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogTU9CSUxFIFZBUklBTlRTDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLnNjcm9sbDptb2JpbGUgLmluYywgLnNjcm9sbDptb2JpbGUgLmRlaW5jIHsNCiAgICBoaWRkZW46IHRydWU7DQp9DQoNCi5ob3Jpem9udGFsLXNjcm9sbDptb2JpbGUgew0KICAgIG9wYWNpdHk6IC41Ow0KICAgIGhlaWdodDogOHB4Ow0KICAgIHBhZGRpbmc6IDJweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lOw0KfQ0KDQouaG9yaXpvbnRhbC1zY3JvbGw6bW9iaWxlIC50aHVtYiB7DQogICAgaGVpZ2h0OiA0cHg7DQogICAgYm9yZGVyLXJhZGl1czogMnB4Ow0KfQ0KDQoudmVydGljYWwtc2Nyb2xsOm1vYmlsZSB7DQogICAgb3BhY2l0eTogLjU7DQogICAgd2lkdGg6IDhweDsNCiAgICBwYWRkaW5nOiAycHg7DQogICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTsNCn0NCg0KLnZlcnRpY2FsLXNjcm9sbDptb2JpbGUgLnRodW1iIHsNCiAgICB3aWR0aDogNHB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCn0NCg"}];
haxe_ds_ObjectMap.count = 0;
haxe_ui_validation_ValidationManager.get_instance().registerEvent("ValidationStop",haxe_ui_backend_html5_HtmlUtils.onValidationStop);
js_Boot.__toStr = ({ }).toString;
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
haxe_ui_core_ComponentEvents.INTERACTIVE_EVENTS = ["mousemove","mouseover","mouseout","mousedown","mouseup","mousewheel","click","doubleclick","keydown","keyup"];
haxe_ui_core_ComponentBounds.__meta__ = { fields : { percentWidth : { clonable : null, bindable : null}, percentHeight : { clonable : null, bindable : null}, width : { bindable : null}, height : { bindable : null}}};
haxe_ui_backend_ComponentImpl.elementToComponent = new haxe_ds_ObjectMap();
haxe_ui_backend_ComponentImpl._stylesAdded = false;
haxe_ui_core_Component.__meta__ = { fields : { styleNames : { clonable : null}, styleString : { clonable : null}}};
Server._lastId = 0;
Server._calls = new haxe_ds_IntMap();
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_ui_events_UIEvent.READY = "ready";
haxe_ui_events_UIEvent.RESIZE = "resize";
haxe_ui_events_UIEvent.CHANGE = "change";
haxe_ui_events_UIEvent.BEFORE_CHANGE = "beforeChange";
haxe_ui_events_UIEvent.MOVE = "move";
haxe_ui_events_UIEvent.INITIALIZE = "initialize";
haxe_ui_events_UIEvent.RENDERER_CREATED = "rendererCreated";
haxe_ui_events_UIEvent.RENDERER_DESTROYED = "rendererDestroyed";
haxe_ui_events_UIEvent.HIDDEN = "hidden";
haxe_ui_events_UIEvent.SHOWN = "shown";
haxe_ui_events_UIEvent.ENABLED = "enabled";
haxe_ui_events_UIEvent.DISABLED = "disabled";
haxe_ui_events_UIEvent.BEFORE_CLOSE = "beforeClose";
haxe_ui_events_UIEvent.CLOSE = "close";
haxe_ui_events_UIEvent.PROPERTY_CHANGE = "propertyChange";
custom_TreeViewEvent.NODE_EXPANDED = "nodeExpanded";
custom_TreeViewEvent.NODE_COLLAPSED = "nodeCollapsed";
custom_TreeViewEvent.NODE_SELECTED = "nodeSelected";
custom_TreeViewEvent.NODE_RIGHT_CLICK = "nodeRightClick";
custom_TreeView.BLANK_ICON = "icons/blank.png";
custom_TreeView.EXPANDED_ICON = "icons/control-270-small.png";
custom_TreeView.COLLAPSED_ICON = "icons/control-000-small.png";
custom_TreeView.FOLDER_ICON = "icons/folder.png";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ui_backend_BackendImpl.id = "html5";
haxe_ui_util_GenericConfig.cache = new haxe_ds_StringMap();
haxe_ui_Toolkit.styleSheet = new haxe_ui_styles_CompositeStyleSheet();
haxe_ui_Toolkit.properties = new haxe_ds_StringMap();
haxe_ui_Toolkit.nativeConfig = new haxe_ui_util_GenericConfig();
haxe_ui_Toolkit._theme = "default";
haxe_ui_Toolkit._backendProperties = new haxe_ui_util_Properties();
haxe_ui_Toolkit._built = false;
haxe_ui_Toolkit._backendBuilt = false;
haxe_ui_Toolkit._initialized = false;
haxe_ui_Toolkit.pixelsPerRem = 16;
haxe_ui_Toolkit.autoScale = true;
haxe_ui_Toolkit._scaleX = 0;
haxe_ui_Toolkit._scaleY = 0;
haxe_ui_backend_PlatformImpl._vscrollWidth = -1;
haxe_ui_backend_PlatformImpl._hscrollHeight = -1;
haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["mousemove"] = "mousemove";
	_g.h["mouseover"] = "mouseover";
	_g.h["mouseout"] = "mouseout";
	_g.h["mousedown"] = "mousedown";
	_g.h["mouseup"] = "mouseup";
	_g.h["click"] = "click";
	_g.h["doubleclick"] = "dblclick";
	_g.h["change"] = "change";
	_g.h["keydown"] = "keydown";
	_g.h["keyup"] = "keyup";
	_g.h["scrollchange"] = "scroll";
	$r = _g;
	return $r;
}(this));
haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["mousemove"] = "mousemove";
	_g.h["mouseover"] = "mouseover";
	_g.h["mouseout"] = "mouseout";
	_g.h["mousedown"] = "mousedown";
	_g.h["mouseup"] = "mouseup";
	_g.h["touchmove"] = "mousemove";
	_g.h["touchstart"] = "mousedown";
	_g.h["touchend"] = "mouseup";
	_g.h["click"] = "click";
	_g.h["dblclick"] = "doubleclick";
	_g.h["change"] = "change";
	_g.h["keydown"] = "keydown";
	_g.h["keyup"] = "keyup";
	_g.h["scroll"] = "scrollchange";
	$r = _g;
	return $r;
}(this));
haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["mousemove"] = "touchmove";
	_g.h["mousedown"] = "touchstart";
	_g.h["mouseup"] = "touchend";
	$r = _g;
	return $r;
}(this));
haxe_ui_backend_html5_EventMapper.TOUCH_TO_MOUSE = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["touchmove"] = "mousemove";
	_g.h["touchstart"] = "mouseout";
	_g.h["touchend"] = "mousedown";
	$r = _g;
	return $r;
}(this));
haxe_ui_backend_html5_HtmlUtils._dpi = 0;
haxe_ui_backend_html5_util_FontDetect._initialized = false;
haxe_ui_backend_html5_util_FontDetect._aFallbackFonts = ["serif","sans-serif","monospace","cursive","fantasy"];
haxe_ui_binding_BindingManager.bindingInfo = new haxe_ds_ObjectMap();
haxe_ui_binding_BindingManager.targets = new haxe_ds_StringMap();
haxe_ui_components_CalendarEvent.DATE_CHANGE = "datechange";
haxe_ui_components_CalendarDropDownHandler.DATE_FORMAT = "%d/%m/%Y";
haxe_ui_components_DropDownBuilder.HANDLER_MAP = new haxe_ds_StringMap();
haxe_ui_components__$TabBar_Builder.SCROLL_INCREMENT = 20;
haxe_ui_containers_CalendarView.MONTH_NAMES = ["January","Febuary","March","April","May","June","July","August","September","October","November","December"];
haxe_ui_containers_CalendarView.DATE_FORMAT = "%Y-%m-%d";
haxe_ui_containers_ScrollViewEvents.INERTIAL_TIME_CONSTANT = 325;
haxe_ui_core_ItemRenderer.__meta__ = { fields : { allowHover : { clonable : null}}};
haxe_ui_containers_dialogs_DialogButton.SAVE = "Save";
haxe_ui_containers_dialogs_DialogButton.YES = "Yes";
haxe_ui_containers_dialogs_DialogButton.NO = "No";
haxe_ui_containers_dialogs_DialogButton.CLOSE = "Close";
haxe_ui_containers_dialogs_DialogButton.OK = "OK";
haxe_ui_containers_dialogs_DialogButton.CANCEL = "Cancel";
haxe_ui_containers_dialogs_DialogButton.APPLY = "Apply";
haxe_ui_containers_dialogs_DialogEvent.DIALOG_CLOSED = "dialogClosed";
haxe_ui_containers_dialogs_MessageBoxType.TYPE_INFO = "info";
haxe_ui_containers_dialogs_MessageBoxType.TYPE_QUESTION = "question";
haxe_ui_containers_dialogs_MessageBoxType.TYPE_WARNING = "warning";
haxe_ui_containers_dialogs_MessageBoxType.TYPE_ERROR = "error";
haxe_ui_containers_menus_MenuEvent.MENU_SELECTED = "menuselected";
haxe_ui_core_ComponentFieldMap.MAP = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["group"] = "componentGroup";
	_g.h["contentLayout"] = "contentLayoutName";
	$r = _g;
	return $r;
}(this));
haxe_ui_core_Platform.METRIC_VSCROLL_WIDTH = "patform.metrics.vscroll.width";
haxe_ui_core_Platform.METRIC_HSCROLL_HEIGHT = "patform.metrics.hscroll.height";
haxe_ui_editors_code_monaco_MonacoLoader._loaded = false;
haxe_ui_editors_code_monaco_MonacoLoader._loading = false;
haxe_ui_editors_code_monaco_MonacoLoader._callbacks = [];
haxe_ui_editors_code_monaco_MonacoCodeEditor.loader = new haxe_ui_editors_code_monaco_MonacoLoader();
haxe_ui_events_AnimationEvent.START = "animationstart";
haxe_ui_events_AnimationEvent.END = "animationend";
haxe_ui_events_FocusEvent.FOCUS_IN = "focusin";
haxe_ui_events_FocusEvent.FOCUS_OUT = "focusout";
haxe_ui_events_ItemEvent.COMPONENT_EVENT = "itemComponentEvent";
haxe_ui_events_KeyboardEvent.KEY_TAB = 9;
haxe_ui_events_KeyboardEvent.KEY_DOWN = "keydown";
haxe_ui_events_KeyboardEvent.KEY_UP = "keyup";
haxe_ui_events_MouseEvent.MOUSE_MOVE = "mousemove";
haxe_ui_events_MouseEvent.MOUSE_OVER = "mouseover";
haxe_ui_events_MouseEvent.MOUSE_OUT = "mouseout";
haxe_ui_events_MouseEvent.MOUSE_DOWN = "mousedown";
haxe_ui_events_MouseEvent.MOUSE_UP = "mouseup";
haxe_ui_events_MouseEvent.MOUSE_WHEEL = "mousewheel";
haxe_ui_events_MouseEvent.CLICK = "click";
haxe_ui_events_MouseEvent.DBL_CLICK = "doubleclick";
haxe_ui_events_MouseEvent.RIGHT_CLICK = "rightclick";
haxe_ui_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightmousedown";
haxe_ui_events_MouseEvent.RIGHT_MOUSE_UP = "rightmouseup";
haxe_ui_events_ScrollEvent.CHANGE = "scrollchange";
haxe_ui_events_ScrollEvent.START = "scrollstart";
haxe_ui_events_ScrollEvent.STOP = "scrollstop";
haxe_ui_events_ValidationEvent.START = "ValidationStart";
haxe_ui_events_ValidationEvent.STOP = "ValidationStop";
haxe_ui_parsers_ui_ComponentParser._nextId = 0;
haxe_ui_styles_Parser.cssKeyframesRegex = new EReg("@keyframes\\s*(\\w+?)\\s*\\{([\\s\\S]*?\\}\\s*?)\\}","gi");
haxe_ui_styles_Parser.cssKeyframeSelectorRegex = new EReg("([\\w%]+)\\s*\\{\\s*([\\s\\S]*?)\\s*\\}","gi");
haxe_ui_styles_Parser.combinedCSSMediaRegex = new EReg("((\\s*?(?:/\\*[\\s\\S]*?\\*/)?\\s*?@media[\\s\\S]*?)\\{([\\s\\S]*?)\\}\\s*?\\})|(([\\s\\S]*?)\\{([\\s\\S]*?)\\})","gi");
haxe_ui_styles_Parser.cssCommentsRegex = new EReg("(/\\*[\\s\\S]*?\\*/)","gi");
haxe_ui_styles_Parser.cssImportStatementRegex = new EReg("@import .*?;","gi");
haxe_ui_styles_Parser.newlineRegex = new EReg("\n+","g");
haxe_ui_styles_ValueTools.timeEReg = new EReg("^(-?\\d+(?:\\.\\d+)?)(s|ms)$","gi");
haxe_ui_styles_ValueTools.colors = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["black"] = 0;
	_g.h["red"] = 16711680;
	_g.h["lime"] = 65280;
	_g.h["blue"] = 255;
	_g.h["white"] = 16777215;
	_g.h["aqua"] = 65535;
	_g.h["fuchsia"] = 16711935;
	_g.h["yellow"] = 16776960;
	_g.h["maroon"] = 8388608;
	_g.h["green"] = 32768;
	_g.h["navy"] = 128;
	_g.h["olive"] = 8421376;
	_g.h["purple"] = 8388736;
	_g.h["teal"] = 32896;
	_g.h["silver"] = 12632256;
	_g.h["gray"] = 8421504;
	_g.h["grey"] = 8421504;
	$r = _g;
	return $r;
}(this));
haxe_ui_styles_animation_AnimationOptions.DEFAULT_DURATION = 0;
haxe_ui_styles_animation_AnimationOptions.DEFAULT_DELAY = 0;
haxe_ui_styles_animation_AnimationOptions.DEFAULT_ITERATION_COUNT = 1;
haxe_ui_styles_animation_AnimationOptions.DEFAULT_EASING_FUNCTION = haxe_ui_styles_EasingFunction.EASE;
haxe_ui_styles_animation_AnimationOptions.DEFAULT_DIRECTION = "normal";
haxe_ui_styles_animation_AnimationOptions.DEFAULT_FILL_MODE = "forwards";
haxe_ui_util_MathUtil.MAX_INT = 2147483647;
haxe_ui_util_MathUtil.MIN_INT = -2147483648;
haxe_ui_util_StyleUtil.style2ComponentEReg = new EReg("-(\\w)","g");
haxe_ui_util_StyleUtil.component2StyleEReg = new EReg("([A-Z])","g");
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hscript_Parser.p1 = 0;
hscript_Parser.readPos = 0;
hscript_Parser.tokenMin = 0;
hscript_Parser.tokenMax = 0;
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
tink_core_AlreadyDisposed.INST = new tink_core_AlreadyDisposed();
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NULL = tink_core_Future.NOISE;
tink_core_Future.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_Lazy.NOISE = new tink_core__$Lazy_LazyConst(null);
tink_core_Lazy.NULL = tink_core_Lazy.NOISE;
tink_core_Noise.Noise = null;
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NULL = tink_core_Promise.NOISE;
tink_core_Promise.NEVER = tink_core_Future.map(tink_core_Future.NEVER,tink_core_Outcome.Success);
tink_core__$Signal_Disposed.INST = new tink_core__$Signal_Disposed();
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
